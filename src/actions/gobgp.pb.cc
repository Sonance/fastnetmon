// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gobgp.proto

#include "gobgp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Actions_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddPaths_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AfiSafi_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyPolicy_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPathLength_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPrependAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunityAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Conditions_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Confederation_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultRouteDistance_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefinedSet_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Destination_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicNeighbor_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ebgp_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpMultihop_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Family_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Global_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GracefulRestart_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ibgp_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalPrefAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LongLivedGracefulRestart_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchSet_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Messages_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpGracefulRestart_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NexthopAction_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Path_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Peer_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PeerGroup_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupConf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PeerState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Policy_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolicyAssignment_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prefix_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrefixLimit_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Queues_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPKIConf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RPKIState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roa_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteReflector_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteSelectionOptions_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteServer_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteTargetMembership_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rpki_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Statement_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableLookupPrefix_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Timers_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimersConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimersState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transport_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UseMultiplePaths_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsConfig_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsState_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Validation_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vrf_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace gobgpapi {
class StartBgpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartBgpRequest> _instance;
} _StartBgpRequest_default_instance_;
class StopBgpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopBgpRequest> _instance;
} _StopBgpRequest_default_instance_;
class GetBgpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBgpRequest> _instance;
} _GetBgpRequest_default_instance_;
class GetBgpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBgpResponse> _instance;
} _GetBgpResponse_default_instance_;
class AddPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPeerRequest> _instance;
} _AddPeerRequest_default_instance_;
class DeletePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePeerRequest> _instance;
} _DeletePeerRequest_default_instance_;
class ListPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeerRequest> _instance;
} _ListPeerRequest_default_instance_;
class ListPeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeerResponse> _instance;
} _ListPeerResponse_default_instance_;
class UpdatePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerRequest> _instance;
} _UpdatePeerRequest_default_instance_;
class UpdatePeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerResponse> _instance;
} _UpdatePeerResponse_default_instance_;
class ResetPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetPeerRequest> _instance;
} _ResetPeerRequest_default_instance_;
class ShutdownPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownPeerRequest> _instance;
} _ShutdownPeerRequest_default_instance_;
class EnablePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnablePeerRequest> _instance;
} _EnablePeerRequest_default_instance_;
class DisablePeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisablePeerRequest> _instance;
} _DisablePeerRequest_default_instance_;
class MonitorPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorPeerRequest> _instance;
} _MonitorPeerRequest_default_instance_;
class MonitorPeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorPeerResponse> _instance;
} _MonitorPeerResponse_default_instance_;
class AddPeerGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPeerGroupRequest> _instance;
} _AddPeerGroupRequest_default_instance_;
class DeletePeerGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePeerGroupRequest> _instance;
} _DeletePeerGroupRequest_default_instance_;
class UpdatePeerGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerGroupRequest> _instance;
} _UpdatePeerGroupRequest_default_instance_;
class UpdatePeerGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeerGroupResponse> _instance;
} _UpdatePeerGroupResponse_default_instance_;
class AddDynamicNeighborRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDynamicNeighborRequest> _instance;
} _AddDynamicNeighborRequest_default_instance_;
class AddPathRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathRequest> _instance;
} _AddPathRequest_default_instance_;
class AddPathResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathResponse> _instance;
} _AddPathResponse_default_instance_;
class DeletePathRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePathRequest> _instance;
} _DeletePathRequest_default_instance_;
class ListPathRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPathRequest> _instance;
} _ListPathRequest_default_instance_;
class ListPathResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPathResponse> _instance;
} _ListPathResponse_default_instance_;
class AddPathStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathStreamRequest> _instance;
} _AddPathStreamRequest_default_instance_;
class GetTableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTableRequest> _instance;
} _GetTableRequest_default_instance_;
class GetTableResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTableResponse> _instance;
} _GetTableResponse_default_instance_;
class MonitorTableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorTableRequest> _instance;
} _MonitorTableRequest_default_instance_;
class MonitorTableResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitorTableResponse> _instance;
} _MonitorTableResponse_default_instance_;
class AddVrfRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddVrfRequest> _instance;
} _AddVrfRequest_default_instance_;
class DeleteVrfRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteVrfRequest> _instance;
} _DeleteVrfRequest_default_instance_;
class ListVrfRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVrfRequest> _instance;
} _ListVrfRequest_default_instance_;
class ListVrfResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVrfResponse> _instance;
} _ListVrfResponse_default_instance_;
class AddPolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPolicyRequest> _instance;
} _AddPolicyRequest_default_instance_;
class DeletePolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePolicyRequest> _instance;
} _DeletePolicyRequest_default_instance_;
class ListPolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyRequest> _instance;
} _ListPolicyRequest_default_instance_;
class ListPolicyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyResponse> _instance;
} _ListPolicyResponse_default_instance_;
class SetPoliciesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPoliciesRequest> _instance;
} _SetPoliciesRequest_default_instance_;
class AddDefinedSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDefinedSetRequest> _instance;
} _AddDefinedSetRequest_default_instance_;
class DeleteDefinedSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDefinedSetRequest> _instance;
} _DeleteDefinedSetRequest_default_instance_;
class ListDefinedSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDefinedSetRequest> _instance;
} _ListDefinedSetRequest_default_instance_;
class ListDefinedSetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDefinedSetResponse> _instance;
} _ListDefinedSetResponse_default_instance_;
class AddStatementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddStatementRequest> _instance;
} _AddStatementRequest_default_instance_;
class DeleteStatementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStatementRequest> _instance;
} _DeleteStatementRequest_default_instance_;
class ListStatementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListStatementRequest> _instance;
} _ListStatementRequest_default_instance_;
class ListStatementResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListStatementResponse> _instance;
} _ListStatementResponse_default_instance_;
class AddPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPolicyAssignmentRequest> _instance;
} _AddPolicyAssignmentRequest_default_instance_;
class DeletePolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePolicyAssignmentRequest> _instance;
} _DeletePolicyAssignmentRequest_default_instance_;
class ListPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyAssignmentRequest> _instance;
} _ListPolicyAssignmentRequest_default_instance_;
class ListPolicyAssignmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPolicyAssignmentResponse> _instance;
} _ListPolicyAssignmentResponse_default_instance_;
class SetPolicyAssignmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPolicyAssignmentRequest> _instance;
} _SetPolicyAssignmentRequest_default_instance_;
class AddRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRpkiRequest> _instance;
} _AddRpkiRequest_default_instance_;
class DeleteRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRpkiRequest> _instance;
} _DeleteRpkiRequest_default_instance_;
class ListRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiRequest> _instance;
} _ListRpkiRequest_default_instance_;
class ListRpkiResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiResponse> _instance;
} _ListRpkiResponse_default_instance_;
class EnableRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableRpkiRequest> _instance;
} _EnableRpkiRequest_default_instance_;
class DisableRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableRpkiRequest> _instance;
} _DisableRpkiRequest_default_instance_;
class ResetRpkiRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetRpkiRequest> _instance;
} _ResetRpkiRequest_default_instance_;
class ListRpkiTableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiTableRequest> _instance;
} _ListRpkiTableRequest_default_instance_;
class ListRpkiTableResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListRpkiTableResponse> _instance;
} _ListRpkiTableResponse_default_instance_;
class EnableZebraRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableZebraRequest> _instance;
} _EnableZebraRequest_default_instance_;
class EnableMrtRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableMrtRequest> _instance;
} _EnableMrtRequest_default_instance_;
class DisableMrtRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisableMrtRequest> _instance;
} _DisableMrtRequest_default_instance_;
class AddBmpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddBmpRequest> _instance;
} _AddBmpRequest_default_instance_;
class DeleteBmpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteBmpRequest> _instance;
} _DeleteBmpRequest_default_instance_;
class FamilyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Family> _instance;
} _Family_default_instance_;
class ValidationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Validation> _instance;
} _Validation_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class DestinationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Destination> _instance;
} _Destination_default_instance_;
class TableLookupPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableLookupPrefix> _instance;
} _TableLookupPrefix_default_instance_;
class PeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Peer> _instance;
} _Peer_default_instance_;
class PeerGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerGroup> _instance;
} _PeerGroup_default_instance_;
class DynamicNeighborDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicNeighbor> _instance;
} _DynamicNeighbor_default_instance_;
class ApplyPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplyPolicy> _instance;
} _ApplyPolicy_default_instance_;
class PrefixLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrefixLimit> _instance;
} _PrefixLimit_default_instance_;
class PeerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerConf> _instance;
} _PeerConf_default_instance_;
class PeerGroupConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerGroupConf> _instance;
} _PeerGroupConf_default_instance_;
class PeerGroupStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerGroupState> _instance;
} _PeerGroupState_default_instance_;
class EbgpMultihopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EbgpMultihop> _instance;
} _EbgpMultihop_default_instance_;
class RouteReflectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteReflector> _instance;
} _RouteReflector_default_instance_;
class PeerStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerState> _instance;
} _PeerState_default_instance_;
class MessagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Messages> _instance;
} _Messages_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class QueuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Queues> _instance;
} _Queues_default_instance_;
class TimersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timers> _instance;
} _Timers_default_instance_;
class TimersConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimersConfig> _instance;
} _TimersConfig_default_instance_;
class TimersStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimersState> _instance;
} _TimersState_default_instance_;
class TransportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transport> _instance;
} _Transport_default_instance_;
class RouteServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteServer> _instance;
} _RouteServer_default_instance_;
class GracefulRestartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GracefulRestart> _instance;
} _GracefulRestart_default_instance_;
class MpGracefulRestartConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpGracefulRestartConfig> _instance;
} _MpGracefulRestartConfig_default_instance_;
class MpGracefulRestartStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpGracefulRestartState> _instance;
} _MpGracefulRestartState_default_instance_;
class MpGracefulRestartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpGracefulRestart> _instance;
} _MpGracefulRestart_default_instance_;
class AfiSafiConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AfiSafiConfig> _instance;
} _AfiSafiConfig_default_instance_;
class AfiSafiStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AfiSafiState> _instance;
} _AfiSafiState_default_instance_;
class RouteSelectionOptionsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteSelectionOptionsConfig> _instance;
} _RouteSelectionOptionsConfig_default_instance_;
class RouteSelectionOptionsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteSelectionOptionsState> _instance;
} _RouteSelectionOptionsState_default_instance_;
class RouteSelectionOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteSelectionOptions> _instance;
} _RouteSelectionOptions_default_instance_;
class UseMultiplePathsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMultiplePathsConfig> _instance;
} _UseMultiplePathsConfig_default_instance_;
class UseMultiplePathsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMultiplePathsState> _instance;
} _UseMultiplePathsState_default_instance_;
class EbgpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EbgpConfig> _instance;
} _EbgpConfig_default_instance_;
class EbgpStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EbgpState> _instance;
} _EbgpState_default_instance_;
class EbgpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ebgp> _instance;
} _Ebgp_default_instance_;
class IbgpConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IbgpConfig> _instance;
} _IbgpConfig_default_instance_;
class IbgpStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IbgpState> _instance;
} _IbgpState_default_instance_;
class IbgpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ibgp> _instance;
} _Ibgp_default_instance_;
class UseMultiplePathsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseMultiplePaths> _instance;
} _UseMultiplePaths_default_instance_;
class RouteTargetMembershipConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembershipConfig> _instance;
} _RouteTargetMembershipConfig_default_instance_;
class RouteTargetMembershipStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembershipState> _instance;
} _RouteTargetMembershipState_default_instance_;
class RouteTargetMembershipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembership> _instance;
} _RouteTargetMembership_default_instance_;
class LongLivedGracefulRestartConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongLivedGracefulRestartConfig> _instance;
} _LongLivedGracefulRestartConfig_default_instance_;
class LongLivedGracefulRestartStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongLivedGracefulRestartState> _instance;
} _LongLivedGracefulRestartState_default_instance_;
class LongLivedGracefulRestartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongLivedGracefulRestart> _instance;
} _LongLivedGracefulRestart_default_instance_;
class AfiSafiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AfiSafi> _instance;
} _AfiSafi_default_instance_;
class AddPathsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathsConfig> _instance;
} _AddPathsConfig_default_instance_;
class AddPathsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPathsState> _instance;
} _AddPathsState_default_instance_;
class AddPathsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddPaths> _instance;
} _AddPaths_default_instance_;
class PrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prefix> _instance;
} _Prefix_default_instance_;
class DefinedSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefinedSet> _instance;
} _DefinedSet_default_instance_;
class MatchSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchSet> _instance;
} _MatchSet_default_instance_;
class AsPathLengthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsPathLength> _instance;
} _AsPathLength_default_instance_;
class ConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conditions> _instance;
} _Conditions_default_instance_;
class CommunityActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunityAction> _instance;
} _CommunityAction_default_instance_;
class MedActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedAction> _instance;
} _MedAction_default_instance_;
class AsPrependActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsPrependAction> _instance;
} _AsPrependAction_default_instance_;
class NexthopActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NexthopAction> _instance;
} _NexthopAction_default_instance_;
class LocalPrefActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalPrefAction> _instance;
} _LocalPrefAction_default_instance_;
class ActionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Actions> _instance;
} _Actions_default_instance_;
class StatementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statement> _instance;
} _Statement_default_instance_;
class PolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Policy> _instance;
} _Policy_default_instance_;
class PolicyAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyAssignment> _instance;
} _PolicyAssignment_default_instance_;
class RoutingPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingPolicy> _instance;
} _RoutingPolicy_default_instance_;
class RoaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Roa> _instance;
} _Roa_default_instance_;
class VrfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vrf> _instance;
} _Vrf_default_instance_;
class DefaultRouteDistanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultRouteDistance> _instance;
} _DefaultRouteDistance_default_instance_;
class GlobalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Global> _instance;
} _Global_default_instance_;
class ConfederationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Confederation> _instance;
} _Confederation_default_instance_;
class RPKIConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPKIConf> _instance;
} _RPKIConf_default_instance_;
class RPKIStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPKIState> _instance;
} _RPKIState_default_instance_;
class RpkiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rpki> _instance;
} _Rpki_default_instance_;
}  // namespace gobgpapi
static void InitDefaultsscc_info_Actions_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Actions_default_instance_;
    new (ptr) ::gobgpapi::Actions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Actions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Actions_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Actions_gobgp_2eproto}, {
      &scc_info_CommunityAction_gobgp_2eproto.base,
      &scc_info_MedAction_gobgp_2eproto.base,
      &scc_info_AsPrependAction_gobgp_2eproto.base,
      &scc_info_NexthopAction_gobgp_2eproto.base,
      &scc_info_LocalPrefAction_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddBmpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddBmpRequest_default_instance_;
    new (ptr) ::gobgpapi::AddBmpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddBmpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddBmpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddBmpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddDefinedSetRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddDefinedSetRequest_default_instance_;
    new (ptr) ::gobgpapi::AddDefinedSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddDefinedSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddDefinedSetRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddDefinedSetRequest_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddDynamicNeighborRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddDynamicNeighborRequest_default_instance_;
    new (ptr) ::gobgpapi::AddDynamicNeighborRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddDynamicNeighborRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddDynamicNeighborRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddDynamicNeighborRequest_gobgp_2eproto}, {
      &scc_info_DynamicNeighbor_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPathRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPathRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPathRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPathRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPathRequest_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPathResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPathResponse_default_instance_;
    new (ptr) ::gobgpapi::AddPathResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddPathResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddPathStreamRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPathStreamRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPathStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPathStreamRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPathStreamRequest_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPaths_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPaths_default_instance_;
    new (ptr) ::gobgpapi::AddPaths();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPaths::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddPaths_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddPaths_gobgp_2eproto}, {
      &scc_info_AddPathsConfig_gobgp_2eproto.base,
      &scc_info_AddPathsState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPathsConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPathsConfig_default_instance_;
    new (ptr) ::gobgpapi::AddPathsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddPathsConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddPathsState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPathsState_default_instance_;
    new (ptr) ::gobgpapi::AddPathsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPathsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddPathsState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddPathsState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddPeerGroupRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPeerGroupRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPeerGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPeerGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPeerGroupRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPeerGroupRequest_gobgp_2eproto}, {
      &scc_info_PeerGroup_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPeerRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPeerRequest_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPolicyAssignmentRequest_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddPolicyRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddPolicyRequest_default_instance_;
    new (ptr) ::gobgpapi::AddPolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddPolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddPolicyRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddPolicyRequest_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::AddRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AddStatementRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddStatementRequest_default_instance_;
    new (ptr) ::gobgpapi::AddStatementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddStatementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddStatementRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddStatementRequest_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AddVrfRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AddVrfRequest_default_instance_;
    new (ptr) ::gobgpapi::AddVrfRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AddVrfRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddVrfRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddVrfRequest_gobgp_2eproto}, {
      &scc_info_Vrf_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AfiSafi_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AfiSafi_default_instance_;
    new (ptr) ::gobgpapi::AfiSafi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AfiSafi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AfiSafi_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_AfiSafi_gobgp_2eproto}, {
      &scc_info_MpGracefulRestart_gobgp_2eproto.base,
      &scc_info_AfiSafiConfig_gobgp_2eproto.base,
      &scc_info_AfiSafiState_gobgp_2eproto.base,
      &scc_info_ApplyPolicy_gobgp_2eproto.base,
      &scc_info_RouteSelectionOptions_gobgp_2eproto.base,
      &scc_info_UseMultiplePaths_gobgp_2eproto.base,
      &scc_info_PrefixLimit_gobgp_2eproto.base,
      &scc_info_RouteTargetMembership_gobgp_2eproto.base,
      &scc_info_LongLivedGracefulRestart_gobgp_2eproto.base,
      &scc_info_AddPaths_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AfiSafiConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AfiSafiConfig_default_instance_;
    new (ptr) ::gobgpapi::AfiSafiConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AfiSafiConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AfiSafiConfig_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AfiSafiState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AfiSafiState_default_instance_;
    new (ptr) ::gobgpapi::AfiSafiState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AfiSafiState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AfiSafiState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AfiSafiState_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ApplyPolicy_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ApplyPolicy_default_instance_;
    new (ptr) ::gobgpapi::ApplyPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ApplyPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyPolicy_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplyPolicy_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_AsPathLength_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AsPathLength_default_instance_;
    new (ptr) ::gobgpapi::AsPathLength();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AsPathLength::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPathLength_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsPathLength_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_AsPrependAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AsPrependAction_default_instance_;
    new (ptr) ::gobgpapi::AsPrependAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AsPrependAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsPrependAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsPrependAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_CommunityAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_CommunityAction_default_instance_;
    new (ptr) ::gobgpapi::CommunityAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::CommunityAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunityAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunityAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Conditions_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Conditions_default_instance_;
    new (ptr) ::gobgpapi::Conditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Conditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Conditions_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Conditions_gobgp_2eproto}, {
      &scc_info_MatchSet_gobgp_2eproto.base,
      &scc_info_AsPathLength_gobgp_2eproto.base,
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Confederation_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Confederation_default_instance_;
    new (ptr) ::gobgpapi::Confederation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Confederation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Confederation_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Confederation_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DefaultRouteDistance_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DefaultRouteDistance_default_instance_;
    new (ptr) ::gobgpapi::DefaultRouteDistance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DefaultRouteDistance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultRouteDistance_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefaultRouteDistance_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DefinedSet_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DefinedSet_default_instance_;
    new (ptr) ::gobgpapi::DefinedSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DefinedSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefinedSet_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DefinedSet_gobgp_2eproto}, {
      &scc_info_Prefix_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteBmpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeleteBmpRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteBmpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteBmpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteBmpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteBmpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeleteDefinedSetRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeleteDefinedSetRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteDefinedSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteDefinedSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteDefinedSetRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteDefinedSetRequest_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeletePathRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeletePathRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePathRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePathRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeletePathRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeletePathRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeletePeerGroupRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeletePeerGroupRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePeerGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePeerGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePeerGroupRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePeerGroupRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeletePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeletePeerRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeletePolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeletePolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeletePolicyAssignmentRequest_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeletePolicyRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeletePolicyRequest_default_instance_;
    new (ptr) ::gobgpapi::DeletePolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeletePolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeletePolicyRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeletePolicyRequest_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeleteRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStatementRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeleteStatementRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteStatementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteStatementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteStatementRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteStatementRequest_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteVrfRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DeleteVrfRequest_default_instance_;
    new (ptr) ::gobgpapi::DeleteVrfRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DeleteVrfRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteVrfRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteVrfRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Destination_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Destination_default_instance_;
    new (ptr) ::gobgpapi::Destination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Destination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Destination_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Destination_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_DisableMrtRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DisableMrtRequest_default_instance_;
    new (ptr) ::gobgpapi::DisableMrtRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableMrtRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableMrtRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableMrtRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DisablePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DisablePeerRequest_default_instance_;
    new (ptr) ::gobgpapi::DisablePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisablePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisablePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisablePeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DisableRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DisableRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::DisableRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DisableRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisableRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisableRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_DynamicNeighbor_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DynamicNeighbor_default_instance_;
    new (ptr) ::gobgpapi::DynamicNeighbor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DynamicNeighbor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicNeighbor_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DynamicNeighbor_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Ebgp_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Ebgp_default_instance_;
    new (ptr) ::gobgpapi::Ebgp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Ebgp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ebgp_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Ebgp_gobgp_2eproto}, {
      &scc_info_EbgpConfig_gobgp_2eproto.base,
      &scc_info_EbgpState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_EbgpConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EbgpConfig_default_instance_;
    new (ptr) ::gobgpapi::EbgpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EbgpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EbgpConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EbgpMultihop_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EbgpMultihop_default_instance_;
    new (ptr) ::gobgpapi::EbgpMultihop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EbgpMultihop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpMultihop_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EbgpMultihop_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EbgpState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EbgpState_default_instance_;
    new (ptr) ::gobgpapi::EbgpState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EbgpState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EbgpState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EbgpState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnableMrtRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EnableMrtRequest_default_instance_;
    new (ptr) ::gobgpapi::EnableMrtRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableMrtRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableMrtRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableMrtRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnablePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EnablePeerRequest_default_instance_;
    new (ptr) ::gobgpapi::EnablePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnablePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnablePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnablePeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnableRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EnableRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::EnableRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_EnableZebraRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EnableZebraRequest_default_instance_;
    new (ptr) ::gobgpapi::EnableZebraRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EnableZebraRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableZebraRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableZebraRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Family_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Family_default_instance_;
    new (ptr) ::gobgpapi::Family();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Family::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Family_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Family_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_GetBgpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_GetBgpRequest_default_instance_;
    new (ptr) ::gobgpapi::GetBgpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetBgpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBgpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBgpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_GetBgpResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_GetBgpResponse_default_instance_;
    new (ptr) ::gobgpapi::GetBgpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetBgpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBgpResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBgpResponse_gobgp_2eproto}, {
      &scc_info_Global_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_GetTableRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_GetTableRequest_default_instance_;
    new (ptr) ::gobgpapi::GetTableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetTableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTableRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTableRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_GetTableResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_GetTableResponse_default_instance_;
    new (ptr) ::gobgpapi::GetTableResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GetTableResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTableResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTableResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Global_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Global_default_instance_;
    new (ptr) ::gobgpapi::Global();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Global::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Global_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Global_gobgp_2eproto}, {
      &scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base,
      &scc_info_DefaultRouteDistance_gobgp_2eproto.base,
      &scc_info_Confederation_gobgp_2eproto.base,
      &scc_info_GracefulRestart_gobgp_2eproto.base,
      &scc_info_ApplyPolicy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_GracefulRestart_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_GracefulRestart_default_instance_;
    new (ptr) ::gobgpapi::GracefulRestart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::GracefulRestart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GracefulRestart_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GracefulRestart_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Ibgp_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Ibgp_default_instance_;
    new (ptr) ::gobgpapi::Ibgp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Ibgp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ibgp_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Ibgp_gobgp_2eproto}, {
      &scc_info_IbgpConfig_gobgp_2eproto.base,
      &scc_info_IbgpState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_IbgpConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_IbgpConfig_default_instance_;
    new (ptr) ::gobgpapi::IbgpConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IbgpConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IbgpConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_IbgpState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_IbgpState_default_instance_;
    new (ptr) ::gobgpapi::IbgpState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IbgpState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IbgpState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IbgpState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListDefinedSetRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListDefinedSetRequest_default_instance_;
    new (ptr) ::gobgpapi::ListDefinedSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListDefinedSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDefinedSetRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListDefinedSetRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListDefinedSetResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListDefinedSetResponse_default_instance_;
    new (ptr) ::gobgpapi::ListDefinedSetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListDefinedSetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDefinedSetResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDefinedSetResponse_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPathRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPathRequest_default_instance_;
    new (ptr) ::gobgpapi::ListPathRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPathRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListPathRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListPathRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_TableLookupPrefix_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPathResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPathResponse_default_instance_;
    new (ptr) ::gobgpapi::ListPathResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPathResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPathResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPathResponse_gobgp_2eproto}, {
      &scc_info_Destination_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPeerRequest_default_instance_;
    new (ptr) ::gobgpapi::ListPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListPeerResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPeerResponse_default_instance_;
    new (ptr) ::gobgpapi::ListPeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPeerResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPeerResponse_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::ListPolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPolicyAssignmentRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListPolicyAssignmentResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPolicyAssignmentResponse_default_instance_;
    new (ptr) ::gobgpapi::ListPolicyAssignmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPolicyAssignmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPolicyAssignmentResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPolicyAssignmentResponse_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListPolicyRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPolicyRequest_default_instance_;
    new (ptr) ::gobgpapi::ListPolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPolicyRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPolicyRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListPolicyResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListPolicyResponse_default_instance_;
    new (ptr) ::gobgpapi::ListPolicyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListPolicyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPolicyResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPolicyResponse_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::ListRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListRpkiResponse_default_instance_;
    new (ptr) ::gobgpapi::ListRpkiResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListRpkiResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiResponse_gobgp_2eproto}, {
      &scc_info_Rpki_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiTableRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListRpkiTableRequest_default_instance_;
    new (ptr) ::gobgpapi::ListRpkiTableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListRpkiTableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiTableRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiTableRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListRpkiTableResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListRpkiTableResponse_default_instance_;
    new (ptr) ::gobgpapi::ListRpkiTableResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListRpkiTableResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListRpkiTableResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListRpkiTableResponse_gobgp_2eproto}, {
      &scc_info_Roa_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListStatementRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListStatementRequest_default_instance_;
    new (ptr) ::gobgpapi::ListStatementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListStatementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListStatementRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListStatementRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListStatementResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListStatementResponse_default_instance_;
    new (ptr) ::gobgpapi::ListStatementResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListStatementResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListStatementResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListStatementResponse_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ListVrfRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListVrfRequest_default_instance_;
    new (ptr) ::gobgpapi::ListVrfRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListVrfRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListVrfRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListVrfRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ListVrfResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ListVrfResponse_default_instance_;
    new (ptr) ::gobgpapi::ListVrfResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ListVrfResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListVrfResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListVrfResponse_gobgp_2eproto}, {
      &scc_info_Vrf_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_LocalPrefAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LocalPrefAction_default_instance_;
    new (ptr) ::gobgpapi::LocalPrefAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LocalPrefAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalPrefAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocalPrefAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_LongLivedGracefulRestart_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LongLivedGracefulRestart_default_instance_;
    new (ptr) ::gobgpapi::LongLivedGracefulRestart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LongLivedGracefulRestart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LongLivedGracefulRestart_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LongLivedGracefulRestart_gobgp_2eproto}, {
      &scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto.base,
      &scc_info_LongLivedGracefulRestartState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_LongLivedGracefulRestartConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LongLivedGracefulRestartConfig_default_instance_;
    new (ptr) ::gobgpapi::LongLivedGracefulRestartConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LongLivedGracefulRestartConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LongLivedGracefulRestartConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_LongLivedGracefulRestartState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LongLivedGracefulRestartState_default_instance_;
    new (ptr) ::gobgpapi::LongLivedGracefulRestartState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LongLivedGracefulRestartState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongLivedGracefulRestartState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LongLivedGracefulRestartState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_MatchSet_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MatchSet_default_instance_;
    new (ptr) ::gobgpapi::MatchSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MatchSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchSet_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchSet_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_MedAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MedAction_default_instance_;
    new (ptr) ::gobgpapi::MedAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MedAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MedAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MedAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Message_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Message_default_instance_;
    new (ptr) ::gobgpapi::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Messages_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Messages_default_instance_;
    new (ptr) ::gobgpapi::Messages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Messages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Messages_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Messages_gobgp_2eproto}, {
      &scc_info_Message_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_MonitorPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MonitorPeerRequest_default_instance_;
    new (ptr) ::gobgpapi::MonitorPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MonitorPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MonitorPeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_MonitorPeerResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MonitorPeerResponse_default_instance_;
    new (ptr) ::gobgpapi::MonitorPeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MonitorPeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonitorPeerResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MonitorPeerResponse_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_MonitorTableRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MonitorTableRequest_default_instance_;
    new (ptr) ::gobgpapi::MonitorTableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MonitorTableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonitorTableRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MonitorTableRequest_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_MonitorTableResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MonitorTableResponse_default_instance_;
    new (ptr) ::gobgpapi::MonitorTableResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MonitorTableResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonitorTableResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MonitorTableResponse_gobgp_2eproto}, {
      &scc_info_Path_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_MpGracefulRestart_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MpGracefulRestart_default_instance_;
    new (ptr) ::gobgpapi::MpGracefulRestart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpGracefulRestart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpGracefulRestart_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MpGracefulRestart_gobgp_2eproto}, {
      &scc_info_MpGracefulRestartConfig_gobgp_2eproto.base,
      &scc_info_MpGracefulRestartState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_MpGracefulRestartConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MpGracefulRestartConfig_default_instance_;
    new (ptr) ::gobgpapi::MpGracefulRestartConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpGracefulRestartConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MpGracefulRestartConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_MpGracefulRestartState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MpGracefulRestartState_default_instance_;
    new (ptr) ::gobgpapi::MpGracefulRestartState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpGracefulRestartState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MpGracefulRestartState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MpGracefulRestartState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_NexthopAction_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_NexthopAction_default_instance_;
    new (ptr) ::gobgpapi::NexthopAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::NexthopAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NexthopAction_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NexthopAction_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Path_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Path_default_instance_;
    new (ptr) ::gobgpapi::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Path_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Path_gobgp_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Validation_gobgp_2eproto.base,
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Peer_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Peer_default_instance_;
    new (ptr) ::gobgpapi::Peer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Peer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Peer_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Peer_gobgp_2eproto}, {
      &scc_info_ApplyPolicy_gobgp_2eproto.base,
      &scc_info_PeerConf_gobgp_2eproto.base,
      &scc_info_EbgpMultihop_gobgp_2eproto.base,
      &scc_info_RouteReflector_gobgp_2eproto.base,
      &scc_info_PeerState_gobgp_2eproto.base,
      &scc_info_Timers_gobgp_2eproto.base,
      &scc_info_Transport_gobgp_2eproto.base,
      &scc_info_RouteServer_gobgp_2eproto.base,
      &scc_info_GracefulRestart_gobgp_2eproto.base,
      &scc_info_AfiSafi_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_PeerConf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PeerConf_default_instance_;
    new (ptr) ::gobgpapi::PeerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PeerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerConf_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PeerGroup_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PeerGroup_default_instance_;
    new (ptr) ::gobgpapi::PeerGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PeerGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PeerGroup_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_PeerGroup_gobgp_2eproto}, {
      &scc_info_ApplyPolicy_gobgp_2eproto.base,
      &scc_info_PeerGroupConf_gobgp_2eproto.base,
      &scc_info_EbgpMultihop_gobgp_2eproto.base,
      &scc_info_RouteReflector_gobgp_2eproto.base,
      &scc_info_PeerGroupState_gobgp_2eproto.base,
      &scc_info_Timers_gobgp_2eproto.base,
      &scc_info_Transport_gobgp_2eproto.base,
      &scc_info_RouteServer_gobgp_2eproto.base,
      &scc_info_GracefulRestart_gobgp_2eproto.base,
      &scc_info_AfiSafi_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_PeerGroupConf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PeerGroupConf_default_instance_;
    new (ptr) ::gobgpapi::PeerGroupConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PeerGroupConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupConf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerGroupConf_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PeerGroupState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PeerGroupState_default_instance_;
    new (ptr) ::gobgpapi::PeerGroupState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PeerGroupState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerGroupState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerGroupState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PeerState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PeerState_default_instance_;
    new (ptr) ::gobgpapi::PeerState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PeerState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PeerState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PeerState_gobgp_2eproto}, {
      &scc_info_Messages_gobgp_2eproto.base,
      &scc_info_Queues_gobgp_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Policy_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Policy_default_instance_;
    new (ptr) ::gobgpapi::Policy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Policy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Policy_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Policy_gobgp_2eproto}, {
      &scc_info_Statement_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_PolicyAssignment_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PolicyAssignment_default_instance_;
    new (ptr) ::gobgpapi::PolicyAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PolicyAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolicyAssignment_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PolicyAssignment_gobgp_2eproto}, {
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Prefix_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Prefix_default_instance_;
    new (ptr) ::gobgpapi::Prefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Prefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prefix_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prefix_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_PrefixLimit_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PrefixLimit_default_instance_;
    new (ptr) ::gobgpapi::PrefixLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PrefixLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrefixLimit_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrefixLimit_gobgp_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Queues_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Queues_default_instance_;
    new (ptr) ::gobgpapi::Queues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Queues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Queues_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Queues_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RPKIConf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RPKIConf_default_instance_;
    new (ptr) ::gobgpapi::RPKIConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RPKIConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPKIConf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPKIConf_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RPKIState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RPKIState_default_instance_;
    new (ptr) ::gobgpapi::RPKIState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RPKIState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RPKIState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RPKIState_gobgp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ResetPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ResetPeerRequest_default_instance_;
    new (ptr) ::gobgpapi::ResetPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ResetPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetPeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_ResetRpkiRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ResetRpkiRequest_default_instance_;
    new (ptr) ::gobgpapi::ResetRpkiRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ResetRpkiRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetRpkiRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetRpkiRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Roa_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Roa_default_instance_;
    new (ptr) ::gobgpapi::Roa();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Roa::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Roa_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Roa_gobgp_2eproto}, {
      &scc_info_RPKIConf_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_RouteReflector_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteReflector_default_instance_;
    new (ptr) ::gobgpapi::RouteReflector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteReflector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteReflector_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteReflector_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteSelectionOptions_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteSelectionOptions_default_instance_;
    new (ptr) ::gobgpapi::RouteSelectionOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteSelectionOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteSelectionOptions_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RouteSelectionOptions_gobgp_2eproto}, {
      &scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base,
      &scc_info_RouteSelectionOptionsState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_RouteSelectionOptionsConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteSelectionOptionsConfig_default_instance_;
    new (ptr) ::gobgpapi::RouteSelectionOptionsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteSelectionOptionsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteSelectionOptionsConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteSelectionOptionsState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteSelectionOptionsState_default_instance_;
    new (ptr) ::gobgpapi::RouteSelectionOptionsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteSelectionOptionsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteSelectionOptionsState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteSelectionOptionsState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteServer_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteServer_default_instance_;
    new (ptr) ::gobgpapi::RouteServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteServer_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteServer_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteTargetMembership_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteTargetMembership_default_instance_;
    new (ptr) ::gobgpapi::RouteTargetMembership();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteTargetMembership::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RouteTargetMembership_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RouteTargetMembership_gobgp_2eproto}, {
      &scc_info_RouteTargetMembershipConfig_gobgp_2eproto.base,
      &scc_info_RouteTargetMembershipState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_RouteTargetMembershipConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteTargetMembershipConfig_default_instance_;
    new (ptr) ::gobgpapi::RouteTargetMembershipConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteTargetMembershipConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteTargetMembershipConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RouteTargetMembershipState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteTargetMembershipState_default_instance_;
    new (ptr) ::gobgpapi::RouteTargetMembershipState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteTargetMembershipState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteTargetMembershipState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteTargetMembershipState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_RoutingPolicy_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RoutingPolicy_default_instance_;
    new (ptr) ::gobgpapi::RoutingPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RoutingPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoutingPolicy_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoutingPolicy_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,
      &scc_info_Policy_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Rpki_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Rpki_default_instance_;
    new (ptr) ::gobgpapi::Rpki();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Rpki::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Rpki_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Rpki_gobgp_2eproto}, {
      &scc_info_RPKIConf_gobgp_2eproto.base,
      &scc_info_RPKIState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_SetPoliciesRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_SetPoliciesRequest_default_instance_;
    new (ptr) ::gobgpapi::SetPoliciesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::SetPoliciesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SetPoliciesRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SetPoliciesRequest_gobgp_2eproto}, {
      &scc_info_DefinedSet_gobgp_2eproto.base,
      &scc_info_Policy_gobgp_2eproto.base,
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_SetPolicyAssignmentRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_SetPolicyAssignmentRequest_default_instance_;
    new (ptr) ::gobgpapi::SetPolicyAssignmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::SetPolicyAssignmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPolicyAssignmentRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPolicyAssignmentRequest_gobgp_2eproto}, {
      &scc_info_PolicyAssignment_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_ShutdownPeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ShutdownPeerRequest_default_instance_;
    new (ptr) ::gobgpapi::ShutdownPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ShutdownPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownPeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutdownPeerRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_StartBgpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_StartBgpRequest_default_instance_;
    new (ptr) ::gobgpapi::StartBgpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::StartBgpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartBgpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartBgpRequest_gobgp_2eproto}, {
      &scc_info_Global_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Statement_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Statement_default_instance_;
    new (ptr) ::gobgpapi::Statement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Statement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Statement_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Statement_gobgp_2eproto}, {
      &scc_info_Conditions_gobgp_2eproto.base,
      &scc_info_Actions_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_StopBgpRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_StopBgpRequest_default_instance_;
    new (ptr) ::gobgpapi::StopBgpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::StopBgpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopBgpRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopBgpRequest_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_TableLookupPrefix_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TableLookupPrefix_default_instance_;
    new (ptr) ::gobgpapi::TableLookupPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TableLookupPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableLookupPrefix_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableLookupPrefix_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Timers_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Timers_default_instance_;
    new (ptr) ::gobgpapi::Timers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Timers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Timers_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Timers_gobgp_2eproto}, {
      &scc_info_TimersConfig_gobgp_2eproto.base,
      &scc_info_TimersState_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_TimersConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TimersConfig_default_instance_;
    new (ptr) ::gobgpapi::TimersConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TimersConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimersConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimersConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_TimersState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TimersState_default_instance_;
    new (ptr) ::gobgpapi::TimersState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TimersState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimersState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimersState_gobgp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Transport_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Transport_default_instance_;
    new (ptr) ::gobgpapi::Transport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Transport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transport_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transport_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePeerGroupRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UpdatePeerGroupRequest_default_instance_;
    new (ptr) ::gobgpapi::UpdatePeerGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UpdatePeerGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePeerGroupRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePeerGroupRequest_gobgp_2eproto}, {
      &scc_info_PeerGroup_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePeerGroupResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UpdatePeerGroupResponse_default_instance_;
    new (ptr) ::gobgpapi::UpdatePeerGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UpdatePeerGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePeerGroupResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePeerGroupResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePeerRequest_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UpdatePeerRequest_default_instance_;
    new (ptr) ::gobgpapi::UpdatePeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UpdatePeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePeerRequest_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePeerRequest_gobgp_2eproto}, {
      &scc_info_Peer_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePeerResponse_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UpdatePeerResponse_default_instance_;
    new (ptr) ::gobgpapi::UpdatePeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UpdatePeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePeerResponse_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePeerResponse_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UseMultiplePaths_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UseMultiplePaths_default_instance_;
    new (ptr) ::gobgpapi::UseMultiplePaths();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UseMultiplePaths::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UseMultiplePaths_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UseMultiplePaths_gobgp_2eproto}, {
      &scc_info_UseMultiplePathsConfig_gobgp_2eproto.base,
      &scc_info_UseMultiplePathsState_gobgp_2eproto.base,
      &scc_info_Ebgp_gobgp_2eproto.base,
      &scc_info_Ibgp_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_UseMultiplePathsConfig_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UseMultiplePathsConfig_default_instance_;
    new (ptr) ::gobgpapi::UseMultiplePathsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UseMultiplePathsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsConfig_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseMultiplePathsConfig_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_UseMultiplePathsState_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UseMultiplePathsState_default_instance_;
    new (ptr) ::gobgpapi::UseMultiplePathsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UseMultiplePathsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseMultiplePathsState_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseMultiplePathsState_gobgp_2eproto}, {}};

static void InitDefaultsscc_info_Validation_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Validation_default_instance_;
    new (ptr) ::gobgpapi::Validation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Validation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Validation_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Validation_gobgp_2eproto}, {
      &scc_info_Roa_gobgp_2eproto.base,}};

static void InitDefaultsscc_info_Vrf_gobgp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_Vrf_default_instance_;
    new (ptr) ::gobgpapi::Vrf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::Vrf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vrf_gobgp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vrf_gobgp_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gobgp_2eproto[142];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gobgp_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gobgp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gobgp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::StartBgpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::StartBgpRequest, global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::StopBgpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetBgpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetBgpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetBgpResponse, global_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPeerRequest, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePeerRequest, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPeerRequest, enableadvertised_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPeerResponse, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerRequest, peer_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerRequest, do_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerResponse, needs_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetPeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetPeerRequest, communication_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetPeerRequest, soft_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetPeerRequest, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ShutdownPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ShutdownPeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ShutdownPeerRequest, communication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnablePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnablePeerRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DisablePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DisablePeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DisablePeerRequest, communication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorPeerRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorPeerRequest, current_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorPeerResponse, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPeerGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPeerGroupRequest, peer_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePeerGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePeerGroupRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerGroupRequest, peer_group_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerGroupRequest, do_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UpdatePeerGroupResponse, needs_soft_reset_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddDynamicNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddDynamicNeighborRequest, dynamic_neighbor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathRequest, vrf_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathResponse, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePathRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePathRequest, vrf_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePathRequest, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePathRequest, path_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePathRequest, uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathRequest, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathRequest, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathRequest, prefixes_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathRequest, sort_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathRequest, enable_filtered_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPathResponse, destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathStreamRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathStreamRequest, vrf_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathStreamRequest, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableRequest, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableResponse, num_destination_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableResponse, num_path_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GetTableResponse, num_accepted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableRequest, table_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableRequest, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableRequest, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableRequest, current_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableRequest, post_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MonitorTableResponse, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddVrfRequest, vrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteVrfRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListVrfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListVrfRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListVrfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListVrfResponse, vrf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPolicyRequest, policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPolicyRequest, refer_existing_statements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, preserve_statements_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePolicyRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyResponse, policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::SetPoliciesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::SetPoliciesRequest, defined_sets_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::SetPoliciesRequest, policies_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::SetPoliciesRequest, assignments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddDefinedSetRequest, defined_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteDefinedSetRequest, defined_set_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteDefinedSetRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListDefinedSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListDefinedSetRequest, defined_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListDefinedSetRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListDefinedSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListDefinedSetResponse, defined_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddStatementRequest, statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteStatementRequest, statement_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteStatementRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListStatementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListStatementRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListStatementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListStatementResponse, statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPolicyAssignmentRequest, assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePolicyAssignmentRequest, assignment_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeletePolicyAssignmentRequest, all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyAssignmentRequest, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyAssignmentRequest, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyAssignmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListPolicyAssignmentResponse, assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::SetPolicyAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::SetPolicyAssignmentRequest, assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, port_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddRpkiRequest, lifetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteRpkiRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiRequest, family_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiResponse, server_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableRpkiRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DisableRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DisableRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DisableRpkiRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetRpkiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetRpkiRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetRpkiRequest, port_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ResetRpkiRequest, soft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiTableRequest, family_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ListRpkiTableResponse, roa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, url_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, route_types_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, version_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, nexthop_trigger_enable_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, nexthop_trigger_delay_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, mpls_label_range_size_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableZebraRequest, software_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, dump_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, dump_interval_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EnableMrtRequest, rotation_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DisableMrtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddBmpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddBmpRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddBmpRequest, port_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddBmpRequest, policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddBmpRequest, statisticstimeout_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddBmpRequest, sysname_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddBmpRequest, sysdescr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteBmpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteBmpRequest, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DeleteBmpRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Family, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Family, afi_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Family, safi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Validation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Validation, state_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Validation, reason_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Validation, matched_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Validation, unmatched_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Validation, unmatched_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, nlri_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, pattrs_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, age_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, best_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, is_withdraw_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, validation_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, no_implicit_withdraw_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, source_asn_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, source_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, filtered_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, stale_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, is_from_external_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, neighbor_ip_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, uuid_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, is_nexthop_invalid_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, identifier_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, local_identifier_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, nlri_binary_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Path, pattrs_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Destination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Destination, prefix_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Destination, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TableLookupPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TableLookupPrefix, prefix_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TableLookupPrefix, lookup_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, apply_policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, conf_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, ebgp_multihop_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, route_reflector_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, state_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, timers_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, transport_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, route_server_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Peer, afi_safis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, apply_policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, conf_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, ebgp_multihop_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, route_reflector_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, info_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, timers_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, transport_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, route_server_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroup, afi_safis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DynamicNeighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DynamicNeighbor, prefix_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DynamicNeighbor, peer_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ApplyPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ApplyPolicy, in_policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ApplyPolicy, export_policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ApplyPolicy, import_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PrefixLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PrefixLimit, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PrefixLimit, max_prefixes_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PrefixLimit, shutdown_threshold_pct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, auth_password_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, description_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, local_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, neighbor_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, peer_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, peer_group_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, peer_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, remove_private_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, send_community_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, neighbor_interface_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, vrf_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, allow_own_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, replace_peer_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerConf, admin_down_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, auth_password_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, description_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, local_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, peer_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, peer_group_name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, peer_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, remove_private_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupConf, send_community_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, auth_password_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, description_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, local_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, peer_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, peer_group_name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, peer_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, remove_private_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, send_community_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, total_paths_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerGroupState, total_prefixes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpMultihop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpMultihop, enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpMultihop, multihop_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteReflector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteReflector, route_reflector_client_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteReflector, route_reflector_cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, auth_password_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, description_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, local_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, messages_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, neighbor_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, peer_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, peer_group_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, peer_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, queues_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, remove_private_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, route_flap_damping_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, send_community_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, session_state_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, admin_state_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, out_q_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, flops_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, remote_cap_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, local_cap_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PeerState, router_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Messages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Messages, received_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Messages, sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, notification_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, update_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, open_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, keepalive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, refresh_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, discarded_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, total_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, withdraw_update_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Message, withdraw_prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Queues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Queues, input_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Queues, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Timers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Timers, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Timers, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersConfig, connect_retry_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersConfig, hold_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersConfig, keepalive_interval_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersConfig, minimum_advertisement_interval_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersConfig, idle_hold_time_after_reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, connect_retry_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, hold_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, keepalive_interval_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, minimum_advertisement_interval_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, negotiated_hold_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, uptime_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TimersState, downtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, local_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, local_port_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, mtu_discovery_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, passive_mode_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, remote_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, remote_port_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, tcp_mss_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Transport, bind_interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteServer, route_server_client_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteServer, secondary_route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, restart_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, helper_only_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, deferral_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, notification_enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, longlived_enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, stale_routes_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, peer_restart_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, peer_restarting_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, local_restarting_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::GracefulRestart, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartConfig, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, received_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, advertised_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, end_of_rib_received_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestartState, end_of_rib_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestart, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpGracefulRestart, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiConfig, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiConfig, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiState, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiState, enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiState, received_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiState, accepted_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafiState, advertised_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, always_compare_med_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, ignore_as_path_length_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, external_compare_router_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, advertise_inactive_routes_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, enable_aigp_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, ignore_next_hop_igp_metric_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsConfig, disable_best_path_selection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, always_compare_med_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, ignore_as_path_length_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, external_compare_router_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, advertise_inactive_routes_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, enable_aigp_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, ignore_next_hop_igp_metric_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptionsState, disable_best_path_selection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptions, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteSelectionOptions, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePathsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePathsConfig, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePathsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePathsState, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpConfig, allow_multiple_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpConfig, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpState, allow_multiple_as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EbgpState, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Ebgp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Ebgp, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Ebgp, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IbgpConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IbgpConfig, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IbgpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IbgpState, maximum_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Ibgp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Ibgp, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Ibgp, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, state_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, ebgp_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UseMultiplePaths, ibgp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipConfig, deferral_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipState, deferral_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembership, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembership, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartConfig, enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartConfig, restart_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, received_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, advertised_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, peer_restart_time_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestartState, peer_restart_timer_expired_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestart, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LongLivedGracefulRestart, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, mp_graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, state_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, apply_policy_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, route_selection_options_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, use_multiple_paths_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, prefix_limits_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, route_target_membership_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, long_lived_graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AfiSafi, add_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathsConfig, receive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathsConfig, send_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathsState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathsState, receive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPathsState, send_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPaths, config_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AddPaths, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Prefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Prefix, ip_prefix_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Prefix, mask_length_min_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Prefix, mask_length_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefinedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefinedSet, defined_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefinedSet, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefinedSet, list_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefinedSet, prefixes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MatchSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MatchSet, match_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MatchSet, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPathLength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPathLength, length_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPathLength, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, prefix_set_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, neighbor_set_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, as_path_length_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, as_path_set_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, community_set_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, ext_community_set_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, rpki_result_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, route_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, large_community_set_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, next_hop_in_list_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Conditions, afi_safi_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::CommunityAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::CommunityAction, action_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::CommunityAction, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MedAction, action_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MedAction, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPrependAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPrependAction, asn_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPrependAction, repeat_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPrependAction, use_left_most_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::NexthopAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::NexthopAction, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::NexthopAction, self_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LocalPrefAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LocalPrefAction, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, route_action_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, community_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, med_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, as_prepend_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, ext_community_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, nexthop_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, local_pref_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Actions, large_community_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Statement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Statement, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Statement, conditions_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Statement, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Policy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Policy, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Policy, statements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PolicyAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PolicyAssignment, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PolicyAssignment, direction_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PolicyAssignment, policies_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PolicyAssignment, default_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RoutingPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RoutingPolicy, defined_sets_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RoutingPolicy, policies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Roa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Roa, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Roa, prefixlen_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Roa, maxlen_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Roa, prefix_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Roa, conf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Vrf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Vrf, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Vrf, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Vrf, import_rt_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Vrf, export_rt_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Vrf, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefaultRouteDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefaultRouteDistance, external_route_distance_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefaultRouteDistance, internal_route_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, router_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, listen_port_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, listen_addresses_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, families_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, use_multiple_paths_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, route_selection_options_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, default_route_distance_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, confederation_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, graceful_restart_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Global, apply_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Confederation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Confederation, enabled_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Confederation, identifier_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Confederation, member_as_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIConf, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIConf, remote_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, uptime_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, downtime_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, up_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, record_ipv4_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, record_ipv6_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, prefix_ipv4_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, prefix_ipv6_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, serial_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, received_ipv4_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, received_ipv6_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, serial_notify_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, cache_reset_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, cache_response_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, end_of_data_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, error_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, serial_query_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RPKIState, reset_query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Rpki, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Rpki, conf_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::Rpki, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gobgpapi::StartBgpRequest)},
  { 6, -1, sizeof(::gobgpapi::StopBgpRequest)},
  { 11, -1, sizeof(::gobgpapi::GetBgpRequest)},
  { 16, -1, sizeof(::gobgpapi::GetBgpResponse)},
  { 22, -1, sizeof(::gobgpapi::AddPeerRequest)},
  { 28, -1, sizeof(::gobgpapi::DeletePeerRequest)},
  { 35, -1, sizeof(::gobgpapi::ListPeerRequest)},
  { 42, -1, sizeof(::gobgpapi::ListPeerResponse)},
  { 48, -1, sizeof(::gobgpapi::UpdatePeerRequest)},
  { 55, -1, sizeof(::gobgpapi::UpdatePeerResponse)},
  { 61, -1, sizeof(::gobgpapi::ResetPeerRequest)},
  { 70, -1, sizeof(::gobgpapi::ShutdownPeerRequest)},
  { 77, -1, sizeof(::gobgpapi::EnablePeerRequest)},
  { 83, -1, sizeof(::gobgpapi::DisablePeerRequest)},
  { 90, -1, sizeof(::gobgpapi::MonitorPeerRequest)},
  { 97, -1, sizeof(::gobgpapi::MonitorPeerResponse)},
  { 103, -1, sizeof(::gobgpapi::AddPeerGroupRequest)},
  { 109, -1, sizeof(::gobgpapi::DeletePeerGroupRequest)},
  { 115, -1, sizeof(::gobgpapi::UpdatePeerGroupRequest)},
  { 122, -1, sizeof(::gobgpapi::UpdatePeerGroupResponse)},
  { 128, -1, sizeof(::gobgpapi::AddDynamicNeighborRequest)},
  { 134, -1, sizeof(::gobgpapi::AddPathRequest)},
  { 142, -1, sizeof(::gobgpapi::AddPathResponse)},
  { 148, -1, sizeof(::gobgpapi::DeletePathRequest)},
  { 158, -1, sizeof(::gobgpapi::ListPathRequest)},
  { 169, -1, sizeof(::gobgpapi::ListPathResponse)},
  { 175, -1, sizeof(::gobgpapi::AddPathStreamRequest)},
  { 183, -1, sizeof(::gobgpapi::GetTableRequest)},
  { 191, -1, sizeof(::gobgpapi::GetTableResponse)},
  { 199, -1, sizeof(::gobgpapi::MonitorTableRequest)},
  { 209, -1, sizeof(::gobgpapi::MonitorTableResponse)},
  { 215, -1, sizeof(::gobgpapi::AddVrfRequest)},
  { 221, -1, sizeof(::gobgpapi::DeleteVrfRequest)},
  { 227, -1, sizeof(::gobgpapi::ListVrfRequest)},
  { 233, -1, sizeof(::gobgpapi::ListVrfResponse)},
  { 239, -1, sizeof(::gobgpapi::AddPolicyRequest)},
  { 246, -1, sizeof(::gobgpapi::DeletePolicyRequest)},
  { 254, -1, sizeof(::gobgpapi::ListPolicyRequest)},
  { 260, -1, sizeof(::gobgpapi::ListPolicyResponse)},
  { 266, -1, sizeof(::gobgpapi::SetPoliciesRequest)},
  { 274, -1, sizeof(::gobgpapi::AddDefinedSetRequest)},
  { 280, -1, sizeof(::gobgpapi::DeleteDefinedSetRequest)},
  { 287, -1, sizeof(::gobgpapi::ListDefinedSetRequest)},
  { 294, -1, sizeof(::gobgpapi::ListDefinedSetResponse)},
  { 300, -1, sizeof(::gobgpapi::AddStatementRequest)},
  { 306, -1, sizeof(::gobgpapi::DeleteStatementRequest)},
  { 313, -1, sizeof(::gobgpapi::ListStatementRequest)},
  { 319, -1, sizeof(::gobgpapi::ListStatementResponse)},
  { 325, -1, sizeof(::gobgpapi::AddPolicyAssignmentRequest)},
  { 331, -1, sizeof(::gobgpapi::DeletePolicyAssignmentRequest)},
  { 338, -1, sizeof(::gobgpapi::ListPolicyAssignmentRequest)},
  { 345, -1, sizeof(::gobgpapi::ListPolicyAssignmentResponse)},
  { 351, -1, sizeof(::gobgpapi::SetPolicyAssignmentRequest)},
  { 357, -1, sizeof(::gobgpapi::AddRpkiRequest)},
  { 365, -1, sizeof(::gobgpapi::DeleteRpkiRequest)},
  { 372, -1, sizeof(::gobgpapi::ListRpkiRequest)},
  { 378, -1, sizeof(::gobgpapi::ListRpkiResponse)},
  { 384, -1, sizeof(::gobgpapi::EnableRpkiRequest)},
  { 391, -1, sizeof(::gobgpapi::DisableRpkiRequest)},
  { 398, -1, sizeof(::gobgpapi::ResetRpkiRequest)},
  { 406, -1, sizeof(::gobgpapi::ListRpkiTableRequest)},
  { 412, -1, sizeof(::gobgpapi::ListRpkiTableResponse)},
  { 418, -1, sizeof(::gobgpapi::EnableZebraRequest)},
  { 430, -1, sizeof(::gobgpapi::EnableMrtRequest)},
  { 439, -1, sizeof(::gobgpapi::DisableMrtRequest)},
  { 444, -1, sizeof(::gobgpapi::AddBmpRequest)},
  { 455, -1, sizeof(::gobgpapi::DeleteBmpRequest)},
  { 462, -1, sizeof(::gobgpapi::Family)},
  { 469, -1, sizeof(::gobgpapi::Validation)},
  { 479, -1, sizeof(::gobgpapi::Path)},
  { 504, -1, sizeof(::gobgpapi::Destination)},
  { 511, -1, sizeof(::gobgpapi::TableLookupPrefix)},
  { 518, -1, sizeof(::gobgpapi::Peer)},
  { 533, -1, sizeof(::gobgpapi::PeerGroup)},
  { 548, -1, sizeof(::gobgpapi::DynamicNeighbor)},
  { 555, -1, sizeof(::gobgpapi::ApplyPolicy)},
  { 563, -1, sizeof(::gobgpapi::PrefixLimit)},
  { 571, -1, sizeof(::gobgpapi::PeerConf)},
  { 591, -1, sizeof(::gobgpapi::PeerGroupConf)},
  { 605, -1, sizeof(::gobgpapi::PeerGroupState)},
  { 621, -1, sizeof(::gobgpapi::EbgpMultihop)},
  { 628, -1, sizeof(::gobgpapi::RouteReflector)},
  { 635, -1, sizeof(::gobgpapi::PeerState)},
  { 659, -1, sizeof(::gobgpapi::Messages)},
  { 666, -1, sizeof(::gobgpapi::Message)},
  { 680, -1, sizeof(::gobgpapi::Queues)},
  { 687, -1, sizeof(::gobgpapi::Timers)},
  { 694, -1, sizeof(::gobgpapi::TimersConfig)},
  { 704, -1, sizeof(::gobgpapi::TimersState)},
  { 716, -1, sizeof(::gobgpapi::Transport)},
  { 729, -1, sizeof(::gobgpapi::RouteServer)},
  { 736, -1, sizeof(::gobgpapi::GracefulRestart)},
  { 752, -1, sizeof(::gobgpapi::MpGracefulRestartConfig)},
  { 758, -1, sizeof(::gobgpapi::MpGracefulRestartState)},
  { 768, -1, sizeof(::gobgpapi::MpGracefulRestart)},
  { 775, -1, sizeof(::gobgpapi::AfiSafiConfig)},
  { 782, -1, sizeof(::gobgpapi::AfiSafiState)},
  { 792, -1, sizeof(::gobgpapi::RouteSelectionOptionsConfig)},
  { 804, -1, sizeof(::gobgpapi::RouteSelectionOptionsState)},
  { 816, -1, sizeof(::gobgpapi::RouteSelectionOptions)},
  { 823, -1, sizeof(::gobgpapi::UseMultiplePathsConfig)},
  { 829, -1, sizeof(::gobgpapi::UseMultiplePathsState)},
  { 835, -1, sizeof(::gobgpapi::EbgpConfig)},
  { 842, -1, sizeof(::gobgpapi::EbgpState)},
  { 849, -1, sizeof(::gobgpapi::Ebgp)},
  { 856, -1, sizeof(::gobgpapi::IbgpConfig)},
  { 862, -1, sizeof(::gobgpapi::IbgpState)},
  { 868, -1, sizeof(::gobgpapi::Ibgp)},
  { 875, -1, sizeof(::gobgpapi::UseMultiplePaths)},
  { 884, -1, sizeof(::gobgpapi::RouteTargetMembershipConfig)},
  { 890, -1, sizeof(::gobgpapi::RouteTargetMembershipState)},
  { 896, -1, sizeof(::gobgpapi::RouteTargetMembership)},
  { 903, -1, sizeof(::gobgpapi::LongLivedGracefulRestartConfig)},
  { 910, -1, sizeof(::gobgpapi::LongLivedGracefulRestartState)},
  { 920, -1, sizeof(::gobgpapi::LongLivedGracefulRestart)},
  { 927, -1, sizeof(::gobgpapi::AfiSafi)},
  { 942, -1, sizeof(::gobgpapi::AddPathsConfig)},
  { 949, -1, sizeof(::gobgpapi::AddPathsState)},
  { 956, -1, sizeof(::gobgpapi::AddPaths)},
  { 963, -1, sizeof(::gobgpapi::Prefix)},
  { 971, -1, sizeof(::gobgpapi::DefinedSet)},
  { 980, -1, sizeof(::gobgpapi::MatchSet)},
  { 987, -1, sizeof(::gobgpapi::AsPathLength)},
  { 994, -1, sizeof(::gobgpapi::Conditions)},
  { 1010, -1, sizeof(::gobgpapi::CommunityAction)},
  { 1017, -1, sizeof(::gobgpapi::MedAction)},
  { 1024, -1, sizeof(::gobgpapi::AsPrependAction)},
  { 1032, -1, sizeof(::gobgpapi::NexthopAction)},
  { 1039, -1, sizeof(::gobgpapi::LocalPrefAction)},
  { 1045, -1, sizeof(::gobgpapi::Actions)},
  { 1058, -1, sizeof(::gobgpapi::Statement)},
  { 1066, -1, sizeof(::gobgpapi::Policy)},
  { 1073, -1, sizeof(::gobgpapi::PolicyAssignment)},
  { 1082, -1, sizeof(::gobgpapi::RoutingPolicy)},
  { 1089, -1, sizeof(::gobgpapi::Roa)},
  { 1099, -1, sizeof(::gobgpapi::Vrf)},
  { 1109, -1, sizeof(::gobgpapi::DefaultRouteDistance)},
  { 1116, -1, sizeof(::gobgpapi::Global)},
  { 1132, -1, sizeof(::gobgpapi::Confederation)},
  { 1140, -1, sizeof(::gobgpapi::RPKIConf)},
  { 1147, -1, sizeof(::gobgpapi::RPKIState)},
  { 1169, -1, sizeof(::gobgpapi::Rpki)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_StartBgpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_StopBgpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_GetBgpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_GetBgpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeletePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UpdatePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UpdatePeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ResetPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ShutdownPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EnablePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DisablePeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MonitorPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MonitorPeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPeerGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeletePeerGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UpdatePeerGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UpdatePeerGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddDynamicNeighborRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPathResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeletePathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPathRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPathResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPathStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_GetTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_GetTableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MonitorTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MonitorTableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeleteVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListVrfRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListVrfResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeletePolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPolicyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_SetPoliciesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeleteDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListDefinedSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListDefinedSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddStatementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeleteStatementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListStatementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListStatementResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeletePolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListPolicyAssignmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_SetPolicyAssignmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeleteRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListRpkiResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EnableRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DisableRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ResetRpkiRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListRpkiTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ListRpkiTableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EnableZebraRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EnableMrtRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DisableMrtRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddBmpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DeleteBmpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Family_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Validation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Destination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TableLookupPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PeerGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DynamicNeighbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ApplyPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PrefixLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PeerConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PeerGroupConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PeerGroupState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EbgpMultihop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteReflector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PeerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Messages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Queues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Timers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TimersConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TimersState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Transport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_GracefulRestart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MpGracefulRestartConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MpGracefulRestartState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MpGracefulRestart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AfiSafiConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AfiSafiState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteSelectionOptionsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteSelectionOptionsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteSelectionOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UseMultiplePathsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UseMultiplePathsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EbgpConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EbgpState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Ebgp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_IbgpConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_IbgpState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Ibgp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UseMultiplePaths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteTargetMembershipConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteTargetMembershipState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteTargetMembership_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LongLivedGracefulRestartConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LongLivedGracefulRestartState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LongLivedGracefulRestart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AfiSafi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPathsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPathsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AddPaths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Prefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DefinedSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MatchSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AsPathLength_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Conditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_CommunityAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MedAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AsPrependAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_NexthopAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LocalPrefAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Actions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Statement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Policy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PolicyAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RoutingPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Roa_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Vrf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DefaultRouteDistance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Global_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Confederation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RPKIConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RPKIState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_Rpki_default_instance_),
};

const char descriptor_table_protodef_gobgp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013gobgp.proto\022\010gobgpapi\032\031google/protobuf"
  "/any.proto\032\033google/protobuf/empty.proto\032"
  "\037google/protobuf/timestamp.proto\"3\n\017Star"
  "tBgpRequest\022 \n\006global\030\001 \001(\0132\020.gobgpapi.G"
  "lobal\"\020\n\016StopBgpRequest\"\017\n\rGetBgpRequest"
  "\"2\n\016GetBgpResponse\022 \n\006global\030\001 \001(\0132\020.gob"
  "gpapi.Global\".\n\016AddPeerRequest\022\034\n\004peer\030\001"
  " \001(\0132\016.gobgpapi.Peer\"7\n\021DeletePeerReques"
  "t\022\017\n\007address\030\001 \001(\t\022\021\n\tinterface\030\002 \001(\t\"<\n"
  "\017ListPeerRequest\022\017\n\007address\030\001 \001(\t\022\030\n\020ena"
  "bleAdvertised\030\002 \001(\010\"0\n\020ListPeerResponse\022"
  "\034\n\004peer\030\001 \001(\0132\016.gobgpapi.Peer\"K\n\021UpdateP"
  "eerRequest\022\034\n\004peer\030\001 \001(\0132\016.gobgpapi.Peer"
  "\022\030\n\020do_soft_reset_in\030\002 \001(\010\"1\n\022UpdatePeer"
  "Response\022\033\n\023needs_soft_reset_in\030\001 \001(\010\"\273\001"
  "\n\020ResetPeerRequest\022\017\n\007address\030\001 \001(\t\022\025\n\rc"
  "ommunication\030\002 \001(\t\022\014\n\004soft\030\003 \001(\010\022@\n\tdire"
  "ction\030\004 \001(\0162-.gobgpapi.ResetPeerRequest."
  "SoftResetDirection\"/\n\022SoftResetDirection"
  "\022\006\n\002IN\020\000\022\007\n\003OUT\020\001\022\010\n\004BOTH\020\002\"=\n\023ShutdownP"
  "eerRequest\022\017\n\007address\030\001 \001(\t\022\025\n\rcommunica"
  "tion\030\002 \001(\t\"$\n\021EnablePeerRequest\022\017\n\007addre"
  "ss\030\001 \001(\t\"<\n\022DisablePeerRequest\022\017\n\007addres"
  "s\030\001 \001(\t\022\025\n\rcommunication\030\002 \001(\t\"6\n\022Monito"
  "rPeerRequest\022\017\n\007address\030\001 \001(\t\022\017\n\007current"
  "\030\002 \001(\010\"3\n\023MonitorPeerResponse\022\034\n\004peer\030\001 "
  "\001(\0132\016.gobgpapi.Peer\">\n\023AddPeerGroupReque"
  "st\022\'\n\npeer_group\030\001 \001(\0132\023.gobgpapi.PeerGr"
  "oup\"&\n\026DeletePeerGroupRequest\022\014\n\004name\030\001 "
  "\001(\t\"[\n\026UpdatePeerGroupRequest\022\'\n\npeer_gr"
  "oup\030\001 \001(\0132\023.gobgpapi.PeerGroup\022\030\n\020do_sof"
  "t_reset_in\030\002 \001(\010\"6\n\027UpdatePeerGroupRespo"
  "nse\022\033\n\023needs_soft_reset_in\030\001 \001(\010\"P\n\031AddD"
  "ynamicNeighborRequest\0223\n\020dynamic_neighbo"
  "r\030\001 \001(\0132\031.gobgpapi.DynamicNeighbor\"g\n\016Ad"
  "dPathRequest\022\'\n\ntable_type\030\001 \001(\0162\023.gobgp"
  "api.TableType\022\016\n\006vrf_id\030\002 \001(\t\022\034\n\004path\030\003 "
  "\001(\0132\016.gobgpapi.Path\"\037\n\017AddPathResponse\022\014"
  "\n\004uuid\030\001 \001(\014\"\232\001\n\021DeletePathRequest\022\'\n\nta"
  "ble_type\030\001 \001(\0162\023.gobgpapi.TableType\022\016\n\006v"
  "rf_id\030\002 \001(\t\022 \n\006family\030\003 \001(\0132\020.gobgpapi.F"
  "amily\022\034\n\004path\030\004 \001(\0132\016.gobgpapi.Path\022\014\n\004u"
  "uid\030\005 \001(\014\"\213\002\n\017ListPathRequest\022\'\n\ntable_t"
  "ype\030\001 \001(\0162\023.gobgpapi.TableType\022\014\n\004name\030\002"
  " \001(\t\022 \n\006family\030\003 \001(\0132\020.gobgpapi.Family\022-"
  "\n\010prefixes\030\004 \003(\0132\033.gobgpapi.TableLookupP"
  "refix\0225\n\tsort_type\030\005 \001(\0162\".gobgpapi.List"
  "PathRequest.SortType\022\027\n\017enable_filtered\030"
  "\006 \001(\010\" \n\010SortType\022\010\n\004NONE\020\000\022\n\n\006PREFIX\020\001\""
  ">\n\020ListPathResponse\022*\n\013destination\030\001 \001(\013"
  "2\025.gobgpapi.Destination\"n\n\024AddPathStream"
  "Request\022\'\n\ntable_type\030\001 \001(\0162\023.gobgpapi.T"
  "ableType\022\016\n\006vrf_id\030\002 \001(\t\022\035\n\005paths\030\003 \003(\0132"
  "\016.gobgpapi.Path\"j\n\017GetTableRequest\022\'\n\nta"
  "ble_type\030\001 \001(\0162\023.gobgpapi.TableType\022 \n\006f"
  "amily\030\002 \001(\0132\020.gobgpapi.Family\022\014\n\004name\030\003 "
  "\001(\t\"S\n\020GetTableResponse\022\027\n\017num_destinati"
  "on\030\001 \001(\004\022\020\n\010num_path\030\002 \001(\004\022\024\n\014num_accept"
  "ed\030\003 \001(\004\"\224\001\n\023MonitorTableRequest\022\'\n\ntabl"
  "e_type\030\001 \001(\0162\023.gobgpapi.TableType\022\014\n\004nam"
  "e\030\002 \001(\t\022 \n\006family\030\003 \001(\0132\020.gobgpapi.Famil"
  "y\022\017\n\007current\030\004 \001(\010\022\023\n\013post_policy\030\005 \001(\010\""
  "4\n\024MonitorTableResponse\022\034\n\004path\030\001 \001(\0132\016."
  "gobgpapi.Path\"+\n\rAddVrfRequest\022\032\n\003vrf\030\001 "
  "\001(\0132\r.gobgpapi.Vrf\" \n\020DeleteVrfRequest\022\014"
  "\n\004name\030\001 \001(\t\"\036\n\016ListVrfRequest\022\014\n\004name\030\001"
  " \001(\t\"-\n\017ListVrfResponse\022\032\n\003vrf\030\001 \001(\0132\r.g"
  "obgpapi.Vrf\"W\n\020AddPolicyRequest\022 \n\006polic"
  "y\030\001 \001(\0132\020.gobgpapi.Policy\022!\n\031refer_exist"
  "ing_statements\030\002 \001(\010\"a\n\023DeletePolicyRequ"
  "est\022 \n\006policy\030\001 \001(\0132\020.gobgpapi.Policy\022\033\n"
  "\023preserve_statements\030\002 \001(\010\022\013\n\003all\030\003 \001(\010\""
  "!\n\021ListPolicyRequest\022\014\n\004name\030\001 \001(\t\"6\n\022Li"
  "stPolicyResponse\022 \n\006policy\030\001 \001(\0132\020.gobgp"
  "api.Policy\"\225\001\n\022SetPoliciesRequest\022*\n\014def"
  "ined_sets\030\001 \003(\0132\024.gobgpapi.DefinedSet\022\"\n"
  "\010policies\030\002 \003(\0132\020.gobgpapi.Policy\022/\n\013ass"
  "ignments\030\003 \003(\0132\032.gobgpapi.PolicyAssignme"
  "nt\"A\n\024AddDefinedSetRequest\022)\n\013defined_se"
  "t\030\001 \001(\0132\024.gobgpapi.DefinedSet\"Q\n\027DeleteD"
  "efinedSetRequest\022)\n\013defined_set\030\001 \001(\0132\024."
  "gobgpapi.DefinedSet\022\013\n\003all\030\002 \001(\010\"R\n\025List"
  "DefinedSetRequest\022+\n\014defined_type\030\001 \001(\0162"
  "\025.gobgpapi.DefinedType\022\014\n\004name\030\002 \001(\t\"C\n\026"
  "ListDefinedSetResponse\022)\n\013defined_set\030\001 "
  "\001(\0132\024.gobgpapi.DefinedSet\"=\n\023AddStatemen"
  "tRequest\022&\n\tstatement\030\001 \001(\0132\023.gobgpapi.S"
  "tatement\"M\n\026DeleteStatementRequest\022&\n\tst"
  "atement\030\001 \001(\0132\023.gobgpapi.Statement\022\013\n\003al"
  "l\030\002 \001(\010\"$\n\024ListStatementRequest\022\014\n\004name\030"
  "\001 \001(\t\"\?\n\025ListStatementResponse\022&\n\tstatem"
  "ent\030\001 \001(\0132\023.gobgpapi.Statement\"L\n\032AddPol"
  "icyAssignmentRequest\022.\n\nassignment\030\001 \001(\013"
  "2\032.gobgpapi.PolicyAssignment\"\\\n\035DeletePo"
  "licyAssignmentRequest\022.\n\nassignment\030\001 \001("
  "\0132\032.gobgpapi.PolicyAssignment\022\013\n\003all\030\002 \001"
  "(\010\"Y\n\033ListPolicyAssignmentRequest\022\014\n\004nam"
  "e\030\001 \001(\t\022,\n\tdirection\030\002 \001(\0162\031.gobgpapi.Po"
  "licyDirection\"N\n\034ListPolicyAssignmentRes"
  "ponse\022.\n\nassignment\030\001 \001(\0132\032.gobgpapi.Pol"
  "icyAssignment\"L\n\032SetPolicyAssignmentRequ"
  "est\022.\n\nassignment\030\001 \001(\0132\032.gobgpapi.Polic"
  "yAssignment\"A\n\016AddRpkiRequest\022\017\n\007address"
  "\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\020\n\010lifetime\030\003 \001(\003\"2"
  "\n\021DeleteRpkiRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004"
  "port\030\002 \001(\r\"3\n\017ListRpkiRequest\022 \n\006family\030"
  "\001 \001(\0132\020.gobgpapi.Family\"2\n\020ListRpkiRespo"
  "nse\022\036\n\006server\030\001 \001(\0132\016.gobgpapi.Rpki\"2\n\021E"
  "nableRpkiRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004por"
  "t\030\002 \001(\r\"3\n\022DisableRpkiRequest\022\017\n\007address"
  "\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"\?\n\020ResetRpkiRequest"
  "\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\014\n\004soft\030"
  "\003 \001(\010\"8\n\024ListRpkiTableRequest\022 \n\006family\030"
  "\001 \001(\0132\020.gobgpapi.Family\"3\n\025ListRpkiTable"
  "Response\022\032\n\003roa\030\001 \001(\0132\r.gobgpapi.Roa\"\274\001\n"
  "\022EnableZebraRequest\022\013\n\003url\030\001 \001(\t\022\023\n\013rout"
  "e_types\030\002 \003(\t\022\017\n\007version\030\003 \001(\r\022\036\n\026nextho"
  "p_trigger_enable\030\004 \001(\010\022\035\n\025nexthop_trigge"
  "r_delay\030\005 \001(\r\022\035\n\025mpls_label_range_size\030\006"
  " \001(\r\022\025\n\rsoftware_name\030\007 \001(\t\"i\n\020EnableMrt"
  "Request\022\021\n\tdump_type\030\001 \001(\005\022\020\n\010filename\030\002"
  " \001(\t\022\025\n\rdump_interval\030\003 \001(\004\022\031\n\021rotation_"
  "interval\030\004 \001(\004\"\023\n\021DisableMrtRequest\"\353\001\n\r"
  "AddBmpRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002"
  " \001(\r\0228\n\006policy\030\003 \001(\0162(.gobgpapi.AddBmpRe"
  "quest.MonitoringPolicy\022\031\n\021StatisticsTime"
  "out\030\004 \001(\005\022\017\n\007SysName\030\005 \001(\t\022\020\n\010SysDescr\030\006"
  " \001(\t\"C\n\020MonitoringPolicy\022\007\n\003PRE\020\000\022\010\n\004POS"
  "T\020\001\022\010\n\004BOTH\020\002\022\t\n\005LOCAL\020\003\022\007\n\003ALL\020\004\"1\n\020Del"
  "eteBmpRequest\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002"
  " \001(\r\"\352\003\n\006Family\022!\n\003afi\030\001 \001(\0162\024.gobgpapi."
  "Family.Afi\022#\n\004safi\030\002 \001(\0162\025.gobgpapi.Fami"
  "ly.Safi\"^\n\003Afi\022\017\n\013AFI_UNKNOWN\020\000\022\n\n\006AFI_I"
  "P\020\001\022\013\n\007AFI_IP6\020\002\022\r\n\tAFI_L2VPN\020\031\022\014\n\006AFI_L"
  "S\020\204\200\001\022\020\n\nAFI_OPAQUE\020\215\200\001\"\267\002\n\004Safi\022\020\n\014SAFI"
  "_UNKNOWN\020\000\022\020\n\014SAFI_UNICAST\020\001\022\022\n\016SAFI_MUL"
  "TICAST\020\002\022\023\n\017SAFI_MPLS_LABEL\020\004\022\026\n\022SAFI_EN"
  "CAPSULATION\020\007\022\r\n\tSAFI_VPLS\020A\022\r\n\tSAFI_EVP"
  "N\020F\022\013\n\007SAFI_LS\020G\022\022\n\rSAFI_MPLS_VPN\020\200\001\022\034\n\027"
  "SAFI_MPLS_VPN_MULTICAST\020\201\001\022\"\n\035SAFI_ROUTE"
  "_TARGET_CONSTRAINTS\020\204\001\022\033\n\026SAFI_FLOW_SPEC"
  "_UNICAST\020\205\001\022\027\n\022SAFI_FLOW_SPEC_VPN\020\206\001\022\023\n\016"
  "SAFI_KEY_VALUE\020\361\001\"\341\002\n\nValidation\022)\n\005stat"
  "e\030\001 \001(\0162\032.gobgpapi.Validation.State\022+\n\006r"
  "eason\030\002 \001(\0162\033.gobgpapi.Validation.Reason"
  "\022\036\n\007matched\030\003 \003(\0132\r.gobgpapi.Roa\022#\n\014unma"
  "tched_as\030\004 \003(\0132\r.gobgpapi.Roa\022\'\n\020unmatch"
  "ed_length\030\005 \003(\0132\r.gobgpapi.Roa\"P\n\005State\022"
  "\016\n\nSTATE_NONE\020\000\022\023\n\017STATE_NOT_FOUND\020\001\022\017\n\013"
  "STATE_VALID\020\002\022\021\n\rSTATE_INVALID\020\003\";\n\006Reas"
  "on\022\017\n\013REASOT_NONE\020\000\022\r\n\tREASON_AS\020\001\022\021\n\rRE"
  "ASON_LENGTH\020\002\"\201\004\n\004Path\022\"\n\004nlri\030\001 \001(\0132\024.g"
  "oogle.protobuf.Any\022$\n\006pattrs\030\002 \003(\0132\024.goo"
  "gle.protobuf.Any\022\'\n\003age\030\003 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\014\n\004best\030\004 \001(\010\022\023\n\013is_wi"
  "thdraw\030\005 \001(\010\022(\n\nvalidation\030\007 \001(\0132\024.gobgp"
  "api.Validation\022\034\n\024no_implicit_withdraw\030\010"
  " \001(\010\022 \n\006family\030\t \001(\0132\020.gobgpapi.Family\022\022"
  "\n\nsource_asn\030\n \001(\r\022\021\n\tsource_id\030\013 \001(\t\022\020\n"
  "\010filtered\030\014 \001(\010\022\r\n\005stale\030\r \001(\010\022\030\n\020is_fro"
  "m_external\030\016 \001(\010\022\023\n\013neighbor_ip\030\017 \001(\t\022\014\n"
  "\004uuid\030\020 \001(\014\022\032\n\022is_nexthop_invalid\030\021 \001(\010\022"
  "\022\n\nidentifier\030\022 \001(\r\022\030\n\020local_identifier\030"
  "\023 \001(\r\022\023\n\013nlri_binary\030\024 \001(\014\022\025\n\rpattrs_bin"
  "ary\030\025 \003(\014\"<\n\013Destination\022\016\n\006prefix\030\001 \001(\t"
  "\022\035\n\005paths\030\002 \003(\0132\016.gobgpapi.Path\"W\n\021Table"
  "LookupPrefix\022\016\n\006prefix\030\001 \001(\t\0222\n\rlookup_o"
  "ption\030\002 \001(\0162\033.gobgpapi.TableLookupOption"
  "\"\255\003\n\004Peer\022+\n\014apply_policy\030\001 \001(\0132\025.gobgpa"
  "pi.ApplyPolicy\022 \n\004conf\030\002 \001(\0132\022.gobgpapi."
  "PeerConf\022-\n\rebgp_multihop\030\003 \001(\0132\026.gobgpa"
  "pi.EbgpMultihop\0221\n\017route_reflector\030\004 \001(\013"
  "2\030.gobgpapi.RouteReflector\022\"\n\005state\030\005 \001("
  "\0132\023.gobgpapi.PeerState\022 \n\006timers\030\006 \001(\0132\020"
  ".gobgpapi.Timers\022&\n\ttransport\030\007 \001(\0132\023.go"
  "bgpapi.Transport\022+\n\014route_server\030\010 \001(\0132\025"
  ".gobgpapi.RouteServer\0223\n\020graceful_restar"
  "t\030\t \001(\0132\031.gobgpapi.GracefulRestart\022$\n\taf"
  "i_safis\030\n \003(\0132\021.gobgpapi.AfiSafi\"\273\003\n\tPee"
  "rGroup\022+\n\014apply_policy\030\001 \001(\0132\025.gobgpapi."
  "ApplyPolicy\022%\n\004conf\030\002 \001(\0132\027.gobgpapi.Pee"
  "rGroupConf\022-\n\rebgp_multihop\030\003 \001(\0132\026.gobg"
  "papi.EbgpMultihop\0221\n\017route_reflector\030\004 \001"
  "(\0132\030.gobgpapi.RouteReflector\022&\n\004info\030\005 \001"
  "(\0132\030.gobgpapi.PeerGroupState\022 \n\006timers\030\006"
  " \001(\0132\020.gobgpapi.Timers\022&\n\ttransport\030\007 \001("
  "\0132\023.gobgpapi.Transport\022+\n\014route_server\030\010"
  " \001(\0132\025.gobgpapi.RouteServer\0223\n\020graceful_"
  "restart\030\t \001(\0132\031.gobgpapi.GracefulRestart"
  "\022$\n\tafi_safis\030\n \003(\0132\021.gobgpapi.AfiSafi\"5"
  "\n\017DynamicNeighbor\022\016\n\006prefix\030\001 \001(\t\022\022\n\npee"
  "r_group\030\002 \001(\t\"\242\001\n\013ApplyPolicy\022-\n\tin_poli"
  "cy\030\001 \001(\0132\032.gobgpapi.PolicyAssignment\0221\n\r"
  "export_policy\030\002 \001(\0132\032.gobgpapi.PolicyAss"
  "ignment\0221\n\rimport_policy\030\003 \001(\0132\032.gobgpap"
  "i.PolicyAssignment\"e\n\013PrefixLimit\022 \n\006fam"
  "ily\030\001 \001(\0132\020.gobgpapi.Family\022\024\n\014max_prefi"
  "xes\030\002 \001(\r\022\036\n\026shutdown_threshold_pct\030\003 \001("
  "\r\"\254\003\n\010PeerConf\022\025\n\rauth_password\030\001 \001(\t\022\023\n"
  "\013description\030\002 \001(\t\022\020\n\010local_as\030\003 \001(\r\022\030\n\020"
  "neighbor_address\030\004 \001(\t\022\017\n\007peer_as\030\005 \001(\r\022"
  "\022\n\npeer_group\030\006 \001(\t\022\021\n\tpeer_type\030\007 \001(\r\022="
  "\n\021remove_private_as\030\010 \001(\0162\".gobgpapi.Pee"
  "rConf.RemovePrivateAs\022\032\n\022route_flap_damp"
  "ing\030\t \001(\010\022\026\n\016send_community\030\n \001(\r\022\032\n\022nei"
  "ghbor_interface\030\013 \001(\t\022\013\n\003vrf\030\014 \001(\t\022\024\n\014al"
  "low_own_as\030\r \001(\r\022\027\n\017replace_peer_as\030\016 \001("
  "\010\022\022\n\nadmin_down\030\017 \001(\010\"1\n\017RemovePrivateAs"
  "\022\010\n\004NONE\020\000\022\007\n\003ALL\020\001\022\013\n\007REPLACE\020\002\"\265\002\n\rPee"
  "rGroupConf\022\025\n\rauth_password\030\001 \001(\t\022\023\n\013des"
  "cription\030\002 \001(\t\022\020\n\010local_as\030\003 \001(\r\022\017\n\007peer"
  "_as\030\004 \001(\r\022\027\n\017peer_group_name\030\005 \001(\t\022\021\n\tpe"
  "er_type\030\006 \001(\r\022B\n\021remove_private_as\030\007 \001(\016"
  "2\'.gobgpapi.PeerGroupConf.RemovePrivateA"
  "s\022\032\n\022route_flap_damping\030\010 \001(\010\022\026\n\016send_co"
  "mmunity\030\t \001(\r\"1\n\017RemovePrivateAs\022\010\n\004NONE"
  "\020\000\022\007\n\003ALL\020\001\022\013\n\007REPLACE\020\002\"\344\002\n\016PeerGroupSt"
  "ate\022\025\n\rauth_password\030\001 \001(\t\022\023\n\013descriptio"
  "n\030\002 \001(\t\022\020\n\010local_as\030\003 \001(\r\022\017\n\007peer_as\030\004 \001"
  "(\r\022\027\n\017peer_group_name\030\005 \001(\t\022\021\n\tpeer_type"
  "\030\006 \001(\r\022C\n\021remove_private_as\030\007 \001(\0162(.gobg"
  "papi.PeerGroupState.RemovePrivateAs\022\032\n\022r"
  "oute_flap_damping\030\010 \001(\010\022\026\n\016send_communit"
  "y\030\t \001(\r\022\023\n\013total_paths\030\n \001(\r\022\026\n\016total_pr"
  "efixes\030\013 \001(\r\"1\n\017RemovePrivateAs\022\010\n\004NONE\020"
  "\000\022\007\n\003ALL\020\001\022\013\n\007REPLACE\020\002\"5\n\014EbgpMultihop\022"
  "\017\n\007enabled\030\001 \001(\010\022\024\n\014multihop_ttl\030\002 \001(\r\"T"
  "\n\016RouteReflector\022\036\n\026route_reflector_clie"
  "nt\030\001 \001(\010\022\"\n\032route_reflector_cluster_id\030\002"
  " \001(\t\"\300\005\n\tPeerState\022\025\n\rauth_password\030\001 \001("
  "\t\022\023\n\013description\030\002 \001(\t\022\020\n\010local_as\030\003 \001(\r"
  "\022$\n\010messages\030\004 \001(\0132\022.gobgpapi.Messages\022\030"
  "\n\020neighbor_address\030\005 \001(\t\022\017\n\007peer_as\030\006 \001("
  "\r\022\022\n\npeer_group\030\007 \001(\t\022\021\n\tpeer_type\030\010 \001(\r"
  "\022 \n\006queues\030\t \001(\0132\020.gobgpapi.Queues\022\031\n\021re"
  "move_private_as\030\n \001(\r\022\032\n\022route_flap_damp"
  "ing\030\013 \001(\010\022\026\n\016send_community\030\014 \001(\r\0227\n\rses"
  "sion_state\030\r \001(\0162 .gobgpapi.PeerState.Se"
  "ssionState\0223\n\013admin_state\030\017 \001(\0162\036.gobgpa"
  "pi.PeerState.AdminState\022\r\n\005out_q\030\020 \001(\r\022\r"
  "\n\005flops\030\021 \001(\r\022(\n\nremote_cap\030\022 \003(\0132\024.goog"
  "le.protobuf.Any\022\'\n\tlocal_cap\030\023 \003(\0132\024.goo"
  "gle.protobuf.Any\022\021\n\trouter_id\030\024 \001(\t\"n\n\014S"
  "essionState\022\013\n\007UNKNOWN\020\000\022\010\n\004IDLE\020\001\022\013\n\007CO"
  "NNECT\020\002\022\n\n\006ACTIVE\020\003\022\014\n\010OPENSENT\020\004\022\017\n\013OPE"
  "NCONFIRM\020\005\022\017\n\013ESTABLISHED\020\006\"*\n\nAdminStat"
  "e\022\006\n\002UP\020\000\022\010\n\004DOWN\020\001\022\n\n\006PFX_CT\020\002\"P\n\010Messa"
  "ges\022#\n\010received\030\001 \001(\0132\021.gobgpapi.Message"
  "\022\037\n\004sent\030\002 \001(\0132\021.gobgpapi.Message\"\265\001\n\007Me"
  "ssage\022\024\n\014notification\030\001 \001(\004\022\016\n\006update\030\002 "
  "\001(\004\022\014\n\004open\030\003 \001(\004\022\021\n\tkeepalive\030\004 \001(\004\022\017\n\007"
  "refresh\030\005 \001(\004\022\021\n\tdiscarded\030\006 \001(\004\022\r\n\005tota"
  "l\030\007 \001(\004\022\027\n\017withdraw_update\030\010 \001(\004\022\027\n\017with"
  "draw_prefix\030\t \001(\004\"\'\n\006Queues\022\r\n\005input\030\001 \001"
  "(\r\022\016\n\006output\030\002 \001(\r\"V\n\006Timers\022&\n\006config\030\001"
  " \001(\0132\026.gobgpapi.TimersConfig\022$\n\005state\030\002 "
  "\001(\0132\025.gobgpapi.TimersState\"\240\001\n\014TimersCon"
  "fig\022\025\n\rconnect_retry\030\001 \001(\004\022\021\n\thold_time\030"
  "\002 \001(\004\022\032\n\022keepalive_interval\030\003 \001(\004\022&\n\036min"
  "imum_advertisement_interval\030\004 \001(\004\022\"\n\032idl"
  "e_hold_time_after_reset\030\005 \001(\004\"\363\001\n\013Timers"
  "State\022\025\n\rconnect_retry\030\001 \001(\004\022\021\n\thold_tim"
  "e\030\002 \001(\004\022\032\n\022keepalive_interval\030\003 \001(\004\022&\n\036m"
  "inimum_advertisement_interval\030\004 \001(\004\022\034\n\024n"
  "egotiated_hold_time\030\005 \001(\004\022*\n\006uptime\030\006 \001("
  "\0132\032.google.protobuf.Timestamp\022,\n\010downtim"
  "e\030\007 \001(\0132\032.google.protobuf.Timestamp\"\271\001\n\t"
  "Transport\022\025\n\rlocal_address\030\001 \001(\t\022\022\n\nloca"
  "l_port\030\002 \001(\r\022\025\n\rmtu_discovery\030\003 \001(\010\022\024\n\014p"
  "assive_mode\030\004 \001(\010\022\026\n\016remote_address\030\005 \001("
  "\t\022\023\n\013remote_port\030\006 \001(\r\022\017\n\007tcp_mss\030\007 \001(\r\022"
  "\026\n\016bind_interface\030\010 \001(\t\"C\n\013RouteServer\022\033"
  "\n\023route_server_client\030\001 \001(\010\022\027\n\017secondary"
  "_route\030\002 \001(\010\"\224\002\n\017GracefulRestart\022\017\n\007enab"
  "led\030\001 \001(\010\022\024\n\014restart_time\030\002 \001(\r\022\023\n\013helpe"
  "r_only\030\003 \001(\010\022\025\n\rdeferral_time\030\004 \001(\r\022\034\n\024n"
  "otification_enabled\030\005 \001(\010\022\031\n\021longlived_e"
  "nabled\030\006 \001(\010\022\031\n\021stale_routes_time\030\007 \001(\r\022"
  "\031\n\021peer_restart_time\030\010 \001(\r\022\027\n\017peer_resta"
  "rting\030\t \001(\010\022\030\n\020local_restarting\030\n \001(\010\022\014\n"
  "\004mode\030\013 \001(\t\"*\n\027MpGracefulRestartConfig\022\017"
  "\n\007enabled\030\001 \001(\010\"\205\001\n\026MpGracefulRestartSta"
  "te\022\017\n\007enabled\030\001 \001(\010\022\020\n\010received\030\002 \001(\010\022\022\n"
  "\nadvertised\030\003 \001(\010\022\033\n\023end_of_rib_received"
  "\030\004 \001(\010\022\027\n\017end_of_rib_sent\030\005 \001(\010\"w\n\021MpGra"
  "cefulRestart\0221\n\006config\030\001 \001(\0132!.gobgpapi."
  "MpGracefulRestartConfig\022/\n\005state\030\002 \001(\0132 "
  ".gobgpapi.MpGracefulRestartState\"B\n\rAfiS"
  "afiConfig\022 \n\006family\030\001 \001(\0132\020.gobgpapi.Fam"
  "ily\022\017\n\007enabled\030\002 \001(\010\"y\n\014AfiSafiState\022 \n\006"
  "family\030\001 \001(\0132\020.gobgpapi.Family\022\017\n\007enable"
  "d\030\002 \001(\010\022\020\n\010received\030\003 \001(\004\022\020\n\010accepted\030\004 "
  "\001(\004\022\022\n\nadvertised\030\005 \001(\004\"\375\001\n\033RouteSelecti"
  "onOptionsConfig\022\032\n\022always_compare_med\030\001 "
  "\001(\010\022\035\n\025ignore_as_path_length\030\002 \001(\010\022\"\n\032ex"
  "ternal_compare_router_id\030\003 \001(\010\022!\n\031advert"
  "ise_inactive_routes\030\004 \001(\010\022\023\n\013enable_aigp"
  "\030\005 \001(\010\022\"\n\032ignore_next_hop_igp_metric\030\006 \001"
  "(\010\022#\n\033disable_best_path_selection\030\007 \001(\010\""
  "\374\001\n\032RouteSelectionOptionsState\022\032\n\022always"
  "_compare_med\030\001 \001(\010\022\035\n\025ignore_as_path_len"
  "gth\030\002 \001(\010\022\"\n\032external_compare_router_id\030"
  "\003 \001(\010\022!\n\031advertise_inactive_routes\030\004 \001(\010"
  "\022\023\n\013enable_aigp\030\005 \001(\010\022\"\n\032ignore_next_hop"
  "_igp_metric\030\006 \001(\010\022#\n\033disable_best_path_s"
  "election\030\007 \001(\010\"\203\001\n\025RouteSelectionOptions"
  "\0225\n\006config\030\001 \001(\0132%.gobgpapi.RouteSelecti"
  "onOptionsConfig\0223\n\005state\030\002 \001(\0132$.gobgpap"
  "i.RouteSelectionOptionsState\")\n\026UseMulti"
  "plePathsConfig\022\017\n\007enabled\030\001 \001(\010\"(\n\025UseMu"
  "ltiplePathsState\022\017\n\007enabled\030\001 \001(\010\">\n\nEbg"
  "pConfig\022\031\n\021allow_multiple_as\030\001 \001(\010\022\025\n\rma"
  "ximum_paths\030\002 \001(\r\"=\n\tEbgpState\022\031\n\021allow_"
  "multiple_as\030\001 \001(\010\022\025\n\rmaximum_paths\030\002 \001(\r"
  "\"P\n\004Ebgp\022$\n\006config\030\001 \001(\0132\024.gobgpapi.Ebgp"
  "Config\022\"\n\005state\030\002 \001(\0132\023.gobgpapi.EbgpSta"
  "te\"#\n\nIbgpConfig\022\025\n\rmaximum_paths\030\001 \001(\r\""
  "\"\n\tIbgpState\022\025\n\rmaximum_paths\030\001 \001(\r\"P\n\004I"
  "bgp\022$\n\006config\030\001 \001(\0132\024.gobgpapi.IbgpConfi"
  "g\022\"\n\005state\030\002 \001(\0132\023.gobgpapi.IbgpState\"\260\001"
  "\n\020UseMultiplePaths\0220\n\006config\030\001 \001(\0132 .gob"
  "gpapi.UseMultiplePathsConfig\022.\n\005state\030\002 "
  "\001(\0132\037.gobgpapi.UseMultiplePathsState\022\034\n\004"
  "ebgp\030\003 \001(\0132\016.gobgpapi.Ebgp\022\034\n\004ibgp\030\004 \001(\013"
  "2\016.gobgpapi.Ibgp\"4\n\033RouteTargetMembershi"
  "pConfig\022\025\n\rdeferral_time\030\001 \001(\r\"3\n\032RouteT"
  "argetMembershipState\022\025\n\rdeferral_time\030\001 "
  "\001(\r\"\203\001\n\025RouteTargetMembership\0225\n\006config\030"
  "\001 \001(\0132%.gobgpapi.RouteTargetMembershipCo"
  "nfig\0223\n\005state\030\002 \001(\0132$.gobgpapi.RouteTarg"
  "etMembershipState\"G\n\036LongLivedGracefulRe"
  "startConfig\022\017\n\007enabled\030\001 \001(\010\022\024\n\014restart_"
  "time\030\002 \001(\r\"\225\001\n\035LongLivedGracefulRestartS"
  "tate\022\017\n\007enabled\030\001 \001(\010\022\020\n\010received\030\002 \001(\010\022"
  "\022\n\nadvertised\030\003 \001(\010\022\031\n\021peer_restart_time"
  "\030\004 \001(\r\022\"\n\032peer_restart_timer_expired\030\005 \001"
  "(\010\"\214\001\n\030LongLivedGracefulRestart\0228\n\006confi"
  "g\030\001 \001(\0132(.gobgpapi.LongLivedGracefulRest"
  "artConfig\0226\n\005state\030\002 \001(\0132\'.gobgpapi.Long"
  "LivedGracefulRestartState\"\232\004\n\007AfiSafi\0228\n"
  "\023mp_graceful_restart\030\001 \001(\0132\033.gobgpapi.Mp"
  "GracefulRestart\022\'\n\006config\030\002 \001(\0132\027.gobgpa"
  "pi.AfiSafiConfig\022%\n\005state\030\003 \001(\0132\026.gobgpa"
  "pi.AfiSafiState\022+\n\014apply_policy\030\004 \001(\0132\025."
  "gobgpapi.ApplyPolicy\022@\n\027route_selection_"
  "options\030\005 \001(\0132\037.gobgpapi.RouteSelectionO"
  "ptions\0226\n\022use_multiple_paths\030\006 \001(\0132\032.gob"
  "gpapi.UseMultiplePaths\022,\n\rprefix_limits\030"
  "\007 \001(\0132\025.gobgpapi.PrefixLimit\022@\n\027route_ta"
  "rget_membership\030\010 \001(\0132\037.gobgpapi.RouteTa"
  "rgetMembership\022G\n\033long_lived_graceful_re"
  "start\030\t \001(\0132\".gobgpapi.LongLivedGraceful"
  "Restart\022%\n\tadd_paths\030\n \001(\0132\022.gobgpapi.Ad"
  "dPaths\"3\n\016AddPathsConfig\022\017\n\007receive\030\001 \001("
  "\010\022\020\n\010send_max\030\002 \001(\r\"2\n\rAddPathsState\022\017\n\007"
  "receive\030\001 \001(\010\022\020\n\010send_max\030\002 \001(\r\"\\\n\010AddPa"
  "ths\022(\n\006config\030\001 \001(\0132\030.gobgpapi.AddPathsC"
  "onfig\022&\n\005state\030\002 \001(\0132\027.gobgpapi.AddPaths"
  "State\"M\n\006Prefix\022\021\n\tip_prefix\030\001 \001(\t\022\027\n\017ma"
  "sk_length_min\030\002 \001(\r\022\027\n\017mask_length_max\030\003"
  " \001(\r\"y\n\nDefinedSet\022+\n\014defined_type\030\001 \001(\016"
  "2\025.gobgpapi.DefinedType\022\014\n\004name\030\002 \001(\t\022\014\n"
  "\004list\030\003 \003(\t\022\"\n\010prefixes\030\004 \003(\0132\020.gobgpapi"
  ".Prefix\"A\n\010MatchSet\022\'\n\nmatch_type\030\001 \001(\0162"
  "\023.gobgpapi.MatchType\022\014\n\004name\030\002 \001(\t\"O\n\014As"
  "PathLength\022/\n\013length_type\030\001 \001(\0162\032.gobgpa"
  "pi.AsPathLengthType\022\016\n\006length\030\002 \001(\r\"\266\004\n\n"
  "Conditions\022&\n\nprefix_set\030\001 \001(\0132\022.gobgpap"
  "i.MatchSet\022(\n\014neighbor_set\030\002 \001(\0132\022.gobgp"
  "api.MatchSet\022.\n\016as_path_length\030\003 \001(\0132\026.g"
  "obgpapi.AsPathLength\022\'\n\013as_path_set\030\004 \001("
  "\0132\022.gobgpapi.MatchSet\022)\n\rcommunity_set\030\005"
  " \001(\0132\022.gobgpapi.MatchSet\022-\n\021ext_communit"
  "y_set\030\006 \001(\0132\022.gobgpapi.MatchSet\022\023\n\013rpki_"
  "result\030\007 \001(\005\0222\n\nroute_type\030\010 \001(\0162\036.gobgp"
  "api.Conditions.RouteType\022/\n\023large_commun"
  "ity_set\030\t \001(\0132\022.gobgpapi.MatchSet\022\030\n\020nex"
  "t_hop_in_list\030\n \003(\t\022%\n\013afi_safi_in\030\013 \003(\013"
  "2\020.gobgpapi.Family\"h\n\tRouteType\022\023\n\017ROUTE"
  "_TYPE_NONE\020\000\022\027\n\023ROUTE_TYPE_INTERNAL\020\001\022\027\n"
  "\023ROUTE_TYPE_EXTERNAL\020\002\022\024\n\020ROUTE_TYPE_LOC"
  "AL\020\003\"Z\n\017CommunityAction\0222\n\013action_type\030\001"
  " \001(\0162\035.gobgpapi.CommunityActionType\022\023\n\013c"
  "ommunities\030\002 \003(\t\"H\n\tMedAction\022,\n\013action_"
  "type\030\001 \001(\0162\027.gobgpapi.MedActionType\022\r\n\005v"
  "alue\030\002 \001(\003\"E\n\017AsPrependAction\022\013\n\003asn\030\001 \001"
  "(\r\022\016\n\006repeat\030\002 \001(\r\022\025\n\ruse_left_most\030\003 \001("
  "\010\".\n\rNexthopAction\022\017\n\007address\030\001 \001(\t\022\014\n\004s"
  "elf\030\002 \001(\010\" \n\017LocalPrefAction\022\r\n\005value\030\001 "
  "\001(\r\"\364\002\n\007Actions\022+\n\014route_action\030\001 \001(\0162\025."
  "gobgpapi.RouteAction\022,\n\tcommunity\030\002 \001(\0132"
  "\031.gobgpapi.CommunityAction\022 \n\003med\030\003 \001(\0132"
  "\023.gobgpapi.MedAction\022-\n\nas_prepend\030\004 \001(\013"
  "2\031.gobgpapi.AsPrependAction\0220\n\rext_commu"
  "nity\030\005 \001(\0132\031.gobgpapi.CommunityAction\022(\n"
  "\007nexthop\030\006 \001(\0132\027.gobgpapi.NexthopAction\022"
  "-\n\nlocal_pref\030\007 \001(\0132\031.gobgpapi.LocalPref"
  "Action\0222\n\017large_community\030\010 \001(\0132\031.gobgpa"
  "pi.CommunityAction\"g\n\tStatement\022\014\n\004name\030"
  "\001 \001(\t\022(\n\nconditions\030\002 \001(\0132\024.gobgpapi.Con"
  "ditions\022\"\n\007actions\030\003 \001(\0132\021.gobgpapi.Acti"
  "ons\"\?\n\006Policy\022\014\n\004name\030\001 \001(\t\022\'\n\nstatement"
  "s\030\002 \003(\0132\023.gobgpapi.Statement\"\241\001\n\020PolicyA"
  "ssignment\022\014\n\004name\030\001 \001(\t\022,\n\tdirection\030\002 \001"
  "(\0162\031.gobgpapi.PolicyDirection\022\"\n\010policie"
  "s\030\004 \003(\0132\020.gobgpapi.Policy\022-\n\016default_act"
  "ion\030\005 \001(\0162\025.gobgpapi.RouteAction\"_\n\rRout"
  "ingPolicy\022*\n\014defined_sets\030\001 \003(\0132\024.gobgpa"
  "pi.DefinedSet\022\"\n\010policies\030\002 \003(\0132\020.gobgpa"
  "pi.Policy\"f\n\003Roa\022\n\n\002as\030\001 \001(\r\022\021\n\tprefixle"
  "n\030\002 \001(\r\022\016\n\006maxlen\030\003 \001(\r\022\016\n\006prefix\030\004 \001(\t\022"
  " \n\004conf\030\005 \001(\0132\022.gobgpapi.RPKIConf\"\223\001\n\003Vr"
  "f\022\014\n\004name\030\001 \001(\t\022 \n\002rd\030\002 \001(\0132\024.google.pro"
  "tobuf.Any\022\'\n\timport_rt\030\003 \003(\0132\024.google.pr"
  "otobuf.Any\022\'\n\texport_rt\030\004 \003(\0132\024.google.p"
  "rotobuf.Any\022\n\n\002id\030\005 \001(\r\"X\n\024DefaultRouteD"
  "istance\022\037\n\027external_route_distance\030\001 \001(\r"
  "\022\037\n\027internal_route_distance\030\002 \001(\r\"\236\003\n\006Gl"
  "obal\022\n\n\002as\030\001 \001(\r\022\021\n\trouter_id\030\002 \001(\t\022\023\n\013l"
  "isten_port\030\003 \001(\005\022\030\n\020listen_addresses\030\004 \003"
  "(\t\022\020\n\010families\030\005 \003(\r\022\032\n\022use_multiple_pat"
  "hs\030\006 \001(\010\022F\n\027route_selection_options\030\007 \001("
  "\0132%.gobgpapi.RouteSelectionOptionsConfig"
  "\022>\n\026default_route_distance\030\010 \001(\0132\036.gobgp"
  "api.DefaultRouteDistance\022.\n\rconfederatio"
  "n\030\t \001(\0132\027.gobgpapi.Confederation\0223\n\020grac"
  "eful_restart\030\n \001(\0132\031.gobgpapi.GracefulRe"
  "start\022+\n\014apply_policy\030\013 \001(\0132\025.gobgpapi.A"
  "pplyPolicy\"L\n\rConfederation\022\017\n\007enabled\030\001"
  " \001(\010\022\022\n\nidentifier\030\002 \001(\r\022\026\n\016member_as_li"
  "st\030\003 \003(\r\"0\n\010RPKIConf\022\017\n\007address\030\001 \001(\t\022\023\n"
  "\013remote_port\030\002 \001(\r\"\226\003\n\tRPKIState\022*\n\006upti"
  "me\030\001 \001(\0132\032.google.protobuf.Timestamp\022,\n\010"
  "downtime\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\n\n\002up\030\003 \001(\010\022\023\n\013record_ipv4\030\004 \001(\r\022\023\n\013r"
  "ecord_ipv6\030\005 \001(\r\022\023\n\013prefix_ipv4\030\006 \001(\r\022\023\n"
  "\013prefix_ipv6\030\007 \001(\r\022\016\n\006serial\030\010 \001(\r\022\025\n\rre"
  "ceived_ipv4\030\t \001(\003\022\025\n\rreceived_ipv6\030\n \001(\003"
  "\022\025\n\rserial_notify\030\013 \001(\003\022\023\n\013cache_reset\030\014"
  " \001(\003\022\026\n\016cache_response\030\r \001(\003\022\023\n\013end_of_d"
  "ata\030\016 \001(\003\022\r\n\005error\030\017 \001(\003\022\024\n\014serial_query"
  "\030\020 \001(\003\022\023\n\013reset_query\030\021 \001(\003\"L\n\004Rpki\022 \n\004c"
  "onf\030\001 \001(\0132\022.gobgpapi.RPKIConf\022\"\n\005state\030\002"
  " \001(\0132\023.gobgpapi.RPKIState*D\n\tTableType\022\n"
  "\n\006GLOBAL\020\000\022\t\n\005LOCAL\020\001\022\n\n\006ADJ_IN\020\002\022\013\n\007ADJ"
  "_OUT\020\003\022\007\n\003VRF\020\004*L\n\021TableLookupOption\022\020\n\014"
  "LOOKUP_EXACT\020\000\022\021\n\rLOOKUP_LONGER\020\001\022\022\n\016LOO"
  "KUP_SHORTER\020\002*\202\001\n\013DefinedType\022\n\n\006PREFIX\020"
  "\000\022\014\n\010NEIGHBOR\020\001\022\007\n\003TAG\020\002\022\013\n\007AS_PATH\020\003\022\r\n"
  "\tCOMMUNITY\020\004\022\021\n\rEXT_COMMUNITY\020\005\022\023\n\017LARGE"
  "_COMMUNITY\020\006\022\014\n\010NEXT_HOP\020\007*)\n\tMatchType\022"
  "\007\n\003ANY\020\000\022\007\n\003ALL\020\001\022\n\n\006INVERT\020\002**\n\020AsPathL"
  "engthType\022\006\n\002EQ\020\000\022\006\n\002GE\020\001\022\006\n\002LE\020\002*/\n\013Rou"
  "teAction\022\010\n\004NONE\020\000\022\n\n\006ACCEPT\020\001\022\n\n\006REJECT"
  "\020\002*U\n\023CommunityActionType\022\021\n\rCOMMUNITY_A"
  "DD\020\000\022\024\n\020COMMUNITY_REMOVE\020\001\022\025\n\021COMMUNITY_"
  "REPLACE\020\002*-\n\rMedActionType\022\013\n\007MED_MOD\020\000\022"
  "\017\n\013MED_REPLACE\020\001*6\n\017PolicyDirection\022\013\n\007U"
  "NKNOWN\020\000\022\n\n\006IMPORT\020\001\022\n\n\006EXPORT\020\0022\327\034\n\010Gob"
  "gpApi\022=\n\010StartBgp\022\031.gobgpapi.StartBgpReq"
  "uest\032\026.google.protobuf.Empty\022;\n\007StopBgp\022"
  "\030.gobgpapi.StopBgpRequest\032\026.google.proto"
  "buf.Empty\022;\n\006GetBgp\022\027.gobgpapi.GetBgpReq"
  "uest\032\030.gobgpapi.GetBgpResponse\022;\n\007AddPee"
  "r\022\030.gobgpapi.AddPeerRequest\032\026.google.pro"
  "tobuf.Empty\022A\n\nDeletePeer\022\033.gobgpapi.Del"
  "etePeerRequest\032\026.google.protobuf.Empty\022C"
  "\n\010ListPeer\022\031.gobgpapi.ListPeerRequest\032\032."
  "gobgpapi.ListPeerResponse0\001\022G\n\nUpdatePee"
  "r\022\033.gobgpapi.UpdatePeerRequest\032\034.gobgpap"
  "i.UpdatePeerResponse\022\?\n\tResetPeer\022\032.gobg"
  "papi.ResetPeerRequest\032\026.google.protobuf."
  "Empty\022E\n\014ShutdownPeer\022\035.gobgpapi.Shutdow"
  "nPeerRequest\032\026.google.protobuf.Empty\022A\n\n"
  "EnablePeer\022\033.gobgpapi.EnablePeerRequest\032"
  "\026.google.protobuf.Empty\022C\n\013DisablePeer\022\034"
  ".gobgpapi.DisablePeerRequest\032\026.google.pr"
  "otobuf.Empty\022L\n\013MonitorPeer\022\034.gobgpapi.M"
  "onitorPeerRequest\032\035.gobgpapi.MonitorPeer"
  "Response0\001\022E\n\014AddPeerGroup\022\035.gobgpapi.Ad"
  "dPeerGroupRequest\032\026.google.protobuf.Empt"
  "y\022K\n\017DeletePeerGroup\022 .gobgpapi.DeletePe"
  "erGroupRequest\032\026.google.protobuf.Empty\022V"
  "\n\017UpdatePeerGroup\022 .gobgpapi.UpdatePeerG"
  "roupRequest\032!.gobgpapi.UpdatePeerGroupRe"
  "sponse\022Q\n\022AddDynamicNeighbor\022#.gobgpapi."
  "AddDynamicNeighborRequest\032\026.google.proto"
  "buf.Empty\022>\n\007AddPath\022\030.gobgpapi.AddPathR"
  "equest\032\031.gobgpapi.AddPathResponse\022A\n\nDel"
  "etePath\022\033.gobgpapi.DeletePathRequest\032\026.g"
  "oogle.protobuf.Empty\022C\n\010ListPath\022\031.gobgp"
  "api.ListPathRequest\032\032.gobgpapi.ListPathR"
  "esponse0\001\022I\n\rAddPathStream\022\036.gobgpapi.Ad"
  "dPathStreamRequest\032\026.google.protobuf.Emp"
  "ty(\001\022A\n\010GetTable\022\031.gobgpapi.GetTableRequ"
  "est\032\032.gobgpapi.GetTableResponse\022O\n\014Monit"
  "orTable\022\035.gobgpapi.MonitorTableRequest\032\036"
  ".gobgpapi.MonitorTableResponse0\001\0229\n\006AddV"
  "rf\022\027.gobgpapi.AddVrfRequest\032\026.google.pro"
  "tobuf.Empty\022\?\n\tDeleteVrf\022\032.gobgpapi.Dele"
  "teVrfRequest\032\026.google.protobuf.Empty\022@\n\007"
  "ListVrf\022\030.gobgpapi.ListVrfRequest\032\031.gobg"
  "papi.ListVrfResponse0\001\022\?\n\tAddPolicy\022\032.go"
  "bgpapi.AddPolicyRequest\032\026.google.protobu"
  "f.Empty\022E\n\014DeletePolicy\022\035.gobgpapi.Delet"
  "ePolicyRequest\032\026.google.protobuf.Empty\022I"
  "\n\nListPolicy\022\033.gobgpapi.ListPolicyReques"
  "t\032\034.gobgpapi.ListPolicyResponse0\001\022C\n\013Set"
  "Policies\022\034.gobgpapi.SetPoliciesRequest\032\026"
  ".google.protobuf.Empty\022G\n\rAddDefinedSet\022"
  "\036.gobgpapi.AddDefinedSetRequest\032\026.google"
  ".protobuf.Empty\022M\n\020DeleteDefinedSet\022!.go"
  "bgpapi.DeleteDefinedSetRequest\032\026.google."
  "protobuf.Empty\022U\n\016ListDefinedSet\022\037.gobgp"
  "api.ListDefinedSetRequest\032 .gobgpapi.Lis"
  "tDefinedSetResponse0\001\022E\n\014AddStatement\022\035."
  "gobgpapi.AddStatementRequest\032\026.google.pr"
  "otobuf.Empty\022K\n\017DeleteStatement\022 .gobgpa"
  "pi.DeleteStatementRequest\032\026.google.proto"
  "buf.Empty\022R\n\rListStatement\022\036.gobgpapi.Li"
  "stStatementRequest\032\037.gobgpapi.ListStatem"
  "entResponse0\001\022S\n\023AddPolicyAssignment\022$.g"
  "obgpapi.AddPolicyAssignmentRequest\032\026.goo"
  "gle.protobuf.Empty\022Y\n\026DeletePolicyAssign"
  "ment\022\'.gobgpapi.DeletePolicyAssignmentRe"
  "quest\032\026.google.protobuf.Empty\022g\n\024ListPol"
  "icyAssignment\022%.gobgpapi.ListPolicyAssig"
  "nmentRequest\032&.gobgpapi.ListPolicyAssign"
  "mentResponse0\001\022S\n\023SetPolicyAssignment\022$."
  "gobgpapi.SetPolicyAssignmentRequest\032\026.go"
  "ogle.protobuf.Empty\022;\n\007AddRpki\022\030.gobgpap"
  "i.AddRpkiRequest\032\026.google.protobuf.Empty"
  "\022A\n\nDeleteRpki\022\033.gobgpapi.DeleteRpkiRequ"
  "est\032\026.google.protobuf.Empty\022C\n\010ListRpki\022"
  "\031.gobgpapi.ListRpkiRequest\032\032.gobgpapi.Li"
  "stRpkiResponse0\001\022A\n\nEnableRpki\022\033.gobgpap"
  "i.EnableRpkiRequest\032\026.google.protobuf.Em"
  "pty\022C\n\013DisableRpki\022\034.gobgpapi.DisableRpk"
  "iRequest\032\026.google.protobuf.Empty\022\?\n\tRese"
  "tRpki\022\032.gobgpapi.ResetRpkiRequest\032\026.goog"
  "le.protobuf.Empty\022R\n\rListRpkiTable\022\036.gob"
  "gpapi.ListRpkiTableRequest\032\037.gobgpapi.Li"
  "stRpkiTableResponse0\001\022C\n\013EnableZebra\022\034.g"
  "obgpapi.EnableZebraRequest\032\026.google.prot"
  "obuf.Empty\022\?\n\tEnableMrt\022\032.gobgpapi.Enabl"
  "eMrtRequest\032\026.google.protobuf.Empty\022A\n\nD"
  "isableMrt\022\033.gobgpapi.DisableMrtRequest\032\026"
  ".google.protobuf.Empty\0229\n\006AddBmp\022\027.gobgp"
  "api.AddBmpRequest\032\026.google.protobuf.Empt"
  "y\022\?\n\tDeleteBmp\022\032.gobgpapi.DeleteBmpReque"
  "st\032\026.google.protobuf.Emptyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gobgp_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gobgp_2eproto_sccs[142] = {
  &scc_info_Actions_gobgp_2eproto.base,
  &scc_info_AddBmpRequest_gobgp_2eproto.base,
  &scc_info_AddDefinedSetRequest_gobgp_2eproto.base,
  &scc_info_AddDynamicNeighborRequest_gobgp_2eproto.base,
  &scc_info_AddPathRequest_gobgp_2eproto.base,
  &scc_info_AddPathResponse_gobgp_2eproto.base,
  &scc_info_AddPathStreamRequest_gobgp_2eproto.base,
  &scc_info_AddPaths_gobgp_2eproto.base,
  &scc_info_AddPathsConfig_gobgp_2eproto.base,
  &scc_info_AddPathsState_gobgp_2eproto.base,
  &scc_info_AddPeerGroupRequest_gobgp_2eproto.base,
  &scc_info_AddPeerRequest_gobgp_2eproto.base,
  &scc_info_AddPolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_AddPolicyRequest_gobgp_2eproto.base,
  &scc_info_AddRpkiRequest_gobgp_2eproto.base,
  &scc_info_AddStatementRequest_gobgp_2eproto.base,
  &scc_info_AddVrfRequest_gobgp_2eproto.base,
  &scc_info_AfiSafi_gobgp_2eproto.base,
  &scc_info_AfiSafiConfig_gobgp_2eproto.base,
  &scc_info_AfiSafiState_gobgp_2eproto.base,
  &scc_info_ApplyPolicy_gobgp_2eproto.base,
  &scc_info_AsPathLength_gobgp_2eproto.base,
  &scc_info_AsPrependAction_gobgp_2eproto.base,
  &scc_info_CommunityAction_gobgp_2eproto.base,
  &scc_info_Conditions_gobgp_2eproto.base,
  &scc_info_Confederation_gobgp_2eproto.base,
  &scc_info_DefaultRouteDistance_gobgp_2eproto.base,
  &scc_info_DefinedSet_gobgp_2eproto.base,
  &scc_info_DeleteBmpRequest_gobgp_2eproto.base,
  &scc_info_DeleteDefinedSetRequest_gobgp_2eproto.base,
  &scc_info_DeletePathRequest_gobgp_2eproto.base,
  &scc_info_DeletePeerGroupRequest_gobgp_2eproto.base,
  &scc_info_DeletePeerRequest_gobgp_2eproto.base,
  &scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_DeletePolicyRequest_gobgp_2eproto.base,
  &scc_info_DeleteRpkiRequest_gobgp_2eproto.base,
  &scc_info_DeleteStatementRequest_gobgp_2eproto.base,
  &scc_info_DeleteVrfRequest_gobgp_2eproto.base,
  &scc_info_Destination_gobgp_2eproto.base,
  &scc_info_DisableMrtRequest_gobgp_2eproto.base,
  &scc_info_DisablePeerRequest_gobgp_2eproto.base,
  &scc_info_DisableRpkiRequest_gobgp_2eproto.base,
  &scc_info_DynamicNeighbor_gobgp_2eproto.base,
  &scc_info_Ebgp_gobgp_2eproto.base,
  &scc_info_EbgpConfig_gobgp_2eproto.base,
  &scc_info_EbgpMultihop_gobgp_2eproto.base,
  &scc_info_EbgpState_gobgp_2eproto.base,
  &scc_info_EnableMrtRequest_gobgp_2eproto.base,
  &scc_info_EnablePeerRequest_gobgp_2eproto.base,
  &scc_info_EnableRpkiRequest_gobgp_2eproto.base,
  &scc_info_EnableZebraRequest_gobgp_2eproto.base,
  &scc_info_Family_gobgp_2eproto.base,
  &scc_info_GetBgpRequest_gobgp_2eproto.base,
  &scc_info_GetBgpResponse_gobgp_2eproto.base,
  &scc_info_GetTableRequest_gobgp_2eproto.base,
  &scc_info_GetTableResponse_gobgp_2eproto.base,
  &scc_info_Global_gobgp_2eproto.base,
  &scc_info_GracefulRestart_gobgp_2eproto.base,
  &scc_info_Ibgp_gobgp_2eproto.base,
  &scc_info_IbgpConfig_gobgp_2eproto.base,
  &scc_info_IbgpState_gobgp_2eproto.base,
  &scc_info_ListDefinedSetRequest_gobgp_2eproto.base,
  &scc_info_ListDefinedSetResponse_gobgp_2eproto.base,
  &scc_info_ListPathRequest_gobgp_2eproto.base,
  &scc_info_ListPathResponse_gobgp_2eproto.base,
  &scc_info_ListPeerRequest_gobgp_2eproto.base,
  &scc_info_ListPeerResponse_gobgp_2eproto.base,
  &scc_info_ListPolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_ListPolicyAssignmentResponse_gobgp_2eproto.base,
  &scc_info_ListPolicyRequest_gobgp_2eproto.base,
  &scc_info_ListPolicyResponse_gobgp_2eproto.base,
  &scc_info_ListRpkiRequest_gobgp_2eproto.base,
  &scc_info_ListRpkiResponse_gobgp_2eproto.base,
  &scc_info_ListRpkiTableRequest_gobgp_2eproto.base,
  &scc_info_ListRpkiTableResponse_gobgp_2eproto.base,
  &scc_info_ListStatementRequest_gobgp_2eproto.base,
  &scc_info_ListStatementResponse_gobgp_2eproto.base,
  &scc_info_ListVrfRequest_gobgp_2eproto.base,
  &scc_info_ListVrfResponse_gobgp_2eproto.base,
  &scc_info_LocalPrefAction_gobgp_2eproto.base,
  &scc_info_LongLivedGracefulRestart_gobgp_2eproto.base,
  &scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto.base,
  &scc_info_LongLivedGracefulRestartState_gobgp_2eproto.base,
  &scc_info_MatchSet_gobgp_2eproto.base,
  &scc_info_MedAction_gobgp_2eproto.base,
  &scc_info_Message_gobgp_2eproto.base,
  &scc_info_Messages_gobgp_2eproto.base,
  &scc_info_MonitorPeerRequest_gobgp_2eproto.base,
  &scc_info_MonitorPeerResponse_gobgp_2eproto.base,
  &scc_info_MonitorTableRequest_gobgp_2eproto.base,
  &scc_info_MonitorTableResponse_gobgp_2eproto.base,
  &scc_info_MpGracefulRestart_gobgp_2eproto.base,
  &scc_info_MpGracefulRestartConfig_gobgp_2eproto.base,
  &scc_info_MpGracefulRestartState_gobgp_2eproto.base,
  &scc_info_NexthopAction_gobgp_2eproto.base,
  &scc_info_Path_gobgp_2eproto.base,
  &scc_info_Peer_gobgp_2eproto.base,
  &scc_info_PeerConf_gobgp_2eproto.base,
  &scc_info_PeerGroup_gobgp_2eproto.base,
  &scc_info_PeerGroupConf_gobgp_2eproto.base,
  &scc_info_PeerGroupState_gobgp_2eproto.base,
  &scc_info_PeerState_gobgp_2eproto.base,
  &scc_info_Policy_gobgp_2eproto.base,
  &scc_info_PolicyAssignment_gobgp_2eproto.base,
  &scc_info_Prefix_gobgp_2eproto.base,
  &scc_info_PrefixLimit_gobgp_2eproto.base,
  &scc_info_Queues_gobgp_2eproto.base,
  &scc_info_RPKIConf_gobgp_2eproto.base,
  &scc_info_RPKIState_gobgp_2eproto.base,
  &scc_info_ResetPeerRequest_gobgp_2eproto.base,
  &scc_info_ResetRpkiRequest_gobgp_2eproto.base,
  &scc_info_Roa_gobgp_2eproto.base,
  &scc_info_RouteReflector_gobgp_2eproto.base,
  &scc_info_RouteSelectionOptions_gobgp_2eproto.base,
  &scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base,
  &scc_info_RouteSelectionOptionsState_gobgp_2eproto.base,
  &scc_info_RouteServer_gobgp_2eproto.base,
  &scc_info_RouteTargetMembership_gobgp_2eproto.base,
  &scc_info_RouteTargetMembershipConfig_gobgp_2eproto.base,
  &scc_info_RouteTargetMembershipState_gobgp_2eproto.base,
  &scc_info_RoutingPolicy_gobgp_2eproto.base,
  &scc_info_Rpki_gobgp_2eproto.base,
  &scc_info_SetPoliciesRequest_gobgp_2eproto.base,
  &scc_info_SetPolicyAssignmentRequest_gobgp_2eproto.base,
  &scc_info_ShutdownPeerRequest_gobgp_2eproto.base,
  &scc_info_StartBgpRequest_gobgp_2eproto.base,
  &scc_info_Statement_gobgp_2eproto.base,
  &scc_info_StopBgpRequest_gobgp_2eproto.base,
  &scc_info_TableLookupPrefix_gobgp_2eproto.base,
  &scc_info_Timers_gobgp_2eproto.base,
  &scc_info_TimersConfig_gobgp_2eproto.base,
  &scc_info_TimersState_gobgp_2eproto.base,
  &scc_info_Transport_gobgp_2eproto.base,
  &scc_info_UpdatePeerGroupRequest_gobgp_2eproto.base,
  &scc_info_UpdatePeerGroupResponse_gobgp_2eproto.base,
  &scc_info_UpdatePeerRequest_gobgp_2eproto.base,
  &scc_info_UpdatePeerResponse_gobgp_2eproto.base,
  &scc_info_UseMultiplePaths_gobgp_2eproto.base,
  &scc_info_UseMultiplePathsConfig_gobgp_2eproto.base,
  &scc_info_UseMultiplePathsState_gobgp_2eproto.base,
  &scc_info_Validation_gobgp_2eproto.base,
  &scc_info_Vrf_gobgp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gobgp_2eproto_once;
static bool descriptor_table_gobgp_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gobgp_2eproto = {
  &descriptor_table_gobgp_2eproto_initialized, descriptor_table_protodef_gobgp_2eproto, "gobgp.proto", 22034,
  &descriptor_table_gobgp_2eproto_once, descriptor_table_gobgp_2eproto_sccs, descriptor_table_gobgp_2eproto_deps, 142, 3,
  schemas, file_default_instances, TableStruct_gobgp_2eproto::offsets,
  file_level_metadata_gobgp_2eproto, 142, file_level_enum_descriptors_gobgp_2eproto, file_level_service_descriptors_gobgp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gobgp_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gobgp_2eproto), true);
namespace gobgpapi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResetPeerRequest_SoftResetDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[0];
}
bool ResetPeerRequest_SoftResetDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::IN;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::OUT;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::BOTH;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::SoftResetDirection_MIN;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest::SoftResetDirection_MAX;
constexpr int ResetPeerRequest::SoftResetDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListPathRequest_SortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[1];
}
bool ListPathRequest_SortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ListPathRequest_SortType ListPathRequest::NONE;
constexpr ListPathRequest_SortType ListPathRequest::PREFIX;
constexpr ListPathRequest_SortType ListPathRequest::SortType_MIN;
constexpr ListPathRequest_SortType ListPathRequest::SortType_MAX;
constexpr int ListPathRequest::SortType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddBmpRequest_MonitoringPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[2];
}
bool AddBmpRequest_MonitoringPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::PRE;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::POST;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::BOTH;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::LOCAL;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::ALL;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::MonitoringPolicy_MIN;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest::MonitoringPolicy_MAX;
constexpr int AddBmpRequest::MonitoringPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Family_Afi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[3];
}
bool Family_Afi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 25:
    case 16388:
    case 16397:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Family_Afi Family::AFI_UNKNOWN;
constexpr Family_Afi Family::AFI_IP;
constexpr Family_Afi Family::AFI_IP6;
constexpr Family_Afi Family::AFI_L2VPN;
constexpr Family_Afi Family::AFI_LS;
constexpr Family_Afi Family::AFI_OPAQUE;
constexpr Family_Afi Family::Afi_MIN;
constexpr Family_Afi Family::Afi_MAX;
constexpr int Family::Afi_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Family_Safi_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[4];
}
bool Family_Safi_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
    case 65:
    case 70:
    case 71:
    case 128:
    case 129:
    case 132:
    case 133:
    case 134:
    case 241:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Family_Safi Family::SAFI_UNKNOWN;
constexpr Family_Safi Family::SAFI_UNICAST;
constexpr Family_Safi Family::SAFI_MULTICAST;
constexpr Family_Safi Family::SAFI_MPLS_LABEL;
constexpr Family_Safi Family::SAFI_ENCAPSULATION;
constexpr Family_Safi Family::SAFI_VPLS;
constexpr Family_Safi Family::SAFI_EVPN;
constexpr Family_Safi Family::SAFI_LS;
constexpr Family_Safi Family::SAFI_MPLS_VPN;
constexpr Family_Safi Family::SAFI_MPLS_VPN_MULTICAST;
constexpr Family_Safi Family::SAFI_ROUTE_TARGET_CONSTRAINTS;
constexpr Family_Safi Family::SAFI_FLOW_SPEC_UNICAST;
constexpr Family_Safi Family::SAFI_FLOW_SPEC_VPN;
constexpr Family_Safi Family::SAFI_KEY_VALUE;
constexpr Family_Safi Family::Safi_MIN;
constexpr Family_Safi Family::Safi_MAX;
constexpr int Family::Safi_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Validation_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[5];
}
bool Validation_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Validation_State Validation::STATE_NONE;
constexpr Validation_State Validation::STATE_NOT_FOUND;
constexpr Validation_State Validation::STATE_VALID;
constexpr Validation_State Validation::STATE_INVALID;
constexpr Validation_State Validation::State_MIN;
constexpr Validation_State Validation::State_MAX;
constexpr int Validation::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Validation_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[6];
}
bool Validation_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Validation_Reason Validation::REASOT_NONE;
constexpr Validation_Reason Validation::REASON_AS;
constexpr Validation_Reason Validation::REASON_LENGTH;
constexpr Validation_Reason Validation::Reason_MIN;
constexpr Validation_Reason Validation::Reason_MAX;
constexpr int Validation::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerConf_RemovePrivateAs_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[7];
}
bool PeerConf_RemovePrivateAs_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerConf_RemovePrivateAs PeerConf::NONE;
constexpr PeerConf_RemovePrivateAs PeerConf::ALL;
constexpr PeerConf_RemovePrivateAs PeerConf::REPLACE;
constexpr PeerConf_RemovePrivateAs PeerConf::RemovePrivateAs_MIN;
constexpr PeerConf_RemovePrivateAs PeerConf::RemovePrivateAs_MAX;
constexpr int PeerConf::RemovePrivateAs_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerGroupConf_RemovePrivateAs_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[8];
}
bool PeerGroupConf_RemovePrivateAs_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerGroupConf_RemovePrivateAs PeerGroupConf::NONE;
constexpr PeerGroupConf_RemovePrivateAs PeerGroupConf::ALL;
constexpr PeerGroupConf_RemovePrivateAs PeerGroupConf::REPLACE;
constexpr PeerGroupConf_RemovePrivateAs PeerGroupConf::RemovePrivateAs_MIN;
constexpr PeerGroupConf_RemovePrivateAs PeerGroupConf::RemovePrivateAs_MAX;
constexpr int PeerGroupConf::RemovePrivateAs_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerGroupState_RemovePrivateAs_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[9];
}
bool PeerGroupState_RemovePrivateAs_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerGroupState_RemovePrivateAs PeerGroupState::NONE;
constexpr PeerGroupState_RemovePrivateAs PeerGroupState::ALL;
constexpr PeerGroupState_RemovePrivateAs PeerGroupState::REPLACE;
constexpr PeerGroupState_RemovePrivateAs PeerGroupState::RemovePrivateAs_MIN;
constexpr PeerGroupState_RemovePrivateAs PeerGroupState::RemovePrivateAs_MAX;
constexpr int PeerGroupState::RemovePrivateAs_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_SessionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[10];
}
bool PeerState_SessionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerState_SessionState PeerState::UNKNOWN;
constexpr PeerState_SessionState PeerState::IDLE;
constexpr PeerState_SessionState PeerState::CONNECT;
constexpr PeerState_SessionState PeerState::ACTIVE;
constexpr PeerState_SessionState PeerState::OPENSENT;
constexpr PeerState_SessionState PeerState::OPENCONFIRM;
constexpr PeerState_SessionState PeerState::ESTABLISHED;
constexpr PeerState_SessionState PeerState::SessionState_MIN;
constexpr PeerState_SessionState PeerState::SessionState_MAX;
constexpr int PeerState::SessionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_AdminState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[11];
}
bool PeerState_AdminState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerState_AdminState PeerState::UP;
constexpr PeerState_AdminState PeerState::DOWN;
constexpr PeerState_AdminState PeerState::PFX_CT;
constexpr PeerState_AdminState PeerState::AdminState_MIN;
constexpr PeerState_AdminState PeerState::AdminState_MAX;
constexpr int PeerState::AdminState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Conditions_RouteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[12];
}
bool Conditions_RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_NONE;
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_INTERNAL;
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_EXTERNAL;
constexpr Conditions_RouteType Conditions::ROUTE_TYPE_LOCAL;
constexpr Conditions_RouteType Conditions::RouteType_MIN;
constexpr Conditions_RouteType Conditions::RouteType_MAX;
constexpr int Conditions::RouteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[13];
}
bool TableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableLookupOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[14];
}
bool TableLookupOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DefinedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[15];
}
bool DefinedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[16];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AsPathLengthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[17];
}
bool AsPathLengthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouteAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[18];
}
bool RouteAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunityActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[19];
}
bool CommunityActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MedActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[20];
}
bool MedActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gobgp_2eproto);
  return file_level_enum_descriptors_gobgp_2eproto[21];
}
bool PolicyDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StartBgpRequest::InitAsDefaultInstance() {
  ::gobgpapi::_StartBgpRequest_default_instance_._instance.get_mutable()->global_ = const_cast< ::gobgpapi::Global*>(
      ::gobgpapi::Global::internal_default_instance());
}
class StartBgpRequest::_Internal {
 public:
  static const ::gobgpapi::Global& global(const StartBgpRequest* msg);
};

const ::gobgpapi::Global&
StartBgpRequest::_Internal::global(const StartBgpRequest* msg) {
  return *msg->global_;
}
StartBgpRequest::StartBgpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.StartBgpRequest)
}
StartBgpRequest::StartBgpRequest(const StartBgpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_global()) {
    global_ = new ::gobgpapi::Global(*from.global_);
  } else {
    global_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.StartBgpRequest)
}

void StartBgpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartBgpRequest_gobgp_2eproto.base);
  global_ = nullptr;
}

StartBgpRequest::~StartBgpRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.StartBgpRequest)
  SharedDtor();
}

void StartBgpRequest::SharedDtor() {
  if (this != internal_default_instance()) delete global_;
}

void StartBgpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartBgpRequest& StartBgpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartBgpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void StartBgpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.StartBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StartBgpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Global global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartBgpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.StartBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::global(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.StartBgpRequest)
  return target;
}

size_t StartBgpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.StartBgpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartBgpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.StartBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartBgpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartBgpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.StartBgpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.StartBgpRequest)
    MergeFrom(*source);
  }
}

void StartBgpRequest::MergeFrom(const StartBgpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.StartBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_global()) {
    _internal_mutable_global()->::gobgpapi::Global::MergeFrom(from._internal_global());
  }
}

void StartBgpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.StartBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartBgpRequest::CopyFrom(const StartBgpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.StartBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartBgpRequest::IsInitialized() const {
  return true;
}

void StartBgpRequest::InternalSwap(StartBgpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(global_, other->global_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartBgpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopBgpRequest::InitAsDefaultInstance() {
}
class StopBgpRequest::_Internal {
 public:
};

StopBgpRequest::StopBgpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.StopBgpRequest)
}
StopBgpRequest::StopBgpRequest(const StopBgpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.StopBgpRequest)
}

void StopBgpRequest::SharedCtor() {
}

StopBgpRequest::~StopBgpRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.StopBgpRequest)
  SharedDtor();
}

void StopBgpRequest::SharedDtor() {
}

void StopBgpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopBgpRequest& StopBgpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopBgpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void StopBgpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.StopBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StopBgpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopBgpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.StopBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.StopBgpRequest)
  return target;
}

size_t StopBgpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.StopBgpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopBgpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.StopBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopBgpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopBgpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.StopBgpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.StopBgpRequest)
    MergeFrom(*source);
  }
}

void StopBgpRequest::MergeFrom(const StopBgpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.StopBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopBgpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.StopBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopBgpRequest::CopyFrom(const StopBgpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.StopBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopBgpRequest::IsInitialized() const {
  return true;
}

void StopBgpRequest::InternalSwap(StopBgpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopBgpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBgpRequest::InitAsDefaultInstance() {
}
class GetBgpRequest::_Internal {
 public:
};

GetBgpRequest::GetBgpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetBgpRequest)
}
GetBgpRequest::GetBgpRequest(const GetBgpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetBgpRequest)
}

void GetBgpRequest::SharedCtor() {
}

GetBgpRequest::~GetBgpRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetBgpRequest)
  SharedDtor();
}

void GetBgpRequest::SharedDtor() {
}

void GetBgpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBgpRequest& GetBgpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBgpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetBgpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetBgpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBgpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetBgpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetBgpRequest)
  return target;
}

size_t GetBgpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetBgpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBgpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBgpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBgpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetBgpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetBgpRequest)
    MergeFrom(*source);
  }
}

void GetBgpRequest::MergeFrom(const GetBgpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetBgpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetBgpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBgpRequest::CopyFrom(const GetBgpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetBgpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBgpRequest::IsInitialized() const {
  return true;
}

void GetBgpRequest::InternalSwap(GetBgpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBgpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBgpResponse::InitAsDefaultInstance() {
  ::gobgpapi::_GetBgpResponse_default_instance_._instance.get_mutable()->global_ = const_cast< ::gobgpapi::Global*>(
      ::gobgpapi::Global::internal_default_instance());
}
class GetBgpResponse::_Internal {
 public:
  static const ::gobgpapi::Global& global(const GetBgpResponse* msg);
};

const ::gobgpapi::Global&
GetBgpResponse::_Internal::global(const GetBgpResponse* msg) {
  return *msg->global_;
}
GetBgpResponse::GetBgpResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetBgpResponse)
}
GetBgpResponse::GetBgpResponse(const GetBgpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_global()) {
    global_ = new ::gobgpapi::Global(*from.global_);
  } else {
    global_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetBgpResponse)
}

void GetBgpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBgpResponse_gobgp_2eproto.base);
  global_ = nullptr;
}

GetBgpResponse::~GetBgpResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetBgpResponse)
  SharedDtor();
}

void GetBgpResponse::SharedDtor() {
  if (this != internal_default_instance()) delete global_;
}

void GetBgpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBgpResponse& GetBgpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBgpResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetBgpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetBgpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetBgpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Global global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBgpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetBgpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::global(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetBgpResponse)
  return target;
}

size_t GetBgpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetBgpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Global global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *global_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBgpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetBgpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBgpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBgpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetBgpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetBgpResponse)
    MergeFrom(*source);
  }
}

void GetBgpResponse::MergeFrom(const GetBgpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetBgpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_global()) {
    _internal_mutable_global()->::gobgpapi::Global::MergeFrom(from._internal_global());
  }
}

void GetBgpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetBgpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBgpResponse::CopyFrom(const GetBgpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetBgpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBgpResponse::IsInitialized() const {
  return true;
}

void GetBgpResponse::InternalSwap(GetBgpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(global_, other->global_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBgpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPeerRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPeerRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::gobgpapi::Peer*>(
      ::gobgpapi::Peer::internal_default_instance());
}
class AddPeerRequest::_Internal {
 public:
  static const ::gobgpapi::Peer& peer(const AddPeerRequest* msg);
};

const ::gobgpapi::Peer&
AddPeerRequest::_Internal::peer(const AddPeerRequest* msg) {
  return *msg->peer_;
}
AddPeerRequest::AddPeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPeerRequest)
}
AddPeerRequest::AddPeerRequest(const AddPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::gobgpapi::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPeerRequest)
}

void AddPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPeerRequest_gobgp_2eproto.base);
  peer_ = nullptr;
}

AddPeerRequest::~AddPeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPeerRequest)
  SharedDtor();
}

void AddPeerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void AddPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPeerRequest& AddPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPeerRequest)
  return target;
}

size_t AddPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPeerRequest)
    MergeFrom(*source);
  }
}

void AddPeerRequest::MergeFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::gobgpapi::Peer::MergeFrom(from._internal_peer());
  }
}

void AddPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerRequest::CopyFrom(const AddPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerRequest::IsInitialized() const {
  return true;
}

void AddPeerRequest::InternalSwap(AddPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePeerRequest::InitAsDefaultInstance() {
}
class DeletePeerRequest::_Internal {
 public:
};

DeletePeerRequest::DeletePeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePeerRequest)
}
DeletePeerRequest::DeletePeerRequest(const DeletePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface().empty()) {
    interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePeerRequest)
}

void DeletePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePeerRequest::~DeletePeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePeerRequest)
  SharedDtor();
}

void DeletePeerRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePeerRequest& DeletePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeletePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DeletePeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DeletePeerRequest.interface"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeletePeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string interface = 2;
  if (this->interface().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface().data(), static_cast<int>(this->_internal_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeletePeerRequest.interface");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePeerRequest)
  return target;
}

size_t DeletePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string interface = 2;
  if (this->interface().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePeerRequest)
    MergeFrom(*source);
  }
}

void DeletePeerRequest::MergeFrom(const DeletePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.interface().size() > 0) {

    interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_);
  }
}

void DeletePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePeerRequest::CopyFrom(const DeletePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePeerRequest::IsInitialized() const {
  return true;
}

void DeletePeerRequest::InternalSwap(DeletePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interface_.Swap(&other->interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeerRequest::InitAsDefaultInstance() {
}
class ListPeerRequest::_Internal {
 public:
};

ListPeerRequest::ListPeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPeerRequest)
}
ListPeerRequest::ListPeerRequest(const ListPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  enableadvertised_ = from.enableadvertised_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPeerRequest)
}

void ListPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enableadvertised_ = false;
}

ListPeerRequest::~ListPeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPeerRequest)
  SharedDtor();
}

void ListPeerRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeerRequest& ListPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enableadvertised_ = false;
  _internal_metadata_.Clear();
}

const char* ListPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ListPeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enableAdvertised = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enableadvertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ListPeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool enableAdvertised = 2;
  if (this->enableadvertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enableadvertised(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPeerRequest)
  return target;
}

size_t ListPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool enableAdvertised = 2;
  if (this->enableadvertised() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPeerRequest)
    MergeFrom(*source);
  }
}

void ListPeerRequest::MergeFrom(const ListPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.enableadvertised() != 0) {
    _internal_set_enableadvertised(from._internal_enableadvertised());
  }
}

void ListPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeerRequest::CopyFrom(const ListPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeerRequest::IsInitialized() const {
  return true;
}

void ListPeerRequest::InternalSwap(ListPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enableadvertised_, other->enableadvertised_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeerResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListPeerResponse_default_instance_._instance.get_mutable()->peer_ = const_cast< ::gobgpapi::Peer*>(
      ::gobgpapi::Peer::internal_default_instance());
}
class ListPeerResponse::_Internal {
 public:
  static const ::gobgpapi::Peer& peer(const ListPeerResponse* msg);
};

const ::gobgpapi::Peer&
ListPeerResponse::_Internal::peer(const ListPeerResponse* msg) {
  return *msg->peer_;
}
ListPeerResponse::ListPeerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPeerResponse)
}
ListPeerResponse::ListPeerResponse(const ListPeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::gobgpapi::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPeerResponse)
}

void ListPeerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPeerResponse_gobgp_2eproto.base);
  peer_ = nullptr;
}

ListPeerResponse::~ListPeerResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPeerResponse)
  SharedDtor();
}

void ListPeerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void ListPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeerResponse& ListPeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeerResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListPeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPeerResponse)
  return target;
}

size_t ListPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPeerResponse)
    MergeFrom(*source);
  }
}

void ListPeerResponse::MergeFrom(const ListPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::gobgpapi::Peer::MergeFrom(from._internal_peer());
  }
}

void ListPeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeerResponse::CopyFrom(const ListPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeerResponse::IsInitialized() const {
  return true;
}

void ListPeerResponse::InternalSwap(ListPeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerRequest::InitAsDefaultInstance() {
  ::gobgpapi::_UpdatePeerRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::gobgpapi::Peer*>(
      ::gobgpapi::Peer::internal_default_instance());
}
class UpdatePeerRequest::_Internal {
 public:
  static const ::gobgpapi::Peer& peer(const UpdatePeerRequest* msg);
};

const ::gobgpapi::Peer&
UpdatePeerRequest::_Internal::peer(const UpdatePeerRequest* msg) {
  return *msg->peer_;
}
UpdatePeerRequest::UpdatePeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UpdatePeerRequest)
}
UpdatePeerRequest::UpdatePeerRequest(const UpdatePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::gobgpapi::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  do_soft_reset_in_ = from.do_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UpdatePeerRequest)
}

void UpdatePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePeerRequest_gobgp_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_soft_reset_in_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(do_soft_reset_in_));
}

UpdatePeerRequest::~UpdatePeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.UpdatePeerRequest)
  SharedDtor();
}

void UpdatePeerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void UpdatePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerRequest& UpdatePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UpdatePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  do_soft_reset_in_ = false;
  _internal_metadata_.Clear();
}

const char* UpdatePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool do_soft_reset_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          do_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UpdatePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_do_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UpdatePeerRequest)
  return target;
}

size_t UpdatePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UpdatePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UpdatePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UpdatePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UpdatePeerRequest)
    MergeFrom(*source);
  }
}

void UpdatePeerRequest::MergeFrom(const UpdatePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UpdatePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::gobgpapi::Peer::MergeFrom(from._internal_peer());
  }
  if (from.do_soft_reset_in() != 0) {
    _internal_set_do_soft_reset_in(from._internal_do_soft_reset_in());
  }
}

void UpdatePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UpdatePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerRequest::CopyFrom(const UpdatePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UpdatePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerRequest::IsInitialized() const {
  return true;
}

void UpdatePeerRequest::InternalSwap(UpdatePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
  swap(do_soft_reset_in_, other->do_soft_reset_in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerResponse::InitAsDefaultInstance() {
}
class UpdatePeerResponse::_Internal {
 public:
};

UpdatePeerResponse::UpdatePeerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UpdatePeerResponse)
}
UpdatePeerResponse::UpdatePeerResponse(const UpdatePeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  needs_soft_reset_in_ = from.needs_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UpdatePeerResponse)
}

void UpdatePeerResponse::SharedCtor() {
  needs_soft_reset_in_ = false;
}

UpdatePeerResponse::~UpdatePeerResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.UpdatePeerResponse)
  SharedDtor();
}

void UpdatePeerResponse::SharedDtor() {
}

void UpdatePeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerResponse& UpdatePeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UpdatePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needs_soft_reset_in_ = false;
  _internal_metadata_.Clear();
}

const char* UpdatePeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool needs_soft_reset_in = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          needs_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UpdatePeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_needs_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UpdatePeerResponse)
  return target;
}

size_t UpdatePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UpdatePeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UpdatePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UpdatePeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UpdatePeerResponse)
    MergeFrom(*source);
  }
}

void UpdatePeerResponse::MergeFrom(const UpdatePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UpdatePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.needs_soft_reset_in() != 0) {
    _internal_set_needs_soft_reset_in(from._internal_needs_soft_reset_in());
  }
}

void UpdatePeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UpdatePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerResponse::CopyFrom(const UpdatePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UpdatePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerResponse::IsInitialized() const {
  return true;
}

void UpdatePeerResponse::InternalSwap(UpdatePeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(needs_soft_reset_in_, other->needs_soft_reset_in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetPeerRequest::InitAsDefaultInstance() {
}
class ResetPeerRequest::_Internal {
 public:
};

ResetPeerRequest::ResetPeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ResetPeerRequest)
}
ResetPeerRequest::ResetPeerRequest(const ResetPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_communication().empty()) {
    communication_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
  ::memcpy(&soft_, &from.soft_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&soft_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ResetPeerRequest)
}

void ResetPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetPeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&soft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&soft_)) + sizeof(direction_));
}

ResetPeerRequest::~ResetPeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ResetPeerRequest)
  SharedDtor();
}

void ResetPeerRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetPeerRequest& ResetPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ResetPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ResetPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&soft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&soft_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

const char* ResetPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ResetPeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string communication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_communication();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ResetPeerRequest.communication"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool soft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          soft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.ResetPeerRequest.SoftResetDirection direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::gobgpapi::ResetPeerRequest_SoftResetDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ResetPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetPeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_communication().data(), static_cast<int>(this->_internal_communication().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetPeerRequest.communication");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_communication(), target);
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_soft(), target);
  }

  // .gobgpapi.ResetPeerRequest.SoftResetDirection direction = 4;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ResetPeerRequest)
  return target;
}

size_t ResetPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ResetPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_communication());
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    total_size += 1 + 1;
  }

  // .gobgpapi.ResetPeerRequest.SoftResetDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ResetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ResetPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ResetPeerRequest)
    MergeFrom(*source);
  }
}

void ResetPeerRequest::MergeFrom(const ResetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ResetPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.communication().size() > 0) {

    communication_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
  if (from.soft() != 0) {
    _internal_set_soft(from._internal_soft());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void ResetPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ResetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPeerRequest::CopyFrom(const ResetPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ResetPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPeerRequest::IsInitialized() const {
  return true;
}

void ResetPeerRequest::InternalSwap(ResetPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  communication_.Swap(&other->communication_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(soft_, other->soft_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutdownPeerRequest::InitAsDefaultInstance() {
}
class ShutdownPeerRequest::_Internal {
 public:
};

ShutdownPeerRequest::ShutdownPeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ShutdownPeerRequest)
}
ShutdownPeerRequest::ShutdownPeerRequest(const ShutdownPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_communication().empty()) {
    communication_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ShutdownPeerRequest)
}

void ShutdownPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShutdownPeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShutdownPeerRequest::~ShutdownPeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ShutdownPeerRequest)
  SharedDtor();
}

void ShutdownPeerRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShutdownPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownPeerRequest& ShutdownPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ShutdownPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ShutdownPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ShutdownPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ShutdownPeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string communication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_communication();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ShutdownPeerRequest.communication"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ShutdownPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ShutdownPeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_communication().data(), static_cast<int>(this->_internal_communication().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ShutdownPeerRequest.communication");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_communication(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ShutdownPeerRequest)
  return target;
}

size_t ShutdownPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ShutdownPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_communication());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ShutdownPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ShutdownPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ShutdownPeerRequest)
    MergeFrom(*source);
  }
}

void ShutdownPeerRequest::MergeFrom(const ShutdownPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ShutdownPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.communication().size() > 0) {

    communication_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
}

void ShutdownPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ShutdownPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPeerRequest::CopyFrom(const ShutdownPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ShutdownPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPeerRequest::IsInitialized() const {
  return true;
}

void ShutdownPeerRequest::InternalSwap(ShutdownPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  communication_.Swap(&other->communication_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnablePeerRequest::InitAsDefaultInstance() {
}
class EnablePeerRequest::_Internal {
 public:
};

EnablePeerRequest::EnablePeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnablePeerRequest)
}
EnablePeerRequest::EnablePeerRequest(const EnablePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnablePeerRequest)
}

void EnablePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnablePeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EnablePeerRequest::~EnablePeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnablePeerRequest)
  SharedDtor();
}

void EnablePeerRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnablePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnablePeerRequest& EnablePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnablePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnablePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EnablePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EnablePeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnablePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnablePeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnablePeerRequest)
  return target;
}

size_t EnablePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnablePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnablePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnablePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnablePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnablePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnablePeerRequest)
    MergeFrom(*source);
  }
}

void EnablePeerRequest::MergeFrom(const EnablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void EnablePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnablePeerRequest::CopyFrom(const EnablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnablePeerRequest::IsInitialized() const {
  return true;
}

void EnablePeerRequest::InternalSwap(EnablePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EnablePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisablePeerRequest::InitAsDefaultInstance() {
}
class DisablePeerRequest::_Internal {
 public:
};

DisablePeerRequest::DisablePeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisablePeerRequest)
}
DisablePeerRequest::DisablePeerRequest(const DisablePeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_communication().empty()) {
    communication_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisablePeerRequest)
}

void DisablePeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisablePeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisablePeerRequest::~DisablePeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisablePeerRequest)
  SharedDtor();
}

void DisablePeerRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisablePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisablePeerRequest& DisablePeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisablePeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DisablePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  communication_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DisablePeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DisablePeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string communication = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_communication();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DisablePeerRequest.communication"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisablePeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisablePeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisablePeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_communication().data(), static_cast<int>(this->_internal_communication().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisablePeerRequest.communication");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_communication(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisablePeerRequest)
  return target;
}

size_t DisablePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisablePeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string communication = 2;
  if (this->communication().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_communication());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisablePeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisablePeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisablePeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisablePeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisablePeerRequest)
    MergeFrom(*source);
  }
}

void DisablePeerRequest::MergeFrom(const DisablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisablePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.communication().size() > 0) {

    communication_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.communication_);
  }
}

void DisablePeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisablePeerRequest::CopyFrom(const DisablePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisablePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisablePeerRequest::IsInitialized() const {
  return true;
}

void DisablePeerRequest::InternalSwap(DisablePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  communication_.Swap(&other->communication_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisablePeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitorPeerRequest::InitAsDefaultInstance() {
}
class MonitorPeerRequest::_Internal {
 public:
};

MonitorPeerRequest::MonitorPeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MonitorPeerRequest)
}
MonitorPeerRequest::MonitorPeerRequest(const MonitorPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MonitorPeerRequest)
}

void MonitorPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorPeerRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_ = false;
}

MonitorPeerRequest::~MonitorPeerRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.MonitorPeerRequest)
  SharedDtor();
}

void MonitorPeerRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MonitorPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorPeerRequest& MonitorPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorPeerRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MonitorPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MonitorPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_ = false;
  _internal_metadata_.Clear();
}

const char* MonitorPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.MonitorPeerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MonitorPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MonitorPeerRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool current = 2;
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_current(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MonitorPeerRequest)
  return target;
}

size_t MonitorPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MonitorPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool current = 2;
  if (this->current() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MonitorPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MonitorPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MonitorPeerRequest)
    MergeFrom(*source);
  }
}

void MonitorPeerRequest::MergeFrom(const MonitorPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MonitorPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
}

void MonitorPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MonitorPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorPeerRequest::CopyFrom(const MonitorPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MonitorPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorPeerRequest::IsInitialized() const {
  return true;
}

void MonitorPeerRequest::InternalSwap(MonitorPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(current_, other->current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitorPeerResponse::InitAsDefaultInstance() {
  ::gobgpapi::_MonitorPeerResponse_default_instance_._instance.get_mutable()->peer_ = const_cast< ::gobgpapi::Peer*>(
      ::gobgpapi::Peer::internal_default_instance());
}
class MonitorPeerResponse::_Internal {
 public:
  static const ::gobgpapi::Peer& peer(const MonitorPeerResponse* msg);
};

const ::gobgpapi::Peer&
MonitorPeerResponse::_Internal::peer(const MonitorPeerResponse* msg) {
  return *msg->peer_;
}
MonitorPeerResponse::MonitorPeerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MonitorPeerResponse)
}
MonitorPeerResponse::MonitorPeerResponse(const MonitorPeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::gobgpapi::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MonitorPeerResponse)
}

void MonitorPeerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorPeerResponse_gobgp_2eproto.base);
  peer_ = nullptr;
}

MonitorPeerResponse::~MonitorPeerResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.MonitorPeerResponse)
  SharedDtor();
}

void MonitorPeerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void MonitorPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorPeerResponse& MonitorPeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorPeerResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MonitorPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MonitorPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MonitorPeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Peer peer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorPeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MonitorPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MonitorPeerResponse)
  return target;
}

size_t MonitorPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MonitorPeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorPeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MonitorPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorPeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorPeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MonitorPeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MonitorPeerResponse)
    MergeFrom(*source);
  }
}

void MonitorPeerResponse::MergeFrom(const MonitorPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MonitorPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    _internal_mutable_peer()->::gobgpapi::Peer::MergeFrom(from._internal_peer());
  }
}

void MonitorPeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MonitorPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorPeerResponse::CopyFrom(const MonitorPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MonitorPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorPeerResponse::IsInitialized() const {
  return true;
}

void MonitorPeerResponse::InternalSwap(MonitorPeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorPeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPeerGroupRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPeerGroupRequest_default_instance_._instance.get_mutable()->peer_group_ = const_cast< ::gobgpapi::PeerGroup*>(
      ::gobgpapi::PeerGroup::internal_default_instance());
}
class AddPeerGroupRequest::_Internal {
 public:
  static const ::gobgpapi::PeerGroup& peer_group(const AddPeerGroupRequest* msg);
};

const ::gobgpapi::PeerGroup&
AddPeerGroupRequest::_Internal::peer_group(const AddPeerGroupRequest* msg) {
  return *msg->peer_group_;
}
AddPeerGroupRequest::AddPeerGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPeerGroupRequest)
}
AddPeerGroupRequest::AddPeerGroupRequest(const AddPeerGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_peer_group()) {
    peer_group_ = new ::gobgpapi::PeerGroup(*from.peer_group_);
  } else {
    peer_group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPeerGroupRequest)
}

void AddPeerGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPeerGroupRequest_gobgp_2eproto.base);
  peer_group_ = nullptr;
}

AddPeerGroupRequest::~AddPeerGroupRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPeerGroupRequest)
  SharedDtor();
}

void AddPeerGroupRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_group_;
}

void AddPeerGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPeerGroupRequest& AddPeerGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPeerGroupRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPeerGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_group_ != nullptr) {
    delete peer_group_;
  }
  peer_group_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddPeerGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.PeerGroup peer_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPeerGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPeerGroupRequest)
  return target;
}

size_t AddPeerGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPeerGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPeerGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPeerGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPeerGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPeerGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPeerGroupRequest)
    MergeFrom(*source);
  }
}

void AddPeerGroupRequest::MergeFrom(const AddPeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_group()) {
    _internal_mutable_peer_group()->::gobgpapi::PeerGroup::MergeFrom(from._internal_peer_group());
  }
}

void AddPeerGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPeerGroupRequest::CopyFrom(const AddPeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPeerGroupRequest::IsInitialized() const {
  return true;
}

void AddPeerGroupRequest::InternalSwap(AddPeerGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_group_, other->peer_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPeerGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePeerGroupRequest::InitAsDefaultInstance() {
}
class DeletePeerGroupRequest::_Internal {
 public:
};

DeletePeerGroupRequest::DeletePeerGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePeerGroupRequest)
}
DeletePeerGroupRequest::DeletePeerGroupRequest(const DeletePeerGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePeerGroupRequest)
}

void DeletePeerGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePeerGroupRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePeerGroupRequest::~DeletePeerGroupRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePeerGroupRequest)
  SharedDtor();
}

void DeletePeerGroupRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePeerGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePeerGroupRequest& DeletePeerGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePeerGroupRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePeerGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeletePeerGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DeletePeerGroupRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePeerGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeletePeerGroupRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePeerGroupRequest)
  return target;
}

size_t DeletePeerGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePeerGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePeerGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePeerGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePeerGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePeerGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePeerGroupRequest)
    MergeFrom(*source);
  }
}

void DeletePeerGroupRequest::MergeFrom(const DeletePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeletePeerGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePeerGroupRequest::CopyFrom(const DeletePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePeerGroupRequest::IsInitialized() const {
  return true;
}

void DeletePeerGroupRequest::InternalSwap(DeletePeerGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePeerGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerGroupRequest::InitAsDefaultInstance() {
  ::gobgpapi::_UpdatePeerGroupRequest_default_instance_._instance.get_mutable()->peer_group_ = const_cast< ::gobgpapi::PeerGroup*>(
      ::gobgpapi::PeerGroup::internal_default_instance());
}
class UpdatePeerGroupRequest::_Internal {
 public:
  static const ::gobgpapi::PeerGroup& peer_group(const UpdatePeerGroupRequest* msg);
};

const ::gobgpapi::PeerGroup&
UpdatePeerGroupRequest::_Internal::peer_group(const UpdatePeerGroupRequest* msg) {
  return *msg->peer_group_;
}
UpdatePeerGroupRequest::UpdatePeerGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UpdatePeerGroupRequest)
}
UpdatePeerGroupRequest::UpdatePeerGroupRequest(const UpdatePeerGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_peer_group()) {
    peer_group_ = new ::gobgpapi::PeerGroup(*from.peer_group_);
  } else {
    peer_group_ = nullptr;
  }
  do_soft_reset_in_ = from.do_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UpdatePeerGroupRequest)
}

void UpdatePeerGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePeerGroupRequest_gobgp_2eproto.base);
  ::memset(&peer_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_soft_reset_in_) -
      reinterpret_cast<char*>(&peer_group_)) + sizeof(do_soft_reset_in_));
}

UpdatePeerGroupRequest::~UpdatePeerGroupRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.UpdatePeerGroupRequest)
  SharedDtor();
}

void UpdatePeerGroupRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_group_;
}

void UpdatePeerGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerGroupRequest& UpdatePeerGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerGroupRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UpdatePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && peer_group_ != nullptr) {
    delete peer_group_;
  }
  peer_group_ = nullptr;
  do_soft_reset_in_ = false;
  _internal_metadata_.Clear();
}

const char* UpdatePeerGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.PeerGroup peer_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool do_soft_reset_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          do_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UpdatePeerGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::peer_group(this), target, stream);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_do_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UpdatePeerGroupRequest)
  return target;
}

size_t UpdatePeerGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UpdatePeerGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.PeerGroup peer_group = 1;
  if (this->has_peer_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_group_);
  }

  // bool do_soft_reset_in = 2;
  if (this->do_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UpdatePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UpdatePeerGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UpdatePeerGroupRequest)
    MergeFrom(*source);
  }
}

void UpdatePeerGroupRequest::MergeFrom(const UpdatePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UpdatePeerGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer_group()) {
    _internal_mutable_peer_group()->::gobgpapi::PeerGroup::MergeFrom(from._internal_peer_group());
  }
  if (from.do_soft_reset_in() != 0) {
    _internal_set_do_soft_reset_in(from._internal_do_soft_reset_in());
  }
}

void UpdatePeerGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UpdatePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerGroupRequest::CopyFrom(const UpdatePeerGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UpdatePeerGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerGroupRequest::IsInitialized() const {
  return true;
}

void UpdatePeerGroupRequest::InternalSwap(UpdatePeerGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_group_, other->peer_group_);
  swap(do_soft_reset_in_, other->do_soft_reset_in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeerGroupResponse::InitAsDefaultInstance() {
}
class UpdatePeerGroupResponse::_Internal {
 public:
};

UpdatePeerGroupResponse::UpdatePeerGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UpdatePeerGroupResponse)
}
UpdatePeerGroupResponse::UpdatePeerGroupResponse(const UpdatePeerGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  needs_soft_reset_in_ = from.needs_soft_reset_in_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UpdatePeerGroupResponse)
}

void UpdatePeerGroupResponse::SharedCtor() {
  needs_soft_reset_in_ = false;
}

UpdatePeerGroupResponse::~UpdatePeerGroupResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.UpdatePeerGroupResponse)
  SharedDtor();
}

void UpdatePeerGroupResponse::SharedDtor() {
}

void UpdatePeerGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeerGroupResponse& UpdatePeerGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeerGroupResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeerGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UpdatePeerGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  needs_soft_reset_in_ = false;
  _internal_metadata_.Clear();
}

const char* UpdatePeerGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool needs_soft_reset_in = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          needs_soft_reset_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeerGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UpdatePeerGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_needs_soft_reset_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UpdatePeerGroupResponse)
  return target;
}

size_t UpdatePeerGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UpdatePeerGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool needs_soft_reset_in = 1;
  if (this->needs_soft_reset_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeerGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UpdatePeerGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeerGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeerGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UpdatePeerGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UpdatePeerGroupResponse)
    MergeFrom(*source);
  }
}

void UpdatePeerGroupResponse::MergeFrom(const UpdatePeerGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UpdatePeerGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.needs_soft_reset_in() != 0) {
    _internal_set_needs_soft_reset_in(from._internal_needs_soft_reset_in());
  }
}

void UpdatePeerGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UpdatePeerGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeerGroupResponse::CopyFrom(const UpdatePeerGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UpdatePeerGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeerGroupResponse::IsInitialized() const {
  return true;
}

void UpdatePeerGroupResponse::InternalSwap(UpdatePeerGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(needs_soft_reset_in_, other->needs_soft_reset_in_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeerGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDynamicNeighborRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddDynamicNeighborRequest_default_instance_._instance.get_mutable()->dynamic_neighbor_ = const_cast< ::gobgpapi::DynamicNeighbor*>(
      ::gobgpapi::DynamicNeighbor::internal_default_instance());
}
class AddDynamicNeighborRequest::_Internal {
 public:
  static const ::gobgpapi::DynamicNeighbor& dynamic_neighbor(const AddDynamicNeighborRequest* msg);
};

const ::gobgpapi::DynamicNeighbor&
AddDynamicNeighborRequest::_Internal::dynamic_neighbor(const AddDynamicNeighborRequest* msg) {
  return *msg->dynamic_neighbor_;
}
AddDynamicNeighborRequest::AddDynamicNeighborRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddDynamicNeighborRequest)
}
AddDynamicNeighborRequest::AddDynamicNeighborRequest(const AddDynamicNeighborRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_dynamic_neighbor()) {
    dynamic_neighbor_ = new ::gobgpapi::DynamicNeighbor(*from.dynamic_neighbor_);
  } else {
    dynamic_neighbor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddDynamicNeighborRequest)
}

void AddDynamicNeighborRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDynamicNeighborRequest_gobgp_2eproto.base);
  dynamic_neighbor_ = nullptr;
}

AddDynamicNeighborRequest::~AddDynamicNeighborRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddDynamicNeighborRequest)
  SharedDtor();
}

void AddDynamicNeighborRequest::SharedDtor() {
  if (this != internal_default_instance()) delete dynamic_neighbor_;
}

void AddDynamicNeighborRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDynamicNeighborRequest& AddDynamicNeighborRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDynamicNeighborRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddDynamicNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dynamic_neighbor_ != nullptr) {
    delete dynamic_neighbor_;
  }
  dynamic_neighbor_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddDynamicNeighborRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.DynamicNeighbor dynamic_neighbor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_neighbor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDynamicNeighborRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddDynamicNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DynamicNeighbor dynamic_neighbor = 1;
  if (this->has_dynamic_neighbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dynamic_neighbor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddDynamicNeighborRequest)
  return target;
}

size_t AddDynamicNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddDynamicNeighborRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.DynamicNeighbor dynamic_neighbor = 1;
  if (this->has_dynamic_neighbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_neighbor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDynamicNeighborRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDynamicNeighborRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDynamicNeighborRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddDynamicNeighborRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddDynamicNeighborRequest)
    MergeFrom(*source);
  }
}

void AddDynamicNeighborRequest::MergeFrom(const AddDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddDynamicNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dynamic_neighbor()) {
    _internal_mutable_dynamic_neighbor()->::gobgpapi::DynamicNeighbor::MergeFrom(from._internal_dynamic_neighbor());
  }
}

void AddDynamicNeighborRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDynamicNeighborRequest::CopyFrom(const AddDynamicNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddDynamicNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDynamicNeighborRequest::IsInitialized() const {
  return true;
}

void AddDynamicNeighborRequest::InternalSwap(AddDynamicNeighborRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dynamic_neighbor_, other->dynamic_neighbor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDynamicNeighborRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPathRequest_default_instance_._instance.get_mutable()->path_ = const_cast< ::gobgpapi::Path*>(
      ::gobgpapi::Path::internal_default_instance());
}
class AddPathRequest::_Internal {
 public:
  static const ::gobgpapi::Path& path(const AddPathRequest* msg);
};

const ::gobgpapi::Path&
AddPathRequest::_Internal::path(const AddPathRequest* msg) {
  return *msg->path_;
}
AddPathRequest::AddPathRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathRequest)
}
AddPathRequest::AddPathRequest(const AddPathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_id().empty()) {
    vrf_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from._internal_has_path()) {
    path_ = new ::gobgpapi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathRequest)
}

void AddPathRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPathRequest_gobgp_2eproto.base);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_type_) -
      reinterpret_cast<char*>(&path_)) + sizeof(table_type_));
}

AddPathRequest::~AddPathRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathRequest)
  SharedDtor();
}

void AddPathRequest::SharedDtor() {
  vrf_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void AddPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathRequest& AddPathRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  table_type_ = 0;
  _internal_metadata_.Clear();
}

const char* AddPathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::gobgpapi::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string vrf_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrf_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.AddPathRequest.vrf_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Path path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf_id().data(), static_cast<int>(this->_internal_vrf_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddPathRequest.vrf_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrf_id(), target);
  }

  // .gobgpapi.Path path = 3;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathRequest)
  return target;
}

size_t AddPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf_id());
  }

  // .gobgpapi.Path path = 3;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathRequest)
    MergeFrom(*source);
  }
}

void AddPathRequest::MergeFrom(const AddPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrf_id().size() > 0) {

    vrf_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from.has_path()) {
    _internal_mutable_path()->::gobgpapi::Path::MergeFrom(from._internal_path());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void AddPathRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathRequest::CopyFrom(const AddPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathRequest::IsInitialized() const {
  return true;
}

void AddPathRequest::InternalSwap(AddPathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vrf_id_.Swap(&other->vrf_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(path_, other->path_);
  swap(table_type_, other->table_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathResponse::InitAsDefaultInstance() {
}
class AddPathResponse::_Internal {
 public:
};

AddPathResponse::AddPathResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathResponse)
}
AddPathResponse::AddPathResponse(const AddPathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathResponse)
}

void AddPathResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPathResponse_gobgp_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddPathResponse::~AddPathResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathResponse)
  SharedDtor();
}

void AddPathResponse::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathResponse& AddPathResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddPathResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathResponse)
  return target;
}

size_t AddPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathResponse)
    MergeFrom(*source);
  }
}

void AddPathResponse::MergeFrom(const AddPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void AddPathResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathResponse::CopyFrom(const AddPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathResponse::IsInitialized() const {
  return true;
}

void AddPathResponse::InternalSwap(AddPathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePathRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeletePathRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
  ::gobgpapi::_DeletePathRequest_default_instance_._instance.get_mutable()->path_ = const_cast< ::gobgpapi::Path*>(
      ::gobgpapi::Path::internal_default_instance());
}
class DeletePathRequest::_Internal {
 public:
  static const ::gobgpapi::Family& family(const DeletePathRequest* msg);
  static const ::gobgpapi::Path& path(const DeletePathRequest* msg);
};

const ::gobgpapi::Family&
DeletePathRequest::_Internal::family(const DeletePathRequest* msg) {
  return *msg->family_;
}
const ::gobgpapi::Path&
DeletePathRequest::_Internal::path(const DeletePathRequest* msg) {
  return *msg->path_;
}
DeletePathRequest::DeletePathRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePathRequest)
}
DeletePathRequest::DeletePathRequest(const DeletePathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_id().empty()) {
    vrf_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  if (from._internal_has_path()) {
    path_ = new ::gobgpapi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePathRequest)
}

void DeletePathRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePathRequest_gobgp_2eproto.base);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_type_) -
      reinterpret_cast<char*>(&family_)) + sizeof(table_type_));
}

DeletePathRequest::~DeletePathRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePathRequest)
  SharedDtor();
}

void DeletePathRequest::SharedDtor() {
  vrf_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete family_;
  if (this != internal_default_instance()) delete path_;
}

void DeletePathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePathRequest& DeletePathRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePathRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  table_type_ = 0;
  _internal_metadata_.Clear();
}

const char* DeletePathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::gobgpapi::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string vrf_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrf_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DeletePathRequest.vrf_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Family family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Path path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePathRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf_id().data(), static_cast<int>(this->_internal_vrf_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeletePathRequest.vrf_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrf_id(), target);
  }

  // .gobgpapi.Family family = 3;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::family(this), target, stream);
  }

  // .gobgpapi.Path path = 4;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::path(this), target, stream);
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePathRequest)
  return target;
}

size_t DeletePathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePathRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf_id());
  }

  // bytes uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // .gobgpapi.Family family = 3;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // .gobgpapi.Path path = 4;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePathRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePathRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePathRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePathRequest)
    MergeFrom(*source);
  }
}

void DeletePathRequest::MergeFrom(const DeletePathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vrf_id().size() > 0) {

    vrf_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.has_path()) {
    _internal_mutable_path()->::gobgpapi::Path::MergeFrom(from._internal_path());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void DeletePathRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePathRequest::CopyFrom(const DeletePathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePathRequest::IsInitialized() const {
  return true;
}

void DeletePathRequest::InternalSwap(DeletePathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vrf_id_.Swap(&other->vrf_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(family_, other->family_);
  swap(path_, other->path_);
  swap(table_type_, other->table_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePathRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPathRequest::InitAsDefaultInstance() {
  ::gobgpapi::_ListPathRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class ListPathRequest::_Internal {
 public:
  static const ::gobgpapi::Family& family(const ListPathRequest* msg);
};

const ::gobgpapi::Family&
ListPathRequest::_Internal::family(const ListPathRequest* msg) {
  return *msg->family_;
}
ListPathRequest::ListPathRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPathRequest)
}
ListPathRequest::ListPathRequest(const ListPathRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      prefixes_(from.prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&table_type_, &from.table_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_filtered_) -
    reinterpret_cast<char*>(&table_type_)) + sizeof(enable_filtered_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPathRequest)
}

void ListPathRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPathRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_filtered_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enable_filtered_));
}

ListPathRequest::~ListPathRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPathRequest)
  SharedDtor();
}

void ListPathRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete family_;
}

void ListPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPathRequest& ListPathRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPathRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefixes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&table_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_filtered_) -
      reinterpret_cast<char*>(&table_type_)) + sizeof(enable_filtered_));
  _internal_metadata_.Clear();
}

const char* ListPathRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::gobgpapi::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ListPathRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Family family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefixes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.ListPathRequest.SortType sort_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sort_type(static_cast<::gobgpapi::ListPathRequest_SortType>(val));
        } else goto handle_unusual;
        continue;
      // bool enable_filtered = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enable_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPathRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPathRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ListPathRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .gobgpapi.Family family = 3;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::family(this), target, stream);
  }

  // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefixes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prefixes(i), target, stream);
  }

  // .gobgpapi.ListPathRequest.SortType sort_type = 5;
  if (this->sort_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_type(), target);
  }

  // bool enable_filtered = 6;
  if (this->enable_filtered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_filtered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPathRequest)
  return target;
}

size_t ListPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPathRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
  total_size += 1UL * this->_internal_prefixes_size();
  for (const auto& msg : this->prefixes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.Family family = 3;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  // .gobgpapi.ListPathRequest.SortType sort_type = 5;
  if (this->sort_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_type());
  }

  // bool enable_filtered = 6;
  if (this->enable_filtered() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPathRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPathRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPathRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPathRequest)
    MergeFrom(*source);
  }
}

void ListPathRequest::MergeFrom(const ListPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefixes_.MergeFrom(from.prefixes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
  if (from.sort_type() != 0) {
    _internal_set_sort_type(from._internal_sort_type());
  }
  if (from.enable_filtered() != 0) {
    _internal_set_enable_filtered(from._internal_enable_filtered());
  }
}

void ListPathRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPathRequest::CopyFrom(const ListPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPathRequest::IsInitialized() const {
  return true;
}

void ListPathRequest::InternalSwap(ListPathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefixes_.InternalSwap(&other->prefixes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(family_, other->family_);
  swap(table_type_, other->table_type_);
  swap(sort_type_, other->sort_type_);
  swap(enable_filtered_, other->enable_filtered_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPathRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPathResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListPathResponse_default_instance_._instance.get_mutable()->destination_ = const_cast< ::gobgpapi::Destination*>(
      ::gobgpapi::Destination::internal_default_instance());
}
class ListPathResponse::_Internal {
 public:
  static const ::gobgpapi::Destination& destination(const ListPathResponse* msg);
};

const ::gobgpapi::Destination&
ListPathResponse::_Internal::destination(const ListPathResponse* msg) {
  return *msg->destination_;
}
ListPathResponse::ListPathResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPathResponse)
}
ListPathResponse::ListPathResponse(const ListPathResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_destination()) {
    destination_ = new ::gobgpapi::Destination(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPathResponse)
}

void ListPathResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPathResponse_gobgp_2eproto.base);
  destination_ = nullptr;
}

ListPathResponse::~ListPathResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPathResponse)
  SharedDtor();
}

void ListPathResponse::SharedDtor() {
  if (this != internal_default_instance()) delete destination_;
}

void ListPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPathResponse& ListPathResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPathResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListPathResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Destination destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPathResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPathResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Destination destination = 1;
  if (this->has_destination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::destination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPathResponse)
  return target;
}

size_t ListPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPathResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Destination destination = 1;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPathResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPathResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPathResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPathResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPathResponse)
    MergeFrom(*source);
  }
}

void ListPathResponse::MergeFrom(const ListPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    _internal_mutable_destination()->::gobgpapi::Destination::MergeFrom(from._internal_destination());
  }
}

void ListPathResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPathResponse::CopyFrom(const ListPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPathResponse::IsInitialized() const {
  return true;
}

void ListPathResponse::InternalSwap(ListPathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(destination_, other->destination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPathResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathStreamRequest::InitAsDefaultInstance() {
}
class AddPathStreamRequest::_Internal {
 public:
};

AddPathStreamRequest::AddPathStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathStreamRequest)
}
AddPathStreamRequest::AddPathStreamRequest(const AddPathStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_id().empty()) {
    vrf_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathStreamRequest)
}

void AddPathStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPathStreamRequest_gobgp_2eproto.base);
  vrf_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_type_ = 0;
}

AddPathStreamRequest::~AddPathStreamRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathStreamRequest)
  SharedDtor();
}

void AddPathStreamRequest::SharedDtor() {
  vrf_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddPathStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathStreamRequest& AddPathStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathStreamRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  vrf_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_type_ = 0;
  _internal_metadata_.Clear();
}

const char* AddPathStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::gobgpapi::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string vrf_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrf_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.AddPathStreamRequest.vrf_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Path paths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathStreamRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf_id().data(), static_cast<int>(this->_internal_vrf_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddPathStreamRequest.vrf_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vrf_id(), target);
  }

  // repeated .gobgpapi.Path paths = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathStreamRequest)
  return target;
}

size_t AddPathStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathStreamRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.Path paths = 3;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string vrf_id = 2;
  if (this->vrf_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf_id());
  }

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathStreamRequest)
    MergeFrom(*source);
  }
}

void AddPathStreamRequest::MergeFrom(const AddPathStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.vrf_id().size() > 0) {

    vrf_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_id_);
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void AddPathStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathStreamRequest::CopyFrom(const AddPathStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathStreamRequest::IsInitialized() const {
  return true;
}

void AddPathStreamRequest::InternalSwap(AddPathStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  vrf_id_.Swap(&other->vrf_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(table_type_, other->table_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTableRequest::InitAsDefaultInstance() {
  ::gobgpapi::_GetTableRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class GetTableRequest::_Internal {
 public:
  static const ::gobgpapi::Family& family(const GetTableRequest* msg);
};

const ::gobgpapi::Family&
GetTableRequest::_Internal::family(const GetTableRequest* msg) {
  return *msg->family_;
}
GetTableRequest::GetTableRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetTableRequest)
}
GetTableRequest::GetTableRequest(const GetTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  table_type_ = from.table_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetTableRequest)
}

void GetTableRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTableRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_type_) -
      reinterpret_cast<char*>(&family_)) + sizeof(table_type_));
}

GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetTableRequest)
  SharedDtor();
}

void GetTableRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete family_;
}

void GetTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTableRequest& GetTableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTableRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  table_type_ = 0;
  _internal_metadata_.Clear();
}

const char* GetTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::gobgpapi::TableType>(val));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Family family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.GetTableRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // .gobgpapi.Family family = 2;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::family(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GetTableRequest.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetTableRequest)
  return target;
}

size_t GetTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.Family family = 2;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetTableRequest)
    MergeFrom(*source);
  }
}

void GetTableRequest::MergeFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
}

void GetTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableRequest::IsInitialized() const {
  return true;
}

void GetTableRequest::InternalSwap(GetTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(family_, other->family_);
  swap(table_type_, other->table_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTableResponse::InitAsDefaultInstance() {
}
class GetTableResponse::_Internal {
 public:
};

GetTableResponse::GetTableResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GetTableResponse)
}
GetTableResponse::GetTableResponse(const GetTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_destination_, &from.num_destination_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_accepted_) -
    reinterpret_cast<char*>(&num_destination_)) + sizeof(num_accepted_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GetTableResponse)
}

void GetTableResponse::SharedCtor() {
  ::memset(&num_destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accepted_) -
      reinterpret_cast<char*>(&num_destination_)) + sizeof(num_accepted_));
}

GetTableResponse::~GetTableResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.GetTableResponse)
  SharedDtor();
}

void GetTableResponse::SharedDtor() {
}

void GetTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTableResponse& GetTableResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTableResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GetTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GetTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accepted_) -
      reinterpret_cast<char*>(&num_destination_)) + sizeof(num_accepted_));
  _internal_metadata_.Clear();
}

const char* GetTableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 num_destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_accepted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GetTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 num_destination = 1;
  if (this->num_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_num_destination(), target);
  }

  // uint64 num_path = 2;
  if (this->num_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_path(), target);
  }

  // uint64 num_accepted = 3;
  if (this->num_accepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num_accepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GetTableResponse)
  return target;
}

size_t GetTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GetTableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 num_destination = 1;
  if (this->num_destination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_destination());
  }

  // uint64 num_path = 2;
  if (this->num_path() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_path());
  }

  // uint64 num_accepted = 3;
  if (this->num_accepted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_accepted());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GetTableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GetTableResponse)
    MergeFrom(*source);
  }
}

void GetTableResponse::MergeFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GetTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_destination() != 0) {
    _internal_set_num_destination(from._internal_num_destination());
  }
  if (from.num_path() != 0) {
    _internal_set_num_path(from._internal_num_path());
  }
  if (from.num_accepted() != 0) {
    _internal_set_num_accepted(from._internal_num_accepted());
  }
}

void GetTableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTableResponse::CopyFrom(const GetTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GetTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTableResponse::IsInitialized() const {
  return true;
}

void GetTableResponse::InternalSwap(GetTableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_destination_, other->num_destination_);
  swap(num_path_, other->num_path_);
  swap(num_accepted_, other->num_accepted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitorTableRequest::InitAsDefaultInstance() {
  ::gobgpapi::_MonitorTableRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class MonitorTableRequest::_Internal {
 public:
  static const ::gobgpapi::Family& family(const MonitorTableRequest* msg);
};

const ::gobgpapi::Family&
MonitorTableRequest::_Internal::family(const MonitorTableRequest* msg) {
  return *msg->family_;
}
MonitorTableRequest::MonitorTableRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MonitorTableRequest)
}
MonitorTableRequest::MonitorTableRequest(const MonitorTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&table_type_, &from.table_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&post_policy_) -
    reinterpret_cast<char*>(&table_type_)) + sizeof(post_policy_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MonitorTableRequest)
}

void MonitorTableRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorTableRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_policy_) -
      reinterpret_cast<char*>(&family_)) + sizeof(post_policy_));
}

MonitorTableRequest::~MonitorTableRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.MonitorTableRequest)
  SharedDtor();
}

void MonitorTableRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete family_;
}

void MonitorTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorTableRequest& MonitorTableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorTableRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MonitorTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MonitorTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&table_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_policy_) -
      reinterpret_cast<char*>(&table_type_)) + sizeof(post_policy_));
  _internal_metadata_.Clear();
}

const char* MonitorTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.TableType table_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_table_type(static_cast<::gobgpapi::TableType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.MonitorTableRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Family family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool post_policy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          post_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MonitorTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_table_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MonitorTableRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .gobgpapi.Family family = 3;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::family(this), target, stream);
  }

  // bool current = 4;
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_current(), target);
  }

  // bool post_policy = 5;
  if (this->post_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_post_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MonitorTableRequest)
  return target;
}

size_t MonitorTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MonitorTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.Family family = 3;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // .gobgpapi.TableType table_type = 1;
  if (this->table_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_table_type());
  }

  // bool current = 4;
  if (this->current() != 0) {
    total_size += 1 + 1;
  }

  // bool post_policy = 5;
  if (this->post_policy() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MonitorTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MonitorTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MonitorTableRequest)
    MergeFrom(*source);
  }
}

void MonitorTableRequest::MergeFrom(const MonitorTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MonitorTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.table_type() != 0) {
    _internal_set_table_type(from._internal_table_type());
  }
  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from.post_policy() != 0) {
    _internal_set_post_policy(from._internal_post_policy());
  }
}

void MonitorTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MonitorTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorTableRequest::CopyFrom(const MonitorTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MonitorTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorTableRequest::IsInitialized() const {
  return true;
}

void MonitorTableRequest::InternalSwap(MonitorTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(family_, other->family_);
  swap(table_type_, other->table_type_);
  swap(current_, other->current_);
  swap(post_policy_, other->post_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitorTableResponse::InitAsDefaultInstance() {
  ::gobgpapi::_MonitorTableResponse_default_instance_._instance.get_mutable()->path_ = const_cast< ::gobgpapi::Path*>(
      ::gobgpapi::Path::internal_default_instance());
}
class MonitorTableResponse::_Internal {
 public:
  static const ::gobgpapi::Path& path(const MonitorTableResponse* msg);
};

const ::gobgpapi::Path&
MonitorTableResponse::_Internal::path(const MonitorTableResponse* msg) {
  return *msg->path_;
}
MonitorTableResponse::MonitorTableResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MonitorTableResponse)
}
MonitorTableResponse::MonitorTableResponse(const MonitorTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::gobgpapi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MonitorTableResponse)
}

void MonitorTableResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitorTableResponse_gobgp_2eproto.base);
  path_ = nullptr;
}

MonitorTableResponse::~MonitorTableResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.MonitorTableResponse)
  SharedDtor();
}

void MonitorTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void MonitorTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitorTableResponse& MonitorTableResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitorTableResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MonitorTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MonitorTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MonitorTableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitorTableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MonitorTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Path path = 1;
  if (this->has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MonitorTableResponse)
  return target;
}

size_t MonitorTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MonitorTableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitorTableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MonitorTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitorTableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitorTableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MonitorTableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MonitorTableResponse)
    MergeFrom(*source);
  }
}

void MonitorTableResponse::MergeFrom(const MonitorTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MonitorTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    _internal_mutable_path()->::gobgpapi::Path::MergeFrom(from._internal_path());
  }
}

void MonitorTableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MonitorTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorTableResponse::CopyFrom(const MonitorTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MonitorTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorTableResponse::IsInitialized() const {
  return true;
}

void MonitorTableResponse::InternalSwap(MonitorTableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitorTableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddVrfRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddVrfRequest_default_instance_._instance.get_mutable()->vrf_ = const_cast< ::gobgpapi::Vrf*>(
      ::gobgpapi::Vrf::internal_default_instance());
}
class AddVrfRequest::_Internal {
 public:
  static const ::gobgpapi::Vrf& vrf(const AddVrfRequest* msg);
};

const ::gobgpapi::Vrf&
AddVrfRequest::_Internal::vrf(const AddVrfRequest* msg) {
  return *msg->vrf_;
}
AddVrfRequest::AddVrfRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddVrfRequest)
}
AddVrfRequest::AddVrfRequest(const AddVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_vrf()) {
    vrf_ = new ::gobgpapi::Vrf(*from.vrf_);
  } else {
    vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddVrfRequest)
}

void AddVrfRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddVrfRequest_gobgp_2eproto.base);
  vrf_ = nullptr;
}

AddVrfRequest::~AddVrfRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddVrfRequest)
  SharedDtor();
}

void AddVrfRequest::SharedDtor() {
  if (this != internal_default_instance()) delete vrf_;
}

void AddVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddVrfRequest& AddVrfRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddVrfRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Vrf vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddVrfRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddVrfRequest)
  return target;
}

size_t AddVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddVrfRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddVrfRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddVrfRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddVrfRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddVrfRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddVrfRequest)
    MergeFrom(*source);
  }
}

void AddVrfRequest::MergeFrom(const AddVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vrf()) {
    _internal_mutable_vrf()->::gobgpapi::Vrf::MergeFrom(from._internal_vrf());
  }
}

void AddVrfRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddVrfRequest::CopyFrom(const AddVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVrfRequest::IsInitialized() const {
  return true;
}

void AddVrfRequest::InternalSwap(AddVrfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vrf_, other->vrf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddVrfRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteVrfRequest::InitAsDefaultInstance() {
}
class DeleteVrfRequest::_Internal {
 public:
};

DeleteVrfRequest::DeleteVrfRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteVrfRequest)
}
DeleteVrfRequest::DeleteVrfRequest(const DeleteVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteVrfRequest)
}

void DeleteVrfRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteVrfRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteVrfRequest::~DeleteVrfRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteVrfRequest)
  SharedDtor();
}

void DeleteVrfRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteVrfRequest& DeleteVrfRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteVrfRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeleteVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DeleteVrfRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteVrfRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeleteVrfRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteVrfRequest)
  return target;
}

size_t DeleteVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteVrfRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteVrfRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteVrfRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteVrfRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteVrfRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteVrfRequest)
    MergeFrom(*source);
  }
}

void DeleteVrfRequest::MergeFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteVrfRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteVrfRequest::CopyFrom(const DeleteVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVrfRequest::IsInitialized() const {
  return true;
}

void DeleteVrfRequest::InternalSwap(DeleteVrfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVrfRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVrfRequest::InitAsDefaultInstance() {
}
class ListVrfRequest::_Internal {
 public:
};

ListVrfRequest::ListVrfRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListVrfRequest)
}
ListVrfRequest::ListVrfRequest(const ListVrfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListVrfRequest)
}

void ListVrfRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVrfRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListVrfRequest::~ListVrfRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListVrfRequest)
  SharedDtor();
}

void ListVrfRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVrfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVrfRequest& ListVrfRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVrfRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListVrfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListVrfRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ListVrfRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVrfRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListVrfRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ListVrfRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListVrfRequest)
  return target;
}

size_t ListVrfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListVrfRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVrfRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVrfRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVrfRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListVrfRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListVrfRequest)
    MergeFrom(*source);
  }
}

void ListVrfRequest::MergeFrom(const ListVrfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListVrfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ListVrfRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVrfRequest::CopyFrom(const ListVrfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListVrfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVrfRequest::IsInitialized() const {
  return true;
}

void ListVrfRequest::InternalSwap(ListVrfRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVrfRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVrfResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListVrfResponse_default_instance_._instance.get_mutable()->vrf_ = const_cast< ::gobgpapi::Vrf*>(
      ::gobgpapi::Vrf::internal_default_instance());
}
class ListVrfResponse::_Internal {
 public:
  static const ::gobgpapi::Vrf& vrf(const ListVrfResponse* msg);
};

const ::gobgpapi::Vrf&
ListVrfResponse::_Internal::vrf(const ListVrfResponse* msg) {
  return *msg->vrf_;
}
ListVrfResponse::ListVrfResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListVrfResponse)
}
ListVrfResponse::ListVrfResponse(const ListVrfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_vrf()) {
    vrf_ = new ::gobgpapi::Vrf(*from.vrf_);
  } else {
    vrf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListVrfResponse)
}

void ListVrfResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVrfResponse_gobgp_2eproto.base);
  vrf_ = nullptr;
}

ListVrfResponse::~ListVrfResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListVrfResponse)
  SharedDtor();
}

void ListVrfResponse::SharedDtor() {
  if (this != internal_default_instance()) delete vrf_;
}

void ListVrfResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVrfResponse& ListVrfResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVrfResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListVrfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListVrfResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListVrfResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Vrf vrf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVrfResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListVrfResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vrf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListVrfResponse)
  return target;
}

size_t ListVrfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListVrfResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Vrf vrf = 1;
  if (this->has_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVrfResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVrfResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVrfResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListVrfResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListVrfResponse)
    MergeFrom(*source);
  }
}

void ListVrfResponse::MergeFrom(const ListVrfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListVrfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vrf()) {
    _internal_mutable_vrf()->::gobgpapi::Vrf::MergeFrom(from._internal_vrf());
  }
}

void ListVrfResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVrfResponse::CopyFrom(const ListVrfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListVrfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVrfResponse::IsInitialized() const {
  return true;
}

void ListVrfResponse::InternalSwap(ListVrfResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vrf_, other->vrf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVrfResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPolicyRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::gobgpapi::Policy*>(
      ::gobgpapi::Policy::internal_default_instance());
}
class AddPolicyRequest::_Internal {
 public:
  static const ::gobgpapi::Policy& policy(const AddPolicyRequest* msg);
};

const ::gobgpapi::Policy&
AddPolicyRequest::_Internal::policy(const AddPolicyRequest* msg) {
  return *msg->policy_;
}
AddPolicyRequest::AddPolicyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPolicyRequest)
}
AddPolicyRequest::AddPolicyRequest(const AddPolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_policy()) {
    policy_ = new ::gobgpapi::Policy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  refer_existing_statements_ = from.refer_existing_statements_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPolicyRequest)
}

void AddPolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPolicyRequest_gobgp_2eproto.base);
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refer_existing_statements_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(refer_existing_statements_));
}

AddPolicyRequest::~AddPolicyRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPolicyRequest)
  SharedDtor();
}

void AddPolicyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void AddPolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPolicyRequest& AddPolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPolicyRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  refer_existing_statements_ = false;
  _internal_metadata_.Clear();
}

const char* AddPolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool refer_existing_statements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          refer_existing_statements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy(this), target, stream);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_refer_existing_statements(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPolicyRequest)
  return target;
}

size_t AddPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // bool refer_existing_statements = 2;
  if (this->refer_existing_statements() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPolicyRequest)
    MergeFrom(*source);
  }
}

void AddPolicyRequest::MergeFrom(const AddPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    _internal_mutable_policy()->::gobgpapi::Policy::MergeFrom(from._internal_policy());
  }
  if (from.refer_existing_statements() != 0) {
    _internal_set_refer_existing_statements(from._internal_refer_existing_statements());
  }
}

void AddPolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyRequest::CopyFrom(const AddPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyRequest::IsInitialized() const {
  return true;
}

void AddPolicyRequest::InternalSwap(AddPolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(policy_, other->policy_);
  swap(refer_existing_statements_, other->refer_existing_statements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePolicyRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeletePolicyRequest_default_instance_._instance.get_mutable()->policy_ = const_cast< ::gobgpapi::Policy*>(
      ::gobgpapi::Policy::internal_default_instance());
}
class DeletePolicyRequest::_Internal {
 public:
  static const ::gobgpapi::Policy& policy(const DeletePolicyRequest* msg);
};

const ::gobgpapi::Policy&
DeletePolicyRequest::_Internal::policy(const DeletePolicyRequest* msg) {
  return *msg->policy_;
}
DeletePolicyRequest::DeletePolicyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePolicyRequest)
}
DeletePolicyRequest::DeletePolicyRequest(const DeletePolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_policy()) {
    policy_ = new ::gobgpapi::Policy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  ::memcpy(&preserve_statements_, &from.preserve_statements_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&preserve_statements_)) + sizeof(all_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePolicyRequest)
}

void DeletePolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePolicyRequest_gobgp_2eproto.base);
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(all_));
}

DeletePolicyRequest::~DeletePolicyRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePolicyRequest)
  SharedDtor();
}

void DeletePolicyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void DeletePolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePolicyRequest& DeletePolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePolicyRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  ::memset(&preserve_statements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&preserve_statements_)) + sizeof(all_));
  _internal_metadata_.Clear();
}

const char* DeletePolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool preserve_statements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          preserve_statements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy(this), target, stream);
  }

  // bool preserve_statements = 2;
  if (this->preserve_statements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_preserve_statements(), target);
  }

  // bool all = 3;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePolicyRequest)
  return target;
}

size_t DeletePolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  // bool preserve_statements = 2;
  if (this->preserve_statements() != 0) {
    total_size += 1 + 1;
  }

  // bool all = 3;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePolicyRequest)
    MergeFrom(*source);
  }
}

void DeletePolicyRequest::MergeFrom(const DeletePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    _internal_mutable_policy()->::gobgpapi::Policy::MergeFrom(from._internal_policy());
  }
  if (from.preserve_statements() != 0) {
    _internal_set_preserve_statements(from._internal_preserve_statements());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeletePolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyRequest::CopyFrom(const DeletePolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyRequest::IsInitialized() const {
  return true;
}

void DeletePolicyRequest::InternalSwap(DeletePolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(policy_, other->policy_);
  swap(preserve_statements_, other->preserve_statements_);
  swap(all_, other->all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyRequest::InitAsDefaultInstance() {
}
class ListPolicyRequest::_Internal {
 public:
};

ListPolicyRequest::ListPolicyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPolicyRequest)
}
ListPolicyRequest::ListPolicyRequest(const ListPolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPolicyRequest)
}

void ListPolicyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPolicyRequest::~ListPolicyRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPolicyRequest)
  SharedDtor();
}

void ListPolicyRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyRequest& ListPolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListPolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ListPolicyRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ListPolicyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPolicyRequest)
  return target;
}

size_t ListPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPolicyRequest)
    MergeFrom(*source);
  }
}

void ListPolicyRequest::MergeFrom(const ListPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ListPolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyRequest::CopyFrom(const ListPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyRequest::IsInitialized() const {
  return true;
}

void ListPolicyRequest::InternalSwap(ListPolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListPolicyResponse_default_instance_._instance.get_mutable()->policy_ = const_cast< ::gobgpapi::Policy*>(
      ::gobgpapi::Policy::internal_default_instance());
}
class ListPolicyResponse::_Internal {
 public:
  static const ::gobgpapi::Policy& policy(const ListPolicyResponse* msg);
};

const ::gobgpapi::Policy&
ListPolicyResponse::_Internal::policy(const ListPolicyResponse* msg) {
  return *msg->policy_;
}
ListPolicyResponse::ListPolicyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPolicyResponse)
}
ListPolicyResponse::ListPolicyResponse(const ListPolicyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_policy()) {
    policy_ = new ::gobgpapi::Policy(*from.policy_);
  } else {
    policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPolicyResponse)
}

void ListPolicyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyResponse_gobgp_2eproto.base);
  policy_ = nullptr;
}

ListPolicyResponse::~ListPolicyResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPolicyResponse)
  SharedDtor();
}

void ListPolicyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete policy_;
}

void ListPolicyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyResponse& ListPolicyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListPolicyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Policy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPolicyResponse)
  return target;
}

size_t ListPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPolicyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Policy policy = 1;
  if (this->has_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPolicyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPolicyResponse)
    MergeFrom(*source);
  }
}

void ListPolicyResponse::MergeFrom(const ListPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy()) {
    _internal_mutable_policy()->::gobgpapi::Policy::MergeFrom(from._internal_policy());
  }
}

void ListPolicyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyResponse::CopyFrom(const ListPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyResponse::IsInitialized() const {
  return true;
}

void ListPolicyResponse::InternalSwap(ListPolicyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(policy_, other->policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPoliciesRequest::InitAsDefaultInstance() {
}
class SetPoliciesRequest::_Internal {
 public:
};

SetPoliciesRequest::SetPoliciesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.SetPoliciesRequest)
}
SetPoliciesRequest::SetPoliciesRequest(const SetPoliciesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      defined_sets_(from.defined_sets_),
      policies_(from.policies_),
      assignments_(from.assignments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.SetPoliciesRequest)
}

void SetPoliciesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPoliciesRequest_gobgp_2eproto.base);
}

SetPoliciesRequest::~SetPoliciesRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.SetPoliciesRequest)
  SharedDtor();
}

void SetPoliciesRequest::SharedDtor() {
}

void SetPoliciesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPoliciesRequest& SetPoliciesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPoliciesRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void SetPoliciesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.SetPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defined_sets_.Clear();
  policies_.Clear();
  assignments_.Clear();
  _internal_metadata_.Clear();
}

const char* SetPoliciesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gobgpapi.DefinedSet defined_sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defined_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Policy policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.PolicyAssignment assignments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPoliciesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.SetPoliciesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.DefinedSet defined_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_defined_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_defined_sets(i), target, stream);
  }

  // repeated .gobgpapi.Policy policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_policies(i), target, stream);
  }

  // repeated .gobgpapi.PolicyAssignment assignments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assignments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_assignments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.SetPoliciesRequest)
  return target;
}

size_t SetPoliciesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.SetPoliciesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.DefinedSet defined_sets = 1;
  total_size += 1UL * this->_internal_defined_sets_size();
  for (const auto& msg : this->defined_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gobgpapi.Policy policies = 2;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gobgpapi.PolicyAssignment assignments = 3;
  total_size += 1UL * this->_internal_assignments_size();
  for (const auto& msg : this->assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPoliciesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.SetPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPoliciesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPoliciesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.SetPoliciesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.SetPoliciesRequest)
    MergeFrom(*source);
  }
}

void SetPoliciesRequest::MergeFrom(const SetPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.SetPoliciesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defined_sets_.MergeFrom(from.defined_sets_);
  policies_.MergeFrom(from.policies_);
  assignments_.MergeFrom(from.assignments_);
}

void SetPoliciesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.SetPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPoliciesRequest::CopyFrom(const SetPoliciesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.SetPoliciesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPoliciesRequest::IsInitialized() const {
  return true;
}

void SetPoliciesRequest::InternalSwap(SetPoliciesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  defined_sets_.InternalSwap(&other->defined_sets_);
  policies_.InternalSwap(&other->policies_);
  assignments_.InternalSwap(&other->assignments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPoliciesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDefinedSetRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddDefinedSetRequest_default_instance_._instance.get_mutable()->defined_set_ = const_cast< ::gobgpapi::DefinedSet*>(
      ::gobgpapi::DefinedSet::internal_default_instance());
}
class AddDefinedSetRequest::_Internal {
 public:
  static const ::gobgpapi::DefinedSet& defined_set(const AddDefinedSetRequest* msg);
};

const ::gobgpapi::DefinedSet&
AddDefinedSetRequest::_Internal::defined_set(const AddDefinedSetRequest* msg) {
  return *msg->defined_set_;
}
AddDefinedSetRequest::AddDefinedSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddDefinedSetRequest)
}
AddDefinedSetRequest::AddDefinedSetRequest(const AddDefinedSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_defined_set()) {
    defined_set_ = new ::gobgpapi::DefinedSet(*from.defined_set_);
  } else {
    defined_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddDefinedSetRequest)
}

void AddDefinedSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDefinedSetRequest_gobgp_2eproto.base);
  defined_set_ = nullptr;
}

AddDefinedSetRequest::~AddDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddDefinedSetRequest)
  SharedDtor();
}

void AddDefinedSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete defined_set_;
}

void AddDefinedSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDefinedSetRequest& AddDefinedSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDefinedSetRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddDefinedSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.DefinedSet defined_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_defined_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDefinedSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::defined_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddDefinedSetRequest)
  return target;
}

size_t AddDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddDefinedSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defined_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDefinedSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDefinedSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDefinedSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddDefinedSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddDefinedSetRequest)
    MergeFrom(*source);
  }
}

void AddDefinedSetRequest::MergeFrom(const AddDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_defined_set()) {
    _internal_mutable_defined_set()->::gobgpapi::DefinedSet::MergeFrom(from._internal_defined_set());
  }
}

void AddDefinedSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDefinedSetRequest::CopyFrom(const AddDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDefinedSetRequest::IsInitialized() const {
  return true;
}

void AddDefinedSetRequest::InternalSwap(AddDefinedSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(defined_set_, other->defined_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDefinedSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDefinedSetRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeleteDefinedSetRequest_default_instance_._instance.get_mutable()->defined_set_ = const_cast< ::gobgpapi::DefinedSet*>(
      ::gobgpapi::DefinedSet::internal_default_instance());
}
class DeleteDefinedSetRequest::_Internal {
 public:
  static const ::gobgpapi::DefinedSet& defined_set(const DeleteDefinedSetRequest* msg);
};

const ::gobgpapi::DefinedSet&
DeleteDefinedSetRequest::_Internal::defined_set(const DeleteDefinedSetRequest* msg) {
  return *msg->defined_set_;
}
DeleteDefinedSetRequest::DeleteDefinedSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteDefinedSetRequest)
}
DeleteDefinedSetRequest::DeleteDefinedSetRequest(const DeleteDefinedSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_defined_set()) {
    defined_set_ = new ::gobgpapi::DefinedSet(*from.defined_set_);
  } else {
    defined_set_ = nullptr;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteDefinedSetRequest)
}

void DeleteDefinedSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteDefinedSetRequest_gobgp_2eproto.base);
  ::memset(&defined_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&defined_set_)) + sizeof(all_));
}

DeleteDefinedSetRequest::~DeleteDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteDefinedSetRequest)
  SharedDtor();
}

void DeleteDefinedSetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete defined_set_;
}

void DeleteDefinedSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDefinedSetRequest& DeleteDefinedSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDefinedSetRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
  all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteDefinedSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.DefinedSet defined_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_defined_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDefinedSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::defined_set(this), target, stream);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteDefinedSetRequest)
  return target;
}

size_t DeleteDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteDefinedSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defined_set_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDefinedSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDefinedSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDefinedSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteDefinedSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteDefinedSetRequest)
    MergeFrom(*source);
  }
}

void DeleteDefinedSetRequest::MergeFrom(const DeleteDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_defined_set()) {
    _internal_mutable_defined_set()->::gobgpapi::DefinedSet::MergeFrom(from._internal_defined_set());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeleteDefinedSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDefinedSetRequest::CopyFrom(const DeleteDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDefinedSetRequest::IsInitialized() const {
  return true;
}

void DeleteDefinedSetRequest::InternalSwap(DeleteDefinedSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(defined_set_, other->defined_set_);
  swap(all_, other->all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDefinedSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDefinedSetRequest::InitAsDefaultInstance() {
}
class ListDefinedSetRequest::_Internal {
 public:
};

ListDefinedSetRequest::ListDefinedSetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListDefinedSetRequest)
}
ListDefinedSetRequest::ListDefinedSetRequest(const ListDefinedSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  defined_type_ = from.defined_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListDefinedSetRequest)
}

void ListDefinedSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDefinedSetRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_type_ = 0;
}

ListDefinedSetRequest::~ListDefinedSetRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListDefinedSetRequest)
  SharedDtor();
}

void ListDefinedSetRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListDefinedSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDefinedSetRequest& ListDefinedSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDefinedSetRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListDefinedSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_type_ = 0;
  _internal_metadata_.Clear();
}

const char* ListDefinedSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.DefinedType defined_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_defined_type(static_cast<::gobgpapi::DefinedType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ListDefinedSetRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDefinedSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListDefinedSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_defined_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ListDefinedSetRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListDefinedSetRequest)
  return target;
}

size_t ListDefinedSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListDefinedSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_defined_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDefinedSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDefinedSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDefinedSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListDefinedSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListDefinedSetRequest)
    MergeFrom(*source);
  }
}

void ListDefinedSetRequest::MergeFrom(const ListDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListDefinedSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.defined_type() != 0) {
    _internal_set_defined_type(from._internal_defined_type());
  }
}

void ListDefinedSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDefinedSetRequest::CopyFrom(const ListDefinedSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListDefinedSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDefinedSetRequest::IsInitialized() const {
  return true;
}

void ListDefinedSetRequest::InternalSwap(ListDefinedSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(defined_type_, other->defined_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDefinedSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDefinedSetResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListDefinedSetResponse_default_instance_._instance.get_mutable()->defined_set_ = const_cast< ::gobgpapi::DefinedSet*>(
      ::gobgpapi::DefinedSet::internal_default_instance());
}
class ListDefinedSetResponse::_Internal {
 public:
  static const ::gobgpapi::DefinedSet& defined_set(const ListDefinedSetResponse* msg);
};

const ::gobgpapi::DefinedSet&
ListDefinedSetResponse::_Internal::defined_set(const ListDefinedSetResponse* msg) {
  return *msg->defined_set_;
}
ListDefinedSetResponse::ListDefinedSetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListDefinedSetResponse)
}
ListDefinedSetResponse::ListDefinedSetResponse(const ListDefinedSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_defined_set()) {
    defined_set_ = new ::gobgpapi::DefinedSet(*from.defined_set_);
  } else {
    defined_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListDefinedSetResponse)
}

void ListDefinedSetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDefinedSetResponse_gobgp_2eproto.base);
  defined_set_ = nullptr;
}

ListDefinedSetResponse::~ListDefinedSetResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListDefinedSetResponse)
  SharedDtor();
}

void ListDefinedSetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete defined_set_;
}

void ListDefinedSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDefinedSetResponse& ListDefinedSetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDefinedSetResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListDefinedSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListDefinedSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListDefinedSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.DefinedSet defined_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_defined_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDefinedSetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListDefinedSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::defined_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListDefinedSetResponse)
  return target;
}

size_t ListDefinedSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListDefinedSetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.DefinedSet defined_set = 1;
  if (this->has_defined_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defined_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDefinedSetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDefinedSetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDefinedSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListDefinedSetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListDefinedSetResponse)
    MergeFrom(*source);
  }
}

void ListDefinedSetResponse::MergeFrom(const ListDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListDefinedSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_defined_set()) {
    _internal_mutable_defined_set()->::gobgpapi::DefinedSet::MergeFrom(from._internal_defined_set());
  }
}

void ListDefinedSetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDefinedSetResponse::CopyFrom(const ListDefinedSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListDefinedSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDefinedSetResponse::IsInitialized() const {
  return true;
}

void ListDefinedSetResponse::InternalSwap(ListDefinedSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(defined_set_, other->defined_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDefinedSetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddStatementRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddStatementRequest_default_instance_._instance.get_mutable()->statement_ = const_cast< ::gobgpapi::Statement*>(
      ::gobgpapi::Statement::internal_default_instance());
}
class AddStatementRequest::_Internal {
 public:
  static const ::gobgpapi::Statement& statement(const AddStatementRequest* msg);
};

const ::gobgpapi::Statement&
AddStatementRequest::_Internal::statement(const AddStatementRequest* msg) {
  return *msg->statement_;
}
AddStatementRequest::AddStatementRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddStatementRequest)
}
AddStatementRequest::AddStatementRequest(const AddStatementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_statement()) {
    statement_ = new ::gobgpapi::Statement(*from.statement_);
  } else {
    statement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddStatementRequest)
}

void AddStatementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddStatementRequest_gobgp_2eproto.base);
  statement_ = nullptr;
}

AddStatementRequest::~AddStatementRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddStatementRequest)
  SharedDtor();
}

void AddStatementRequest::SharedDtor() {
  if (this != internal_default_instance()) delete statement_;
}

void AddStatementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddStatementRequest& AddStatementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddStatementRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddStatementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Statement statement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddStatementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddStatementRequest)
  return target;
}

size_t AddStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddStatementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddStatementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddStatementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddStatementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddStatementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddStatementRequest)
    MergeFrom(*source);
  }
}

void AddStatementRequest::MergeFrom(const AddStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    _internal_mutable_statement()->::gobgpapi::Statement::MergeFrom(from._internal_statement());
  }
}

void AddStatementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStatementRequest::CopyFrom(const AddStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStatementRequest::IsInitialized() const {
  return true;
}

void AddStatementRequest::InternalSwap(AddStatementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statement_, other->statement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddStatementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteStatementRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeleteStatementRequest_default_instance_._instance.get_mutable()->statement_ = const_cast< ::gobgpapi::Statement*>(
      ::gobgpapi::Statement::internal_default_instance());
}
class DeleteStatementRequest::_Internal {
 public:
  static const ::gobgpapi::Statement& statement(const DeleteStatementRequest* msg);
};

const ::gobgpapi::Statement&
DeleteStatementRequest::_Internal::statement(const DeleteStatementRequest* msg) {
  return *msg->statement_;
}
DeleteStatementRequest::DeleteStatementRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteStatementRequest)
}
DeleteStatementRequest::DeleteStatementRequest(const DeleteStatementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_statement()) {
    statement_ = new ::gobgpapi::Statement(*from.statement_);
  } else {
    statement_ = nullptr;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteStatementRequest)
}

void DeleteStatementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteStatementRequest_gobgp_2eproto.base);
  ::memset(&statement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&statement_)) + sizeof(all_));
}

DeleteStatementRequest::~DeleteStatementRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteStatementRequest)
  SharedDtor();
}

void DeleteStatementRequest::SharedDtor() {
  if (this != internal_default_instance()) delete statement_;
}

void DeleteStatementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStatementRequest& DeleteStatementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStatementRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
  all_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteStatementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Statement statement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStatementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statement(this), target, stream);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteStatementRequest)
  return target;
}

size_t DeleteStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteStatementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statement_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStatementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStatementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStatementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteStatementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteStatementRequest)
    MergeFrom(*source);
  }
}

void DeleteStatementRequest::MergeFrom(const DeleteStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    _internal_mutable_statement()->::gobgpapi::Statement::MergeFrom(from._internal_statement());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeleteStatementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStatementRequest::CopyFrom(const DeleteStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStatementRequest::IsInitialized() const {
  return true;
}

void DeleteStatementRequest::InternalSwap(DeleteStatementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statement_, other->statement_);
  swap(all_, other->all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStatementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListStatementRequest::InitAsDefaultInstance() {
}
class ListStatementRequest::_Internal {
 public:
};

ListStatementRequest::ListStatementRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListStatementRequest)
}
ListStatementRequest::ListStatementRequest(const ListStatementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListStatementRequest)
}

void ListStatementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListStatementRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListStatementRequest::~ListStatementRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListStatementRequest)
  SharedDtor();
}

void ListStatementRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListStatementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStatementRequest& ListStatementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListStatementRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListStatementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListStatementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ListStatementRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStatementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListStatementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ListStatementRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListStatementRequest)
  return target;
}

size_t ListStatementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListStatementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStatementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStatementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListStatementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListStatementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListStatementRequest)
    MergeFrom(*source);
  }
}

void ListStatementRequest::MergeFrom(const ListStatementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListStatementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ListStatementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStatementRequest::CopyFrom(const ListStatementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListStatementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStatementRequest::IsInitialized() const {
  return true;
}

void ListStatementRequest::InternalSwap(ListStatementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStatementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListStatementResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListStatementResponse_default_instance_._instance.get_mutable()->statement_ = const_cast< ::gobgpapi::Statement*>(
      ::gobgpapi::Statement::internal_default_instance());
}
class ListStatementResponse::_Internal {
 public:
  static const ::gobgpapi::Statement& statement(const ListStatementResponse* msg);
};

const ::gobgpapi::Statement&
ListStatementResponse::_Internal::statement(const ListStatementResponse* msg) {
  return *msg->statement_;
}
ListStatementResponse::ListStatementResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListStatementResponse)
}
ListStatementResponse::ListStatementResponse(const ListStatementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_statement()) {
    statement_ = new ::gobgpapi::Statement(*from.statement_);
  } else {
    statement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListStatementResponse)
}

void ListStatementResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListStatementResponse_gobgp_2eproto.base);
  statement_ = nullptr;
}

ListStatementResponse::~ListStatementResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListStatementResponse)
  SharedDtor();
}

void ListStatementResponse::SharedDtor() {
  if (this != internal_default_instance()) delete statement_;
}

void ListStatementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStatementResponse& ListStatementResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListStatementResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListStatementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListStatementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListStatementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Statement statement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_statement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListStatementResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListStatementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::statement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListStatementResponse)
  return target;
}

size_t ListStatementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListStatementResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Statement statement = 1;
  if (this->has_statement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStatementResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStatementResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListStatementResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListStatementResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListStatementResponse)
    MergeFrom(*source);
  }
}

void ListStatementResponse::MergeFrom(const ListStatementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListStatementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statement()) {
    _internal_mutable_statement()->::gobgpapi::Statement::MergeFrom(from._internal_statement());
  }
}

void ListStatementResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStatementResponse::CopyFrom(const ListStatementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListStatementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStatementResponse::IsInitialized() const {
  return true;
}

void ListStatementResponse::InternalSwap(ListStatementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statement_, other->statement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListStatementResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPolicyAssignmentRequest::InitAsDefaultInstance() {
  ::gobgpapi::_AddPolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
class AddPolicyAssignmentRequest::_Internal {
 public:
  static const ::gobgpapi::PolicyAssignment& assignment(const AddPolicyAssignmentRequest* msg);
};

const ::gobgpapi::PolicyAssignment&
AddPolicyAssignmentRequest::_Internal::assignment(const AddPolicyAssignmentRequest* msg) {
  return *msg->assignment_;
}
AddPolicyAssignmentRequest::AddPolicyAssignmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPolicyAssignmentRequest)
}
AddPolicyAssignmentRequest::AddPolicyAssignmentRequest(const AddPolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPolicyAssignmentRequest)
}

void AddPolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPolicyAssignmentRequest_gobgp_2eproto.base);
  assignment_ = nullptr;
}

AddPolicyAssignmentRequest::~AddPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPolicyAssignmentRequest)
  SharedDtor();
}

void AddPolicyAssignmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void AddPolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPolicyAssignmentRequest& AddPolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddPolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPolicyAssignmentRequest)
  return target;
}

size_t AddPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void AddPolicyAssignmentRequest::MergeFrom(const AddPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
}

void AddPolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPolicyAssignmentRequest::CopyFrom(const AddPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void AddPolicyAssignmentRequest::InternalSwap(AddPolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(assignment_, other->assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePolicyAssignmentRequest::InitAsDefaultInstance() {
  ::gobgpapi::_DeletePolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
class DeletePolicyAssignmentRequest::_Internal {
 public:
  static const ::gobgpapi::PolicyAssignment& assignment(const DeletePolicyAssignmentRequest* msg);
};

const ::gobgpapi::PolicyAssignment&
DeletePolicyAssignmentRequest::_Internal::assignment(const DeletePolicyAssignmentRequest* msg) {
  return *msg->assignment_;
}
DeletePolicyAssignmentRequest::DeletePolicyAssignmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeletePolicyAssignmentRequest)
}
DeletePolicyAssignmentRequest::DeletePolicyAssignmentRequest(const DeletePolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  all_ = from.all_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeletePolicyAssignmentRequest)
}

void DeletePolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto.base);
  ::memset(&assignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&assignment_)) + sizeof(all_));
}

DeletePolicyAssignmentRequest::~DeletePolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeletePolicyAssignmentRequest)
  SharedDtor();
}

void DeletePolicyAssignmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void DeletePolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePolicyAssignmentRequest& DeletePolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeletePolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeletePolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  all_ = false;
  _internal_metadata_.Clear();
}

const char* DeletePolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeletePolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  // bool all = 2;
  if (this->all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeletePolicyAssignmentRequest)
  return target;
}

size_t DeletePolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeletePolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  // bool all = 2;
  if (this->all() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeletePolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeletePolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void DeletePolicyAssignmentRequest::MergeFrom(const DeletePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
  if (from.all() != 0) {
    _internal_set_all(from._internal_all());
  }
}

void DeletePolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePolicyAssignmentRequest::CopyFrom(const DeletePolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeletePolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void DeletePolicyAssignmentRequest::InternalSwap(DeletePolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(assignment_, other->assignment_);
  swap(all_, other->all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyAssignmentRequest::InitAsDefaultInstance() {
}
class ListPolicyAssignmentRequest::_Internal {
 public:
};

ListPolicyAssignmentRequest::ListPolicyAssignmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPolicyAssignmentRequest)
}
ListPolicyAssignmentRequest::ListPolicyAssignmentRequest(const ListPolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPolicyAssignmentRequest)
}

void ListPolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyAssignmentRequest_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
}

ListPolicyAssignmentRequest::~ListPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPolicyAssignmentRequest)
  SharedDtor();
}

void ListPolicyAssignmentRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyAssignmentRequest& ListPolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  _internal_metadata_.Clear();
}

const char* ListPolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ListPolicyAssignmentRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PolicyDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::gobgpapi::PolicyDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ListPolicyAssignmentRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .gobgpapi.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPolicyAssignmentRequest)
  return target;
}

size_t ListPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void ListPolicyAssignmentRequest::MergeFrom(const ListPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void ListPolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyAssignmentRequest::CopyFrom(const ListPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void ListPolicyAssignmentRequest::InternalSwap(ListPolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPolicyAssignmentResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListPolicyAssignmentResponse_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
class ListPolicyAssignmentResponse::_Internal {
 public:
  static const ::gobgpapi::PolicyAssignment& assignment(const ListPolicyAssignmentResponse* msg);
};

const ::gobgpapi::PolicyAssignment&
ListPolicyAssignmentResponse::_Internal::assignment(const ListPolicyAssignmentResponse* msg) {
  return *msg->assignment_;
}
ListPolicyAssignmentResponse::ListPolicyAssignmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListPolicyAssignmentResponse)
}
ListPolicyAssignmentResponse::ListPolicyAssignmentResponse(const ListPolicyAssignmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListPolicyAssignmentResponse)
}

void ListPolicyAssignmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPolicyAssignmentResponse_gobgp_2eproto.base);
  assignment_ = nullptr;
}

ListPolicyAssignmentResponse::~ListPolicyAssignmentResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListPolicyAssignmentResponse)
  SharedDtor();
}

void ListPolicyAssignmentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void ListPolicyAssignmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPolicyAssignmentResponse& ListPolicyAssignmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPolicyAssignmentResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListPolicyAssignmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListPolicyAssignmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListPolicyAssignmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPolicyAssignmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListPolicyAssignmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListPolicyAssignmentResponse)
  return target;
}

size_t ListPolicyAssignmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListPolicyAssignmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPolicyAssignmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPolicyAssignmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPolicyAssignmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListPolicyAssignmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListPolicyAssignmentResponse)
    MergeFrom(*source);
  }
}

void ListPolicyAssignmentResponse::MergeFrom(const ListPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListPolicyAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
}

void ListPolicyAssignmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPolicyAssignmentResponse::CopyFrom(const ListPolicyAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListPolicyAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPolicyAssignmentResponse::IsInitialized() const {
  return true;
}

void ListPolicyAssignmentResponse::InternalSwap(ListPolicyAssignmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(assignment_, other->assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPolicyAssignmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPolicyAssignmentRequest::InitAsDefaultInstance() {
  ::gobgpapi::_SetPolicyAssignmentRequest_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
class SetPolicyAssignmentRequest::_Internal {
 public:
  static const ::gobgpapi::PolicyAssignment& assignment(const SetPolicyAssignmentRequest* msg);
};

const ::gobgpapi::PolicyAssignment&
SetPolicyAssignmentRequest::_Internal::assignment(const SetPolicyAssignmentRequest* msg) {
  return *msg->assignment_;
}
SetPolicyAssignmentRequest::SetPolicyAssignmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.SetPolicyAssignmentRequest)
}
SetPolicyAssignmentRequest::SetPolicyAssignmentRequest(const SetPolicyAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_assignment()) {
    assignment_ = new ::gobgpapi::PolicyAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.SetPolicyAssignmentRequest)
}

void SetPolicyAssignmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPolicyAssignmentRequest_gobgp_2eproto.base);
  assignment_ = nullptr;
}

SetPolicyAssignmentRequest::~SetPolicyAssignmentRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.SetPolicyAssignmentRequest)
  SharedDtor();
}

void SetPolicyAssignmentRequest::SharedDtor() {
  if (this != internal_default_instance()) delete assignment_;
}

void SetPolicyAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPolicyAssignmentRequest& SetPolicyAssignmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPolicyAssignmentRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void SetPolicyAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.SetPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetPolicyAssignmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.PolicyAssignment assignment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPolicyAssignmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.SetPolicyAssignmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::assignment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.SetPolicyAssignmentRequest)
  return target;
}

size_t SetPolicyAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.SetPolicyAssignmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment assignment = 1;
  if (this->has_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assignment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPolicyAssignmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.SetPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPolicyAssignmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPolicyAssignmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.SetPolicyAssignmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.SetPolicyAssignmentRequest)
    MergeFrom(*source);
  }
}

void SetPolicyAssignmentRequest::MergeFrom(const SetPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.SetPolicyAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_assignment()) {
    _internal_mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from._internal_assignment());
  }
}

void SetPolicyAssignmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.SetPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPolicyAssignmentRequest::CopyFrom(const SetPolicyAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.SetPolicyAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPolicyAssignmentRequest::IsInitialized() const {
  return true;
}

void SetPolicyAssignmentRequest::InternalSwap(SetPolicyAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(assignment_, other->assignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPolicyAssignmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRpkiRequest::InitAsDefaultInstance() {
}
class AddRpkiRequest::_Internal {
 public:
};

AddRpkiRequest::AddRpkiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddRpkiRequest)
}
AddRpkiRequest::AddRpkiRequest(const AddRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&lifetime_, &from.lifetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddRpkiRequest)
}

void AddRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
}

AddRpkiRequest::~AddRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddRpkiRequest)
  SharedDtor();
}

void AddRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRpkiRequest& AddRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

const char* AddRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.AddRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // int64 lifetime = 3;
  if (this->lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lifetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddRpkiRequest)
  return target;
}

size_t AddRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int64 lifetime = 3;
  if (this->lifetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetime());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddRpkiRequest)
    MergeFrom(*source);
  }
}

void AddRpkiRequest::MergeFrom(const AddRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.lifetime() != 0) {
    _internal_set_lifetime(from._internal_lifetime());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void AddRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRpkiRequest::CopyFrom(const AddRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRpkiRequest::IsInitialized() const {
  return true;
}

void AddRpkiRequest::InternalSwap(AddRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lifetime_, other->lifetime_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRpkiRequest::InitAsDefaultInstance() {
}
class DeleteRpkiRequest::_Internal {
 public:
};

DeleteRpkiRequest::DeleteRpkiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteRpkiRequest)
}
DeleteRpkiRequest::DeleteRpkiRequest(const DeleteRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteRpkiRequest)
}

void DeleteRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

DeleteRpkiRequest::~DeleteRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteRpkiRequest)
  SharedDtor();
}

void DeleteRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRpkiRequest& DeleteRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeleteRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DeleteRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeleteRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteRpkiRequest)
  return target;
}

size_t DeleteRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteRpkiRequest)
    MergeFrom(*source);
  }
}

void DeleteRpkiRequest::MergeFrom(const DeleteRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DeleteRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRpkiRequest::CopyFrom(const DeleteRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRpkiRequest::IsInitialized() const {
  return true;
}

void DeleteRpkiRequest::InternalSwap(DeleteRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiRequest::InitAsDefaultInstance() {
  ::gobgpapi::_ListRpkiRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class ListRpkiRequest::_Internal {
 public:
  static const ::gobgpapi::Family& family(const ListRpkiRequest* msg);
};

const ::gobgpapi::Family&
ListRpkiRequest::_Internal::family(const ListRpkiRequest* msg) {
  return *msg->family_;
}
ListRpkiRequest::ListRpkiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListRpkiRequest)
}
ListRpkiRequest::ListRpkiRequest(const ListRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListRpkiRequest)
}

void ListRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiRequest_gobgp_2eproto.base);
  family_ = nullptr;
}

ListRpkiRequest::~ListRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListRpkiRequest)
  SharedDtor();
}

void ListRpkiRequest::SharedDtor() {
  if (this != internal_default_instance()) delete family_;
}

void ListRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiRequest& ListRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListRpkiRequest)
  return target;
}

size_t ListRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListRpkiRequest)
    MergeFrom(*source);
  }
}

void ListRpkiRequest::MergeFrom(const ListRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
}

void ListRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiRequest::CopyFrom(const ListRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiRequest::IsInitialized() const {
  return true;
}

void ListRpkiRequest::InternalSwap(ListRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListRpkiResponse_default_instance_._instance.get_mutable()->server_ = const_cast< ::gobgpapi::Rpki*>(
      ::gobgpapi::Rpki::internal_default_instance());
}
class ListRpkiResponse::_Internal {
 public:
  static const ::gobgpapi::Rpki& server(const ListRpkiResponse* msg);
};

const ::gobgpapi::Rpki&
ListRpkiResponse::_Internal::server(const ListRpkiResponse* msg) {
  return *msg->server_;
}
ListRpkiResponse::ListRpkiResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListRpkiResponse)
}
ListRpkiResponse::ListRpkiResponse(const ListRpkiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_server()) {
    server_ = new ::gobgpapi::Rpki(*from.server_);
  } else {
    server_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListRpkiResponse)
}

void ListRpkiResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiResponse_gobgp_2eproto.base);
  server_ = nullptr;
}

ListRpkiResponse::~ListRpkiResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListRpkiResponse)
  SharedDtor();
}

void ListRpkiResponse::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void ListRpkiResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiResponse& ListRpkiResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListRpkiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListRpkiResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Rpki server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListRpkiResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Rpki server = 1;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListRpkiResponse)
  return target;
}

size_t ListRpkiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListRpkiResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Rpki server = 1;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListRpkiResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListRpkiResponse)
    MergeFrom(*source);
  }
}

void ListRpkiResponse::MergeFrom(const ListRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListRpkiResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server()) {
    _internal_mutable_server()->::gobgpapi::Rpki::MergeFrom(from._internal_server());
  }
}

void ListRpkiResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiResponse::CopyFrom(const ListRpkiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListRpkiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiResponse::IsInitialized() const {
  return true;
}

void ListRpkiResponse::InternalSwap(ListRpkiResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_, other->server_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableRpkiRequest::InitAsDefaultInstance() {
}
class EnableRpkiRequest::_Internal {
 public:
};

EnableRpkiRequest::EnableRpkiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableRpkiRequest)
}
EnableRpkiRequest::EnableRpkiRequest(const EnableRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableRpkiRequest)
}

void EnableRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

EnableRpkiRequest::~EnableRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableRpkiRequest)
  SharedDtor();
}

void EnableRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableRpkiRequest& EnableRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnableRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

const char* EnableRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EnableRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableRpkiRequest)
  return target;
}

size_t EnableRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableRpkiRequest)
    MergeFrom(*source);
  }
}

void EnableRpkiRequest::MergeFrom(const EnableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void EnableRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableRpkiRequest::CopyFrom(const EnableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableRpkiRequest::IsInitialized() const {
  return true;
}

void EnableRpkiRequest::InternalSwap(EnableRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisableRpkiRequest::InitAsDefaultInstance() {
}
class DisableRpkiRequest::_Internal {
 public:
};

DisableRpkiRequest::DisableRpkiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableRpkiRequest)
}
DisableRpkiRequest::DisableRpkiRequest(const DisableRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableRpkiRequest)
}

void DisableRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisableRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

DisableRpkiRequest::~DisableRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableRpkiRequest)
  SharedDtor();
}

void DisableRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisableRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableRpkiRequest& DisableRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DisableRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

const char* DisableRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DisableRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DisableRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableRpkiRequest)
  return target;
}

size_t DisableRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisableRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableRpkiRequest)
    MergeFrom(*source);
  }
}

void DisableRpkiRequest::MergeFrom(const DisableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DisableRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableRpkiRequest::CopyFrom(const DisableRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableRpkiRequest::IsInitialized() const {
  return true;
}

void DisableRpkiRequest::InternalSwap(DisableRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetRpkiRequest::InitAsDefaultInstance() {
}
class ResetRpkiRequest::_Internal {
 public:
};

ResetRpkiRequest::ResetRpkiRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ResetRpkiRequest)
}
ResetRpkiRequest::ResetRpkiRequest(const ResetRpkiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&soft_) -
    reinterpret_cast<char*>(&port_)) + sizeof(soft_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ResetRpkiRequest)
}

void ResetRpkiRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetRpkiRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_) -
      reinterpret_cast<char*>(&port_)) + sizeof(soft_));
}

ResetRpkiRequest::~ResetRpkiRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ResetRpkiRequest)
  SharedDtor();
}

void ResetRpkiRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetRpkiRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetRpkiRequest& ResetRpkiRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetRpkiRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ResetRpkiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ResetRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_) -
      reinterpret_cast<char*>(&port_)) + sizeof(soft_));
  _internal_metadata_.Clear();
}

const char* ResetRpkiRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ResetRpkiRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool soft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          soft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetRpkiRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ResetRpkiRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ResetRpkiRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_soft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ResetRpkiRequest)
  return target;
}

size_t ResetRpkiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ResetRpkiRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // bool soft = 3;
  if (this->soft() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetRpkiRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRpkiRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetRpkiRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ResetRpkiRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ResetRpkiRequest)
    MergeFrom(*source);
  }
}

void ResetRpkiRequest::MergeFrom(const ResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ResetRpkiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.soft() != 0) {
    _internal_set_soft(from._internal_soft());
  }
}

void ResetRpkiRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRpkiRequest::CopyFrom(const ResetRpkiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ResetRpkiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRpkiRequest::IsInitialized() const {
  return true;
}

void ResetRpkiRequest::InternalSwap(ResetRpkiRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(soft_, other->soft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetRpkiRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiTableRequest::InitAsDefaultInstance() {
  ::gobgpapi::_ListRpkiTableRequest_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class ListRpkiTableRequest::_Internal {
 public:
  static const ::gobgpapi::Family& family(const ListRpkiTableRequest* msg);
};

const ::gobgpapi::Family&
ListRpkiTableRequest::_Internal::family(const ListRpkiTableRequest* msg) {
  return *msg->family_;
}
ListRpkiTableRequest::ListRpkiTableRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListRpkiTableRequest)
}
ListRpkiTableRequest::ListRpkiTableRequest(const ListRpkiTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListRpkiTableRequest)
}

void ListRpkiTableRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiTableRequest_gobgp_2eproto.base);
  family_ = nullptr;
}

ListRpkiTableRequest::~ListRpkiTableRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListRpkiTableRequest)
  SharedDtor();
}

void ListRpkiTableRequest::SharedDtor() {
  if (this != internal_default_instance()) delete family_;
}

void ListRpkiTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiTableRequest& ListRpkiTableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiTableRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListRpkiTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListRpkiTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListRpkiTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListRpkiTableRequest)
  return target;
}

size_t ListRpkiTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListRpkiTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiTableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListRpkiTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiTableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiTableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListRpkiTableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListRpkiTableRequest)
    MergeFrom(*source);
  }
}

void ListRpkiTableRequest::MergeFrom(const ListRpkiTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListRpkiTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
}

void ListRpkiTableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListRpkiTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiTableRequest::CopyFrom(const ListRpkiTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListRpkiTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiTableRequest::IsInitialized() const {
  return true;
}

void ListRpkiTableRequest::InternalSwap(ListRpkiTableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiTableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListRpkiTableResponse::InitAsDefaultInstance() {
  ::gobgpapi::_ListRpkiTableResponse_default_instance_._instance.get_mutable()->roa_ = const_cast< ::gobgpapi::Roa*>(
      ::gobgpapi::Roa::internal_default_instance());
}
class ListRpkiTableResponse::_Internal {
 public:
  static const ::gobgpapi::Roa& roa(const ListRpkiTableResponse* msg);
};

const ::gobgpapi::Roa&
ListRpkiTableResponse::_Internal::roa(const ListRpkiTableResponse* msg) {
  return *msg->roa_;
}
ListRpkiTableResponse::ListRpkiTableResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ListRpkiTableResponse)
}
ListRpkiTableResponse::ListRpkiTableResponse(const ListRpkiTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_roa()) {
    roa_ = new ::gobgpapi::Roa(*from.roa_);
  } else {
    roa_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ListRpkiTableResponse)
}

void ListRpkiTableResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListRpkiTableResponse_gobgp_2eproto.base);
  roa_ = nullptr;
}

ListRpkiTableResponse::~ListRpkiTableResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ListRpkiTableResponse)
  SharedDtor();
}

void ListRpkiTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete roa_;
}

void ListRpkiTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRpkiTableResponse& ListRpkiTableResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListRpkiTableResponse_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ListRpkiTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ListRpkiTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && roa_ != nullptr) {
    delete roa_;
  }
  roa_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListRpkiTableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Roa roa = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListRpkiTableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ListRpkiTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Roa roa = 1;
  if (this->has_roa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roa(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ListRpkiTableResponse)
  return target;
}

size_t ListRpkiTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ListRpkiTableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Roa roa = 1;
  if (this->has_roa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roa_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRpkiTableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ListRpkiTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRpkiTableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListRpkiTableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ListRpkiTableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ListRpkiTableResponse)
    MergeFrom(*source);
  }
}

void ListRpkiTableResponse::MergeFrom(const ListRpkiTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ListRpkiTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roa()) {
    _internal_mutable_roa()->::gobgpapi::Roa::MergeFrom(from._internal_roa());
  }
}

void ListRpkiTableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ListRpkiTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRpkiTableResponse::CopyFrom(const ListRpkiTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ListRpkiTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpkiTableResponse::IsInitialized() const {
  return true;
}

void ListRpkiTableResponse::InternalSwap(ListRpkiTableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roa_, other->roa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpkiTableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableZebraRequest::InitAsDefaultInstance() {
}
class EnableZebraRequest::_Internal {
 public:
};

EnableZebraRequest::EnableZebraRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableZebraRequest)
}
EnableZebraRequest::EnableZebraRequest(const EnableZebraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      route_types_(from.route_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  software_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_software_name().empty()) {
    software_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.software_name_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&mpls_label_range_size_) -
    reinterpret_cast<char*>(&version_)) + sizeof(mpls_label_range_size_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableZebraRequest)
}

void EnableZebraRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableZebraRequest_gobgp_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mpls_label_range_size_) -
      reinterpret_cast<char*>(&version_)) + sizeof(mpls_label_range_size_));
}

EnableZebraRequest::~EnableZebraRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableZebraRequest)
  SharedDtor();
}

void EnableZebraRequest::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableZebraRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableZebraRequest& EnableZebraRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableZebraRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnableZebraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableZebraRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_types_.Clear();
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mpls_label_range_size_) -
      reinterpret_cast<char*>(&version_)) + sizeof(mpls_label_range_size_));
  _internal_metadata_.Clear();
}

const char* EnableZebraRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EnableZebraRequest.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string route_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_route_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EnableZebraRequest.route_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nexthop_trigger_enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nexthop_trigger_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nexthop_trigger_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nexthop_trigger_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mpls_label_range_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mpls_label_range_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string software_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_software_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EnableZebraRequest.software_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableZebraRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableZebraRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableZebraRequest.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // repeated string route_types = 2;
  for (int i = 0, n = this->_internal_route_types_size(); i < n; i++) {
    const auto& s = this->_internal_route_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableZebraRequest.route_types");
    target = stream->WriteString(2, s, target);
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // bool nexthop_trigger_enable = 4;
  if (this->nexthop_trigger_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_nexthop_trigger_enable(), target);
  }

  // uint32 nexthop_trigger_delay = 5;
  if (this->nexthop_trigger_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nexthop_trigger_delay(), target);
  }

  // uint32 mpls_label_range_size = 6;
  if (this->mpls_label_range_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mpls_label_range_size(), target);
  }

  // string software_name = 7;
  if (this->software_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_software_name().data(), static_cast<int>(this->_internal_software_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableZebraRequest.software_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_software_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableZebraRequest)
  return target;
}

size_t EnableZebraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableZebraRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string route_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(route_types_.size());
  for (int i = 0, n = route_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      route_types_.Get(i));
  }

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string software_name = 7;
  if (this->software_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_software_name());
  }

  // uint32 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // bool nexthop_trigger_enable = 4;
  if (this->nexthop_trigger_enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 nexthop_trigger_delay = 5;
  if (this->nexthop_trigger_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nexthop_trigger_delay());
  }

  // uint32 mpls_label_range_size = 6;
  if (this->mpls_label_range_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls_label_range_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableZebraRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableZebraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableZebraRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableZebraRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableZebraRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableZebraRequest)
    MergeFrom(*source);
  }
}

void EnableZebraRequest::MergeFrom(const EnableZebraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableZebraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_types_.MergeFrom(from.route_types_);
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.software_name().size() > 0) {

    software_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.software_name_);
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.nexthop_trigger_enable() != 0) {
    _internal_set_nexthop_trigger_enable(from._internal_nexthop_trigger_enable());
  }
  if (from.nexthop_trigger_delay() != 0) {
    _internal_set_nexthop_trigger_delay(from._internal_nexthop_trigger_delay());
  }
  if (from.mpls_label_range_size() != 0) {
    _internal_set_mpls_label_range_size(from._internal_mpls_label_range_size());
  }
}

void EnableZebraRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableZebraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableZebraRequest::CopyFrom(const EnableZebraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableZebraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableZebraRequest::IsInitialized() const {
  return true;
}

void EnableZebraRequest::InternalSwap(EnableZebraRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_types_.InternalSwap(&other->route_types_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  software_name_.Swap(&other->software_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(nexthop_trigger_enable_, other->nexthop_trigger_enable_);
  swap(nexthop_trigger_delay_, other->nexthop_trigger_delay_);
  swap(mpls_label_range_size_, other->mpls_label_range_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableZebraRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableMrtRequest::InitAsDefaultInstance() {
}
class EnableMrtRequest::_Internal {
 public:
};

EnableMrtRequest::EnableMrtRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EnableMrtRequest)
}
EnableMrtRequest::EnableMrtRequest(const EnableMrtRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&dump_interval_, &from.dump_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&dump_type_) -
    reinterpret_cast<char*>(&dump_interval_)) + sizeof(dump_type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EnableMrtRequest)
}

void EnableMrtRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnableMrtRequest_gobgp_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dump_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_type_) -
      reinterpret_cast<char*>(&dump_interval_)) + sizeof(dump_type_));
}

EnableMrtRequest::~EnableMrtRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.EnableMrtRequest)
  SharedDtor();
}

void EnableMrtRequest::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnableMrtRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableMrtRequest& EnableMrtRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableMrtRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EnableMrtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EnableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dump_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_type_) -
      reinterpret_cast<char*>(&dump_interval_)) + sizeof(dump_type_));
  _internal_metadata_.Clear();
}

const char* EnableMrtRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dump_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dump_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EnableMrtRequest.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dump_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dump_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rotation_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rotation_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableMrtRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EnableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dump_type = 1;
  if (this->dump_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dump_type(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EnableMrtRequest.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // uint64 dump_interval = 3;
  if (this->dump_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dump_interval(), target);
  }

  // uint64 rotation_interval = 4;
  if (this->rotation_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rotation_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EnableMrtRequest)
  return target;
}

size_t EnableMrtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EnableMrtRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // uint64 dump_interval = 3;
  if (this->dump_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dump_interval());
  }

  // uint64 rotation_interval = 4;
  if (this->rotation_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rotation_interval());
  }

  // int32 dump_type = 1;
  if (this->dump_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dump_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMrtRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EnableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableMrtRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableMrtRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EnableMrtRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EnableMrtRequest)
    MergeFrom(*source);
  }
}

void EnableMrtRequest::MergeFrom(const EnableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EnableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.dump_interval() != 0) {
    _internal_set_dump_interval(from._internal_dump_interval());
  }
  if (from.rotation_interval() != 0) {
    _internal_set_rotation_interval(from._internal_rotation_interval());
  }
  if (from.dump_type() != 0) {
    _internal_set_dump_type(from._internal_dump_type());
  }
}

void EnableMrtRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EnableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableMrtRequest::CopyFrom(const EnableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EnableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMrtRequest::IsInitialized() const {
  return true;
}

void EnableMrtRequest::InternalSwap(EnableMrtRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dump_interval_, other->dump_interval_);
  swap(rotation_interval_, other->rotation_interval_);
  swap(dump_type_, other->dump_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableMrtRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisableMrtRequest::InitAsDefaultInstance() {
}
class DisableMrtRequest::_Internal {
 public:
};

DisableMrtRequest::DisableMrtRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DisableMrtRequest)
}
DisableMrtRequest::DisableMrtRequest(const DisableMrtRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DisableMrtRequest)
}

void DisableMrtRequest::SharedCtor() {
}

DisableMrtRequest::~DisableMrtRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DisableMrtRequest)
  SharedDtor();
}

void DisableMrtRequest::SharedDtor() {
}

void DisableMrtRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisableMrtRequest& DisableMrtRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisableMrtRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DisableMrtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DisableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DisableMrtRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisableMrtRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DisableMrtRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DisableMrtRequest)
  return target;
}

size_t DisableMrtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DisableMrtRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableMrtRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DisableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisableMrtRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisableMrtRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DisableMrtRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DisableMrtRequest)
    MergeFrom(*source);
  }
}

void DisableMrtRequest::MergeFrom(const DisableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DisableMrtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisableMrtRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DisableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableMrtRequest::CopyFrom(const DisableMrtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DisableMrtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableMrtRequest::IsInitialized() const {
  return true;
}

void DisableMrtRequest::InternalSwap(DisableMrtRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisableMrtRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddBmpRequest::InitAsDefaultInstance() {
}
class AddBmpRequest::_Internal {
 public:
};

AddBmpRequest::AddBmpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddBmpRequest)
}
AddBmpRequest::AddBmpRequest(const AddBmpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  sysname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sysname().empty()) {
    sysname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sysname_);
  }
  sysdescr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sysdescr().empty()) {
    sysdescr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sysdescr_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&statisticstimeout_) -
    reinterpret_cast<char*>(&port_)) + sizeof(statisticstimeout_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddBmpRequest)
}

void AddBmpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddBmpRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysdescr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statisticstimeout_) -
      reinterpret_cast<char*>(&port_)) + sizeof(statisticstimeout_));
}

AddBmpRequest::~AddBmpRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddBmpRequest)
  SharedDtor();
}

void AddBmpRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysdescr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddBmpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddBmpRequest& AddBmpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddBmpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddBmpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sysdescr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statisticstimeout_) -
      reinterpret_cast<char*>(&port_)) + sizeof(statisticstimeout_));
  _internal_metadata_.Clear();
}

const char* AddBmpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.AddBmpRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.AddBmpRequest.MonitoringPolicy policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_policy(static_cast<::gobgpapi::AddBmpRequest_MonitoringPolicy>(val));
        } else goto handle_unusual;
        continue;
      // int32 StatisticsTimeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          statisticstimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SysName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sysname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.AddBmpRequest.SysName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SysDescr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sysdescr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.AddBmpRequest.SysDescr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddBmpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddBmpRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .gobgpapi.AddBmpRequest.MonitoringPolicy policy = 3;
  if (this->policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_policy(), target);
  }

  // int32 StatisticsTimeout = 4;
  if (this->statisticstimeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_statisticstimeout(), target);
  }

  // string SysName = 5;
  if (this->sysname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sysname().data(), static_cast<int>(this->_internal_sysname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddBmpRequest.SysName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sysname(), target);
  }

  // string SysDescr = 6;
  if (this->sysdescr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sysdescr().data(), static_cast<int>(this->_internal_sysdescr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AddBmpRequest.SysDescr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sysdescr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddBmpRequest)
  return target;
}

size_t AddBmpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddBmpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string SysName = 5;
  if (this->sysname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sysname());
  }

  // string SysDescr = 6;
  if (this->sysdescr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sysdescr());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // .gobgpapi.AddBmpRequest.MonitoringPolicy policy = 3;
  if (this->policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_policy());
  }

  // int32 StatisticsTimeout = 4;
  if (this->statisticstimeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_statisticstimeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddBmpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddBmpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddBmpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddBmpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddBmpRequest)
    MergeFrom(*source);
  }
}

void AddBmpRequest::MergeFrom(const AddBmpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.sysname().size() > 0) {

    sysname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sysname_);
  }
  if (from.sysdescr().size() > 0) {

    sysdescr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sysdescr_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
  if (from.statisticstimeout() != 0) {
    _internal_set_statisticstimeout(from._internal_statisticstimeout());
  }
}

void AddBmpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBmpRequest::CopyFrom(const AddBmpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBmpRequest::IsInitialized() const {
  return true;
}

void AddBmpRequest::InternalSwap(AddBmpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sysname_.Swap(&other->sysname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sysdescr_.Swap(&other->sysdescr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(policy_, other->policy_);
  swap(statisticstimeout_, other->statisticstimeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBmpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteBmpRequest::InitAsDefaultInstance() {
}
class DeleteBmpRequest::_Internal {
 public:
};

DeleteBmpRequest::DeleteBmpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DeleteBmpRequest)
}
DeleteBmpRequest::DeleteBmpRequest(const DeleteBmpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DeleteBmpRequest)
}

void DeleteBmpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteBmpRequest_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

DeleteBmpRequest::~DeleteBmpRequest() {
  // @@protoc_insertion_point(destructor:gobgpapi.DeleteBmpRequest)
  SharedDtor();
}

void DeleteBmpRequest::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteBmpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteBmpRequest& DeleteBmpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteBmpRequest_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DeleteBmpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DeleteBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeleteBmpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DeleteBmpRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteBmpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DeleteBmpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DeleteBmpRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DeleteBmpRequest)
  return target;
}

size_t DeleteBmpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DeleteBmpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteBmpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DeleteBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteBmpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteBmpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DeleteBmpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DeleteBmpRequest)
    MergeFrom(*source);
  }
}

void DeleteBmpRequest::MergeFrom(const DeleteBmpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DeleteBmpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DeleteBmpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DeleteBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBmpRequest::CopyFrom(const DeleteBmpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DeleteBmpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBmpRequest::IsInitialized() const {
  return true;
}

void DeleteBmpRequest::InternalSwap(DeleteBmpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBmpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Family::InitAsDefaultInstance() {
}
class Family::_Internal {
 public:
};

Family::Family()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Family)
}
Family::Family(const Family& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&afi_, &from.afi_,
    static_cast<size_t>(reinterpret_cast<char*>(&safi_) -
    reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Family)
}

void Family::SharedCtor() {
  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safi_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
}

Family::~Family() {
  // @@protoc_insertion_point(destructor:gobgpapi.Family)
  SharedDtor();
}

void Family::SharedDtor() {
}

void Family::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Family& Family::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Family_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Family::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&afi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safi_) -
      reinterpret_cast<char*>(&afi_)) + sizeof(safi_));
  _internal_metadata_.Clear();
}

const char* Family::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family.Afi afi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_afi(static_cast<::gobgpapi::Family_Afi>(val));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Family.Safi safi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_safi(static_cast<::gobgpapi::Family_Safi>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Family::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family.Afi afi = 1;
  if (this->afi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_afi(), target);
  }

  // .gobgpapi.Family.Safi safi = 2;
  if (this->safi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_safi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Family)
  return target;
}

size_t Family::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Family)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Family.Afi afi = 1;
  if (this->afi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_afi());
  }

  // .gobgpapi.Family.Safi safi = 2;
  if (this->safi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_safi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Family::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Family)
  GOOGLE_DCHECK_NE(&from, this);
  const Family* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Family>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Family)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Family)
    MergeFrom(*source);
  }
}

void Family::MergeFrom(const Family& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Family)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.afi() != 0) {
    _internal_set_afi(from._internal_afi());
  }
  if (from.safi() != 0) {
    _internal_set_safi(from._internal_safi());
  }
}

void Family::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Family::CopyFrom(const Family& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Family::IsInitialized() const {
  return true;
}

void Family::InternalSwap(Family* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(afi_, other->afi_);
  swap(safi_, other->safi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Family::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Validation::InitAsDefaultInstance() {
}
class Validation::_Internal {
 public:
};

Validation::Validation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Validation)
}
Validation::Validation(const Validation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      matched_(from.matched_),
      unmatched_as_(from.unmatched_as_),
      unmatched_length_(from.unmatched_length_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&state_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Validation)
}

void Validation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Validation_gobgp_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reason_));
}

Validation::~Validation() {
  // @@protoc_insertion_point(destructor:gobgpapi.Validation)
  SharedDtor();
}

void Validation::SharedDtor() {
}

void Validation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Validation& Validation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Validation_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Validation::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matched_.Clear();
  unmatched_as_.Clear();
  unmatched_length_.Clear();
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

const char* Validation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Validation.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::gobgpapi::Validation_State>(val));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Validation.Reason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::gobgpapi::Validation_Reason>(val));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Roa matched = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matched(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Roa unmatched_as = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmatched_as(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Roa unmatched_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmatched_length(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Validation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Validation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Validation.State state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .gobgpapi.Validation.Reason reason = 2;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // repeated .gobgpapi.Roa matched = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matched_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_matched(i), target, stream);
  }

  // repeated .gobgpapi.Roa unmatched_as = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unmatched_as_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_unmatched_as(i), target, stream);
  }

  // repeated .gobgpapi.Roa unmatched_length = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unmatched_length_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_unmatched_length(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Validation)
  return target;
}

size_t Validation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Validation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.Roa matched = 3;
  total_size += 1UL * this->_internal_matched_size();
  for (const auto& msg : this->matched_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gobgpapi.Roa unmatched_as = 4;
  total_size += 1UL * this->_internal_unmatched_as_size();
  for (const auto& msg : this->unmatched_as_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gobgpapi.Roa unmatched_length = 5;
  total_size += 1UL * this->_internal_unmatched_length_size();
  for (const auto& msg : this->unmatched_length_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gobgpapi.Validation.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .gobgpapi.Validation.Reason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Validation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Validation)
  GOOGLE_DCHECK_NE(&from, this);
  const Validation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Validation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Validation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Validation)
    MergeFrom(*source);
  }
}

void Validation::MergeFrom(const Validation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Validation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matched_.MergeFrom(from.matched_);
  unmatched_as_.MergeFrom(from.unmatched_as_);
  unmatched_length_.MergeFrom(from.unmatched_length_);
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void Validation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Validation::CopyFrom(const Validation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Validation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validation::IsInitialized() const {
  return true;
}

void Validation::InternalSwap(Validation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  matched_.InternalSwap(&other->matched_);
  unmatched_as_.InternalSwap(&other->unmatched_as_);
  unmatched_length_.InternalSwap(&other->unmatched_length_);
  swap(state_, other->state_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Validation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
  ::gobgpapi::_Path_default_instance_._instance.get_mutable()->nlri_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gobgpapi::_Path_default_instance_._instance.get_mutable()->age_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::gobgpapi::_Path_default_instance_._instance.get_mutable()->validation_ = const_cast< ::gobgpapi::Validation*>(
      ::gobgpapi::Validation::internal_default_instance());
  ::gobgpapi::_Path_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class Path::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& nlri(const Path* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& age(const Path* msg);
  static const ::gobgpapi::Validation& validation(const Path* msg);
  static const ::gobgpapi::Family& family(const Path* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Path::_Internal::nlri(const Path* msg) {
  return *msg->nlri_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Path::_Internal::age(const Path* msg) {
  return *msg->age_;
}
const ::gobgpapi::Validation&
Path::_Internal::validation(const Path* msg) {
  return *msg->validation_;
}
const ::gobgpapi::Family&
Path::_Internal::family(const Path* msg) {
  return *msg->family_;
}
void Path::clear_nlri() {
  if (GetArenaNoVirtual() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
}
void Path::clear_pattrs() {
  pattrs_.Clear();
}
void Path::clear_age() {
  if (GetArenaNoVirtual() == nullptr && age_ != nullptr) {
    delete age_;
  }
  age_ = nullptr;
}
Path::Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pattrs_(from.pattrs_),
      pattrs_binary_(from.pattrs_binary_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_id().empty()) {
    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_ip().empty()) {
    neighbor_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_ip_);
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  nlri_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nlri_binary().empty()) {
    nlri_binary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nlri_binary_);
  }
  if (from._internal_has_nlri()) {
    nlri_ = new PROTOBUF_NAMESPACE_ID::Any(*from.nlri_);
  } else {
    nlri_ = nullptr;
  }
  if (from._internal_has_age()) {
    age_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.age_);
  } else {
    age_ = nullptr;
  }
  if (from._internal_has_validation()) {
    validation_ = new ::gobgpapi::Validation(*from.validation_);
  } else {
    validation_ = nullptr;
  }
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&best_, &from.best_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_identifier_) -
    reinterpret_cast<char*>(&best_)) + sizeof(local_identifier_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_gobgp_2eproto.base);
  source_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nlri_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nlri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_identifier_) -
      reinterpret_cast<char*>(&nlri_)) + sizeof(local_identifier_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:gobgpapi.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  source_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nlri_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nlri_;
  if (this != internal_default_instance()) delete age_;
  if (this != internal_default_instance()) delete validation_;
  if (this != internal_default_instance()) delete family_;
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattrs_.Clear();
  pattrs_binary_.Clear();
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nlri_binary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && age_ != nullptr) {
    delete age_;
  }
  age_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && validation_ != nullptr) {
    delete validation_;
  }
  validation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&best_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_identifier_) -
      reinterpret_cast<char*>(&best_)) + sizeof(local_identifier_));
  _internal_metadata_.Clear();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any nlri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nlri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any pattrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pattrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool best = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          best_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_withdraw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_withdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Validation validation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_validation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_implicit_withdraw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          no_implicit_withdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Family family = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 source_asn = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          source_asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_source_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Path.source_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool filtered = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stale = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          stale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_from_external = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_from_external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_ip = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_neighbor_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Path.neighbor_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_nexthop_invalid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          is_nexthop_invalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 identifier = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_identifier = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          local_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nlri_binary = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_nlri_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes pattrs_binary = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_pattrs_binary();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any nlri = 1;
  if (this->has_nlri()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nlri(this), target, stream);
  }

  // repeated .google.protobuf.Any pattrs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pattrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pattrs(i), target, stream);
  }

  // .google.protobuf.Timestamp age = 3;
  if (this->has_age()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::age(this), target, stream);
  }

  // bool best = 4;
  if (this->best() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_best(), target);
  }

  // bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_withdraw(), target);
  }

  // .gobgpapi.Validation validation = 7;
  if (this->has_validation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::validation(this), target, stream);
  }

  // bool no_implicit_withdraw = 8;
  if (this->no_implicit_withdraw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_no_implicit_withdraw(), target);
  }

  // .gobgpapi.Family family = 9;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::family(this), target, stream);
  }

  // uint32 source_asn = 10;
  if (this->source_asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_source_asn(), target);
  }

  // string source_id = 11;
  if (this->source_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_id().data(), static_cast<int>(this->_internal_source_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.source_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_source_id(), target);
  }

  // bool filtered = 12;
  if (this->filtered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_filtered(), target);
  }

  // bool stale = 13;
  if (this->stale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_stale(), target);
  }

  // bool is_from_external = 14;
  if (this->is_from_external() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_from_external(), target);
  }

  // string neighbor_ip = 15;
  if (this->neighbor_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_ip().data(), static_cast<int>(this->_internal_neighbor_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.neighbor_ip");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_neighbor_ip(), target);
  }

  // bytes uuid = 16;
  if (this->uuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_uuid(), target);
  }

  // bool is_nexthop_invalid = 17;
  if (this->is_nexthop_invalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_nexthop_invalid(), target);
  }

  // uint32 identifier = 18;
  if (this->identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_identifier(), target);
  }

  // uint32 local_identifier = 19;
  if (this->local_identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_local_identifier(), target);
  }

  // bytes nlri_binary = 20;
  if (this->nlri_binary().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_nlri_binary(), target);
  }

  // repeated bytes pattrs_binary = 21;
  for (int i = 0, n = this->_internal_pattrs_binary_size(); i < n; i++) {
    const auto& s = this->_internal_pattrs_binary(i);
    target = stream->WriteBytes(21, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any pattrs = 2;
  total_size += 1UL * this->_internal_pattrs_size();
  for (const auto& msg : this->pattrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes pattrs_binary = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pattrs_binary_.size());
  for (int i = 0, n = pattrs_binary_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      pattrs_binary_.Get(i));
  }

  // string source_id = 11;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_id());
  }

  // string neighbor_ip = 15;
  if (this->neighbor_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_ip());
  }

  // bytes uuid = 16;
  if (this->uuid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // bytes nlri_binary = 20;
  if (this->nlri_binary().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nlri_binary());
  }

  // .google.protobuf.Any nlri = 1;
  if (this->has_nlri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nlri_);
  }

  // .google.protobuf.Timestamp age = 3;
  if (this->has_age()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *age_);
  }

  // .gobgpapi.Validation validation = 7;
  if (this->has_validation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validation_);
  }

  // .gobgpapi.Family family = 9;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // bool best = 4;
  if (this->best() != 0) {
    total_size += 1 + 1;
  }

  // bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // bool no_implicit_withdraw = 8;
  if (this->no_implicit_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // bool filtered = 12;
  if (this->filtered() != 0) {
    total_size += 1 + 1;
  }

  // uint32 source_asn = 10;
  if (this->source_asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_source_asn());
  }

  // bool stale = 13;
  if (this->stale() != 0) {
    total_size += 1 + 1;
  }

  // bool is_from_external = 14;
  if (this->is_from_external() != 0) {
    total_size += 1 + 1;
  }

  // bool is_nexthop_invalid = 17;
  if (this->is_nexthop_invalid() != 0) {
    total_size += 2 + 1;
  }

  // uint32 identifier = 18;
  if (this->identifier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_identifier());
  }

  // uint32 local_identifier = 19;
  if (this->local_identifier() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pattrs_.MergeFrom(from.pattrs_);
  pattrs_binary_.MergeFrom(from.pattrs_binary_);
  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.neighbor_ip().size() > 0) {

    neighbor_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_ip_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.nlri_binary().size() > 0) {

    nlri_binary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nlri_binary_);
  }
  if (from.has_nlri()) {
    _internal_mutable_nlri()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_nlri());
  }
  if (from.has_age()) {
    _internal_mutable_age()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_age());
  }
  if (from.has_validation()) {
    _internal_mutable_validation()->::gobgpapi::Validation::MergeFrom(from._internal_validation());
  }
  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.best() != 0) {
    _internal_set_best(from._internal_best());
  }
  if (from.is_withdraw() != 0) {
    _internal_set_is_withdraw(from._internal_is_withdraw());
  }
  if (from.no_implicit_withdraw() != 0) {
    _internal_set_no_implicit_withdraw(from._internal_no_implicit_withdraw());
  }
  if (from.filtered() != 0) {
    _internal_set_filtered(from._internal_filtered());
  }
  if (from.source_asn() != 0) {
    _internal_set_source_asn(from._internal_source_asn());
  }
  if (from.stale() != 0) {
    _internal_set_stale(from._internal_stale());
  }
  if (from.is_from_external() != 0) {
    _internal_set_is_from_external(from._internal_is_from_external());
  }
  if (from.is_nexthop_invalid() != 0) {
    _internal_set_is_nexthop_invalid(from._internal_is_nexthop_invalid());
  }
  if (from.identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from.local_identifier() != 0) {
    _internal_set_local_identifier(from._internal_local_identifier());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pattrs_.InternalSwap(&other->pattrs_);
  pattrs_binary_.InternalSwap(&other->pattrs_binary_);
  source_id_.Swap(&other->source_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  neighbor_ip_.Swap(&other->neighbor_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nlri_binary_.Swap(&other->nlri_binary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nlri_, other->nlri_);
  swap(age_, other->age_);
  swap(validation_, other->validation_);
  swap(family_, other->family_);
  swap(best_, other->best_);
  swap(is_withdraw_, other->is_withdraw_);
  swap(no_implicit_withdraw_, other->no_implicit_withdraw_);
  swap(filtered_, other->filtered_);
  swap(source_asn_, other->source_asn_);
  swap(stale_, other->stale_);
  swap(is_from_external_, other->is_from_external_);
  swap(is_nexthop_invalid_, other->is_nexthop_invalid_);
  swap(identifier_, other->identifier_);
  swap(local_identifier_, other->local_identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Destination::InitAsDefaultInstance() {
}
class Destination::_Internal {
 public:
};

Destination::Destination()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Destination)
}
Destination::Destination(const Destination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Destination)
}

void Destination::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Destination_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:gobgpapi.Destination)
  SharedDtor();
}

void Destination::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Destination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Destination& Destination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Destination_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Destination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Destination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Destination.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Path paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Destination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Destination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Destination.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // repeated .gobgpapi.Path paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Destination)
  return target;
}

size_t Destination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Destination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.Path paths = 2;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Destination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  const Destination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Destination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Destination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Destination)
    MergeFrom(*source);
  }
}

void Destination::MergeFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Destination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
}

void Destination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destination::CopyFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {
  return true;
}

void Destination::InternalSwap(Destination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Destination::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableLookupPrefix::InitAsDefaultInstance() {
}
class TableLookupPrefix::_Internal {
 public:
};

TableLookupPrefix::TableLookupPrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TableLookupPrefix)
}
TableLookupPrefix::TableLookupPrefix(const TableLookupPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  lookup_option_ = from.lookup_option_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TableLookupPrefix)
}

void TableLookupPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableLookupPrefix_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lookup_option_ = 0;
}

TableLookupPrefix::~TableLookupPrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.TableLookupPrefix)
  SharedDtor();
}

void TableLookupPrefix::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableLookupPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableLookupPrefix& TableLookupPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableLookupPrefix_gobgp_2eproto.base);
  return *internal_default_instance();
}


void TableLookupPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TableLookupPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lookup_option_ = 0;
  _internal_metadata_.Clear();
}

const char* TableLookupPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.TableLookupPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.TableLookupOption lookup_option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_lookup_option(static_cast<::gobgpapi::TableLookupOption>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableLookupPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TableLookupPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.TableLookupPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // .gobgpapi.TableLookupOption lookup_option = 2;
  if (this->lookup_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lookup_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TableLookupPrefix)
  return target;
}

size_t TableLookupPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TableLookupPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // .gobgpapi.TableLookupOption lookup_option = 2;
  if (this->lookup_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lookup_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableLookupPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TableLookupPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const TableLookupPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableLookupPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TableLookupPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TableLookupPrefix)
    MergeFrom(*source);
  }
}

void TableLookupPrefix::MergeFrom(const TableLookupPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TableLookupPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.lookup_option() != 0) {
    _internal_set_lookup_option(from._internal_lookup_option());
  }
}

void TableLookupPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TableLookupPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableLookupPrefix::CopyFrom(const TableLookupPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TableLookupPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableLookupPrefix::IsInitialized() const {
  return true;
}

void TableLookupPrefix::InternalSwap(TableLookupPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lookup_option_, other->lookup_option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableLookupPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::gobgpapi::ApplyPolicy*>(
      ::gobgpapi::ApplyPolicy::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->conf_ = const_cast< ::gobgpapi::PeerConf*>(
      ::gobgpapi::PeerConf::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->ebgp_multihop_ = const_cast< ::gobgpapi::EbgpMultihop*>(
      ::gobgpapi::EbgpMultihop::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->route_reflector_ = const_cast< ::gobgpapi::RouteReflector*>(
      ::gobgpapi::RouteReflector::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::PeerState*>(
      ::gobgpapi::PeerState::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->timers_ = const_cast< ::gobgpapi::Timers*>(
      ::gobgpapi::Timers::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->transport_ = const_cast< ::gobgpapi::Transport*>(
      ::gobgpapi::Transport::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->route_server_ = const_cast< ::gobgpapi::RouteServer*>(
      ::gobgpapi::RouteServer::internal_default_instance());
  ::gobgpapi::_Peer_default_instance_._instance.get_mutable()->graceful_restart_ = const_cast< ::gobgpapi::GracefulRestart*>(
      ::gobgpapi::GracefulRestart::internal_default_instance());
}
class Peer::_Internal {
 public:
  static const ::gobgpapi::ApplyPolicy& apply_policy(const Peer* msg);
  static const ::gobgpapi::PeerConf& conf(const Peer* msg);
  static const ::gobgpapi::EbgpMultihop& ebgp_multihop(const Peer* msg);
  static const ::gobgpapi::RouteReflector& route_reflector(const Peer* msg);
  static const ::gobgpapi::PeerState& state(const Peer* msg);
  static const ::gobgpapi::Timers& timers(const Peer* msg);
  static const ::gobgpapi::Transport& transport(const Peer* msg);
  static const ::gobgpapi::RouteServer& route_server(const Peer* msg);
  static const ::gobgpapi::GracefulRestart& graceful_restart(const Peer* msg);
};

const ::gobgpapi::ApplyPolicy&
Peer::_Internal::apply_policy(const Peer* msg) {
  return *msg->apply_policy_;
}
const ::gobgpapi::PeerConf&
Peer::_Internal::conf(const Peer* msg) {
  return *msg->conf_;
}
const ::gobgpapi::EbgpMultihop&
Peer::_Internal::ebgp_multihop(const Peer* msg) {
  return *msg->ebgp_multihop_;
}
const ::gobgpapi::RouteReflector&
Peer::_Internal::route_reflector(const Peer* msg) {
  return *msg->route_reflector_;
}
const ::gobgpapi::PeerState&
Peer::_Internal::state(const Peer* msg) {
  return *msg->state_;
}
const ::gobgpapi::Timers&
Peer::_Internal::timers(const Peer* msg) {
  return *msg->timers_;
}
const ::gobgpapi::Transport&
Peer::_Internal::transport(const Peer* msg) {
  return *msg->transport_;
}
const ::gobgpapi::RouteServer&
Peer::_Internal::route_server(const Peer* msg) {
  return *msg->route_server_;
}
const ::gobgpapi::GracefulRestart&
Peer::_Internal::graceful_restart(const Peer* msg) {
  return *msg->graceful_restart_;
}
Peer::Peer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      afi_safis_(from.afi_safis_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  if (from._internal_has_conf()) {
    conf_ = new ::gobgpapi::PeerConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  if (from._internal_has_ebgp_multihop()) {
    ebgp_multihop_ = new ::gobgpapi::EbgpMultihop(*from.ebgp_multihop_);
  } else {
    ebgp_multihop_ = nullptr;
  }
  if (from._internal_has_route_reflector()) {
    route_reflector_ = new ::gobgpapi::RouteReflector(*from.route_reflector_);
  } else {
    route_reflector_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::PeerState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_timers()) {
    timers_ = new ::gobgpapi::Timers(*from.timers_);
  } else {
    timers_ = nullptr;
  }
  if (from._internal_has_transport()) {
    transport_ = new ::gobgpapi::Transport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  if (from._internal_has_route_server()) {
    route_server_ = new ::gobgpapi::RouteServer(*from.route_server_);
  } else {
    route_server_ = nullptr;
  }
  if (from._internal_has_graceful_restart()) {
    graceful_restart_ = new ::gobgpapi::GracefulRestart(*from.graceful_restart_);
  } else {
    graceful_restart_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Peer)
}

void Peer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Peer_gobgp_2eproto.base);
  ::memset(&apply_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graceful_restart_) -
      reinterpret_cast<char*>(&apply_policy_)) + sizeof(graceful_restart_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:gobgpapi.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete ebgp_multihop_;
  if (this != internal_default_instance()) delete route_reflector_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete timers_;
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete route_server_;
  if (this != internal_default_instance()) delete graceful_restart_;
}

void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Peer& Peer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Peer_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  afi_safis_.Clear();
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ebgp_multihop_ != nullptr) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_reflector_ != nullptr) {
    delete route_reflector_;
  }
  route_reflector_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_server_ != nullptr) {
    delete route_server_;
  }
  route_server_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.ApplyPolicy apply_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerConf conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ebgp_multihop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteReflector route_reflector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_reflector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Timers timers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Transport transport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteServer route_server = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.GracefulRestart graceful_restart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.AfiSafi afi_safis = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_afi_safis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::apply_policy(this), target, stream);
  }

  // .gobgpapi.PeerConf conf = 2;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::conf(this), target, stream);
  }

  // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ebgp_multihop(this), target, stream);
  }

  // .gobgpapi.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route_reflector(this), target, stream);
  }

  // .gobgpapi.PeerState state = 5;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::state(this), target, stream);
  }

  // .gobgpapi.Timers timers = 6;
  if (this->has_timers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timers(this), target, stream);
  }

  // .gobgpapi.Transport transport = 7;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transport(this), target, stream);
  }

  // .gobgpapi.RouteServer route_server = 8;
  if (this->has_route_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::route_server(this), target, stream);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::graceful_restart(this), target, stream);
  }

  // repeated .gobgpapi.AfiSafi afi_safis = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_afi_safis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_afi_safis(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.AfiSafi afi_safis = 10;
  total_size += 1UL * this->_internal_afi_safis_size();
  for (const auto& msg : this->afi_safis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // .gobgpapi.PeerConf conf = 2;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ebgp_multihop_);
  }

  // .gobgpapi.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_reflector_);
  }

  // .gobgpapi.PeerState state = 5;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .gobgpapi.Timers timers = 6;
  if (this->has_timers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timers_);
  }

  // .gobgpapi.Transport transport = 7;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  // .gobgpapi.RouteServer route_server = 8;
  if (this->has_route_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_server_);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graceful_restart_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Peer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Peer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Peer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  afi_safis_.MergeFrom(from.afi_safis_);
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::gobgpapi::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.has_conf()) {
    _internal_mutable_conf()->::gobgpapi::PeerConf::MergeFrom(from._internal_conf());
  }
  if (from.has_ebgp_multihop()) {
    _internal_mutable_ebgp_multihop()->::gobgpapi::EbgpMultihop::MergeFrom(from._internal_ebgp_multihop());
  }
  if (from.has_route_reflector()) {
    _internal_mutable_route_reflector()->::gobgpapi::RouteReflector::MergeFrom(from._internal_route_reflector());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::PeerState::MergeFrom(from._internal_state());
  }
  if (from.has_timers()) {
    _internal_mutable_timers()->::gobgpapi::Timers::MergeFrom(from._internal_timers());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::gobgpapi::Transport::MergeFrom(from._internal_transport());
  }
  if (from.has_route_server()) {
    _internal_mutable_route_server()->::gobgpapi::RouteServer::MergeFrom(from._internal_route_server());
  }
  if (from.has_graceful_restart()) {
    _internal_mutable_graceful_restart()->::gobgpapi::GracefulRestart::MergeFrom(from._internal_graceful_restart());
  }
}

void Peer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  afi_safis_.InternalSwap(&other->afi_safis_);
  swap(apply_policy_, other->apply_policy_);
  swap(conf_, other->conf_);
  swap(ebgp_multihop_, other->ebgp_multihop_);
  swap(route_reflector_, other->route_reflector_);
  swap(state_, other->state_);
  swap(timers_, other->timers_);
  swap(transport_, other->transport_);
  swap(route_server_, other->route_server_);
  swap(graceful_restart_, other->graceful_restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerGroup::InitAsDefaultInstance() {
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::gobgpapi::ApplyPolicy*>(
      ::gobgpapi::ApplyPolicy::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->conf_ = const_cast< ::gobgpapi::PeerGroupConf*>(
      ::gobgpapi::PeerGroupConf::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->ebgp_multihop_ = const_cast< ::gobgpapi::EbgpMultihop*>(
      ::gobgpapi::EbgpMultihop::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->route_reflector_ = const_cast< ::gobgpapi::RouteReflector*>(
      ::gobgpapi::RouteReflector::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->info_ = const_cast< ::gobgpapi::PeerGroupState*>(
      ::gobgpapi::PeerGroupState::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->timers_ = const_cast< ::gobgpapi::Timers*>(
      ::gobgpapi::Timers::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->transport_ = const_cast< ::gobgpapi::Transport*>(
      ::gobgpapi::Transport::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->route_server_ = const_cast< ::gobgpapi::RouteServer*>(
      ::gobgpapi::RouteServer::internal_default_instance());
  ::gobgpapi::_PeerGroup_default_instance_._instance.get_mutable()->graceful_restart_ = const_cast< ::gobgpapi::GracefulRestart*>(
      ::gobgpapi::GracefulRestart::internal_default_instance());
}
class PeerGroup::_Internal {
 public:
  static const ::gobgpapi::ApplyPolicy& apply_policy(const PeerGroup* msg);
  static const ::gobgpapi::PeerGroupConf& conf(const PeerGroup* msg);
  static const ::gobgpapi::EbgpMultihop& ebgp_multihop(const PeerGroup* msg);
  static const ::gobgpapi::RouteReflector& route_reflector(const PeerGroup* msg);
  static const ::gobgpapi::PeerGroupState& info(const PeerGroup* msg);
  static const ::gobgpapi::Timers& timers(const PeerGroup* msg);
  static const ::gobgpapi::Transport& transport(const PeerGroup* msg);
  static const ::gobgpapi::RouteServer& route_server(const PeerGroup* msg);
  static const ::gobgpapi::GracefulRestart& graceful_restart(const PeerGroup* msg);
};

const ::gobgpapi::ApplyPolicy&
PeerGroup::_Internal::apply_policy(const PeerGroup* msg) {
  return *msg->apply_policy_;
}
const ::gobgpapi::PeerGroupConf&
PeerGroup::_Internal::conf(const PeerGroup* msg) {
  return *msg->conf_;
}
const ::gobgpapi::EbgpMultihop&
PeerGroup::_Internal::ebgp_multihop(const PeerGroup* msg) {
  return *msg->ebgp_multihop_;
}
const ::gobgpapi::RouteReflector&
PeerGroup::_Internal::route_reflector(const PeerGroup* msg) {
  return *msg->route_reflector_;
}
const ::gobgpapi::PeerGroupState&
PeerGroup::_Internal::info(const PeerGroup* msg) {
  return *msg->info_;
}
const ::gobgpapi::Timers&
PeerGroup::_Internal::timers(const PeerGroup* msg) {
  return *msg->timers_;
}
const ::gobgpapi::Transport&
PeerGroup::_Internal::transport(const PeerGroup* msg) {
  return *msg->transport_;
}
const ::gobgpapi::RouteServer&
PeerGroup::_Internal::route_server(const PeerGroup* msg) {
  return *msg->route_server_;
}
const ::gobgpapi::GracefulRestart&
PeerGroup::_Internal::graceful_restart(const PeerGroup* msg) {
  return *msg->graceful_restart_;
}
PeerGroup::PeerGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerGroup)
}
PeerGroup::PeerGroup(const PeerGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      afi_safis_(from.afi_safis_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  if (from._internal_has_conf()) {
    conf_ = new ::gobgpapi::PeerGroupConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  if (from._internal_has_ebgp_multihop()) {
    ebgp_multihop_ = new ::gobgpapi::EbgpMultihop(*from.ebgp_multihop_);
  } else {
    ebgp_multihop_ = nullptr;
  }
  if (from._internal_has_route_reflector()) {
    route_reflector_ = new ::gobgpapi::RouteReflector(*from.route_reflector_);
  } else {
    route_reflector_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::gobgpapi::PeerGroupState(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_timers()) {
    timers_ = new ::gobgpapi::Timers(*from.timers_);
  } else {
    timers_ = nullptr;
  }
  if (from._internal_has_transport()) {
    transport_ = new ::gobgpapi::Transport(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  if (from._internal_has_route_server()) {
    route_server_ = new ::gobgpapi::RouteServer(*from.route_server_);
  } else {
    route_server_ = nullptr;
  }
  if (from._internal_has_graceful_restart()) {
    graceful_restart_ = new ::gobgpapi::GracefulRestart(*from.graceful_restart_);
  } else {
    graceful_restart_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerGroup)
}

void PeerGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerGroup_gobgp_2eproto.base);
  ::memset(&apply_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graceful_restart_) -
      reinterpret_cast<char*>(&apply_policy_)) + sizeof(graceful_restart_));
}

PeerGroup::~PeerGroup() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerGroup)
  SharedDtor();
}

void PeerGroup::SharedDtor() {
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete ebgp_multihop_;
  if (this != internal_default_instance()) delete route_reflector_;
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete timers_;
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete route_server_;
  if (this != internal_default_instance()) delete graceful_restart_;
}

void PeerGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerGroup& PeerGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerGroup_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PeerGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  afi_safis_.Clear();
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ebgp_multihop_ != nullptr) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_reflector_ != nullptr) {
    delete route_reflector_;
  }
  route_reflector_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_server_ != nullptr) {
    delete route_server_;
  }
  route_server_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PeerGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.ApplyPolicy apply_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerGroupConf conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ebgp_multihop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteReflector route_reflector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_reflector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerGroupState info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Timers timers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Transport transport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteServer route_server = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.GracefulRestart graceful_restart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.AfiSafi afi_safis = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_afi_safis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::apply_policy(this), target, stream);
  }

  // .gobgpapi.PeerGroupConf conf = 2;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::conf(this), target, stream);
  }

  // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ebgp_multihop(this), target, stream);
  }

  // .gobgpapi.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route_reflector(this), target, stream);
  }

  // .gobgpapi.PeerGroupState info = 5;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::info(this), target, stream);
  }

  // .gobgpapi.Timers timers = 6;
  if (this->has_timers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timers(this), target, stream);
  }

  // .gobgpapi.Transport transport = 7;
  if (this->has_transport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::transport(this), target, stream);
  }

  // .gobgpapi.RouteServer route_server = 8;
  if (this->has_route_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::route_server(this), target, stream);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::graceful_restart(this), target, stream);
  }

  // repeated .gobgpapi.AfiSafi afi_safis = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_afi_safis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_afi_safis(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerGroup)
  return target;
}

size_t PeerGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PeerGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.AfiSafi afi_safis = 10;
  total_size += 1UL * this->_internal_afi_safis_size();
  for (const auto& msg : this->afi_safis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 1;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // .gobgpapi.PeerGroupConf conf = 2;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
  if (this->has_ebgp_multihop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ebgp_multihop_);
  }

  // .gobgpapi.RouteReflector route_reflector = 4;
  if (this->has_route_reflector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_reflector_);
  }

  // .gobgpapi.PeerGroupState info = 5;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .gobgpapi.Timers timers = 6;
  if (this->has_timers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timers_);
  }

  // .gobgpapi.Transport transport = 7;
  if (this->has_transport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transport_);
  }

  // .gobgpapi.RouteServer route_server = 8;
  if (this->has_route_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_server_);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 9;
  if (this->has_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graceful_restart_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PeerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PeerGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PeerGroup)
    MergeFrom(*source);
  }
}

void PeerGroup::MergeFrom(const PeerGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PeerGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  afi_safis_.MergeFrom(from.afi_safis_);
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::gobgpapi::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.has_conf()) {
    _internal_mutable_conf()->::gobgpapi::PeerGroupConf::MergeFrom(from._internal_conf());
  }
  if (from.has_ebgp_multihop()) {
    _internal_mutable_ebgp_multihop()->::gobgpapi::EbgpMultihop::MergeFrom(from._internal_ebgp_multihop());
  }
  if (from.has_route_reflector()) {
    _internal_mutable_route_reflector()->::gobgpapi::RouteReflector::MergeFrom(from._internal_route_reflector());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::gobgpapi::PeerGroupState::MergeFrom(from._internal_info());
  }
  if (from.has_timers()) {
    _internal_mutable_timers()->::gobgpapi::Timers::MergeFrom(from._internal_timers());
  }
  if (from.has_transport()) {
    _internal_mutable_transport()->::gobgpapi::Transport::MergeFrom(from._internal_transport());
  }
  if (from.has_route_server()) {
    _internal_mutable_route_server()->::gobgpapi::RouteServer::MergeFrom(from._internal_route_server());
  }
  if (from.has_graceful_restart()) {
    _internal_mutable_graceful_restart()->::gobgpapi::GracefulRestart::MergeFrom(from._internal_graceful_restart());
  }
}

void PeerGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PeerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerGroup::CopyFrom(const PeerGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PeerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerGroup::IsInitialized() const {
  return true;
}

void PeerGroup::InternalSwap(PeerGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  afi_safis_.InternalSwap(&other->afi_safis_);
  swap(apply_policy_, other->apply_policy_);
  swap(conf_, other->conf_);
  swap(ebgp_multihop_, other->ebgp_multihop_);
  swap(route_reflector_, other->route_reflector_);
  swap(info_, other->info_);
  swap(timers_, other->timers_);
  swap(transport_, other->transport_);
  swap(route_server_, other->route_server_);
  swap(graceful_restart_, other->graceful_restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicNeighbor::InitAsDefaultInstance() {
}
class DynamicNeighbor::_Internal {
 public:
};

DynamicNeighbor::DynamicNeighbor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DynamicNeighbor)
}
DynamicNeighbor::DynamicNeighbor(const DynamicNeighbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DynamicNeighbor)
}

void DynamicNeighbor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicNeighbor_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DynamicNeighbor::~DynamicNeighbor() {
  // @@protoc_insertion_point(destructor:gobgpapi.DynamicNeighbor)
  SharedDtor();
}

void DynamicNeighbor::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DynamicNeighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicNeighbor& DynamicNeighbor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicNeighbor_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DynamicNeighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DynamicNeighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DynamicNeighbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DynamicNeighbor.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DynamicNeighbor.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicNeighbor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DynamicNeighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DynamicNeighbor.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string peer_group = 2;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DynamicNeighbor.peer_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DynamicNeighbor)
  return target;
}

size_t DynamicNeighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DynamicNeighbor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string peer_group = 2;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicNeighbor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DynamicNeighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicNeighbor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicNeighbor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DynamicNeighbor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DynamicNeighbor)
    MergeFrom(*source);
  }
}

void DynamicNeighbor::MergeFrom(const DynamicNeighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DynamicNeighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.peer_group().size() > 0) {

    peer_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
}

void DynamicNeighbor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DynamicNeighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicNeighbor::CopyFrom(const DynamicNeighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DynamicNeighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicNeighbor::IsInitialized() const {
  return true;
}

void DynamicNeighbor::InternalSwap(DynamicNeighbor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicNeighbor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplyPolicy::InitAsDefaultInstance() {
  ::gobgpapi::_ApplyPolicy_default_instance_._instance.get_mutable()->in_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
  ::gobgpapi::_ApplyPolicy_default_instance_._instance.get_mutable()->export_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
  ::gobgpapi::_ApplyPolicy_default_instance_._instance.get_mutable()->import_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(
      ::gobgpapi::PolicyAssignment::internal_default_instance());
}
class ApplyPolicy::_Internal {
 public:
  static const ::gobgpapi::PolicyAssignment& in_policy(const ApplyPolicy* msg);
  static const ::gobgpapi::PolicyAssignment& export_policy(const ApplyPolicy* msg);
  static const ::gobgpapi::PolicyAssignment& import_policy(const ApplyPolicy* msg);
};

const ::gobgpapi::PolicyAssignment&
ApplyPolicy::_Internal::in_policy(const ApplyPolicy* msg) {
  return *msg->in_policy_;
}
const ::gobgpapi::PolicyAssignment&
ApplyPolicy::_Internal::export_policy(const ApplyPolicy* msg) {
  return *msg->export_policy_;
}
const ::gobgpapi::PolicyAssignment&
ApplyPolicy::_Internal::import_policy(const ApplyPolicy* msg) {
  return *msg->import_policy_;
}
ApplyPolicy::ApplyPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ApplyPolicy)
}
ApplyPolicy::ApplyPolicy(const ApplyPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_in_policy()) {
    in_policy_ = new ::gobgpapi::PolicyAssignment(*from.in_policy_);
  } else {
    in_policy_ = nullptr;
  }
  if (from._internal_has_export_policy()) {
    export_policy_ = new ::gobgpapi::PolicyAssignment(*from.export_policy_);
  } else {
    export_policy_ = nullptr;
  }
  if (from._internal_has_import_policy()) {
    import_policy_ = new ::gobgpapi::PolicyAssignment(*from.import_policy_);
  } else {
    import_policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ApplyPolicy)
}

void ApplyPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplyPolicy_gobgp_2eproto.base);
  ::memset(&in_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&import_policy_) -
      reinterpret_cast<char*>(&in_policy_)) + sizeof(import_policy_));
}

ApplyPolicy::~ApplyPolicy() {
  // @@protoc_insertion_point(destructor:gobgpapi.ApplyPolicy)
  SharedDtor();
}

void ApplyPolicy::SharedDtor() {
  if (this != internal_default_instance()) delete in_policy_;
  if (this != internal_default_instance()) delete export_policy_;
  if (this != internal_default_instance()) delete import_policy_;
}

void ApplyPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyPolicy& ApplyPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplyPolicy_gobgp_2eproto.base);
  return *internal_default_instance();
}


void ApplyPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ApplyPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && in_policy_ != nullptr) {
    delete in_policy_;
  }
  in_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && export_policy_ != nullptr) {
    delete export_policy_;
  }
  export_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && import_policy_ != nullptr) {
    delete import_policy_;
  }
  import_policy_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ApplyPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.PolicyAssignment in_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PolicyAssignment export_policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PolicyAssignment import_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_import_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ApplyPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::in_policy(this), target, stream);
  }

  // .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::export_policy(this), target, stream);
  }

  // .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::import_policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ApplyPolicy)
  return target;
}

size_t ApplyPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ApplyPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_policy_);
  }

  // .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *export_policy_);
  }

  // .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *import_policy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ApplyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ApplyPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ApplyPolicy)
    MergeFrom(*source);
  }
}

void ApplyPolicy::MergeFrom(const ApplyPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ApplyPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_in_policy()) {
    _internal_mutable_in_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from._internal_in_policy());
  }
  if (from.has_export_policy()) {
    _internal_mutable_export_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from._internal_export_policy());
  }
  if (from.has_import_policy()) {
    _internal_mutable_import_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from._internal_import_policy());
  }
}

void ApplyPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ApplyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPolicy::CopyFrom(const ApplyPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ApplyPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPolicy::IsInitialized() const {
  return true;
}

void ApplyPolicy::InternalSwap(ApplyPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(in_policy_, other->in_policy_);
  swap(export_policy_, other->export_policy_);
  swap(import_policy_, other->import_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrefixLimit::InitAsDefaultInstance() {
  ::gobgpapi::_PrefixLimit_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class PrefixLimit::_Internal {
 public:
  static const ::gobgpapi::Family& family(const PrefixLimit* msg);
};

const ::gobgpapi::Family&
PrefixLimit::_Internal::family(const PrefixLimit* msg) {
  return *msg->family_;
}
PrefixLimit::PrefixLimit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PrefixLimit)
}
PrefixLimit::PrefixLimit(const PrefixLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&max_prefixes_, &from.max_prefixes_,
    static_cast<size_t>(reinterpret_cast<char*>(&shutdown_threshold_pct_) -
    reinterpret_cast<char*>(&max_prefixes_)) + sizeof(shutdown_threshold_pct_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PrefixLimit)
}

void PrefixLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrefixLimit_gobgp_2eproto.base);
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_threshold_pct_) -
      reinterpret_cast<char*>(&family_)) + sizeof(shutdown_threshold_pct_));
}

PrefixLimit::~PrefixLimit() {
  // @@protoc_insertion_point(destructor:gobgpapi.PrefixLimit)
  SharedDtor();
}

void PrefixLimit::SharedDtor() {
  if (this != internal_default_instance()) delete family_;
}

void PrefixLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrefixLimit& PrefixLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrefixLimit_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PrefixLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PrefixLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&max_prefixes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shutdown_threshold_pct_) -
      reinterpret_cast<char*>(&max_prefixes_)) + sizeof(shutdown_threshold_pct_));
  _internal_metadata_.Clear();
}

const char* PrefixLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_prefixes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_prefixes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shutdown_threshold_pct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shutdown_threshold_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrefixLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PrefixLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // uint32 max_prefixes = 2;
  if (this->max_prefixes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_prefixes(), target);
  }

  // uint32 shutdown_threshold_pct = 3;
  if (this->shutdown_threshold_pct() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shutdown_threshold_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PrefixLimit)
  return target;
}

size_t PrefixLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PrefixLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // uint32 max_prefixes = 2;
  if (this->max_prefixes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_prefixes());
  }

  // uint32 shutdown_threshold_pct = 3;
  if (this->shutdown_threshold_pct() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shutdown_threshold_pct());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrefixLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PrefixLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const PrefixLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrefixLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PrefixLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PrefixLimit)
    MergeFrom(*source);
  }
}

void PrefixLimit::MergeFrom(const PrefixLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PrefixLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.max_prefixes() != 0) {
    _internal_set_max_prefixes(from._internal_max_prefixes());
  }
  if (from.shutdown_threshold_pct() != 0) {
    _internal_set_shutdown_threshold_pct(from._internal_shutdown_threshold_pct());
  }
}

void PrefixLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PrefixLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrefixLimit::CopyFrom(const PrefixLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PrefixLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrefixLimit::IsInitialized() const {
  return true;
}

void PrefixLimit::InternalSwap(PrefixLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(family_, other->family_);
  swap(max_prefixes_, other->max_prefixes_);
  swap(shutdown_threshold_pct_, other->shutdown_threshold_pct_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrefixLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerConf::InitAsDefaultInstance() {
}
class PeerConf::_Internal {
 public:
};

PeerConf::PeerConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerConf)
}
PeerConf::PeerConf(const PeerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_address().empty()) {
    neighbor_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  neighbor_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_interface().empty()) {
    neighbor_interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_interface_);
  }
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf().empty()) {
    vrf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_);
  }
  ::memcpy(&local_as_, &from.local_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_own_as_) -
    reinterpret_cast<char*>(&local_as_)) + sizeof(allow_own_as_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerConf)
}

void PeerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerConf_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_own_as_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(allow_own_as_));
}

PeerConf::~PeerConf() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerConf)
  SharedDtor();
}

void PeerConf::SharedDtor() {
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerConf& PeerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerConf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PeerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_interface_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_own_as_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(allow_own_as_));
  _internal_metadata_.Clear();
}

const char* PeerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerConf.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerConf.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_as = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_neighbor_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerConf.neighbor_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_as = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          peer_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerConf.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          peer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_remove_private_as(static_cast<::gobgpapi::PeerConf_RemovePrivateAs>(val));
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_interface = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_neighbor_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerConf.neighbor_interface"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vrf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_vrf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerConf.vrf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 allow_own_as = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          allow_own_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool replace_peer_as = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          replace_peer_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool admin_down = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          admin_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_as(), target);
  }

  // string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_address().data(), static_cast<int>(this->_internal_neighbor_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_neighbor_address(), target);
  }

  // uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_peer_as(), target);
  }

  // string peer_group = 6;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.peer_group");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_peer_group(), target);
  }

  // uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_peer_type(), target);
  }

  // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_remove_private_as(), target);
  }

  // bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 10;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_send_community(), target);
  }

  // string neighbor_interface = 11;
  if (this->neighbor_interface().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_interface().data(), static_cast<int>(this->_internal_neighbor_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_interface");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_neighbor_interface(), target);
  }

  // string vrf = 12;
  if (this->vrf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vrf().data(), static_cast<int>(this->_internal_vrf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.vrf");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_vrf(), target);
  }

  // uint32 allow_own_as = 13;
  if (this->allow_own_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_allow_own_as(), target);
  }

  // bool replace_peer_as = 14;
  if (this->replace_peer_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_replace_peer_as(), target);
  }

  // bool admin_down = 15;
  if (this->admin_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_admin_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerConf)
  return target;
}

size_t PeerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PeerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_address());
  }

  // string peer_group = 6;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  // string neighbor_interface = 11;
  if (this->neighbor_interface().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_interface());
  }

  // string vrf = 12;
  if (this->vrf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vrf());
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_as());
  }

  // uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_as());
  }

  // uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_type());
  }

  // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remove_private_as());
  }

  // uint32 send_community = 10;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  // bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // bool replace_peer_as = 14;
  if (this->replace_peer_as() != 0) {
    total_size += 1 + 1;
  }

  // bool admin_down = 15;
  if (this->admin_down() != 0) {
    total_size += 1 + 1;
  }

  // uint32 allow_own_as = 13;
  if (this->allow_own_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_allow_own_as());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PeerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PeerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PeerConf)
    MergeFrom(*source);
  }
}

void PeerConf::MergeFrom(const PeerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PeerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.neighbor_address().size() > 0) {

    neighbor_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  if (from.peer_group().size() > 0) {

    peer_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  if (from.neighbor_interface().size() > 0) {

    neighbor_interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_interface_);
  }
  if (from.vrf().size() > 0) {

    vrf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vrf_);
  }
  if (from.local_as() != 0) {
    _internal_set_local_as(from._internal_local_as());
  }
  if (from.peer_as() != 0) {
    _internal_set_peer_as(from._internal_peer_as());
  }
  if (from.peer_type() != 0) {
    _internal_set_peer_type(from._internal_peer_type());
  }
  if (from.remove_private_as() != 0) {
    _internal_set_remove_private_as(from._internal_remove_private_as());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.replace_peer_as() != 0) {
    _internal_set_replace_peer_as(from._internal_replace_peer_as());
  }
  if (from.admin_down() != 0) {
    _internal_set_admin_down(from._internal_admin_down());
  }
  if (from.allow_own_as() != 0) {
    _internal_set_allow_own_as(from._internal_allow_own_as());
  }
}

void PeerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PeerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerConf::CopyFrom(const PeerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PeerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConf::IsInitialized() const {
  return true;
}

void PeerConf::InternalSwap(PeerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  neighbor_address_.Swap(&other->neighbor_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  neighbor_interface_.Swap(&other->neighbor_interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vrf_.Swap(&other->vrf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_as_, other->local_as_);
  swap(peer_as_, other->peer_as_);
  swap(peer_type_, other->peer_type_);
  swap(remove_private_as_, other->remove_private_as_);
  swap(send_community_, other->send_community_);
  swap(route_flap_damping_, other->route_flap_damping_);
  swap(replace_peer_as_, other->replace_peer_as_);
  swap(admin_down_, other->admin_down_);
  swap(allow_own_as_, other->allow_own_as_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerGroupConf::InitAsDefaultInstance() {
}
class PeerGroupConf::_Internal {
 public:
};

PeerGroupConf::PeerGroupConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerGroupConf)
}
PeerGroupConf::PeerGroupConf(const PeerGroupConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group_name().empty()) {
    peer_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_name_);
  }
  ::memcpy(&local_as_, &from.local_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_community_) -
    reinterpret_cast<char*>(&local_as_)) + sizeof(send_community_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerGroupConf)
}

void PeerGroupConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerGroupConf_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_community_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(send_community_));
}

PeerGroupConf::~PeerGroupConf() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerGroupConf)
  SharedDtor();
}

void PeerGroupConf::SharedDtor() {
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerGroupConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerGroupConf& PeerGroupConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerGroupConf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerGroupConf::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PeerGroupConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_community_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(send_community_));
  _internal_metadata_.Clear();
}

const char* PeerGroupConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerGroupConf.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerGroupConf.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_as = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_as = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_peer_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerGroupConf.peer_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          peer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerGroupConf.RemovePrivateAs remove_private_as = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_remove_private_as(static_cast<::gobgpapi::PeerGroupConf_RemovePrivateAs>(val));
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerGroupConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerGroupConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerGroupConf.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerGroupConf.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_as(), target);
  }

  // uint32 peer_as = 4;
  if (this->peer_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peer_as(), target);
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group_name().data(), static_cast<int>(this->_internal_peer_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerGroupConf.peer_group_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_peer_group_name(), target);
  }

  // uint32 peer_type = 6;
  if (this->peer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_peer_type(), target);
  }

  // .gobgpapi.PeerGroupConf.RemovePrivateAs remove_private_as = 7;
  if (this->remove_private_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_remove_private_as(), target);
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_send_community(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerGroupConf)
  return target;
}

size_t PeerGroupConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PeerGroupConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group_name());
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_as());
  }

  // uint32 peer_as = 4;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_as());
  }

  // uint32 peer_type = 6;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_type());
  }

  // .gobgpapi.PeerGroupConf.RemovePrivateAs remove_private_as = 7;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remove_private_as());
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerGroupConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PeerGroupConf)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerGroupConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerGroupConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PeerGroupConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PeerGroupConf)
    MergeFrom(*source);
  }
}

void PeerGroupConf::MergeFrom(const PeerGroupConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PeerGroupConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.peer_group_name().size() > 0) {

    peer_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_name_);
  }
  if (from.local_as() != 0) {
    _internal_set_local_as(from._internal_local_as());
  }
  if (from.peer_as() != 0) {
    _internal_set_peer_as(from._internal_peer_as());
  }
  if (from.peer_type() != 0) {
    _internal_set_peer_type(from._internal_peer_type());
  }
  if (from.remove_private_as() != 0) {
    _internal_set_remove_private_as(from._internal_remove_private_as());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
}

void PeerGroupConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PeerGroupConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerGroupConf::CopyFrom(const PeerGroupConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PeerGroupConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerGroupConf::IsInitialized() const {
  return true;
}

void PeerGroupConf::InternalSwap(PeerGroupConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_group_name_.Swap(&other->peer_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_as_, other->local_as_);
  swap(peer_as_, other->peer_as_);
  swap(peer_type_, other->peer_type_);
  swap(remove_private_as_, other->remove_private_as_);
  swap(route_flap_damping_, other->route_flap_damping_);
  swap(send_community_, other->send_community_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerGroupConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerGroupState::InitAsDefaultInstance() {
}
class PeerGroupState::_Internal {
 public:
};

PeerGroupState::PeerGroupState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerGroupState)
}
PeerGroupState::PeerGroupState(const PeerGroupState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group_name().empty()) {
    peer_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_name_);
  }
  ::memcpy(&local_as_, &from.local_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_prefixes_) -
    reinterpret_cast<char*>(&local_as_)) + sizeof(total_prefixes_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerGroupState)
}

void PeerGroupState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerGroupState_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_prefixes_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(total_prefixes_));
}

PeerGroupState::~PeerGroupState() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerGroupState)
  SharedDtor();
}

void PeerGroupState::SharedDtor() {
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerGroupState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerGroupState& PeerGroupState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerGroupState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerGroupState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PeerGroupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_prefixes_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(total_prefixes_));
  _internal_metadata_.Clear();
}

const char* PeerGroupState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerGroupState.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerGroupState.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_as = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_as = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_peer_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerGroupState.peer_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          peer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerGroupState.RemovePrivateAs remove_private_as = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_remove_private_as(static_cast<::gobgpapi::PeerGroupState_RemovePrivateAs>(val));
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_paths = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          total_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_prefixes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          total_prefixes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerGroupState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerGroupState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerGroupState.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerGroupState.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_as(), target);
  }

  // uint32 peer_as = 4;
  if (this->peer_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peer_as(), target);
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group_name().data(), static_cast<int>(this->_internal_peer_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerGroupState.peer_group_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_peer_group_name(), target);
  }

  // uint32 peer_type = 6;
  if (this->peer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_peer_type(), target);
  }

  // .gobgpapi.PeerGroupState.RemovePrivateAs remove_private_as = 7;
  if (this->remove_private_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_remove_private_as(), target);
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_send_community(), target);
  }

  // uint32 total_paths = 10;
  if (this->total_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_total_paths(), target);
  }

  // uint32 total_prefixes = 11;
  if (this->total_prefixes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_total_prefixes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerGroupState)
  return target;
}

size_t PeerGroupState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PeerGroupState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string peer_group_name = 5;
  if (this->peer_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group_name());
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_as());
  }

  // uint32 peer_as = 4;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_as());
  }

  // uint32 peer_type = 6;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_type());
  }

  // .gobgpapi.PeerGroupState.RemovePrivateAs remove_private_as = 7;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remove_private_as());
  }

  // bool route_flap_damping = 8;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_community = 9;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  // uint32 total_paths = 10;
  if (this->total_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_paths());
  }

  // uint32 total_prefixes = 11;
  if (this->total_prefixes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_prefixes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerGroupState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PeerGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerGroupState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerGroupState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PeerGroupState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PeerGroupState)
    MergeFrom(*source);
  }
}

void PeerGroupState::MergeFrom(const PeerGroupState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PeerGroupState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.peer_group_name().size() > 0) {

    peer_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_name_);
  }
  if (from.local_as() != 0) {
    _internal_set_local_as(from._internal_local_as());
  }
  if (from.peer_as() != 0) {
    _internal_set_peer_as(from._internal_peer_as());
  }
  if (from.peer_type() != 0) {
    _internal_set_peer_type(from._internal_peer_type());
  }
  if (from.remove_private_as() != 0) {
    _internal_set_remove_private_as(from._internal_remove_private_as());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
  if (from.total_paths() != 0) {
    _internal_set_total_paths(from._internal_total_paths());
  }
  if (from.total_prefixes() != 0) {
    _internal_set_total_prefixes(from._internal_total_prefixes());
  }
}

void PeerGroupState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PeerGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerGroupState::CopyFrom(const PeerGroupState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PeerGroupState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerGroupState::IsInitialized() const {
  return true;
}

void PeerGroupState::InternalSwap(PeerGroupState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_group_name_.Swap(&other->peer_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_as_, other->local_as_);
  swap(peer_as_, other->peer_as_);
  swap(peer_type_, other->peer_type_);
  swap(remove_private_as_, other->remove_private_as_);
  swap(route_flap_damping_, other->route_flap_damping_);
  swap(send_community_, other->send_community_);
  swap(total_paths_, other->total_paths_);
  swap(total_prefixes_, other->total_prefixes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerGroupState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EbgpMultihop::InitAsDefaultInstance() {
}
class EbgpMultihop::_Internal {
 public:
};

EbgpMultihop::EbgpMultihop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EbgpMultihop)
}
EbgpMultihop::EbgpMultihop(const EbgpMultihop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&multihop_ttl_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EbgpMultihop)
}

void EbgpMultihop::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multihop_ttl_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
}

EbgpMultihop::~EbgpMultihop() {
  // @@protoc_insertion_point(destructor:gobgpapi.EbgpMultihop)
  SharedDtor();
}

void EbgpMultihop::SharedDtor() {
}

void EbgpMultihop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbgpMultihop& EbgpMultihop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EbgpMultihop_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EbgpMultihop::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EbgpMultihop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multihop_ttl_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(multihop_ttl_));
  _internal_metadata_.Clear();
}

const char* EbgpMultihop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 multihop_ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          multihop_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EbgpMultihop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EbgpMultihop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_multihop_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EbgpMultihop)
  return target;
}

size_t EbgpMultihop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EbgpMultihop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_multihop_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbgpMultihop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EbgpMultihop)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpMultihop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EbgpMultihop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EbgpMultihop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EbgpMultihop)
    MergeFrom(*source);
  }
}

void EbgpMultihop::MergeFrom(const EbgpMultihop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EbgpMultihop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.multihop_ttl() != 0) {
    _internal_set_multihop_ttl(from._internal_multihop_ttl());
  }
}

void EbgpMultihop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EbgpMultihop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpMultihop::CopyFrom(const EbgpMultihop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EbgpMultihop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpMultihop::IsInitialized() const {
  return true;
}

void EbgpMultihop::InternalSwap(EbgpMultihop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(multihop_ttl_, other->multihop_ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EbgpMultihop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteReflector::InitAsDefaultInstance() {
}
class RouteReflector::_Internal {
 public:
};

RouteReflector::RouteReflector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteReflector)
}
RouteReflector::RouteReflector(const RouteReflector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_reflector_cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_route_reflector_cluster_id().empty()) {
    route_reflector_cluster_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_reflector_cluster_id_);
  }
  route_reflector_client_ = from.route_reflector_client_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteReflector)
}

void RouteReflector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteReflector_gobgp_2eproto.base);
  route_reflector_cluster_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_reflector_client_ = false;
}

RouteReflector::~RouteReflector() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteReflector)
  SharedDtor();
}

void RouteReflector::SharedDtor() {
  route_reflector_cluster_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteReflector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteReflector& RouteReflector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteReflector_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteReflector::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteReflector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_reflector_cluster_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_reflector_client_ = false;
  _internal_metadata_.Clear();
}

const char* RouteReflector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool route_reflector_client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_reflector_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string route_reflector_cluster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_route_reflector_cluster_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.RouteReflector.route_reflector_cluster_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteReflector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteReflector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_route_reflector_client(), target);
  }

  // string route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_reflector_cluster_id().data(), static_cast<int>(this->_internal_route_reflector_cluster_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RouteReflector.route_reflector_cluster_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route_reflector_cluster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteReflector)
  return target;
}

size_t RouteReflector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteReflector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_reflector_cluster_id());
  }

  // bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteReflector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteReflector)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteReflector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteReflector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteReflector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteReflector)
    MergeFrom(*source);
  }
}

void RouteReflector::MergeFrom(const RouteReflector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteReflector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_reflector_cluster_id().size() > 0) {

    route_reflector_cluster_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_reflector_cluster_id_);
  }
  if (from.route_reflector_client() != 0) {
    _internal_set_route_reflector_client(from._internal_route_reflector_client());
  }
}

void RouteReflector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteReflector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteReflector::CopyFrom(const RouteReflector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteReflector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteReflector::IsInitialized() const {
  return true;
}

void RouteReflector::InternalSwap(RouteReflector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_reflector_cluster_id_.Swap(&other->route_reflector_cluster_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(route_reflector_client_, other->route_reflector_client_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteReflector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerState::InitAsDefaultInstance() {
  ::gobgpapi::_PeerState_default_instance_._instance.get_mutable()->messages_ = const_cast< ::gobgpapi::Messages*>(
      ::gobgpapi::Messages::internal_default_instance());
  ::gobgpapi::_PeerState_default_instance_._instance.get_mutable()->queues_ = const_cast< ::gobgpapi::Queues*>(
      ::gobgpapi::Queues::internal_default_instance());
}
class PeerState::_Internal {
 public:
  static const ::gobgpapi::Messages& messages(const PeerState* msg);
  static const ::gobgpapi::Queues& queues(const PeerState* msg);
};

const ::gobgpapi::Messages&
PeerState::_Internal::messages(const PeerState* msg) {
  return *msg->messages_;
}
const ::gobgpapi::Queues&
PeerState::_Internal::queues(const PeerState* msg) {
  return *msg->queues_;
}
void PeerState::clear_remote_cap() {
  remote_cap_.Clear();
}
void PeerState::clear_local_cap() {
  local_cap_.Clear();
}
PeerState::PeerState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerState)
}
PeerState::PeerState(const PeerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      remote_cap_(from.remote_cap_),
      local_cap_(from.local_cap_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth_password().empty()) {
    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_address().empty()) {
    neighbor_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer_group().empty()) {
    peer_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_router_id().empty()) {
    router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.router_id_);
  }
  if (from._internal_has_messages()) {
    messages_ = new ::gobgpapi::Messages(*from.messages_);
  } else {
    messages_ = nullptr;
  }
  if (from._internal_has_queues()) {
    queues_ = new ::gobgpapi::Queues(*from.queues_);
  } else {
    queues_ = nullptr;
  }
  ::memcpy(&local_as_, &from.local_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&flops_) -
    reinterpret_cast<char*>(&local_as_)) + sizeof(flops_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerState)
}

void PeerState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerState_gobgp_2eproto.base);
  auth_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&messages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flops_) -
      reinterpret_cast<char*>(&messages_)) + sizeof(flops_));
}

PeerState::~PeerState() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerState)
  SharedDtor();
}

void PeerState::SharedDtor() {
  auth_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete messages_;
  if (this != internal_default_instance()) delete queues_;
}

void PeerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerState& PeerState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PeerState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PeerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_cap_.Clear();
  local_cap_.Clear();
  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && messages_ != nullptr) {
    delete messages_;
  }
  messages_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && queues_ != nullptr) {
    delete queues_;
  }
  queues_ = nullptr;
  ::memset(&local_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flops_) -
      reinterpret_cast<char*>(&local_as_)) + sizeof(flops_));
  _internal_metadata_.Clear();
}

const char* PeerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string auth_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auth_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerState.auth_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerState.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_as = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Messages messages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_messages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_neighbor_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerState.neighbor_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_as = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          peer_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string peer_group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_peer_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerState.peer_group"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          peer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Queues queues = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_queues(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remove_private_as = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          remove_private_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool route_flap_damping = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          route_flap_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_community = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          send_community_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerState.SessionState session_state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_session_state(static_cast<::gobgpapi::PeerState_SessionState>(val));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PeerState.AdminState admin_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_admin_state(static_cast<::gobgpapi::PeerState_AdminState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 out_q = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          out_q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flops = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          flops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any remote_cap = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_remote_cap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any local_cap = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_local_cap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // string router_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PeerState.router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_password().data(), static_cast<int>(this->_internal_auth_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.auth_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_password(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_as(), target);
  }

  // .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::messages(this), target, stream);
  }

  // string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_address().data(), static_cast<int>(this->_internal_neighbor_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.neighbor_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_neighbor_address(), target);
  }

  // uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_peer_as(), target);
  }

  // string peer_group = 7;
  if (this->peer_group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_group().data(), static_cast<int>(this->_internal_peer_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.peer_group");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_peer_group(), target);
  }

  // uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_peer_type(), target);
  }

  // .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::queues(this), target, stream);
  }

  // uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_remove_private_as(), target);
  }

  // bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_route_flap_damping(), target);
  }

  // uint32 send_community = 12;
  if (this->send_community() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_send_community(), target);
  }

  // .gobgpapi.PeerState.SessionState session_state = 13;
  if (this->session_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_session_state(), target);
  }

  // .gobgpapi.PeerState.AdminState admin_state = 15;
  if (this->admin_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_admin_state(), target);
  }

  // uint32 out_q = 16;
  if (this->out_q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_out_q(), target);
  }

  // uint32 flops = 17;
  if (this->flops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_flops(), target);
  }

  // repeated .google.protobuf.Any remote_cap = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remote_cap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_remote_cap(i), target, stream);
  }

  // repeated .google.protobuf.Any local_cap = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_local_cap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_local_cap(i), target, stream);
  }

  // string router_id = 20;
  if (this->router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_router_id().data(), static_cast<int>(this->_internal_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.router_id");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_router_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerState)
  return target;
}

size_t PeerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PeerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any remote_cap = 18;
  total_size += 2UL * this->_internal_remote_cap_size();
  for (const auto& msg : this->remote_cap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any local_cap = 19;
  total_size += 2UL * this->_internal_local_cap_size();
  for (const auto& msg : this->local_cap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_password());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_address());
  }

  // string peer_group = 7;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_group());
  }

  // string router_id = 20;
  if (this->router_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_router_id());
  }

  // .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messages_);
  }

  // .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *queues_);
  }

  // uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_as());
  }

  // uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_as());
  }

  // uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_type());
  }

  // uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remove_private_as());
  }

  // bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_community = 12;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_community());
  }

  // .gobgpapi.PeerState.SessionState session_state = 13;
  if (this->session_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_state());
  }

  // .gobgpapi.PeerState.AdminState admin_state = 15;
  if (this->admin_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_admin_state());
  }

  // uint32 out_q = 16;
  if (this->out_q() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out_q());
  }

  // uint32 flops = 17;
  if (this->flops() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flops());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PeerState)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PeerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PeerState)
    MergeFrom(*source);
  }
}

void PeerState::MergeFrom(const PeerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PeerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remote_cap_.MergeFrom(from.remote_cap_);
  local_cap_.MergeFrom(from.local_cap_);
  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.neighbor_address().size() > 0) {

    neighbor_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  if (from.peer_group().size() > 0) {

    peer_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  if (from.router_id().size() > 0) {

    router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.router_id_);
  }
  if (from.has_messages()) {
    _internal_mutable_messages()->::gobgpapi::Messages::MergeFrom(from._internal_messages());
  }
  if (from.has_queues()) {
    _internal_mutable_queues()->::gobgpapi::Queues::MergeFrom(from._internal_queues());
  }
  if (from.local_as() != 0) {
    _internal_set_local_as(from._internal_local_as());
  }
  if (from.peer_as() != 0) {
    _internal_set_peer_as(from._internal_peer_as());
  }
  if (from.peer_type() != 0) {
    _internal_set_peer_type(from._internal_peer_type());
  }
  if (from.remove_private_as() != 0) {
    _internal_set_remove_private_as(from._internal_remove_private_as());
  }
  if (from.route_flap_damping() != 0) {
    _internal_set_route_flap_damping(from._internal_route_flap_damping());
  }
  if (from.send_community() != 0) {
    _internal_set_send_community(from._internal_send_community());
  }
  if (from.session_state() != 0) {
    _internal_set_session_state(from._internal_session_state());
  }
  if (from.admin_state() != 0) {
    _internal_set_admin_state(from._internal_admin_state());
  }
  if (from.out_q() != 0) {
    _internal_set_out_q(from._internal_out_q());
  }
  if (from.flops() != 0) {
    _internal_set_flops(from._internal_flops());
  }
}

void PeerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PeerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerState::CopyFrom(const PeerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PeerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerState::IsInitialized() const {
  return true;
}

void PeerState::InternalSwap(PeerState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_cap_.InternalSwap(&other->remote_cap_);
  local_cap_.InternalSwap(&other->local_cap_);
  auth_password_.Swap(&other->auth_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  neighbor_address_.Swap(&other->neighbor_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  peer_group_.Swap(&other->peer_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  router_id_.Swap(&other->router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(messages_, other->messages_);
  swap(queues_, other->queues_);
  swap(local_as_, other->local_as_);
  swap(peer_as_, other->peer_as_);
  swap(peer_type_, other->peer_type_);
  swap(remove_private_as_, other->remove_private_as_);
  swap(route_flap_damping_, other->route_flap_damping_);
  swap(send_community_, other->send_community_);
  swap(session_state_, other->session_state_);
  swap(admin_state_, other->admin_state_);
  swap(out_q_, other->out_q_);
  swap(flops_, other->flops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Messages::InitAsDefaultInstance() {
  ::gobgpapi::_Messages_default_instance_._instance.get_mutable()->received_ = const_cast< ::gobgpapi::Message*>(
      ::gobgpapi::Message::internal_default_instance());
  ::gobgpapi::_Messages_default_instance_._instance.get_mutable()->sent_ = const_cast< ::gobgpapi::Message*>(
      ::gobgpapi::Message::internal_default_instance());
}
class Messages::_Internal {
 public:
  static const ::gobgpapi::Message& received(const Messages* msg);
  static const ::gobgpapi::Message& sent(const Messages* msg);
};

const ::gobgpapi::Message&
Messages::_Internal::received(const Messages* msg) {
  return *msg->received_;
}
const ::gobgpapi::Message&
Messages::_Internal::sent(const Messages* msg) {
  return *msg->sent_;
}
Messages::Messages()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Messages)
}
Messages::Messages(const Messages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_received()) {
    received_ = new ::gobgpapi::Message(*from.received_);
  } else {
    received_ = nullptr;
  }
  if (from._internal_has_sent()) {
    sent_ = new ::gobgpapi::Message(*from.sent_);
  } else {
    sent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Messages)
}

void Messages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Messages_gobgp_2eproto.base);
  ::memset(&received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_) -
      reinterpret_cast<char*>(&received_)) + sizeof(sent_));
}

Messages::~Messages() {
  // @@protoc_insertion_point(destructor:gobgpapi.Messages)
  SharedDtor();
}

void Messages::SharedDtor() {
  if (this != internal_default_instance()) delete received_;
  if (this != internal_default_instance()) delete sent_;
}

void Messages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Messages& Messages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Messages_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Messages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && received_ != nullptr) {
    delete received_;
  }
  received_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sent_ != nullptr) {
    delete sent_;
  }
  sent_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Messages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Message received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Message sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Messages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Messages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Message received = 1;
  if (this->has_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::received(this), target, stream);
  }

  // .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Messages)
  return target;
}

size_t Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Messages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Message received = 1;
  if (this->has_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *received_);
  }

  // .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Messages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  const Messages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Messages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Messages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Messages)
    MergeFrom(*source);
  }
}

void Messages::MergeFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Messages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_received()) {
    _internal_mutable_received()->::gobgpapi::Message::MergeFrom(from._internal_received());
  }
  if (from.has_sent()) {
    _internal_mutable_sent()->::gobgpapi::Message::MergeFrom(from._internal_sent());
  }
}

void Messages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Messages::CopyFrom(const Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messages::IsInitialized() const {
  return true;
}

void Messages::InternalSwap(Messages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(received_, other->received_);
  swap(sent_, other->sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Messages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
};

Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&notification_, &from.notification_,
    static_cast<size_t>(reinterpret_cast<char*>(&withdraw_prefix_) -
    reinterpret_cast<char*>(&notification_)) + sizeof(withdraw_prefix_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Message)
}

void Message::SharedCtor() {
  ::memset(&notification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&withdraw_prefix_) -
      reinterpret_cast<char*>(&notification_)) + sizeof(withdraw_prefix_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:gobgpapi.Message)
  SharedDtor();
}

void Message::SharedDtor() {
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&notification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&withdraw_prefix_) -
      reinterpret_cast<char*>(&notification_)) + sizeof(withdraw_prefix_));
  _internal_metadata_.Clear();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 notification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 keepalive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keepalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 refresh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 discarded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          discarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 withdraw_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          withdraw_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 withdraw_prefix = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          withdraw_prefix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 notification = 1;
  if (this->notification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_notification(), target);
  }

  // uint64 update = 2;
  if (this->update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_update(), target);
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_open(), target);
  }

  // uint64 keepalive = 4;
  if (this->keepalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_keepalive(), target);
  }

  // uint64 refresh = 5;
  if (this->refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_refresh(), target);
  }

  // uint64 discarded = 6;
  if (this->discarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_discarded(), target);
  }

  // uint64 total = 7;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_total(), target);
  }

  // uint64 withdraw_update = 8;
  if (this->withdraw_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_withdraw_update(), target);
  }

  // uint64 withdraw_prefix = 9;
  if (this->withdraw_prefix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_withdraw_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 notification = 1;
  if (this->notification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_notification());
  }

  // uint64 update = 2;
  if (this->update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_update());
  }

  // uint64 open = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_open());
  }

  // uint64 keepalive = 4;
  if (this->keepalive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keepalive());
  }

  // uint64 refresh = 5;
  if (this->refresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_refresh());
  }

  // uint64 discarded = 6;
  if (this->discarded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_discarded());
  }

  // uint64 total = 7;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total());
  }

  // uint64 withdraw_update = 8;
  if (this->withdraw_update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_withdraw_update());
  }

  // uint64 withdraw_prefix = 9;
  if (this->withdraw_prefix() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_withdraw_prefix());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.notification() != 0) {
    _internal_set_notification(from._internal_notification());
  }
  if (from.update() != 0) {
    _internal_set_update(from._internal_update());
  }
  if (from.open() != 0) {
    _internal_set_open(from._internal_open());
  }
  if (from.keepalive() != 0) {
    _internal_set_keepalive(from._internal_keepalive());
  }
  if (from.refresh() != 0) {
    _internal_set_refresh(from._internal_refresh());
  }
  if (from.discarded() != 0) {
    _internal_set_discarded(from._internal_discarded());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.withdraw_update() != 0) {
    _internal_set_withdraw_update(from._internal_withdraw_update());
  }
  if (from.withdraw_prefix() != 0) {
    _internal_set_withdraw_prefix(from._internal_withdraw_prefix());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(notification_, other->notification_);
  swap(update_, other->update_);
  swap(open_, other->open_);
  swap(keepalive_, other->keepalive_);
  swap(refresh_, other->refresh_);
  swap(discarded_, other->discarded_);
  swap(total_, other->total_);
  swap(withdraw_update_, other->withdraw_update_);
  swap(withdraw_prefix_, other->withdraw_prefix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Queues::InitAsDefaultInstance() {
}
class Queues::_Internal {
 public:
};

Queues::Queues()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Queues)
}
Queues::Queues(const Queues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_, &from.input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_) -
    reinterpret_cast<char*>(&input_)) + sizeof(output_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Queues)
}

void Queues::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
}

Queues::~Queues() {
  // @@protoc_insertion_point(destructor:gobgpapi.Queues)
  SharedDtor();
}

void Queues::SharedDtor() {
}

void Queues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Queues& Queues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Queues_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Queues::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Queues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
  _internal_metadata_.Clear();
}

const char* Queues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Queues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Queues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_input(), target);
  }

  // uint32 output = 2;
  if (this->output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Queues)
  return target;
}

size_t Queues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Queues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_input());
  }

  // uint32 output = 2;
  if (this->output() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Queues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  const Queues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Queues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Queues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Queues)
    MergeFrom(*source);
  }
}

void Queues::MergeFrom(const Queues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Queues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input() != 0) {
    _internal_set_input(from._internal_input());
  }
  if (from.output() != 0) {
    _internal_set_output(from._internal_output());
  }
}

void Queues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queues::CopyFrom(const Queues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Queues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queues::IsInitialized() const {
  return true;
}

void Queues::InternalSwap(Queues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(input_, other->input_);
  swap(output_, other->output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Queues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Timers::InitAsDefaultInstance() {
  ::gobgpapi::_Timers_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::TimersConfig*>(
      ::gobgpapi::TimersConfig::internal_default_instance());
  ::gobgpapi::_Timers_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::TimersState*>(
      ::gobgpapi::TimersState::internal_default_instance());
}
class Timers::_Internal {
 public:
  static const ::gobgpapi::TimersConfig& config(const Timers* msg);
  static const ::gobgpapi::TimersState& state(const Timers* msg);
};

const ::gobgpapi::TimersConfig&
Timers::_Internal::config(const Timers* msg) {
  return *msg->config_;
}
const ::gobgpapi::TimersState&
Timers::_Internal::state(const Timers* msg) {
  return *msg->state_;
}
Timers::Timers()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Timers)
}
Timers::Timers(const Timers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::TimersConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::TimersState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Timers)
}

void Timers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Timers_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

Timers::~Timers() {
  // @@protoc_insertion_point(destructor:gobgpapi.Timers)
  SharedDtor();
}

void Timers::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Timers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timers& Timers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timers_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Timers::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Timers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Timers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.TimersConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.TimersState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Timers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Timers)
  return target;
}

size_t Timers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Timers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Timers)
  GOOGLE_DCHECK_NE(&from, this);
  const Timers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Timers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Timers)
    MergeFrom(*source);
  }
}

void Timers::MergeFrom(const Timers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Timers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::TimersConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::TimersState::MergeFrom(from._internal_state());
  }
}

void Timers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Timers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timers::CopyFrom(const Timers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Timers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timers::IsInitialized() const {
  return true;
}

void Timers::InternalSwap(Timers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimersConfig::InitAsDefaultInstance() {
}
class TimersConfig::_Internal {
 public:
};

TimersConfig::TimersConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TimersConfig)
}
TimersConfig::TimersConfig(const TimersConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connect_retry_, &from.connect_retry_,
    static_cast<size_t>(reinterpret_cast<char*>(&idle_hold_time_after_reset_) -
    reinterpret_cast<char*>(&connect_retry_)) + sizeof(idle_hold_time_after_reset_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TimersConfig)
}

void TimersConfig::SharedCtor() {
  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idle_hold_time_after_reset_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(idle_hold_time_after_reset_));
}

TimersConfig::~TimersConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.TimersConfig)
  SharedDtor();
}

void TimersConfig::SharedDtor() {
}

void TimersConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimersConfig& TimersConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimersConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void TimersConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TimersConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idle_hold_time_after_reset_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(idle_hold_time_after_reset_));
  _internal_metadata_.Clear();
}

const char* TimersConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 connect_retry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connect_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hold_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 keepalive_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keepalive_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 minimum_advertisement_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minimum_advertisement_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 idle_hold_time_after_reset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idle_hold_time_after_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimersConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TimersConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_connect_retry(), target);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hold_time(), target);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_keepalive_interval(), target);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_minimum_advertisement_interval(), target);
  }

  // uint64 idle_hold_time_after_reset = 5;
  if (this->idle_hold_time_after_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_idle_hold_time_after_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TimersConfig)
  return target;
}

size_t TimersConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TimersConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_connect_retry());
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hold_time());
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keepalive_interval());
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_minimum_advertisement_interval());
  }

  // uint64 idle_hold_time_after_reset = 5;
  if (this->idle_hold_time_after_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idle_hold_time_after_reset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimersConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TimersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimersConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimersConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TimersConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TimersConfig)
    MergeFrom(*source);
  }
}

void TimersConfig::MergeFrom(const TimersConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TimersConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connect_retry() != 0) {
    _internal_set_connect_retry(from._internal_connect_retry());
  }
  if (from.hold_time() != 0) {
    _internal_set_hold_time(from._internal_hold_time());
  }
  if (from.keepalive_interval() != 0) {
    _internal_set_keepalive_interval(from._internal_keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    _internal_set_minimum_advertisement_interval(from._internal_minimum_advertisement_interval());
  }
  if (from.idle_hold_time_after_reset() != 0) {
    _internal_set_idle_hold_time_after_reset(from._internal_idle_hold_time_after_reset());
  }
}

void TimersConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TimersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersConfig::CopyFrom(const TimersConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TimersConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersConfig::IsInitialized() const {
  return true;
}

void TimersConfig::InternalSwap(TimersConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(connect_retry_, other->connect_retry_);
  swap(hold_time_, other->hold_time_);
  swap(keepalive_interval_, other->keepalive_interval_);
  swap(minimum_advertisement_interval_, other->minimum_advertisement_interval_);
  swap(idle_hold_time_after_reset_, other->idle_hold_time_after_reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimersConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimersState::InitAsDefaultInstance() {
  ::gobgpapi::_TimersState_default_instance_._instance.get_mutable()->uptime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::gobgpapi::_TimersState_default_instance_._instance.get_mutable()->downtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TimersState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& uptime(const TimersState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& downtime(const TimersState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimersState::_Internal::uptime(const TimersState* msg) {
  return *msg->uptime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimersState::_Internal::downtime(const TimersState* msg) {
  return *msg->downtime_;
}
void TimersState::clear_uptime() {
  if (GetArenaNoVirtual() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
}
void TimersState::clear_downtime() {
  if (GetArenaNoVirtual() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
}
TimersState::TimersState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TimersState)
}
TimersState::TimersState(const TimersState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_uptime()) {
    uptime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.uptime_);
  } else {
    uptime_ = nullptr;
  }
  if (from._internal_has_downtime()) {
    downtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.downtime_);
  } else {
    downtime_ = nullptr;
  }
  ::memcpy(&connect_retry_, &from.connect_retry_,
    static_cast<size_t>(reinterpret_cast<char*>(&negotiated_hold_time_) -
    reinterpret_cast<char*>(&connect_retry_)) + sizeof(negotiated_hold_time_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TimersState)
}

void TimersState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimersState_gobgp_2eproto.base);
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negotiated_hold_time_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(negotiated_hold_time_));
}

TimersState::~TimersState() {
  // @@protoc_insertion_point(destructor:gobgpapi.TimersState)
  SharedDtor();
}

void TimersState::SharedDtor() {
  if (this != internal_default_instance()) delete uptime_;
  if (this != internal_default_instance()) delete downtime_;
}

void TimersState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimersState& TimersState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimersState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void TimersState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TimersState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
  ::memset(&connect_retry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negotiated_hold_time_) -
      reinterpret_cast<char*>(&connect_retry_)) + sizeof(negotiated_hold_time_));
  _internal_metadata_.Clear();
}

const char* TimersState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 connect_retry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connect_retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hold_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 keepalive_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keepalive_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 minimum_advertisement_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          minimum_advertisement_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 negotiated_hold_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          negotiated_hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp uptime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp downtime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_downtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimersState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TimersState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_connect_retry(), target);
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hold_time(), target);
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_keepalive_interval(), target);
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_minimum_advertisement_interval(), target);
  }

  // uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_negotiated_hold_time(), target);
  }

  // .google.protobuf.Timestamp uptime = 6;
  if (this->has_uptime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::uptime(this), target, stream);
  }

  // .google.protobuf.Timestamp downtime = 7;
  if (this->has_downtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::downtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TimersState)
  return target;
}

size_t TimersState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TimersState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 6;
  if (this->has_uptime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uptime_);
  }

  // .google.protobuf.Timestamp downtime = 7;
  if (this->has_downtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *downtime_);
  }

  // uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_connect_retry());
  }

  // uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hold_time());
  }

  // uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keepalive_interval());
  }

  // uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_minimum_advertisement_interval());
  }

  // uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_negotiated_hold_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimersState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TimersState)
  GOOGLE_DCHECK_NE(&from, this);
  const TimersState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimersState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TimersState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TimersState)
    MergeFrom(*source);
  }
}

void TimersState::MergeFrom(const TimersState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TimersState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uptime()) {
    _internal_mutable_uptime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_uptime());
  }
  if (from.has_downtime()) {
    _internal_mutable_downtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_downtime());
  }
  if (from.connect_retry() != 0) {
    _internal_set_connect_retry(from._internal_connect_retry());
  }
  if (from.hold_time() != 0) {
    _internal_set_hold_time(from._internal_hold_time());
  }
  if (from.keepalive_interval() != 0) {
    _internal_set_keepalive_interval(from._internal_keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    _internal_set_minimum_advertisement_interval(from._internal_minimum_advertisement_interval());
  }
  if (from.negotiated_hold_time() != 0) {
    _internal_set_negotiated_hold_time(from._internal_negotiated_hold_time());
  }
}

void TimersState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TimersState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersState::CopyFrom(const TimersState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TimersState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersState::IsInitialized() const {
  return true;
}

void TimersState::InternalSwap(TimersState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uptime_, other->uptime_);
  swap(downtime_, other->downtime_);
  swap(connect_retry_, other->connect_retry_);
  swap(hold_time_, other->hold_time_);
  swap(keepalive_interval_, other->keepalive_interval_);
  swap(minimum_advertisement_interval_, other->minimum_advertisement_interval_);
  swap(negotiated_hold_time_, other->negotiated_hold_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimersState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transport::InitAsDefaultInstance() {
}
class Transport::_Internal {
 public:
};

Transport::Transport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Transport)
}
Transport::Transport(const Transport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_address().empty()) {
    local_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  remote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_address().empty()) {
    remote_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  bind_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bind_interface().empty()) {
    bind_interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bind_interface_);
  }
  ::memcpy(&local_port_, &from.local_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_mss_) -
    reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Transport)
}

void Transport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transport_gobgp_2eproto.base);
  local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_mss_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
}

Transport::~Transport() {
  // @@protoc_insertion_point(destructor:gobgpapi.Transport)
  SharedDtor();
}

void Transport::SharedDtor() {
  local_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transport& Transport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transport_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Transport::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Transport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bind_interface_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_mss_) -
      reinterpret_cast<char*>(&local_port_)) + sizeof(tcp_mss_));
  _internal_metadata_.Clear();
}

const char* Transport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string local_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_local_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Transport.local_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mtu_discovery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mtu_discovery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool passive_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          passive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_remote_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Transport.remote_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tcp_mss = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tcp_mss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bind_interface = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_bind_interface();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Transport.bind_interface"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Transport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_address = 1;
  if (this->local_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_address().data(), static_cast<int>(this->_internal_local_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.local_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_address(), target);
  }

  // uint32 local_port = 2;
  if (this->local_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_port(), target);
  }

  // bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_mtu_discovery(), target);
  }

  // bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_passive_mode(), target);
  }

  // string remote_address = 5;
  if (this->remote_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_address().data(), static_cast<int>(this->_internal_remote_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.remote_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_remote_address(), target);
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_remote_port(), target);
  }

  // uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tcp_mss(), target);
  }

  // string bind_interface = 8;
  if (this->bind_interface().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bind_interface().data(), static_cast<int>(this->_internal_bind_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.bind_interface");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bind_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Transport)
  return target;
}

size_t Transport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Transport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string local_address = 1;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_address());
  }

  // string remote_address = 5;
  if (this->remote_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_address());
  }

  // string bind_interface = 8;
  if (this->bind_interface().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bind_interface());
  }

  // uint32 local_port = 2;
  if (this->local_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_port());
  }

  // bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    total_size += 1 + 1;
  }

  // bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    total_size += 1 + 1;
  }

  // uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_port());
  }

  // uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcp_mss());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Transport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Transport)
    MergeFrom(*source);
  }
}

void Transport::MergeFrom(const Transport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Transport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_address().size() > 0) {

    local_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  if (from.remote_address().size() > 0) {

    remote_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  if (from.bind_interface().size() > 0) {

    bind_interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bind_interface_);
  }
  if (from.local_port() != 0) {
    _internal_set_local_port(from._internal_local_port());
  }
  if (from.mtu_discovery() != 0) {
    _internal_set_mtu_discovery(from._internal_mtu_discovery());
  }
  if (from.passive_mode() != 0) {
    _internal_set_passive_mode(from._internal_passive_mode());
  }
  if (from.remote_port() != 0) {
    _internal_set_remote_port(from._internal_remote_port());
  }
  if (from.tcp_mss() != 0) {
    _internal_set_tcp_mss(from._internal_tcp_mss());
  }
}

void Transport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport::CopyFrom(const Transport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Transport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport::IsInitialized() const {
  return true;
}

void Transport::InternalSwap(Transport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  local_address_.Swap(&other->local_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_address_.Swap(&other->remote_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bind_interface_.Swap(&other->bind_interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_port_, other->local_port_);
  swap(mtu_discovery_, other->mtu_discovery_);
  swap(passive_mode_, other->passive_mode_);
  swap(remote_port_, other->remote_port_);
  swap(tcp_mss_, other->tcp_mss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteServer::InitAsDefaultInstance() {
}
class RouteServer::_Internal {
 public:
};

RouteServer::RouteServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteServer)
}
RouteServer::RouteServer(const RouteServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&route_server_client_, &from.route_server_client_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondary_route_) -
    reinterpret_cast<char*>(&route_server_client_)) + sizeof(secondary_route_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteServer)
}

void RouteServer::SharedCtor() {
  ::memset(&route_server_client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_route_) -
      reinterpret_cast<char*>(&route_server_client_)) + sizeof(secondary_route_));
}

RouteServer::~RouteServer() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteServer)
  SharedDtor();
}

void RouteServer::SharedDtor() {
}

void RouteServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteServer& RouteServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteServer_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteServer::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&route_server_client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_route_) -
      reinterpret_cast<char*>(&route_server_client_)) + sizeof(secondary_route_));
  _internal_metadata_.Clear();
}

const char* RouteServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool route_server_client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_server_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool secondary_route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          secondary_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_route_server_client(), target);
  }

  // bool secondary_route = 2;
  if (this->secondary_route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_secondary_route(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteServer)
  return target;
}

size_t RouteServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    total_size += 1 + 1;
  }

  // bool secondary_route = 2;
  if (this->secondary_route() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteServer)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteServer)
    MergeFrom(*source);
  }
}

void RouteServer::MergeFrom(const RouteServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_server_client() != 0) {
    _internal_set_route_server_client(from._internal_route_server_client());
  }
  if (from.secondary_route() != 0) {
    _internal_set_secondary_route(from._internal_secondary_route());
  }
}

void RouteServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteServer::CopyFrom(const RouteServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteServer::IsInitialized() const {
  return true;
}

void RouteServer::InternalSwap(RouteServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_server_client_, other->route_server_client_);
  swap(secondary_route_, other->secondary_route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GracefulRestart::InitAsDefaultInstance() {
}
class GracefulRestart::_Internal {
 public:
};

GracefulRestart::GracefulRestart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.GracefulRestart)
}
GracefulRestart::GracefulRestart(const GracefulRestart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  ::memcpy(&restart_time_, &from.restart_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_restarting_) -
    reinterpret_cast<char*>(&restart_time_)) + sizeof(local_restarting_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.GracefulRestart)
}

void GracefulRestart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GracefulRestart_gobgp_2eproto.base);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&restart_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_restarting_) -
      reinterpret_cast<char*>(&restart_time_)) + sizeof(local_restarting_));
}

GracefulRestart::~GracefulRestart() {
  // @@protoc_insertion_point(destructor:gobgpapi.GracefulRestart)
  SharedDtor();
}

void GracefulRestart::SharedDtor() {
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GracefulRestart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GracefulRestart& GracefulRestart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GracefulRestart_gobgp_2eproto.base);
  return *internal_default_instance();
}


void GracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.GracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&restart_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_restarting_) -
      reinterpret_cast<char*>(&restart_time_)) + sizeof(local_restarting_));
  _internal_metadata_.Clear();
}

const char* GracefulRestart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 restart_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool helper_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          helper_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 deferral_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          deferral_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool notification_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          notification_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool longlived_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          longlived_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stale_routes_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          stale_routes_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_restart_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          peer_restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool peer_restarting = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          peer_restarting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool local_restarting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          local_restarting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.GracefulRestart.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GracefulRestart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.GracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_restart_time(), target);
  }

  // bool helper_only = 3;
  if (this->helper_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_helper_only(), target);
  }

  // uint32 deferral_time = 4;
  if (this->deferral_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deferral_time(), target);
  }

  // bool notification_enabled = 5;
  if (this->notification_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_notification_enabled(), target);
  }

  // bool longlived_enabled = 6;
  if (this->longlived_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_longlived_enabled(), target);
  }

  // uint32 stale_routes_time = 7;
  if (this->stale_routes_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stale_routes_time(), target);
  }

  // uint32 peer_restart_time = 8;
  if (this->peer_restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_peer_restart_time(), target);
  }

  // bool peer_restarting = 9;
  if (this->peer_restarting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_peer_restarting(), target);
  }

  // bool local_restarting = 10;
  if (this->local_restarting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_local_restarting(), target);
  }

  // string mode = 11;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.GracefulRestart.mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.GracefulRestart)
  return target;
}

size_t GracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.GracefulRestart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mode = 11;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_restart_time());
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool helper_only = 3;
  if (this->helper_only() != 0) {
    total_size += 1 + 1;
  }

  // bool notification_enabled = 5;
  if (this->notification_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool longlived_enabled = 6;
  if (this->longlived_enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 deferral_time = 4;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deferral_time());
  }

  // uint32 stale_routes_time = 7;
  if (this->stale_routes_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stale_routes_time());
  }

  // uint32 peer_restart_time = 8;
  if (this->peer_restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_restart_time());
  }

  // bool peer_restarting = 9;
  if (this->peer_restarting() != 0) {
    total_size += 1 + 1;
  }

  // bool local_restarting = 10;
  if (this->local_restarting() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GracefulRestart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.GracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const GracefulRestart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GracefulRestart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.GracefulRestart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.GracefulRestart)
    MergeFrom(*source);
  }
}

void GracefulRestart::MergeFrom(const GracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.GracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode().size() > 0) {

    mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from.restart_time() != 0) {
    _internal_set_restart_time(from._internal_restart_time());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.helper_only() != 0) {
    _internal_set_helper_only(from._internal_helper_only());
  }
  if (from.notification_enabled() != 0) {
    _internal_set_notification_enabled(from._internal_notification_enabled());
  }
  if (from.longlived_enabled() != 0) {
    _internal_set_longlived_enabled(from._internal_longlived_enabled());
  }
  if (from.deferral_time() != 0) {
    _internal_set_deferral_time(from._internal_deferral_time());
  }
  if (from.stale_routes_time() != 0) {
    _internal_set_stale_routes_time(from._internal_stale_routes_time());
  }
  if (from.peer_restart_time() != 0) {
    _internal_set_peer_restart_time(from._internal_peer_restart_time());
  }
  if (from.peer_restarting() != 0) {
    _internal_set_peer_restarting(from._internal_peer_restarting());
  }
  if (from.local_restarting() != 0) {
    _internal_set_local_restarting(from._internal_local_restarting());
  }
}

void GracefulRestart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.GracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GracefulRestart::CopyFrom(const GracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.GracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GracefulRestart::IsInitialized() const {
  return true;
}

void GracefulRestart::InternalSwap(GracefulRestart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(restart_time_, other->restart_time_);
  swap(enabled_, other->enabled_);
  swap(helper_only_, other->helper_only_);
  swap(notification_enabled_, other->notification_enabled_);
  swap(longlived_enabled_, other->longlived_enabled_);
  swap(deferral_time_, other->deferral_time_);
  swap(stale_routes_time_, other->stale_routes_time_);
  swap(peer_restart_time_, other->peer_restart_time_);
  swap(peer_restarting_, other->peer_restarting_);
  swap(local_restarting_, other->local_restarting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GracefulRestart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpGracefulRestartConfig::InitAsDefaultInstance() {
}
class MpGracefulRestartConfig::_Internal {
 public:
};

MpGracefulRestartConfig::MpGracefulRestartConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpGracefulRestartConfig)
}
MpGracefulRestartConfig::MpGracefulRestartConfig(const MpGracefulRestartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpGracefulRestartConfig)
}

void MpGracefulRestartConfig::SharedCtor() {
  enabled_ = false;
}

MpGracefulRestartConfig::~MpGracefulRestartConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpGracefulRestartConfig)
  SharedDtor();
}

void MpGracefulRestartConfig::SharedDtor() {
}

void MpGracefulRestartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpGracefulRestartConfig& MpGracefulRestartConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpGracefulRestartConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MpGracefulRestartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

const char* MpGracefulRestartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpGracefulRestartConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpGracefulRestartConfig)
  return target;
}

size_t MpGracefulRestartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpGracefulRestartConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpGracefulRestartConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestartConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpGracefulRestartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpGracefulRestartConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpGracefulRestartConfig)
    MergeFrom(*source);
  }
}

void MpGracefulRestartConfig::MergeFrom(const MpGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void MpGracefulRestartConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestartConfig::CopyFrom(const MpGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestartConfig::IsInitialized() const {
  return true;
}

void MpGracefulRestartConfig::InternalSwap(MpGracefulRestartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpGracefulRestartConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpGracefulRestartState::InitAsDefaultInstance() {
}
class MpGracefulRestartState::_Internal {
 public:
};

MpGracefulRestartState::MpGracefulRestartState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpGracefulRestartState)
}
MpGracefulRestartState::MpGracefulRestartState(const MpGracefulRestartState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_of_rib_sent_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpGracefulRestartState)
}

void MpGracefulRestartState::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_rib_sent_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
}

MpGracefulRestartState::~MpGracefulRestartState() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpGracefulRestartState)
  SharedDtor();
}

void MpGracefulRestartState::SharedDtor() {
}

void MpGracefulRestartState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpGracefulRestartState& MpGracefulRestartState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpGracefulRestartState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MpGracefulRestartState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_rib_sent_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(end_of_rib_sent_));
  _internal_metadata_.Clear();
}

const char* MpGracefulRestartState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool received = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertised = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          advertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool end_of_rib_received = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          end_of_rib_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool end_of_rib_sent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          end_of_rib_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpGracefulRestartState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool received = 2;
  if (this->received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_received(), target);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_advertised(), target);
  }

  // bool end_of_rib_received = 4;
  if (this->end_of_rib_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_end_of_rib_received(), target);
  }

  // bool end_of_rib_sent = 5;
  if (this->end_of_rib_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_end_of_rib_sent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpGracefulRestartState)
  return target;
}

size_t MpGracefulRestartState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpGracefulRestartState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool received = 2;
  if (this->received() != 0) {
    total_size += 1 + 1;
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    total_size += 1 + 1;
  }

  // bool end_of_rib_received = 4;
  if (this->end_of_rib_received() != 0) {
    total_size += 1 + 1;
  }

  // bool end_of_rib_sent = 5;
  if (this->end_of_rib_sent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpGracefulRestartState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestartState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpGracefulRestartState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpGracefulRestartState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpGracefulRestartState)
    MergeFrom(*source);
  }
}

void MpGracefulRestartState::MergeFrom(const MpGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from.advertised() != 0) {
    _internal_set_advertised(from._internal_advertised());
  }
  if (from.end_of_rib_received() != 0) {
    _internal_set_end_of_rib_received(from._internal_end_of_rib_received());
  }
  if (from.end_of_rib_sent() != 0) {
    _internal_set_end_of_rib_sent(from._internal_end_of_rib_sent());
  }
}

void MpGracefulRestartState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestartState::CopyFrom(const MpGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestartState::IsInitialized() const {
  return true;
}

void MpGracefulRestartState::InternalSwap(MpGracefulRestartState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(received_, other->received_);
  swap(advertised_, other->advertised_);
  swap(end_of_rib_received_, other->end_of_rib_received_);
  swap(end_of_rib_sent_, other->end_of_rib_sent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpGracefulRestartState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpGracefulRestart::InitAsDefaultInstance() {
  ::gobgpapi::_MpGracefulRestart_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::MpGracefulRestartConfig*>(
      ::gobgpapi::MpGracefulRestartConfig::internal_default_instance());
  ::gobgpapi::_MpGracefulRestart_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::MpGracefulRestartState*>(
      ::gobgpapi::MpGracefulRestartState::internal_default_instance());
}
class MpGracefulRestart::_Internal {
 public:
  static const ::gobgpapi::MpGracefulRestartConfig& config(const MpGracefulRestart* msg);
  static const ::gobgpapi::MpGracefulRestartState& state(const MpGracefulRestart* msg);
};

const ::gobgpapi::MpGracefulRestartConfig&
MpGracefulRestart::_Internal::config(const MpGracefulRestart* msg) {
  return *msg->config_;
}
const ::gobgpapi::MpGracefulRestartState&
MpGracefulRestart::_Internal::state(const MpGracefulRestart* msg) {
  return *msg->state_;
}
MpGracefulRestart::MpGracefulRestart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpGracefulRestart)
}
MpGracefulRestart::MpGracefulRestart(const MpGracefulRestart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::MpGracefulRestartConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::MpGracefulRestartState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpGracefulRestart)
}

void MpGracefulRestart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MpGracefulRestart_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

MpGracefulRestart::~MpGracefulRestart() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpGracefulRestart)
  SharedDtor();
}

void MpGracefulRestart::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void MpGracefulRestart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpGracefulRestart& MpGracefulRestart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpGracefulRestart_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MpGracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MpGracefulRestart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.MpGracefulRestartConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.MpGracefulRestartState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpGracefulRestart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestartConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.MpGracefulRestartState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpGracefulRestart)
  return target;
}

size_t MpGracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpGracefulRestart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestartConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.MpGracefulRestartState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpGracefulRestart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const MpGracefulRestart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpGracefulRestart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpGracefulRestart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpGracefulRestart)
    MergeFrom(*source);
  }
}

void MpGracefulRestart::MergeFrom(const MpGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::MpGracefulRestartConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::MpGracefulRestartState::MergeFrom(from._internal_state());
  }
}

void MpGracefulRestart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpGracefulRestart::CopyFrom(const MpGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpGracefulRestart::IsInitialized() const {
  return true;
}

void MpGracefulRestart::InternalSwap(MpGracefulRestart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpGracefulRestart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AfiSafiConfig::InitAsDefaultInstance() {
  ::gobgpapi::_AfiSafiConfig_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class AfiSafiConfig::_Internal {
 public:
  static const ::gobgpapi::Family& family(const AfiSafiConfig* msg);
};

const ::gobgpapi::Family&
AfiSafiConfig::_Internal::family(const AfiSafiConfig* msg) {
  return *msg->family_;
}
AfiSafiConfig::AfiSafiConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AfiSafiConfig)
}
AfiSafiConfig::AfiSafiConfig(const AfiSafiConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AfiSafiConfig)
}

void AfiSafiConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AfiSafiConfig_gobgp_2eproto.base);
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enabled_));
}

AfiSafiConfig::~AfiSafiConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.AfiSafiConfig)
  SharedDtor();
}

void AfiSafiConfig::SharedDtor() {
  if (this != internal_default_instance()) delete family_;
}

void AfiSafiConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfiSafiConfig& AfiSafiConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AfiSafiConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AfiSafiConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AfiSafiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  enabled_ = false;
  _internal_metadata_.Clear();
}

const char* AfiSafiConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfiSafiConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AfiSafiConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AfiSafiConfig)
  return target;
}

size_t AfiSafiConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AfiSafiConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfiSafiConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AfiSafiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafiConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfiSafiConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AfiSafiConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AfiSafiConfig)
    MergeFrom(*source);
  }
}

void AfiSafiConfig::MergeFrom(const AfiSafiConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AfiSafiConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void AfiSafiConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AfiSafiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafiConfig::CopyFrom(const AfiSafiConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AfiSafiConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafiConfig::IsInitialized() const {
  return true;
}

void AfiSafiConfig::InternalSwap(AfiSafiConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(family_, other->family_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AfiSafiConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AfiSafiState::InitAsDefaultInstance() {
  ::gobgpapi::_AfiSafiState_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class AfiSafiState::_Internal {
 public:
  static const ::gobgpapi::Family& family(const AfiSafiState* msg);
};

const ::gobgpapi::Family&
AfiSafiState::_Internal::family(const AfiSafiState* msg) {
  return *msg->family_;
}
AfiSafiState::AfiSafiState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AfiSafiState)
}
AfiSafiState::AfiSafiState(const AfiSafiState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  ::memcpy(&received_, &from.received_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&received_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AfiSafiState)
}

void AfiSafiState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AfiSafiState_gobgp_2eproto.base);
  ::memset(&family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&family_)) + sizeof(enabled_));
}

AfiSafiState::~AfiSafiState() {
  // @@protoc_insertion_point(destructor:gobgpapi.AfiSafiState)
  SharedDtor();
}

void AfiSafiState::SharedDtor() {
  if (this != internal_default_instance()) delete family_;
}

void AfiSafiState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfiSafiState& AfiSafiState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AfiSafiState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AfiSafiState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AfiSafiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  ::memset(&received_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&received_)) + sizeof(enabled_));
  _internal_metadata_.Clear();
}

const char* AfiSafiState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 received = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 accepted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 advertised = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          advertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfiSafiState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AfiSafiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // uint64 received = 3;
  if (this->received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_received(), target);
  }

  // uint64 accepted = 4;
  if (this->accepted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_accepted(), target);
  }

  // uint64 advertised = 5;
  if (this->advertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_advertised(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AfiSafiState)
  return target;
}

size_t AfiSafiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AfiSafiState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  // uint64 received = 3;
  if (this->received() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_received());
  }

  // uint64 accepted = 4;
  if (this->accepted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accepted());
  }

  // uint64 advertised = 5;
  if (this->advertised() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_advertised());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfiSafiState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AfiSafiState)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafiState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfiSafiState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AfiSafiState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AfiSafiState)
    MergeFrom(*source);
  }
}

void AfiSafiState::MergeFrom(const AfiSafiState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AfiSafiState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
  if (from.received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from.accepted() != 0) {
    _internal_set_accepted(from._internal_accepted());
  }
  if (from.advertised() != 0) {
    _internal_set_advertised(from._internal_advertised());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void AfiSafiState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AfiSafiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafiState::CopyFrom(const AfiSafiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AfiSafiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafiState::IsInitialized() const {
  return true;
}

void AfiSafiState::InternalSwap(AfiSafiState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(family_, other->family_);
  swap(received_, other->received_);
  swap(accepted_, other->accepted_);
  swap(advertised_, other->advertised_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AfiSafiState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteSelectionOptionsConfig::InitAsDefaultInstance() {
}
class RouteSelectionOptionsConfig::_Internal {
 public:
};

RouteSelectionOptionsConfig::RouteSelectionOptionsConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteSelectionOptionsConfig)
}
RouteSelectionOptionsConfig::RouteSelectionOptionsConfig(const RouteSelectionOptionsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&always_compare_med_, &from.always_compare_med_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_best_path_selection_) -
    reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteSelectionOptionsConfig)
}

void RouteSelectionOptionsConfig::SharedCtor() {
  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
}

RouteSelectionOptionsConfig::~RouteSelectionOptionsConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteSelectionOptionsConfig)
  SharedDtor();
}

void RouteSelectionOptionsConfig::SharedDtor() {
}

void RouteSelectionOptionsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteSelectionOptionsConfig& RouteSelectionOptionsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteSelectionOptionsConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteSelectionOptionsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteSelectionOptionsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  _internal_metadata_.Clear();
}

const char* RouteSelectionOptionsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool always_compare_med = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          always_compare_med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_as_path_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ignore_as_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external_compare_router_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          external_compare_router_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertise_inactive_routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          advertise_inactive_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_aigp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_aigp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_next_hop_igp_metric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_next_hop_igp_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_best_path_selection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          disable_best_path_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteSelectionOptionsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteSelectionOptionsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_compare_med(), target);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_as_path_length(), target);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_external_compare_router_id(), target);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_advertise_inactive_routes(), target);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_aigp(), target);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_next_hop_igp_metric(), target);
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_best_path_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteSelectionOptionsConfig)
  return target;
}

size_t RouteSelectionOptionsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteSelectionOptionsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    total_size += 1 + 1;
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    total_size += 1 + 1;
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteSelectionOptionsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteSelectionOptionsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptionsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteSelectionOptionsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteSelectionOptionsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteSelectionOptionsConfig)
    MergeFrom(*source);
  }
}

void RouteSelectionOptionsConfig::MergeFrom(const RouteSelectionOptionsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteSelectionOptionsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.always_compare_med() != 0) {
    _internal_set_always_compare_med(from._internal_always_compare_med());
  }
  if (from.ignore_as_path_length() != 0) {
    _internal_set_ignore_as_path_length(from._internal_ignore_as_path_length());
  }
  if (from.external_compare_router_id() != 0) {
    _internal_set_external_compare_router_id(from._internal_external_compare_router_id());
  }
  if (from.advertise_inactive_routes() != 0) {
    _internal_set_advertise_inactive_routes(from._internal_advertise_inactive_routes());
  }
  if (from.enable_aigp() != 0) {
    _internal_set_enable_aigp(from._internal_enable_aigp());
  }
  if (from.ignore_next_hop_igp_metric() != 0) {
    _internal_set_ignore_next_hop_igp_metric(from._internal_ignore_next_hop_igp_metric());
  }
  if (from.disable_best_path_selection() != 0) {
    _internal_set_disable_best_path_selection(from._internal_disable_best_path_selection());
  }
}

void RouteSelectionOptionsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteSelectionOptionsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptionsConfig::CopyFrom(const RouteSelectionOptionsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteSelectionOptionsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptionsConfig::IsInitialized() const {
  return true;
}

void RouteSelectionOptionsConfig::InternalSwap(RouteSelectionOptionsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(always_compare_med_, other->always_compare_med_);
  swap(ignore_as_path_length_, other->ignore_as_path_length_);
  swap(external_compare_router_id_, other->external_compare_router_id_);
  swap(advertise_inactive_routes_, other->advertise_inactive_routes_);
  swap(enable_aigp_, other->enable_aigp_);
  swap(ignore_next_hop_igp_metric_, other->ignore_next_hop_igp_metric_);
  swap(disable_best_path_selection_, other->disable_best_path_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSelectionOptionsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteSelectionOptionsState::InitAsDefaultInstance() {
}
class RouteSelectionOptionsState::_Internal {
 public:
};

RouteSelectionOptionsState::RouteSelectionOptionsState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteSelectionOptionsState)
}
RouteSelectionOptionsState::RouteSelectionOptionsState(const RouteSelectionOptionsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&always_compare_med_, &from.always_compare_med_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_best_path_selection_) -
    reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteSelectionOptionsState)
}

void RouteSelectionOptionsState::SharedCtor() {
  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
}

RouteSelectionOptionsState::~RouteSelectionOptionsState() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteSelectionOptionsState)
  SharedDtor();
}

void RouteSelectionOptionsState::SharedDtor() {
}

void RouteSelectionOptionsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteSelectionOptionsState& RouteSelectionOptionsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteSelectionOptionsState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteSelectionOptionsState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteSelectionOptionsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&always_compare_med_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_best_path_selection_) -
      reinterpret_cast<char*>(&always_compare_med_)) + sizeof(disable_best_path_selection_));
  _internal_metadata_.Clear();
}

const char* RouteSelectionOptionsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool always_compare_med = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          always_compare_med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_as_path_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ignore_as_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external_compare_router_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          external_compare_router_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertise_inactive_routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          advertise_inactive_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_aigp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_aigp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_next_hop_igp_metric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_next_hop_igp_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_best_path_selection = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          disable_best_path_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteSelectionOptionsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteSelectionOptionsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_compare_med(), target);
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_as_path_length(), target);
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_external_compare_router_id(), target);
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_advertise_inactive_routes(), target);
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_aigp(), target);
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_next_hop_igp_metric(), target);
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disable_best_path_selection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteSelectionOptionsState)
  return target;
}

size_t RouteSelectionOptionsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteSelectionOptionsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool always_compare_med = 1;
  if (this->always_compare_med() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_as_path_length = 2;
  if (this->ignore_as_path_length() != 0) {
    total_size += 1 + 1;
  }

  // bool external_compare_router_id = 3;
  if (this->external_compare_router_id() != 0) {
    total_size += 1 + 1;
  }

  // bool advertise_inactive_routes = 4;
  if (this->advertise_inactive_routes() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_aigp = 5;
  if (this->enable_aigp() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_next_hop_igp_metric = 6;
  if (this->ignore_next_hop_igp_metric() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_best_path_selection = 7;
  if (this->disable_best_path_selection() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteSelectionOptionsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteSelectionOptionsState)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptionsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteSelectionOptionsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteSelectionOptionsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteSelectionOptionsState)
    MergeFrom(*source);
  }
}

void RouteSelectionOptionsState::MergeFrom(const RouteSelectionOptionsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteSelectionOptionsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.always_compare_med() != 0) {
    _internal_set_always_compare_med(from._internal_always_compare_med());
  }
  if (from.ignore_as_path_length() != 0) {
    _internal_set_ignore_as_path_length(from._internal_ignore_as_path_length());
  }
  if (from.external_compare_router_id() != 0) {
    _internal_set_external_compare_router_id(from._internal_external_compare_router_id());
  }
  if (from.advertise_inactive_routes() != 0) {
    _internal_set_advertise_inactive_routes(from._internal_advertise_inactive_routes());
  }
  if (from.enable_aigp() != 0) {
    _internal_set_enable_aigp(from._internal_enable_aigp());
  }
  if (from.ignore_next_hop_igp_metric() != 0) {
    _internal_set_ignore_next_hop_igp_metric(from._internal_ignore_next_hop_igp_metric());
  }
  if (from.disable_best_path_selection() != 0) {
    _internal_set_disable_best_path_selection(from._internal_disable_best_path_selection());
  }
}

void RouteSelectionOptionsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteSelectionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptionsState::CopyFrom(const RouteSelectionOptionsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteSelectionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptionsState::IsInitialized() const {
  return true;
}

void RouteSelectionOptionsState::InternalSwap(RouteSelectionOptionsState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(always_compare_med_, other->always_compare_med_);
  swap(ignore_as_path_length_, other->ignore_as_path_length_);
  swap(external_compare_router_id_, other->external_compare_router_id_);
  swap(advertise_inactive_routes_, other->advertise_inactive_routes_);
  swap(enable_aigp_, other->enable_aigp_);
  swap(ignore_next_hop_igp_metric_, other->ignore_next_hop_igp_metric_);
  swap(disable_best_path_selection_, other->disable_best_path_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSelectionOptionsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteSelectionOptions::InitAsDefaultInstance() {
  ::gobgpapi::_RouteSelectionOptions_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::RouteSelectionOptionsConfig*>(
      ::gobgpapi::RouteSelectionOptionsConfig::internal_default_instance());
  ::gobgpapi::_RouteSelectionOptions_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::RouteSelectionOptionsState*>(
      ::gobgpapi::RouteSelectionOptionsState::internal_default_instance());
}
class RouteSelectionOptions::_Internal {
 public:
  static const ::gobgpapi::RouteSelectionOptionsConfig& config(const RouteSelectionOptions* msg);
  static const ::gobgpapi::RouteSelectionOptionsState& state(const RouteSelectionOptions* msg);
};

const ::gobgpapi::RouteSelectionOptionsConfig&
RouteSelectionOptions::_Internal::config(const RouteSelectionOptions* msg) {
  return *msg->config_;
}
const ::gobgpapi::RouteSelectionOptionsState&
RouteSelectionOptions::_Internal::state(const RouteSelectionOptions* msg) {
  return *msg->state_;
}
RouteSelectionOptions::RouteSelectionOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteSelectionOptions)
}
RouteSelectionOptions::RouteSelectionOptions(const RouteSelectionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::RouteSelectionOptionsConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::RouteSelectionOptionsState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteSelectionOptions)
}

void RouteSelectionOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteSelectionOptions_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

RouteSelectionOptions::~RouteSelectionOptions() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteSelectionOptions)
  SharedDtor();
}

void RouteSelectionOptions::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void RouteSelectionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteSelectionOptions& RouteSelectionOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteSelectionOptions_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteSelectionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteSelectionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RouteSelectionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.RouteSelectionOptionsConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteSelectionOptionsState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteSelectionOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteSelectionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteSelectionOptionsConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.RouteSelectionOptionsState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteSelectionOptions)
  return target;
}

size_t RouteSelectionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteSelectionOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.RouteSelectionOptionsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.RouteSelectionOptionsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteSelectionOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteSelectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteSelectionOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteSelectionOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteSelectionOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteSelectionOptions)
    MergeFrom(*source);
  }
}

void RouteSelectionOptions::MergeFrom(const RouteSelectionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteSelectionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::RouteSelectionOptionsConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::RouteSelectionOptionsState::MergeFrom(from._internal_state());
  }
}

void RouteSelectionOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteSelectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSelectionOptions::CopyFrom(const RouteSelectionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteSelectionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSelectionOptions::IsInitialized() const {
  return true;
}

void RouteSelectionOptions::InternalSwap(RouteSelectionOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSelectionOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMultiplePathsConfig::InitAsDefaultInstance() {
}
class UseMultiplePathsConfig::_Internal {
 public:
};

UseMultiplePathsConfig::UseMultiplePathsConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UseMultiplePathsConfig)
}
UseMultiplePathsConfig::UseMultiplePathsConfig(const UseMultiplePathsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UseMultiplePathsConfig)
}

void UseMultiplePathsConfig::SharedCtor() {
  enabled_ = false;
}

UseMultiplePathsConfig::~UseMultiplePathsConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.UseMultiplePathsConfig)
  SharedDtor();
}

void UseMultiplePathsConfig::SharedDtor() {
}

void UseMultiplePathsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMultiplePathsConfig& UseMultiplePathsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMultiplePathsConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UseMultiplePathsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UseMultiplePathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

const char* UseMultiplePathsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMultiplePathsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UseMultiplePathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UseMultiplePathsConfig)
  return target;
}

size_t UseMultiplePathsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UseMultiplePathsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMultiplePathsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UseMultiplePathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePathsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMultiplePathsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UseMultiplePathsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UseMultiplePathsConfig)
    MergeFrom(*source);
  }
}

void UseMultiplePathsConfig::MergeFrom(const UseMultiplePathsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UseMultiplePathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void UseMultiplePathsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UseMultiplePathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePathsConfig::CopyFrom(const UseMultiplePathsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UseMultiplePathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePathsConfig::IsInitialized() const {
  return true;
}

void UseMultiplePathsConfig::InternalSwap(UseMultiplePathsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMultiplePathsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMultiplePathsState::InitAsDefaultInstance() {
}
class UseMultiplePathsState::_Internal {
 public:
};

UseMultiplePathsState::UseMultiplePathsState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UseMultiplePathsState)
}
UseMultiplePathsState::UseMultiplePathsState(const UseMultiplePathsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UseMultiplePathsState)
}

void UseMultiplePathsState::SharedCtor() {
  enabled_ = false;
}

UseMultiplePathsState::~UseMultiplePathsState() {
  // @@protoc_insertion_point(destructor:gobgpapi.UseMultiplePathsState)
  SharedDtor();
}

void UseMultiplePathsState::SharedDtor() {
}

void UseMultiplePathsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMultiplePathsState& UseMultiplePathsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMultiplePathsState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UseMultiplePathsState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UseMultiplePathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

const char* UseMultiplePathsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMultiplePathsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UseMultiplePathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UseMultiplePathsState)
  return target;
}

size_t UseMultiplePathsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UseMultiplePathsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMultiplePathsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UseMultiplePathsState)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePathsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMultiplePathsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UseMultiplePathsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UseMultiplePathsState)
    MergeFrom(*source);
  }
}

void UseMultiplePathsState::MergeFrom(const UseMultiplePathsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UseMultiplePathsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void UseMultiplePathsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UseMultiplePathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePathsState::CopyFrom(const UseMultiplePathsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UseMultiplePathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePathsState::IsInitialized() const {
  return true;
}

void UseMultiplePathsState::InternalSwap(UseMultiplePathsState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMultiplePathsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EbgpConfig::InitAsDefaultInstance() {
}
class EbgpConfig::_Internal {
 public:
};

EbgpConfig::EbgpConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EbgpConfig)
}
EbgpConfig::EbgpConfig(const EbgpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allow_multiple_as_, &from.allow_multiple_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_paths_) -
    reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EbgpConfig)
}

void EbgpConfig::SharedCtor() {
  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
}

EbgpConfig::~EbgpConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.EbgpConfig)
  SharedDtor();
}

void EbgpConfig::SharedDtor() {
}

void EbgpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbgpConfig& EbgpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EbgpConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EbgpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  _internal_metadata_.Clear();
}

const char* EbgpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool allow_multiple_as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          allow_multiple_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maximum_paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EbgpConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_multiple_as(), target);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EbgpConfig)
  return target;
}

size_t EbgpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EbgpConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    total_size += 1 + 1;
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbgpConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EbgpConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EbgpConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EbgpConfig)
    MergeFrom(*source);
  }
}

void EbgpConfig::MergeFrom(const EbgpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_multiple_as() != 0) {
    _internal_set_allow_multiple_as(from._internal_allow_multiple_as());
  }
  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void EbgpConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpConfig::CopyFrom(const EbgpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpConfig::IsInitialized() const {
  return true;
}

void EbgpConfig::InternalSwap(EbgpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(allow_multiple_as_, other->allow_multiple_as_);
  swap(maximum_paths_, other->maximum_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EbgpConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EbgpState::InitAsDefaultInstance() {
}
class EbgpState::_Internal {
 public:
};

EbgpState::EbgpState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EbgpState)
}
EbgpState::EbgpState(const EbgpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allow_multiple_as_, &from.allow_multiple_as_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_paths_) -
    reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EbgpState)
}

void EbgpState::SharedCtor() {
  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
}

EbgpState::~EbgpState() {
  // @@protoc_insertion_point(destructor:gobgpapi.EbgpState)
  SharedDtor();
}

void EbgpState::SharedDtor() {
}

void EbgpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EbgpState& EbgpState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EbgpState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void EbgpState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&allow_multiple_as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_paths_) -
      reinterpret_cast<char*>(&allow_multiple_as_)) + sizeof(maximum_paths_));
  _internal_metadata_.Clear();
}

const char* EbgpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool allow_multiple_as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          allow_multiple_as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maximum_paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EbgpState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_multiple_as(), target);
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EbgpState)
  return target;
}

size_t EbgpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EbgpState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool allow_multiple_as = 1;
  if (this->allow_multiple_as() != 0) {
    total_size += 1 + 1;
  }

  // uint32 maximum_paths = 2;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EbgpState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  const EbgpState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EbgpState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EbgpState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EbgpState)
    MergeFrom(*source);
  }
}

void EbgpState::MergeFrom(const EbgpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allow_multiple_as() != 0) {
    _internal_set_allow_multiple_as(from._internal_allow_multiple_as());
  }
  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void EbgpState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpState::CopyFrom(const EbgpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpState::IsInitialized() const {
  return true;
}

void EbgpState::InternalSwap(EbgpState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(allow_multiple_as_, other->allow_multiple_as_);
  swap(maximum_paths_, other->maximum_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EbgpState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ebgp::InitAsDefaultInstance() {
  ::gobgpapi::_Ebgp_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::EbgpConfig*>(
      ::gobgpapi::EbgpConfig::internal_default_instance());
  ::gobgpapi::_Ebgp_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::EbgpState*>(
      ::gobgpapi::EbgpState::internal_default_instance());
}
class Ebgp::_Internal {
 public:
  static const ::gobgpapi::EbgpConfig& config(const Ebgp* msg);
  static const ::gobgpapi::EbgpState& state(const Ebgp* msg);
};

const ::gobgpapi::EbgpConfig&
Ebgp::_Internal::config(const Ebgp* msg) {
  return *msg->config_;
}
const ::gobgpapi::EbgpState&
Ebgp::_Internal::state(const Ebgp* msg) {
  return *msg->state_;
}
Ebgp::Ebgp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Ebgp)
}
Ebgp::Ebgp(const Ebgp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::EbgpConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::EbgpState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Ebgp)
}

void Ebgp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ebgp_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

Ebgp::~Ebgp() {
  // @@protoc_insertion_point(destructor:gobgpapi.Ebgp)
  SharedDtor();
}

void Ebgp::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Ebgp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ebgp& Ebgp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ebgp_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Ebgp::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Ebgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Ebgp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.EbgpConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.EbgpState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ebgp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Ebgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.EbgpConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.EbgpState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Ebgp)
  return target;
}

size_t Ebgp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Ebgp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.EbgpConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.EbgpState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ebgp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Ebgp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ebgp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ebgp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Ebgp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Ebgp)
    MergeFrom(*source);
  }
}

void Ebgp::MergeFrom(const Ebgp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Ebgp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::EbgpConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::EbgpState::MergeFrom(from._internal_state());
  }
}

void Ebgp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Ebgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ebgp::CopyFrom(const Ebgp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Ebgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ebgp::IsInitialized() const {
  return true;
}

void Ebgp::InternalSwap(Ebgp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ebgp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IbgpConfig::InitAsDefaultInstance() {
}
class IbgpConfig::_Internal {
 public:
};

IbgpConfig::IbgpConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IbgpConfig)
}
IbgpConfig::IbgpConfig(const IbgpConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maximum_paths_ = from.maximum_paths_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IbgpConfig)
}

void IbgpConfig::SharedCtor() {
  maximum_paths_ = 0u;
}

IbgpConfig::~IbgpConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.IbgpConfig)
  SharedDtor();
}

void IbgpConfig::SharedDtor() {
}

void IbgpConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IbgpConfig& IbgpConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IbgpConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void IbgpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maximum_paths_ = 0u;
  _internal_metadata_.Clear();
}

const char* IbgpConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 maximum_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IbgpConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IbgpConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IbgpConfig)
  return target;
}

size_t IbgpConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IbgpConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IbgpConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IbgpConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IbgpConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IbgpConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IbgpConfig)
    MergeFrom(*source);
  }
}

void IbgpConfig::MergeFrom(const IbgpConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IbgpConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void IbgpConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IbgpConfig::CopyFrom(const IbgpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IbgpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbgpConfig::IsInitialized() const {
  return true;
}

void IbgpConfig::InternalSwap(IbgpConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(maximum_paths_, other->maximum_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IbgpConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IbgpState::InitAsDefaultInstance() {
}
class IbgpState::_Internal {
 public:
};

IbgpState::IbgpState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IbgpState)
}
IbgpState::IbgpState(const IbgpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maximum_paths_ = from.maximum_paths_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IbgpState)
}

void IbgpState::SharedCtor() {
  maximum_paths_ = 0u;
}

IbgpState::~IbgpState() {
  // @@protoc_insertion_point(destructor:gobgpapi.IbgpState)
  SharedDtor();
}

void IbgpState::SharedDtor() {
}

void IbgpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IbgpState& IbgpState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IbgpState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void IbgpState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maximum_paths_ = 0u;
  _internal_metadata_.Clear();
}

const char* IbgpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 maximum_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          maximum_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IbgpState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IbgpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maximum_paths(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IbgpState)
  return target;
}

size_t IbgpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IbgpState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 maximum_paths = 1;
  if (this->maximum_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maximum_paths());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IbgpState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  const IbgpState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IbgpState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IbgpState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IbgpState)
    MergeFrom(*source);
  }
}

void IbgpState::MergeFrom(const IbgpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IbgpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maximum_paths() != 0) {
    _internal_set_maximum_paths(from._internal_maximum_paths());
  }
}

void IbgpState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IbgpState::CopyFrom(const IbgpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IbgpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IbgpState::IsInitialized() const {
  return true;
}

void IbgpState::InternalSwap(IbgpState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(maximum_paths_, other->maximum_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IbgpState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ibgp::InitAsDefaultInstance() {
  ::gobgpapi::_Ibgp_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::IbgpConfig*>(
      ::gobgpapi::IbgpConfig::internal_default_instance());
  ::gobgpapi::_Ibgp_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::IbgpState*>(
      ::gobgpapi::IbgpState::internal_default_instance());
}
class Ibgp::_Internal {
 public:
  static const ::gobgpapi::IbgpConfig& config(const Ibgp* msg);
  static const ::gobgpapi::IbgpState& state(const Ibgp* msg);
};

const ::gobgpapi::IbgpConfig&
Ibgp::_Internal::config(const Ibgp* msg) {
  return *msg->config_;
}
const ::gobgpapi::IbgpState&
Ibgp::_Internal::state(const Ibgp* msg) {
  return *msg->state_;
}
Ibgp::Ibgp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Ibgp)
}
Ibgp::Ibgp(const Ibgp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::IbgpConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::IbgpState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Ibgp)
}

void Ibgp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ibgp_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

Ibgp::~Ibgp() {
  // @@protoc_insertion_point(destructor:gobgpapi.Ibgp)
  SharedDtor();
}

void Ibgp::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void Ibgp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ibgp& Ibgp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ibgp_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Ibgp::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Ibgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Ibgp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.IbgpConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.IbgpState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ibgp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Ibgp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.IbgpConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.IbgpState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Ibgp)
  return target;
}

size_t Ibgp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Ibgp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.IbgpConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.IbgpState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ibgp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Ibgp)
  GOOGLE_DCHECK_NE(&from, this);
  const Ibgp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ibgp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Ibgp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Ibgp)
    MergeFrom(*source);
  }
}

void Ibgp::MergeFrom(const Ibgp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Ibgp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::IbgpConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::IbgpState::MergeFrom(from._internal_state());
  }
}

void Ibgp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Ibgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ibgp::CopyFrom(const Ibgp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Ibgp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ibgp::IsInitialized() const {
  return true;
}

void Ibgp::InternalSwap(Ibgp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ibgp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseMultiplePaths::InitAsDefaultInstance() {
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::UseMultiplePathsConfig*>(
      ::gobgpapi::UseMultiplePathsConfig::internal_default_instance());
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::UseMultiplePathsState*>(
      ::gobgpapi::UseMultiplePathsState::internal_default_instance());
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->ebgp_ = const_cast< ::gobgpapi::Ebgp*>(
      ::gobgpapi::Ebgp::internal_default_instance());
  ::gobgpapi::_UseMultiplePaths_default_instance_._instance.get_mutable()->ibgp_ = const_cast< ::gobgpapi::Ibgp*>(
      ::gobgpapi::Ibgp::internal_default_instance());
}
class UseMultiplePaths::_Internal {
 public:
  static const ::gobgpapi::UseMultiplePathsConfig& config(const UseMultiplePaths* msg);
  static const ::gobgpapi::UseMultiplePathsState& state(const UseMultiplePaths* msg);
  static const ::gobgpapi::Ebgp& ebgp(const UseMultiplePaths* msg);
  static const ::gobgpapi::Ibgp& ibgp(const UseMultiplePaths* msg);
};

const ::gobgpapi::UseMultiplePathsConfig&
UseMultiplePaths::_Internal::config(const UseMultiplePaths* msg) {
  return *msg->config_;
}
const ::gobgpapi::UseMultiplePathsState&
UseMultiplePaths::_Internal::state(const UseMultiplePaths* msg) {
  return *msg->state_;
}
const ::gobgpapi::Ebgp&
UseMultiplePaths::_Internal::ebgp(const UseMultiplePaths* msg) {
  return *msg->ebgp_;
}
const ::gobgpapi::Ibgp&
UseMultiplePaths::_Internal::ibgp(const UseMultiplePaths* msg) {
  return *msg->ibgp_;
}
UseMultiplePaths::UseMultiplePaths()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UseMultiplePaths)
}
UseMultiplePaths::UseMultiplePaths(const UseMultiplePaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::UseMultiplePathsConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::UseMultiplePathsState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_ebgp()) {
    ebgp_ = new ::gobgpapi::Ebgp(*from.ebgp_);
  } else {
    ebgp_ = nullptr;
  }
  if (from._internal_has_ibgp()) {
    ibgp_ = new ::gobgpapi::Ibgp(*from.ibgp_);
  } else {
    ibgp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UseMultiplePaths)
}

void UseMultiplePaths::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UseMultiplePaths_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ibgp_) -
      reinterpret_cast<char*>(&config_)) + sizeof(ibgp_));
}

UseMultiplePaths::~UseMultiplePaths() {
  // @@protoc_insertion_point(destructor:gobgpapi.UseMultiplePaths)
  SharedDtor();
}

void UseMultiplePaths::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete ebgp_;
  if (this != internal_default_instance()) delete ibgp_;
}

void UseMultiplePaths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseMultiplePaths& UseMultiplePaths::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseMultiplePaths_gobgp_2eproto.base);
  return *internal_default_instance();
}


void UseMultiplePaths::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UseMultiplePaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ebgp_ != nullptr) {
    delete ebgp_;
  }
  ebgp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ibgp_ != nullptr) {
    delete ibgp_;
  }
  ibgp_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UseMultiplePaths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.UseMultiplePathsConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.UseMultiplePathsState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Ebgp ebgp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ebgp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Ibgp ibgp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ibgp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseMultiplePaths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UseMultiplePaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.UseMultiplePathsConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.UseMultiplePathsState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  // .gobgpapi.Ebgp ebgp = 3;
  if (this->has_ebgp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ebgp(this), target, stream);
  }

  // .gobgpapi.Ibgp ibgp = 4;
  if (this->has_ibgp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ibgp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UseMultiplePaths)
  return target;
}

size_t UseMultiplePaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UseMultiplePaths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.UseMultiplePathsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.UseMultiplePathsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .gobgpapi.Ebgp ebgp = 3;
  if (this->has_ebgp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ebgp_);
  }

  // .gobgpapi.Ibgp ibgp = 4;
  if (this->has_ibgp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ibgp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseMultiplePaths::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UseMultiplePaths)
  GOOGLE_DCHECK_NE(&from, this);
  const UseMultiplePaths* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseMultiplePaths>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UseMultiplePaths)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UseMultiplePaths)
    MergeFrom(*source);
  }
}

void UseMultiplePaths::MergeFrom(const UseMultiplePaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UseMultiplePaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::UseMultiplePathsConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::UseMultiplePathsState::MergeFrom(from._internal_state());
  }
  if (from.has_ebgp()) {
    _internal_mutable_ebgp()->::gobgpapi::Ebgp::MergeFrom(from._internal_ebgp());
  }
  if (from.has_ibgp()) {
    _internal_mutable_ibgp()->::gobgpapi::Ibgp::MergeFrom(from._internal_ibgp());
  }
}

void UseMultiplePaths::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UseMultiplePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseMultiplePaths::CopyFrom(const UseMultiplePaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UseMultiplePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMultiplePaths::IsInitialized() const {
  return true;
}

void UseMultiplePaths::InternalSwap(UseMultiplePaths* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(ebgp_, other->ebgp_);
  swap(ibgp_, other->ibgp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMultiplePaths::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembershipConfig::InitAsDefaultInstance() {
}
class RouteTargetMembershipConfig::_Internal {
 public:
};

RouteTargetMembershipConfig::RouteTargetMembershipConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteTargetMembershipConfig)
}
RouteTargetMembershipConfig::RouteTargetMembershipConfig(const RouteTargetMembershipConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deferral_time_ = from.deferral_time_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteTargetMembershipConfig)
}

void RouteTargetMembershipConfig::SharedCtor() {
  deferral_time_ = 0u;
}

RouteTargetMembershipConfig::~RouteTargetMembershipConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteTargetMembershipConfig)
  SharedDtor();
}

void RouteTargetMembershipConfig::SharedDtor() {
}

void RouteTargetMembershipConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembershipConfig& RouteTargetMembershipConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembershipConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembershipConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteTargetMembershipConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deferral_time_ = 0u;
  _internal_metadata_.Clear();
}

const char* RouteTargetMembershipConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 deferral_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          deferral_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembershipConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteTargetMembershipConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deferral_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteTargetMembershipConfig)
  return target;
}

size_t RouteTargetMembershipConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteTargetMembershipConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deferral_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembershipConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteTargetMembershipConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembershipConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteTargetMembershipConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteTargetMembershipConfig)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipConfig::MergeFrom(const RouteTargetMembershipConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteTargetMembershipConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deferral_time() != 0) {
    _internal_set_deferral_time(from._internal_deferral_time());
  }
}

void RouteTargetMembershipConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteTargetMembershipConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipConfig::CopyFrom(const RouteTargetMembershipConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteTargetMembershipConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipConfig::IsInitialized() const {
  return true;
}

void RouteTargetMembershipConfig::InternalSwap(RouteTargetMembershipConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(deferral_time_, other->deferral_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembershipConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembershipState::InitAsDefaultInstance() {
}
class RouteTargetMembershipState::_Internal {
 public:
};

RouteTargetMembershipState::RouteTargetMembershipState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteTargetMembershipState)
}
RouteTargetMembershipState::RouteTargetMembershipState(const RouteTargetMembershipState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deferral_time_ = from.deferral_time_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteTargetMembershipState)
}

void RouteTargetMembershipState::SharedCtor() {
  deferral_time_ = 0u;
}

RouteTargetMembershipState::~RouteTargetMembershipState() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteTargetMembershipState)
  SharedDtor();
}

void RouteTargetMembershipState::SharedDtor() {
}

void RouteTargetMembershipState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembershipState& RouteTargetMembershipState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembershipState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembershipState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteTargetMembershipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deferral_time_ = 0u;
  _internal_metadata_.Clear();
}

const char* RouteTargetMembershipState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 deferral_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          deferral_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembershipState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteTargetMembershipState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deferral_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteTargetMembershipState)
  return target;
}

size_t RouteTargetMembershipState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteTargetMembershipState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 deferral_time = 1;
  if (this->deferral_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deferral_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembershipState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteTargetMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembershipState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteTargetMembershipState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteTargetMembershipState)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipState::MergeFrom(const RouteTargetMembershipState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteTargetMembershipState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deferral_time() != 0) {
    _internal_set_deferral_time(from._internal_deferral_time());
  }
}

void RouteTargetMembershipState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteTargetMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipState::CopyFrom(const RouteTargetMembershipState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteTargetMembershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipState::IsInitialized() const {
  return true;
}

void RouteTargetMembershipState::InternalSwap(RouteTargetMembershipState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(deferral_time_, other->deferral_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembershipState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembership::InitAsDefaultInstance() {
  ::gobgpapi::_RouteTargetMembership_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::RouteTargetMembershipConfig*>(
      ::gobgpapi::RouteTargetMembershipConfig::internal_default_instance());
  ::gobgpapi::_RouteTargetMembership_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::RouteTargetMembershipState*>(
      ::gobgpapi::RouteTargetMembershipState::internal_default_instance());
}
class RouteTargetMembership::_Internal {
 public:
  static const ::gobgpapi::RouteTargetMembershipConfig& config(const RouteTargetMembership* msg);
  static const ::gobgpapi::RouteTargetMembershipState& state(const RouteTargetMembership* msg);
};

const ::gobgpapi::RouteTargetMembershipConfig&
RouteTargetMembership::_Internal::config(const RouteTargetMembership* msg) {
  return *msg->config_;
}
const ::gobgpapi::RouteTargetMembershipState&
RouteTargetMembership::_Internal::state(const RouteTargetMembership* msg) {
  return *msg->state_;
}
RouteTargetMembership::RouteTargetMembership()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteTargetMembership)
}
RouteTargetMembership::RouteTargetMembership(const RouteTargetMembership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::RouteTargetMembershipConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::RouteTargetMembershipState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteTargetMembership)
}

void RouteTargetMembership::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteTargetMembership_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

RouteTargetMembership::~RouteTargetMembership() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteTargetMembership)
  SharedDtor();
}

void RouteTargetMembership::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void RouteTargetMembership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembership& RouteTargetMembership::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembership_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembership::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteTargetMembership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RouteTargetMembership::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.RouteTargetMembershipConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteTargetMembershipState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembership::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteTargetMembership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteTargetMembershipConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.RouteTargetMembershipState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteTargetMembership)
  return target;
}

size_t RouteTargetMembership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteTargetMembership)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.RouteTargetMembershipConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.RouteTargetMembershipState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembership::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteTargetMembership)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembership* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteTargetMembership)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteTargetMembership)
    MergeFrom(*source);
  }
}

void RouteTargetMembership::MergeFrom(const RouteTargetMembership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteTargetMembership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::RouteTargetMembershipConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::RouteTargetMembershipState::MergeFrom(from._internal_state());
  }
}

void RouteTargetMembership::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteTargetMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembership::CopyFrom(const RouteTargetMembership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteTargetMembership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembership::IsInitialized() const {
  return true;
}

void RouteTargetMembership::InternalSwap(RouteTargetMembership* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembership::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongLivedGracefulRestartConfig::InitAsDefaultInstance() {
}
class LongLivedGracefulRestartConfig::_Internal {
 public:
};

LongLivedGracefulRestartConfig::LongLivedGracefulRestartConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LongLivedGracefulRestartConfig)
}
LongLivedGracefulRestartConfig::LongLivedGracefulRestartConfig(const LongLivedGracefulRestartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&restart_time_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LongLivedGracefulRestartConfig)
}

void LongLivedGracefulRestartConfig::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
}

LongLivedGracefulRestartConfig::~LongLivedGracefulRestartConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.LongLivedGracefulRestartConfig)
  SharedDtor();
}

void LongLivedGracefulRestartConfig::SharedDtor() {
}

void LongLivedGracefulRestartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongLivedGracefulRestartConfig& LongLivedGracefulRestartConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongLivedGracefulRestartConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LongLivedGracefulRestartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LongLivedGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(restart_time_));
  _internal_metadata_.Clear();
}

const char* LongLivedGracefulRestartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 restart_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongLivedGracefulRestartConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LongLivedGracefulRestartConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_restart_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LongLivedGracefulRestartConfig)
  return target;
}

size_t LongLivedGracefulRestartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LongLivedGracefulRestartConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 restart_time = 2;
  if (this->restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_restart_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongLivedGracefulRestartConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestartConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongLivedGracefulRestartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LongLivedGracefulRestartConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LongLivedGracefulRestartConfig)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestartConfig::MergeFrom(const LongLivedGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.restart_time() != 0) {
    _internal_set_restart_time(from._internal_restart_time());
  }
}

void LongLivedGracefulRestartConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestartConfig::CopyFrom(const LongLivedGracefulRestartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LongLivedGracefulRestartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestartConfig::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestartConfig::InternalSwap(LongLivedGracefulRestartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(restart_time_, other->restart_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLivedGracefulRestartConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongLivedGracefulRestartState::InitAsDefaultInstance() {
}
class LongLivedGracefulRestartState::_Internal {
 public:
};

LongLivedGracefulRestartState::LongLivedGracefulRestartState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LongLivedGracefulRestartState)
}
LongLivedGracefulRestartState::LongLivedGracefulRestartState(const LongLivedGracefulRestartState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_restart_time_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LongLivedGracefulRestartState)
}

void LongLivedGracefulRestartState::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
}

LongLivedGracefulRestartState::~LongLivedGracefulRestartState() {
  // @@protoc_insertion_point(destructor:gobgpapi.LongLivedGracefulRestartState)
  SharedDtor();
}

void LongLivedGracefulRestartState::SharedDtor() {
}

void LongLivedGracefulRestartState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongLivedGracefulRestartState& LongLivedGracefulRestartState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongLivedGracefulRestartState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LongLivedGracefulRestartState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LongLivedGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_restart_time_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(peer_restart_time_));
  _internal_metadata_.Clear();
}

const char* LongLivedGracefulRestartState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool received = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool advertised = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          advertised_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 peer_restart_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_restart_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool peer_restart_timer_expired = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          peer_restart_timer_expired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongLivedGracefulRestartState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LongLivedGracefulRestartState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // bool received = 2;
  if (this->received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_received(), target);
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_advertised(), target);
  }

  // uint32 peer_restart_time = 4;
  if (this->peer_restart_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peer_restart_time(), target);
  }

  // bool peer_restart_timer_expired = 5;
  if (this->peer_restart_timer_expired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_peer_restart_timer_expired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LongLivedGracefulRestartState)
  return target;
}

size_t LongLivedGracefulRestartState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LongLivedGracefulRestartState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool received = 2;
  if (this->received() != 0) {
    total_size += 1 + 1;
  }

  // bool advertised = 3;
  if (this->advertised() != 0) {
    total_size += 1 + 1;
  }

  // bool peer_restart_timer_expired = 5;
  if (this->peer_restart_timer_expired() != 0) {
    total_size += 1 + 1;
  }

  // uint32 peer_restart_time = 4;
  if (this->peer_restart_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_peer_restart_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongLivedGracefulRestartState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LongLivedGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestartState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongLivedGracefulRestartState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LongLivedGracefulRestartState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LongLivedGracefulRestartState)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestartState::MergeFrom(const LongLivedGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LongLivedGracefulRestartState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.received() != 0) {
    _internal_set_received(from._internal_received());
  }
  if (from.advertised() != 0) {
    _internal_set_advertised(from._internal_advertised());
  }
  if (from.peer_restart_timer_expired() != 0) {
    _internal_set_peer_restart_timer_expired(from._internal_peer_restart_timer_expired());
  }
  if (from.peer_restart_time() != 0) {
    _internal_set_peer_restart_time(from._internal_peer_restart_time());
  }
}

void LongLivedGracefulRestartState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LongLivedGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestartState::CopyFrom(const LongLivedGracefulRestartState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LongLivedGracefulRestartState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestartState::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestartState::InternalSwap(LongLivedGracefulRestartState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
  swap(received_, other->received_);
  swap(advertised_, other->advertised_);
  swap(peer_restart_timer_expired_, other->peer_restart_timer_expired_);
  swap(peer_restart_time_, other->peer_restart_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLivedGracefulRestartState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongLivedGracefulRestart::InitAsDefaultInstance() {
  ::gobgpapi::_LongLivedGracefulRestart_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::LongLivedGracefulRestartConfig*>(
      ::gobgpapi::LongLivedGracefulRestartConfig::internal_default_instance());
  ::gobgpapi::_LongLivedGracefulRestart_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::LongLivedGracefulRestartState*>(
      ::gobgpapi::LongLivedGracefulRestartState::internal_default_instance());
}
class LongLivedGracefulRestart::_Internal {
 public:
  static const ::gobgpapi::LongLivedGracefulRestartConfig& config(const LongLivedGracefulRestart* msg);
  static const ::gobgpapi::LongLivedGracefulRestartState& state(const LongLivedGracefulRestart* msg);
};

const ::gobgpapi::LongLivedGracefulRestartConfig&
LongLivedGracefulRestart::_Internal::config(const LongLivedGracefulRestart* msg) {
  return *msg->config_;
}
const ::gobgpapi::LongLivedGracefulRestartState&
LongLivedGracefulRestart::_Internal::state(const LongLivedGracefulRestart* msg) {
  return *msg->state_;
}
LongLivedGracefulRestart::LongLivedGracefulRestart()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LongLivedGracefulRestart)
}
LongLivedGracefulRestart::LongLivedGracefulRestart(const LongLivedGracefulRestart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::LongLivedGracefulRestartConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::LongLivedGracefulRestartState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LongLivedGracefulRestart)
}

void LongLivedGracefulRestart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LongLivedGracefulRestart_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

LongLivedGracefulRestart::~LongLivedGracefulRestart() {
  // @@protoc_insertion_point(destructor:gobgpapi.LongLivedGracefulRestart)
  SharedDtor();
}

void LongLivedGracefulRestart::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void LongLivedGracefulRestart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongLivedGracefulRestart& LongLivedGracefulRestart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongLivedGracefulRestart_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LongLivedGracefulRestart::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LongLivedGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LongLivedGracefulRestart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LongLivedGracefulRestartState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongLivedGracefulRestart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LongLivedGracefulRestart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.LongLivedGracefulRestartState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LongLivedGracefulRestart)
  return target;
}

size_t LongLivedGracefulRestart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LongLivedGracefulRestart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.LongLivedGracefulRestartState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongLivedGracefulRestart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LongLivedGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  const LongLivedGracefulRestart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongLivedGracefulRestart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LongLivedGracefulRestart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LongLivedGracefulRestart)
    MergeFrom(*source);
  }
}

void LongLivedGracefulRestart::MergeFrom(const LongLivedGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LongLivedGracefulRestart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::LongLivedGracefulRestartConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::LongLivedGracefulRestartState::MergeFrom(from._internal_state());
  }
}

void LongLivedGracefulRestart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LongLivedGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongLivedGracefulRestart::CopyFrom(const LongLivedGracefulRestart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LongLivedGracefulRestart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongLivedGracefulRestart::IsInitialized() const {
  return true;
}

void LongLivedGracefulRestart::InternalSwap(LongLivedGracefulRestart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongLivedGracefulRestart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AfiSafi::InitAsDefaultInstance() {
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->mp_graceful_restart_ = const_cast< ::gobgpapi::MpGracefulRestart*>(
      ::gobgpapi::MpGracefulRestart::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::AfiSafiConfig*>(
      ::gobgpapi::AfiSafiConfig::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::AfiSafiState*>(
      ::gobgpapi::AfiSafiState::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::gobgpapi::ApplyPolicy*>(
      ::gobgpapi::ApplyPolicy::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->route_selection_options_ = const_cast< ::gobgpapi::RouteSelectionOptions*>(
      ::gobgpapi::RouteSelectionOptions::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->use_multiple_paths_ = const_cast< ::gobgpapi::UseMultiplePaths*>(
      ::gobgpapi::UseMultiplePaths::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->prefix_limits_ = const_cast< ::gobgpapi::PrefixLimit*>(
      ::gobgpapi::PrefixLimit::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->route_target_membership_ = const_cast< ::gobgpapi::RouteTargetMembership*>(
      ::gobgpapi::RouteTargetMembership::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->long_lived_graceful_restart_ = const_cast< ::gobgpapi::LongLivedGracefulRestart*>(
      ::gobgpapi::LongLivedGracefulRestart::internal_default_instance());
  ::gobgpapi::_AfiSafi_default_instance_._instance.get_mutable()->add_paths_ = const_cast< ::gobgpapi::AddPaths*>(
      ::gobgpapi::AddPaths::internal_default_instance());
}
class AfiSafi::_Internal {
 public:
  static const ::gobgpapi::MpGracefulRestart& mp_graceful_restart(const AfiSafi* msg);
  static const ::gobgpapi::AfiSafiConfig& config(const AfiSafi* msg);
  static const ::gobgpapi::AfiSafiState& state(const AfiSafi* msg);
  static const ::gobgpapi::ApplyPolicy& apply_policy(const AfiSafi* msg);
  static const ::gobgpapi::RouteSelectionOptions& route_selection_options(const AfiSafi* msg);
  static const ::gobgpapi::UseMultiplePaths& use_multiple_paths(const AfiSafi* msg);
  static const ::gobgpapi::PrefixLimit& prefix_limits(const AfiSafi* msg);
  static const ::gobgpapi::RouteTargetMembership& route_target_membership(const AfiSafi* msg);
  static const ::gobgpapi::LongLivedGracefulRestart& long_lived_graceful_restart(const AfiSafi* msg);
  static const ::gobgpapi::AddPaths& add_paths(const AfiSafi* msg);
};

const ::gobgpapi::MpGracefulRestart&
AfiSafi::_Internal::mp_graceful_restart(const AfiSafi* msg) {
  return *msg->mp_graceful_restart_;
}
const ::gobgpapi::AfiSafiConfig&
AfiSafi::_Internal::config(const AfiSafi* msg) {
  return *msg->config_;
}
const ::gobgpapi::AfiSafiState&
AfiSafi::_Internal::state(const AfiSafi* msg) {
  return *msg->state_;
}
const ::gobgpapi::ApplyPolicy&
AfiSafi::_Internal::apply_policy(const AfiSafi* msg) {
  return *msg->apply_policy_;
}
const ::gobgpapi::RouteSelectionOptions&
AfiSafi::_Internal::route_selection_options(const AfiSafi* msg) {
  return *msg->route_selection_options_;
}
const ::gobgpapi::UseMultiplePaths&
AfiSafi::_Internal::use_multiple_paths(const AfiSafi* msg) {
  return *msg->use_multiple_paths_;
}
const ::gobgpapi::PrefixLimit&
AfiSafi::_Internal::prefix_limits(const AfiSafi* msg) {
  return *msg->prefix_limits_;
}
const ::gobgpapi::RouteTargetMembership&
AfiSafi::_Internal::route_target_membership(const AfiSafi* msg) {
  return *msg->route_target_membership_;
}
const ::gobgpapi::LongLivedGracefulRestart&
AfiSafi::_Internal::long_lived_graceful_restart(const AfiSafi* msg) {
  return *msg->long_lived_graceful_restart_;
}
const ::gobgpapi::AddPaths&
AfiSafi::_Internal::add_paths(const AfiSafi* msg) {
  return *msg->add_paths_;
}
AfiSafi::AfiSafi()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AfiSafi)
}
AfiSafi::AfiSafi(const AfiSafi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mp_graceful_restart()) {
    mp_graceful_restart_ = new ::gobgpapi::MpGracefulRestart(*from.mp_graceful_restart_);
  } else {
    mp_graceful_restart_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::AfiSafiConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::AfiSafiState(*from.state_);
  } else {
    state_ = nullptr;
  }
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  if (from._internal_has_route_selection_options()) {
    route_selection_options_ = new ::gobgpapi::RouteSelectionOptions(*from.route_selection_options_);
  } else {
    route_selection_options_ = nullptr;
  }
  if (from._internal_has_use_multiple_paths()) {
    use_multiple_paths_ = new ::gobgpapi::UseMultiplePaths(*from.use_multiple_paths_);
  } else {
    use_multiple_paths_ = nullptr;
  }
  if (from._internal_has_prefix_limits()) {
    prefix_limits_ = new ::gobgpapi::PrefixLimit(*from.prefix_limits_);
  } else {
    prefix_limits_ = nullptr;
  }
  if (from._internal_has_route_target_membership()) {
    route_target_membership_ = new ::gobgpapi::RouteTargetMembership(*from.route_target_membership_);
  } else {
    route_target_membership_ = nullptr;
  }
  if (from._internal_has_long_lived_graceful_restart()) {
    long_lived_graceful_restart_ = new ::gobgpapi::LongLivedGracefulRestart(*from.long_lived_graceful_restart_);
  } else {
    long_lived_graceful_restart_ = nullptr;
  }
  if (from._internal_has_add_paths()) {
    add_paths_ = new ::gobgpapi::AddPaths(*from.add_paths_);
  } else {
    add_paths_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AfiSafi)
}

void AfiSafi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AfiSafi_gobgp_2eproto.base);
  ::memset(&mp_graceful_restart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_paths_) -
      reinterpret_cast<char*>(&mp_graceful_restart_)) + sizeof(add_paths_));
}

AfiSafi::~AfiSafi() {
  // @@protoc_insertion_point(destructor:gobgpapi.AfiSafi)
  SharedDtor();
}

void AfiSafi::SharedDtor() {
  if (this != internal_default_instance()) delete mp_graceful_restart_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete apply_policy_;
  if (this != internal_default_instance()) delete route_selection_options_;
  if (this != internal_default_instance()) delete use_multiple_paths_;
  if (this != internal_default_instance()) delete prefix_limits_;
  if (this != internal_default_instance()) delete route_target_membership_;
  if (this != internal_default_instance()) delete long_lived_graceful_restart_;
  if (this != internal_default_instance()) delete add_paths_;
}

void AfiSafi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfiSafi& AfiSafi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AfiSafi_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AfiSafi::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AfiSafi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mp_graceful_restart_ != nullptr) {
    delete mp_graceful_restart_;
  }
  mp_graceful_restart_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_selection_options_ != nullptr) {
    delete route_selection_options_;
  }
  route_selection_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && use_multiple_paths_ != nullptr) {
    delete use_multiple_paths_;
  }
  use_multiple_paths_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prefix_limits_ != nullptr) {
    delete prefix_limits_;
  }
  prefix_limits_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_target_membership_ != nullptr) {
    delete route_target_membership_;
  }
  route_target_membership_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && long_lived_graceful_restart_ != nullptr) {
    delete long_lived_graceful_restart_;
  }
  long_lived_graceful_restart_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && add_paths_ != nullptr) {
    delete add_paths_;
  }
  add_paths_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AfiSafi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mp_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.AfiSafiConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.AfiSafiState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.ApplyPolicy apply_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteSelectionOptions route_selection_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_selection_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.UseMultiplePaths use_multiple_paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_multiple_paths(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PrefixLimit prefix_limits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteTargetMembership route_target_membership = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_target_membership(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_lived_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.AddPaths add_paths = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_paths(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AfiSafi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AfiSafi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
  if (this->has_mp_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mp_graceful_restart(this), target, stream);
  }

  // .gobgpapi.AfiSafiConfig config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // .gobgpapi.AfiSafiState state = 3;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 4;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::apply_policy(this), target, stream);
  }

  // .gobgpapi.RouteSelectionOptions route_selection_options = 5;
  if (this->has_route_selection_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::route_selection_options(this), target, stream);
  }

  // .gobgpapi.UseMultiplePaths use_multiple_paths = 6;
  if (this->has_use_multiple_paths()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::use_multiple_paths(this), target, stream);
  }

  // .gobgpapi.PrefixLimit prefix_limits = 7;
  if (this->has_prefix_limits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::prefix_limits(this), target, stream);
  }

  // .gobgpapi.RouteTargetMembership route_target_membership = 8;
  if (this->has_route_target_membership()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::route_target_membership(this), target, stream);
  }

  // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 9;
  if (this->has_long_lived_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::long_lived_graceful_restart(this), target, stream);
  }

  // .gobgpapi.AddPaths add_paths = 10;
  if (this->has_add_paths()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::add_paths(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AfiSafi)
  return target;
}

size_t AfiSafi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AfiSafi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
  if (this->has_mp_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mp_graceful_restart_);
  }

  // .gobgpapi.AfiSafiConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.AfiSafiState state = 3;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 4;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // .gobgpapi.RouteSelectionOptions route_selection_options = 5;
  if (this->has_route_selection_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_selection_options_);
  }

  // .gobgpapi.UseMultiplePaths use_multiple_paths = 6;
  if (this->has_use_multiple_paths()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_multiple_paths_);
  }

  // .gobgpapi.PrefixLimit prefix_limits = 7;
  if (this->has_prefix_limits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_limits_);
  }

  // .gobgpapi.RouteTargetMembership route_target_membership = 8;
  if (this->has_route_target_membership()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_target_membership_);
  }

  // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 9;
  if (this->has_long_lived_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *long_lived_graceful_restart_);
  }

  // .gobgpapi.AddPaths add_paths = 10;
  if (this->has_add_paths()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *add_paths_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfiSafi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AfiSafi)
  GOOGLE_DCHECK_NE(&from, this);
  const AfiSafi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AfiSafi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AfiSafi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AfiSafi)
    MergeFrom(*source);
  }
}

void AfiSafi::MergeFrom(const AfiSafi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AfiSafi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mp_graceful_restart()) {
    _internal_mutable_mp_graceful_restart()->::gobgpapi::MpGracefulRestart::MergeFrom(from._internal_mp_graceful_restart());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::AfiSafiConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::AfiSafiState::MergeFrom(from._internal_state());
  }
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::gobgpapi::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.has_route_selection_options()) {
    _internal_mutable_route_selection_options()->::gobgpapi::RouteSelectionOptions::MergeFrom(from._internal_route_selection_options());
  }
  if (from.has_use_multiple_paths()) {
    _internal_mutable_use_multiple_paths()->::gobgpapi::UseMultiplePaths::MergeFrom(from._internal_use_multiple_paths());
  }
  if (from.has_prefix_limits()) {
    _internal_mutable_prefix_limits()->::gobgpapi::PrefixLimit::MergeFrom(from._internal_prefix_limits());
  }
  if (from.has_route_target_membership()) {
    _internal_mutable_route_target_membership()->::gobgpapi::RouteTargetMembership::MergeFrom(from._internal_route_target_membership());
  }
  if (from.has_long_lived_graceful_restart()) {
    _internal_mutable_long_lived_graceful_restart()->::gobgpapi::LongLivedGracefulRestart::MergeFrom(from._internal_long_lived_graceful_restart());
  }
  if (from.has_add_paths()) {
    _internal_mutable_add_paths()->::gobgpapi::AddPaths::MergeFrom(from._internal_add_paths());
  }
}

void AfiSafi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AfiSafi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfiSafi::CopyFrom(const AfiSafi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AfiSafi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfiSafi::IsInitialized() const {
  return true;
}

void AfiSafi::InternalSwap(AfiSafi* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mp_graceful_restart_, other->mp_graceful_restart_);
  swap(config_, other->config_);
  swap(state_, other->state_);
  swap(apply_policy_, other->apply_policy_);
  swap(route_selection_options_, other->route_selection_options_);
  swap(use_multiple_paths_, other->use_multiple_paths_);
  swap(prefix_limits_, other->prefix_limits_);
  swap(route_target_membership_, other->route_target_membership_);
  swap(long_lived_graceful_restart_, other->long_lived_graceful_restart_);
  swap(add_paths_, other->add_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AfiSafi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathsConfig::InitAsDefaultInstance() {
}
class AddPathsConfig::_Internal {
 public:
};

AddPathsConfig::AddPathsConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathsConfig)
}
AddPathsConfig::AddPathsConfig(const AddPathsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receive_, &from.receive_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_max_) -
    reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathsConfig)
}

void AddPathsConfig::SharedCtor() {
  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
}

AddPathsConfig::~AddPathsConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathsConfig)
  SharedDtor();
}

void AddPathsConfig::SharedDtor() {
}

void AddPathsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathsConfig& AddPathsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathsConfig_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _internal_metadata_.Clear();
}

const char* AddPathsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool receive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          send_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathsConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_receive(), target);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_send_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathsConfig)
  return target;
}

size_t AddPathsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathsConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathsConfig)
    MergeFrom(*source);
  }
}

void AddPathsConfig::MergeFrom(const AddPathsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receive() != 0) {
    _internal_set_receive(from._internal_receive());
  }
  if (from.send_max() != 0) {
    _internal_set_send_max(from._internal_send_max());
  }
}

void AddPathsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathsConfig::CopyFrom(const AddPathsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathsConfig::IsInitialized() const {
  return true;
}

void AddPathsConfig::InternalSwap(AddPathsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(receive_, other->receive_);
  swap(send_max_, other->send_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPathsState::InitAsDefaultInstance() {
}
class AddPathsState::_Internal {
 public:
};

AddPathsState::AddPathsState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPathsState)
}
AddPathsState::AddPathsState(const AddPathsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receive_, &from.receive_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_max_) -
    reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPathsState)
}

void AddPathsState::SharedCtor() {
  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
}

AddPathsState::~AddPathsState() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPathsState)
  SharedDtor();
}

void AddPathsState::SharedDtor() {
}

void AddPathsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPathsState& AddPathsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPathsState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPathsState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&receive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_max_) -
      reinterpret_cast<char*>(&receive_)) + sizeof(send_max_));
  _internal_metadata_.Clear();
}

const char* AddPathsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool receive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 send_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          send_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPathsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPathsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_receive(), target);
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_send_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPathsState)
  return target;
}

size_t AddPathsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPathsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool receive = 1;
  if (this->receive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 send_max = 2;
  if (this->send_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_send_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPathsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPathsState)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPathsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPathsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPathsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPathsState)
    MergeFrom(*source);
  }
}

void AddPathsState::MergeFrom(const AddPathsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPathsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receive() != 0) {
    _internal_set_receive(from._internal_receive());
  }
  if (from.send_max() != 0) {
    _internal_set_send_max(from._internal_send_max());
  }
}

void AddPathsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPathsState::CopyFrom(const AddPathsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPathsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPathsState::IsInitialized() const {
  return true;
}

void AddPathsState::InternalSwap(AddPathsState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(receive_, other->receive_);
  swap(send_max_, other->send_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPathsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddPaths::InitAsDefaultInstance() {
  ::gobgpapi::_AddPaths_default_instance_._instance.get_mutable()->config_ = const_cast< ::gobgpapi::AddPathsConfig*>(
      ::gobgpapi::AddPathsConfig::internal_default_instance());
  ::gobgpapi::_AddPaths_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::AddPathsState*>(
      ::gobgpapi::AddPathsState::internal_default_instance());
}
class AddPaths::_Internal {
 public:
  static const ::gobgpapi::AddPathsConfig& config(const AddPaths* msg);
  static const ::gobgpapi::AddPathsState& state(const AddPaths* msg);
};

const ::gobgpapi::AddPathsConfig&
AddPaths::_Internal::config(const AddPaths* msg) {
  return *msg->config_;
}
const ::gobgpapi::AddPathsState&
AddPaths::_Internal::state(const AddPaths* msg) {
  return *msg->state_;
}
AddPaths::AddPaths()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AddPaths)
}
AddPaths::AddPaths(const AddPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::gobgpapi::AddPathsConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::AddPathsState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AddPaths)
}

void AddPaths::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddPaths_gobgp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

AddPaths::~AddPaths() {
  // @@protoc_insertion_point(destructor:gobgpapi.AddPaths)
  SharedDtor();
}

void AddPaths::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete state_;
}

void AddPaths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddPaths& AddPaths::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddPaths_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AddPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AddPaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AddPaths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.AddPathsConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.AddPathsState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPaths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AddPaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.AddPathsConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .gobgpapi.AddPathsState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AddPaths)
  return target;
}

size_t AddPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AddPaths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.AddPathsConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .gobgpapi.AddPathsState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPaths::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AddPaths)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPaths* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPaths>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AddPaths)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AddPaths)
    MergeFrom(*source);
  }
}

void AddPaths::MergeFrom(const AddPaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AddPaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::gobgpapi::AddPathsConfig::MergeFrom(from._internal_config());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::AddPathsState::MergeFrom(from._internal_state());
  }
}

void AddPaths::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AddPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPaths::CopyFrom(const AddPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AddPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPaths::IsInitialized() const {
  return true;
}

void AddPaths::InternalSwap(AddPaths* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPaths::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prefix::InitAsDefaultInstance() {
}
class Prefix::_Internal {
 public:
};

Prefix::Prefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Prefix)
}
Prefix::Prefix(const Prefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_prefix().empty()) {
    ip_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_prefix_);
  }
  ::memcpy(&mask_length_min_, &from.mask_length_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_length_max_) -
    reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Prefix)
}

void Prefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prefix_gobgp_2eproto.base);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_length_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_length_max_) -
      reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
}

Prefix::~Prefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.Prefix)
  SharedDtor();
}

void Prefix::SharedDtor() {
  ip_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Prefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prefix& Prefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prefix_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Prefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_length_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_length_max_) -
      reinterpret_cast<char*>(&mask_length_min_)) + sizeof(mask_length_max_));
  _internal_metadata_.Clear();
}

const char* Prefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Prefix.ip_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mask_length_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mask_length_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mask_length_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mask_length_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Prefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_prefix().data(), static_cast<int>(this->_internal_ip_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Prefix.ip_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_prefix(), target);
  }

  // uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mask_length_min(), target);
  }

  // uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mask_length_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Prefix)
  return target;
}

size_t Prefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Prefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_prefix());
  }

  // uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_length_min());
  }

  // uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_length_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  const Prefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Prefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Prefix)
    MergeFrom(*source);
  }
}

void Prefix::MergeFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_prefix().size() > 0) {

    ip_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_prefix_);
  }
  if (from.mask_length_min() != 0) {
    _internal_set_mask_length_min(from._internal_mask_length_min());
  }
  if (from.mask_length_max() != 0) {
    _internal_set_mask_length_max(from._internal_mask_length_max());
  }
}

void Prefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prefix::CopyFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prefix::IsInitialized() const {
  return true;
}

void Prefix::InternalSwap(Prefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_prefix_.Swap(&other->ip_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mask_length_min_, other->mask_length_min_);
  swap(mask_length_max_, other->mask_length_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefinedSet::InitAsDefaultInstance() {
}
class DefinedSet::_Internal {
 public:
};

DefinedSet::DefinedSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DefinedSet)
}
DefinedSet::DefinedSet(const DefinedSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_),
      prefixes_(from.prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  defined_type_ = from.defined_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DefinedSet)
}

void DefinedSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefinedSet_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_type_ = 0;
}

DefinedSet::~DefinedSet() {
  // @@protoc_insertion_point(destructor:gobgpapi.DefinedSet)
  SharedDtor();
}

void DefinedSet::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DefinedSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefinedSet& DefinedSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefinedSet_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DefinedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DefinedSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  prefixes_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_type_ = 0;
  _internal_metadata_.Clear();
}

const char* DefinedSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.DefinedType defined_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_defined_type(static_cast<::gobgpapi::DefinedType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DefinedSet.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.DefinedSet.list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Prefix prefixes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefixes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefinedSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DefinedSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_defined_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string list = 3;
  for (int i = 0, n = this->_internal_list_size(); i < n; i++) {
    const auto& s = this->_internal_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.list");
    target = stream->WriteString(3, s, target);
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefixes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prefixes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DefinedSet)
  return target;
}

size_t DefinedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DefinedSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(list_.size());
  for (int i = 0, n = list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      list_.Get(i));
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  total_size += 1UL * this->_internal_prefixes_size();
  for (const auto& msg : this->prefixes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.DefinedType defined_type = 1;
  if (this->defined_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_defined_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefinedSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DefinedSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DefinedSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefinedSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DefinedSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DefinedSet)
    MergeFrom(*source);
  }
}

void DefinedSet::MergeFrom(const DefinedSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DefinedSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  prefixes_.MergeFrom(from.prefixes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.defined_type() != 0) {
    _internal_set_defined_type(from._internal_defined_type());
  }
}

void DefinedSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DefinedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefinedSet::CopyFrom(const DefinedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DefinedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefinedSet::IsInitialized() const {
  return true;
}

void DefinedSet::InternalSwap(DefinedSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  prefixes_.InternalSwap(&other->prefixes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(defined_type_, other->defined_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefinedSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchSet::InitAsDefaultInstance() {
}
class MatchSet::_Internal {
 public:
};

MatchSet::MatchSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MatchSet)
}
MatchSet::MatchSet(const MatchSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  match_type_ = from.match_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MatchSet)
}

void MatchSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchSet_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_type_ = 0;
}

MatchSet::~MatchSet() {
  // @@protoc_insertion_point(destructor:gobgpapi.MatchSet)
  SharedDtor();
}

void MatchSet::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchSet& MatchSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchSet_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MatchSet::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MatchSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_type_ = 0;
  _internal_metadata_.Clear();
}

const char* MatchSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.MatchType match_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::gobgpapi::MatchType>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.MatchSet.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MatchSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MatchType match_type = 1;
  if (this->match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_match_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MatchSet.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MatchSet)
  return target;
}

size_t MatchSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MatchSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.MatchType match_type = 1;
  if (this->match_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MatchSet)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MatchSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MatchSet)
    MergeFrom(*source);
  }
}

void MatchSet::MergeFrom(const MatchSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MatchSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.match_type() != 0) {
    _internal_set_match_type(from._internal_match_type());
  }
}

void MatchSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MatchSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSet::CopyFrom(const MatchSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MatchSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSet::IsInitialized() const {
  return true;
}

void MatchSet::InternalSwap(MatchSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_type_, other->match_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsPathLength::InitAsDefaultInstance() {
}
class AsPathLength::_Internal {
 public:
};

AsPathLength::AsPathLength()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsPathLength)
}
AsPathLength::AsPathLength(const AsPathLength& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&length_type_, &from.length_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&length_type_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsPathLength)
}

void AsPathLength::SharedCtor() {
  ::memset(&length_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&length_type_)) + sizeof(length_));
}

AsPathLength::~AsPathLength() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsPathLength)
  SharedDtor();
}

void AsPathLength::SharedDtor() {
}

void AsPathLength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsPathLength& AsPathLength::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsPathLength_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AsPathLength::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AsPathLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&length_type_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

const char* AsPathLength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.AsPathLengthType length_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_length_type(static_cast<::gobgpapi::AsPathLengthType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsPathLength::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsPathLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.AsPathLengthType length_type = 1;
  if (this->length_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_length_type(), target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsPathLength)
  return target;
}

size_t AsPathLength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AsPathLength)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.AsPathLengthType length_type = 1;
  if (this->length_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_length_type());
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsPathLength::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AsPathLength)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPathLength* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsPathLength>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AsPathLength)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AsPathLength)
    MergeFrom(*source);
  }
}

void AsPathLength::MergeFrom(const AsPathLength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AsPathLength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.length_type() != 0) {
    _internal_set_length_type(from._internal_length_type());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void AsPathLength::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AsPathLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPathLength::CopyFrom(const AsPathLength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AsPathLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPathLength::IsInitialized() const {
  return true;
}

void AsPathLength::InternalSwap(AsPathLength* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(length_type_, other->length_type_);
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsPathLength::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conditions::InitAsDefaultInstance() {
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->prefix_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->neighbor_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->as_path_length_ = const_cast< ::gobgpapi::AsPathLength*>(
      ::gobgpapi::AsPathLength::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->as_path_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->community_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->ext_community_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
  ::gobgpapi::_Conditions_default_instance_._instance.get_mutable()->large_community_set_ = const_cast< ::gobgpapi::MatchSet*>(
      ::gobgpapi::MatchSet::internal_default_instance());
}
class Conditions::_Internal {
 public:
  static const ::gobgpapi::MatchSet& prefix_set(const Conditions* msg);
  static const ::gobgpapi::MatchSet& neighbor_set(const Conditions* msg);
  static const ::gobgpapi::AsPathLength& as_path_length(const Conditions* msg);
  static const ::gobgpapi::MatchSet& as_path_set(const Conditions* msg);
  static const ::gobgpapi::MatchSet& community_set(const Conditions* msg);
  static const ::gobgpapi::MatchSet& ext_community_set(const Conditions* msg);
  static const ::gobgpapi::MatchSet& large_community_set(const Conditions* msg);
};

const ::gobgpapi::MatchSet&
Conditions::_Internal::prefix_set(const Conditions* msg) {
  return *msg->prefix_set_;
}
const ::gobgpapi::MatchSet&
Conditions::_Internal::neighbor_set(const Conditions* msg) {
  return *msg->neighbor_set_;
}
const ::gobgpapi::AsPathLength&
Conditions::_Internal::as_path_length(const Conditions* msg) {
  return *msg->as_path_length_;
}
const ::gobgpapi::MatchSet&
Conditions::_Internal::as_path_set(const Conditions* msg) {
  return *msg->as_path_set_;
}
const ::gobgpapi::MatchSet&
Conditions::_Internal::community_set(const Conditions* msg) {
  return *msg->community_set_;
}
const ::gobgpapi::MatchSet&
Conditions::_Internal::ext_community_set(const Conditions* msg) {
  return *msg->ext_community_set_;
}
const ::gobgpapi::MatchSet&
Conditions::_Internal::large_community_set(const Conditions* msg) {
  return *msg->large_community_set_;
}
Conditions::Conditions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Conditions)
}
Conditions::Conditions(const Conditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      next_hop_in_list_(from.next_hop_in_list_),
      afi_safi_in_(from.afi_safi_in_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_prefix_set()) {
    prefix_set_ = new ::gobgpapi::MatchSet(*from.prefix_set_);
  } else {
    prefix_set_ = nullptr;
  }
  if (from._internal_has_neighbor_set()) {
    neighbor_set_ = new ::gobgpapi::MatchSet(*from.neighbor_set_);
  } else {
    neighbor_set_ = nullptr;
  }
  if (from._internal_has_as_path_length()) {
    as_path_length_ = new ::gobgpapi::AsPathLength(*from.as_path_length_);
  } else {
    as_path_length_ = nullptr;
  }
  if (from._internal_has_as_path_set()) {
    as_path_set_ = new ::gobgpapi::MatchSet(*from.as_path_set_);
  } else {
    as_path_set_ = nullptr;
  }
  if (from._internal_has_community_set()) {
    community_set_ = new ::gobgpapi::MatchSet(*from.community_set_);
  } else {
    community_set_ = nullptr;
  }
  if (from._internal_has_ext_community_set()) {
    ext_community_set_ = new ::gobgpapi::MatchSet(*from.ext_community_set_);
  } else {
    ext_community_set_ = nullptr;
  }
  if (from._internal_has_large_community_set()) {
    large_community_set_ = new ::gobgpapi::MatchSet(*from.large_community_set_);
  } else {
    large_community_set_ = nullptr;
  }
  ::memcpy(&rpki_result_, &from.rpki_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&route_type_) -
    reinterpret_cast<char*>(&rpki_result_)) + sizeof(route_type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Conditions)
}

void Conditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conditions_gobgp_2eproto.base);
  ::memset(&prefix_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&prefix_set_)) + sizeof(route_type_));
}

Conditions::~Conditions() {
  // @@protoc_insertion_point(destructor:gobgpapi.Conditions)
  SharedDtor();
}

void Conditions::SharedDtor() {
  if (this != internal_default_instance()) delete prefix_set_;
  if (this != internal_default_instance()) delete neighbor_set_;
  if (this != internal_default_instance()) delete as_path_length_;
  if (this != internal_default_instance()) delete as_path_set_;
  if (this != internal_default_instance()) delete community_set_;
  if (this != internal_default_instance()) delete ext_community_set_;
  if (this != internal_default_instance()) delete large_community_set_;
}

void Conditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conditions& Conditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conditions_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_hop_in_list_.Clear();
  afi_safi_in_.Clear();
  if (GetArenaNoVirtual() == nullptr && prefix_set_ != nullptr) {
    delete prefix_set_;
  }
  prefix_set_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && neighbor_set_ != nullptr) {
    delete neighbor_set_;
  }
  neighbor_set_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && as_path_length_ != nullptr) {
    delete as_path_length_;
  }
  as_path_length_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && as_path_set_ != nullptr) {
    delete as_path_set_;
  }
  as_path_set_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && community_set_ != nullptr) {
    delete community_set_;
  }
  community_set_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ext_community_set_ != nullptr) {
    delete ext_community_set_;
  }
  ext_community_set_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && large_community_set_ != nullptr) {
    delete large_community_set_;
  }
  large_community_set_ = nullptr;
  ::memset(&rpki_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&rpki_result_)) + sizeof(route_type_));
  _internal_metadata_.Clear();
}

const char* Conditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.MatchSet prefix_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.MatchSet neighbor_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.AsPathLength as_path_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_path_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.MatchSet as_path_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_path_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.MatchSet community_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_community_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.MatchSet ext_community_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_community_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rpki_result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rpki_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Conditions.RouteType route_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_route_type(static_cast<::gobgpapi::Conditions_RouteType>(val));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.MatchSet large_community_set = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_community_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string next_hop_in_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_next_hop_in_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Conditions.next_hop_in_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Family afi_safi_in = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_afi_safi_in(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Conditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix_set(this), target, stream);
  }

  // .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::neighbor_set(this), target, stream);
  }

  // .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::as_path_length(this), target, stream);
  }

  // .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::as_path_set(this), target, stream);
  }

  // .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::community_set(this), target, stream);
  }

  // .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ext_community_set(this), target, stream);
  }

  // int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_rpki_result(), target);
  }

  // .gobgpapi.Conditions.RouteType route_type = 8;
  if (this->route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_route_type(), target);
  }

  // .gobgpapi.MatchSet large_community_set = 9;
  if (this->has_large_community_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::large_community_set(this), target, stream);
  }

  // repeated string next_hop_in_list = 10;
  for (int i = 0, n = this->_internal_next_hop_in_list_size(); i < n; i++) {
    const auto& s = this->_internal_next_hop_in_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Conditions.next_hop_in_list");
    target = stream->WriteString(10, s, target);
  }

  // repeated .gobgpapi.Family afi_safi_in = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_afi_safi_in_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_afi_safi_in(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Conditions)
  return target;
}

size_t Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Conditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string next_hop_in_list = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(next_hop_in_list_.size());
  for (int i = 0, n = next_hop_in_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      next_hop_in_list_.Get(i));
  }

  // repeated .gobgpapi.Family afi_safi_in = 11;
  total_size += 1UL * this->_internal_afi_safi_in_size();
  for (const auto& msg : this->afi_safi_in_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_set_);
  }

  // .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbor_set_);
  }

  // .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_path_length_);
  }

  // .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_path_set_);
  }

  // .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_set_);
  }

  // .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_community_set_);
  }

  // .gobgpapi.MatchSet large_community_set = 9;
  if (this->has_large_community_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_community_set_);
  }

  // int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpki_result());
  }

  // .gobgpapi.Conditions.RouteType route_type = 8;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_route_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const Conditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Conditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Conditions)
    MergeFrom(*source);
  }
}

void Conditions::MergeFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_hop_in_list_.MergeFrom(from.next_hop_in_list_);
  afi_safi_in_.MergeFrom(from.afi_safi_in_);
  if (from.has_prefix_set()) {
    _internal_mutable_prefix_set()->::gobgpapi::MatchSet::MergeFrom(from._internal_prefix_set());
  }
  if (from.has_neighbor_set()) {
    _internal_mutable_neighbor_set()->::gobgpapi::MatchSet::MergeFrom(from._internal_neighbor_set());
  }
  if (from.has_as_path_length()) {
    _internal_mutable_as_path_length()->::gobgpapi::AsPathLength::MergeFrom(from._internal_as_path_length());
  }
  if (from.has_as_path_set()) {
    _internal_mutable_as_path_set()->::gobgpapi::MatchSet::MergeFrom(from._internal_as_path_set());
  }
  if (from.has_community_set()) {
    _internal_mutable_community_set()->::gobgpapi::MatchSet::MergeFrom(from._internal_community_set());
  }
  if (from.has_ext_community_set()) {
    _internal_mutable_ext_community_set()->::gobgpapi::MatchSet::MergeFrom(from._internal_ext_community_set());
  }
  if (from.has_large_community_set()) {
    _internal_mutable_large_community_set()->::gobgpapi::MatchSet::MergeFrom(from._internal_large_community_set());
  }
  if (from.rpki_result() != 0) {
    _internal_set_rpki_result(from._internal_rpki_result());
  }
  if (from.route_type() != 0) {
    _internal_set_route_type(from._internal_route_type());
  }
}

void Conditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conditions::CopyFrom(const Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {
  return true;
}

void Conditions::InternalSwap(Conditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  next_hop_in_list_.InternalSwap(&other->next_hop_in_list_);
  afi_safi_in_.InternalSwap(&other->afi_safi_in_);
  swap(prefix_set_, other->prefix_set_);
  swap(neighbor_set_, other->neighbor_set_);
  swap(as_path_length_, other->as_path_length_);
  swap(as_path_set_, other->as_path_set_);
  swap(community_set_, other->community_set_);
  swap(ext_community_set_, other->ext_community_set_);
  swap(large_community_set_, other->large_community_set_);
  swap(rpki_result_, other->rpki_result_);
  swap(route_type_, other->route_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommunityAction::InitAsDefaultInstance() {
}
class CommunityAction::_Internal {
 public:
};

CommunityAction::CommunityAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.CommunityAction)
}
CommunityAction::CommunityAction(const CommunityAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_type_ = from.action_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.CommunityAction)
}

void CommunityAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommunityAction_gobgp_2eproto.base);
  action_type_ = 0;
}

CommunityAction::~CommunityAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.CommunityAction)
  SharedDtor();
}

void CommunityAction::SharedDtor() {
}

void CommunityAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunityAction& CommunityAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunityAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void CommunityAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.CommunityAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  action_type_ = 0;
  _internal_metadata_.Clear();
}

const char* CommunityAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.CommunityActionType action_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action_type(static_cast<::gobgpapi::CommunityActionType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string communities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_communities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.CommunityAction.communities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunityAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.CommunityAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.CommunityActionType action_type = 1;
  if (this->action_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action_type(), target);
  }

  // repeated string communities = 2;
  for (int i = 0, n = this->_internal_communities_size(); i < n; i++) {
    const auto& s = this->_internal_communities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.CommunityAction.communities");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.CommunityAction)
  return target;
}

size_t CommunityAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.CommunityAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string communities = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(communities_.size());
  for (int i = 0, n = communities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      communities_.Get(i));
  }

  // .gobgpapi.CommunityActionType action_type = 1;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunityAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.CommunityAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunityAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunityAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.CommunityAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.CommunityAction)
    MergeFrom(*source);
  }
}

void CommunityAction::MergeFrom(const CommunityAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.CommunityAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
  if (from.action_type() != 0) {
    _internal_set_action_type(from._internal_action_type());
  }
}

void CommunityAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.CommunityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunityAction::CopyFrom(const CommunityAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.CommunityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityAction::IsInitialized() const {
  return true;
}

void CommunityAction::InternalSwap(CommunityAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
  swap(action_type_, other->action_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunityAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedAction::InitAsDefaultInstance() {
}
class MedAction::_Internal {
 public:
};

MedAction::MedAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MedAction)
}
MedAction::MedAction(const MedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MedAction)
}

void MedAction::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_type_));
}

MedAction::~MedAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.MedAction)
  SharedDtor();
}

void MedAction::SharedDtor() {
}

void MedAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedAction& MedAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void MedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_type_));
  _internal_metadata_.Clear();
}

const char* MedAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.MedActionType action_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action_type(static_cast<::gobgpapi::MedActionType>(val));
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MedAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.MedActionType action_type = 1;
  if (this->action_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action_type(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MedAction)
  return target;
}

size_t MedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MedAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // .gobgpapi.MedActionType action_type = 1;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MedAction)
  GOOGLE_DCHECK_NE(&from, this);
  const MedAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MedAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MedAction)
    MergeFrom(*source);
  }
}

void MedAction::MergeFrom(const MedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MedAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.action_type() != 0) {
    _internal_set_action_type(from._internal_action_type());
  }
}

void MedAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedAction::CopyFrom(const MedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedAction::IsInitialized() const {
  return true;
}

void MedAction::InternalSwap(MedAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(action_type_, other->action_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsPrependAction::InitAsDefaultInstance() {
}
class AsPrependAction::_Internal {
 public:
};

AsPrependAction::AsPrependAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsPrependAction)
}
AsPrependAction::AsPrependAction(const AsPrependAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_left_most_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsPrependAction)
}

void AsPrependAction::SharedCtor() {
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_left_most_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
}

AsPrependAction::~AsPrependAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsPrependAction)
  SharedDtor();
}

void AsPrependAction::SharedDtor() {
}

void AsPrependAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsPrependAction& AsPrependAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsPrependAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void AsPrependAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AsPrependAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_left_most_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(use_left_most_));
  _internal_metadata_.Clear();
}

const char* AsPrependAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 repeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_left_most = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_left_most_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsPrependAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsPrependAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // uint32 repeat = 2;
  if (this->repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_repeat(), target);
  }

  // bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_left_most(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsPrependAction)
  return target;
}

size_t AsPrependAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AsPrependAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 repeat = 2;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_repeat());
  }

  // bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsPrependAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AsPrependAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPrependAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsPrependAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AsPrependAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AsPrependAction)
    MergeFrom(*source);
  }
}

void AsPrependAction::MergeFrom(const AsPrependAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AsPrependAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.repeat() != 0) {
    _internal_set_repeat(from._internal_repeat());
  }
  if (from.use_left_most() != 0) {
    _internal_set_use_left_most(from._internal_use_left_most());
  }
}

void AsPrependAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AsPrependAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPrependAction::CopyFrom(const AsPrependAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AsPrependAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPrependAction::IsInitialized() const {
  return true;
}

void AsPrependAction::InternalSwap(AsPrependAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(asn_, other->asn_);
  swap(repeat_, other->repeat_);
  swap(use_left_most_, other->use_left_most_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsPrependAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NexthopAction::InitAsDefaultInstance() {
}
class NexthopAction::_Internal {
 public:
};

NexthopAction::NexthopAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.NexthopAction)
}
NexthopAction::NexthopAction(const NexthopAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  self_ = from.self_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.NexthopAction)
}

void NexthopAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NexthopAction_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  self_ = false;
}

NexthopAction::~NexthopAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.NexthopAction)
  SharedDtor();
}

void NexthopAction::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NexthopAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NexthopAction& NexthopAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NexthopAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void NexthopAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.NexthopAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  self_ = false;
  _internal_metadata_.Clear();
}

const char* NexthopAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.NexthopAction.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool self = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NexthopAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.NexthopAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.NexthopAction.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // bool self = 2;
  if (this->self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_self(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.NexthopAction)
  return target;
}

size_t NexthopAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.NexthopAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool self = 2;
  if (this->self() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NexthopAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.NexthopAction)
  GOOGLE_DCHECK_NE(&from, this);
  const NexthopAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NexthopAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.NexthopAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.NexthopAction)
    MergeFrom(*source);
  }
}

void NexthopAction::MergeFrom(const NexthopAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.NexthopAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.self() != 0) {
    _internal_set_self(from._internal_self());
  }
}

void NexthopAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.NexthopAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NexthopAction::CopyFrom(const NexthopAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.NexthopAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NexthopAction::IsInitialized() const {
  return true;
}

void NexthopAction::InternalSwap(NexthopAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NexthopAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalPrefAction::InitAsDefaultInstance() {
}
class LocalPrefAction::_Internal {
 public:
};

LocalPrefAction::LocalPrefAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LocalPrefAction)
}
LocalPrefAction::LocalPrefAction(const LocalPrefAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LocalPrefAction)
}

void LocalPrefAction::SharedCtor() {
  value_ = 0u;
}

LocalPrefAction::~LocalPrefAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.LocalPrefAction)
  SharedDtor();
}

void LocalPrefAction::SharedDtor() {
}

void LocalPrefAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPrefAction& LocalPrefAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalPrefAction_gobgp_2eproto.base);
  return *internal_default_instance();
}


void LocalPrefAction::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LocalPrefAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear();
}

const char* LocalPrefAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalPrefAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LocalPrefAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LocalPrefAction)
  return target;
}

size_t LocalPrefAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LocalPrefAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPrefAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LocalPrefAction)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPrefAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalPrefAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LocalPrefAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LocalPrefAction)
    MergeFrom(*source);
  }
}

void LocalPrefAction::MergeFrom(const LocalPrefAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LocalPrefAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void LocalPrefAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LocalPrefAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPrefAction::CopyFrom(const LocalPrefAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LocalPrefAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPrefAction::IsInitialized() const {
  return true;
}

void LocalPrefAction::InternalSwap(LocalPrefAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalPrefAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Actions::InitAsDefaultInstance() {
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->community_ = const_cast< ::gobgpapi::CommunityAction*>(
      ::gobgpapi::CommunityAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->med_ = const_cast< ::gobgpapi::MedAction*>(
      ::gobgpapi::MedAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->as_prepend_ = const_cast< ::gobgpapi::AsPrependAction*>(
      ::gobgpapi::AsPrependAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->ext_community_ = const_cast< ::gobgpapi::CommunityAction*>(
      ::gobgpapi::CommunityAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->nexthop_ = const_cast< ::gobgpapi::NexthopAction*>(
      ::gobgpapi::NexthopAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->local_pref_ = const_cast< ::gobgpapi::LocalPrefAction*>(
      ::gobgpapi::LocalPrefAction::internal_default_instance());
  ::gobgpapi::_Actions_default_instance_._instance.get_mutable()->large_community_ = const_cast< ::gobgpapi::CommunityAction*>(
      ::gobgpapi::CommunityAction::internal_default_instance());
}
class Actions::_Internal {
 public:
  static const ::gobgpapi::CommunityAction& community(const Actions* msg);
  static const ::gobgpapi::MedAction& med(const Actions* msg);
  static const ::gobgpapi::AsPrependAction& as_prepend(const Actions* msg);
  static const ::gobgpapi::CommunityAction& ext_community(const Actions* msg);
  static const ::gobgpapi::NexthopAction& nexthop(const Actions* msg);
  static const ::gobgpapi::LocalPrefAction& local_pref(const Actions* msg);
  static const ::gobgpapi::CommunityAction& large_community(const Actions* msg);
};

const ::gobgpapi::CommunityAction&
Actions::_Internal::community(const Actions* msg) {
  return *msg->community_;
}
const ::gobgpapi::MedAction&
Actions::_Internal::med(const Actions* msg) {
  return *msg->med_;
}
const ::gobgpapi::AsPrependAction&
Actions::_Internal::as_prepend(const Actions* msg) {
  return *msg->as_prepend_;
}
const ::gobgpapi::CommunityAction&
Actions::_Internal::ext_community(const Actions* msg) {
  return *msg->ext_community_;
}
const ::gobgpapi::NexthopAction&
Actions::_Internal::nexthop(const Actions* msg) {
  return *msg->nexthop_;
}
const ::gobgpapi::LocalPrefAction&
Actions::_Internal::local_pref(const Actions* msg) {
  return *msg->local_pref_;
}
const ::gobgpapi::CommunityAction&
Actions::_Internal::large_community(const Actions* msg) {
  return *msg->large_community_;
}
Actions::Actions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Actions)
}
Actions::Actions(const Actions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_community()) {
    community_ = new ::gobgpapi::CommunityAction(*from.community_);
  } else {
    community_ = nullptr;
  }
  if (from._internal_has_med()) {
    med_ = new ::gobgpapi::MedAction(*from.med_);
  } else {
    med_ = nullptr;
  }
  if (from._internal_has_as_prepend()) {
    as_prepend_ = new ::gobgpapi::AsPrependAction(*from.as_prepend_);
  } else {
    as_prepend_ = nullptr;
  }
  if (from._internal_has_ext_community()) {
    ext_community_ = new ::gobgpapi::CommunityAction(*from.ext_community_);
  } else {
    ext_community_ = nullptr;
  }
  if (from._internal_has_nexthop()) {
    nexthop_ = new ::gobgpapi::NexthopAction(*from.nexthop_);
  } else {
    nexthop_ = nullptr;
  }
  if (from._internal_has_local_pref()) {
    local_pref_ = new ::gobgpapi::LocalPrefAction(*from.local_pref_);
  } else {
    local_pref_ = nullptr;
  }
  if (from._internal_has_large_community()) {
    large_community_ = new ::gobgpapi::CommunityAction(*from.large_community_);
  } else {
    large_community_ = nullptr;
  }
  route_action_ = from.route_action_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Actions)
}

void Actions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Actions_gobgp_2eproto.base);
  ::memset(&community_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_action_) -
      reinterpret_cast<char*>(&community_)) + sizeof(route_action_));
}

Actions::~Actions() {
  // @@protoc_insertion_point(destructor:gobgpapi.Actions)
  SharedDtor();
}

void Actions::SharedDtor() {
  if (this != internal_default_instance()) delete community_;
  if (this != internal_default_instance()) delete med_;
  if (this != internal_default_instance()) delete as_prepend_;
  if (this != internal_default_instance()) delete ext_community_;
  if (this != internal_default_instance()) delete nexthop_;
  if (this != internal_default_instance()) delete local_pref_;
  if (this != internal_default_instance()) delete large_community_;
}

void Actions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Actions& Actions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Actions_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Actions::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && community_ != nullptr) {
    delete community_;
  }
  community_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && med_ != nullptr) {
    delete med_;
  }
  med_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && as_prepend_ != nullptr) {
    delete as_prepend_;
  }
  as_prepend_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ext_community_ != nullptr) {
    delete ext_community_;
  }
  ext_community_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && nexthop_ != nullptr) {
    delete nexthop_;
  }
  nexthop_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && local_pref_ != nullptr) {
    delete local_pref_;
  }
  local_pref_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && large_community_ != nullptr) {
    delete large_community_;
  }
  large_community_ = nullptr;
  route_action_ = 0;
  _internal_metadata_.Clear();
}

const char* Actions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.RouteAction route_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_route_action(static_cast<::gobgpapi::RouteAction>(val));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.CommunityAction community = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_community(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.MedAction med = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_med(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.AsPrependAction as_prepend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_as_prepend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.CommunityAction ext_community = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_community(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.NexthopAction nexthop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nexthop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LocalPrefAction local_pref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_pref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.CommunityAction large_community = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_large_community(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Actions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_route_action(), target);
  }

  // .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::community(this), target, stream);
  }

  // .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::med(this), target, stream);
  }

  // .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::as_prepend(this), target, stream);
  }

  // .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ext_community(this), target, stream);
  }

  // .gobgpapi.NexthopAction nexthop = 6;
  if (this->has_nexthop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::nexthop(this), target, stream);
  }

  // .gobgpapi.LocalPrefAction local_pref = 7;
  if (this->has_local_pref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::local_pref(this), target, stream);
  }

  // .gobgpapi.CommunityAction large_community = 8;
  if (this->has_large_community()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::large_community(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Actions)
  return target;
}

size_t Actions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Actions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_);
  }

  // .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *med_);
  }

  // .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *as_prepend_);
  }

  // .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ext_community_);
  }

  // .gobgpapi.NexthopAction nexthop = 6;
  if (this->has_nexthop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nexthop_);
  }

  // .gobgpapi.LocalPrefAction local_pref = 7;
  if (this->has_local_pref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_pref_);
  }

  // .gobgpapi.CommunityAction large_community = 8;
  if (this->has_large_community()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *large_community_);
  }

  // .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_route_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Actions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  const Actions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Actions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Actions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Actions)
    MergeFrom(*source);
  }
}

void Actions::MergeFrom(const Actions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_community()) {
    _internal_mutable_community()->::gobgpapi::CommunityAction::MergeFrom(from._internal_community());
  }
  if (from.has_med()) {
    _internal_mutable_med()->::gobgpapi::MedAction::MergeFrom(from._internal_med());
  }
  if (from.has_as_prepend()) {
    _internal_mutable_as_prepend()->::gobgpapi::AsPrependAction::MergeFrom(from._internal_as_prepend());
  }
  if (from.has_ext_community()) {
    _internal_mutable_ext_community()->::gobgpapi::CommunityAction::MergeFrom(from._internal_ext_community());
  }
  if (from.has_nexthop()) {
    _internal_mutable_nexthop()->::gobgpapi::NexthopAction::MergeFrom(from._internal_nexthop());
  }
  if (from.has_local_pref()) {
    _internal_mutable_local_pref()->::gobgpapi::LocalPrefAction::MergeFrom(from._internal_local_pref());
  }
  if (from.has_large_community()) {
    _internal_mutable_large_community()->::gobgpapi::CommunityAction::MergeFrom(from._internal_large_community());
  }
  if (from.route_action() != 0) {
    _internal_set_route_action(from._internal_route_action());
  }
}

void Actions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actions::CopyFrom(const Actions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actions::IsInitialized() const {
  return true;
}

void Actions::InternalSwap(Actions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(community_, other->community_);
  swap(med_, other->med_);
  swap(as_prepend_, other->as_prepend_);
  swap(ext_community_, other->ext_community_);
  swap(nexthop_, other->nexthop_);
  swap(local_pref_, other->local_pref_);
  swap(large_community_, other->large_community_);
  swap(route_action_, other->route_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Actions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Statement::InitAsDefaultInstance() {
  ::gobgpapi::_Statement_default_instance_._instance.get_mutable()->conditions_ = const_cast< ::gobgpapi::Conditions*>(
      ::gobgpapi::Conditions::internal_default_instance());
  ::gobgpapi::_Statement_default_instance_._instance.get_mutable()->actions_ = const_cast< ::gobgpapi::Actions*>(
      ::gobgpapi::Actions::internal_default_instance());
}
class Statement::_Internal {
 public:
  static const ::gobgpapi::Conditions& conditions(const Statement* msg);
  static const ::gobgpapi::Actions& actions(const Statement* msg);
};

const ::gobgpapi::Conditions&
Statement::_Internal::conditions(const Statement* msg) {
  return *msg->conditions_;
}
const ::gobgpapi::Actions&
Statement::_Internal::actions(const Statement* msg) {
  return *msg->actions_;
}
Statement::Statement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Statement)
}
Statement::Statement(const Statement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_conditions()) {
    conditions_ = new ::gobgpapi::Conditions(*from.conditions_);
  } else {
    conditions_ = nullptr;
  }
  if (from._internal_has_actions()) {
    actions_ = new ::gobgpapi::Actions(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Statement)
}

void Statement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Statement_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actions_) -
      reinterpret_cast<char*>(&conditions_)) + sizeof(actions_));
}

Statement::~Statement() {
  // @@protoc_insertion_point(destructor:gobgpapi.Statement)
  SharedDtor();
}

void Statement::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conditions_;
  if (this != internal_default_instance()) delete actions_;
}

void Statement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statement& Statement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statement_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Statement::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Statement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && conditions_ != nullptr) {
    delete conditions_;
  }
  conditions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && actions_ != nullptr) {
    delete actions_;
  }
  actions_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Statement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Statement.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Conditions conditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Actions actions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Statement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Statement.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::conditions(this), target, stream);
  }

  // .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Statement)
  return target;
}

size_t Statement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Statement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conditions_);
  }

  // .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  const Statement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Statement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Statement)
    MergeFrom(*source);
  }
}

void Statement::MergeFrom(const Statement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_conditions()) {
    _internal_mutable_conditions()->::gobgpapi::Conditions::MergeFrom(from._internal_conditions());
  }
  if (from.has_actions()) {
    _internal_mutable_actions()->::gobgpapi::Actions::MergeFrom(from._internal_actions());
  }
}

void Statement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statement::CopyFrom(const Statement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statement::IsInitialized() const {
  return true;
}

void Statement::InternalSwap(Statement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(conditions_, other->conditions_);
  swap(actions_, other->actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Policy::InitAsDefaultInstance() {
}
class Policy::_Internal {
 public:
};

Policy::Policy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Policy)
}
Policy::Policy(const Policy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      statements_(from.statements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Policy)
}

void Policy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Policy_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:gobgpapi.Policy)
  SharedDtor();
}

void Policy::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Policy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Policy& Policy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Policy_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Policy::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statements_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Policy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Policy.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Statement statements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Policy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Policy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Policy.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .gobgpapi.Statement statements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_statements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Policy)
  return target;
}

size_t Policy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Policy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.Statement statements = 2;
  total_size += 1UL * this->_internal_statements_size();
  for (const auto& msg : this->statements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Policy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  const Policy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Policy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Policy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Policy)
    MergeFrom(*source);
  }
}

void Policy::MergeFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Policy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statements_.MergeFrom(from.statements_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Policy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Policy::CopyFrom(const Policy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Policy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {
  return true;
}

void Policy::InternalSwap(Policy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  statements_.InternalSwap(&other->statements_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Policy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolicyAssignment::InitAsDefaultInstance() {
}
class PolicyAssignment::_Internal {
 public:
};

PolicyAssignment::PolicyAssignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PolicyAssignment)
}
PolicyAssignment::PolicyAssignment(const PolicyAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      policies_(from.policies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_action_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(default_action_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PolicyAssignment)
}

void PolicyAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyAssignment_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_action_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(default_action_));
}

PolicyAssignment::~PolicyAssignment() {
  // @@protoc_insertion_point(destructor:gobgpapi.PolicyAssignment)
  SharedDtor();
}

void PolicyAssignment::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyAssignment& PolicyAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyAssignment_gobgp_2eproto.base);
  return *internal_default_instance();
}


void PolicyAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PolicyAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policies_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_action_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(default_action_));
  _internal_metadata_.Clear();
}

const char* PolicyAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.PolicyAssignment.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.PolicyDirection direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::gobgpapi::PolicyDirection>(val));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Policy policies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteAction default_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_default_action(static_cast<::gobgpapi::RouteAction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PolicyAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PolicyAssignment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .gobgpapi.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // repeated .gobgpapi.Policy policies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_policies(i), target, stream);
  }

  // .gobgpapi.RouteAction default_action = 5;
  if (this->default_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_default_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PolicyAssignment)
  return target;
}

size_t PolicyAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PolicyAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.Policy policies = 4;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .gobgpapi.PolicyDirection direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  // .gobgpapi.RouteAction default_action = 5;
  if (this->default_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PolicyAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PolicyAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PolicyAssignment)
    MergeFrom(*source);
  }
}

void PolicyAssignment::MergeFrom(const PolicyAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PolicyAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policies_.MergeFrom(from.policies_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.default_action() != 0) {
    _internal_set_default_action(from._internal_default_action());
  }
}

void PolicyAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PolicyAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyAssignment::CopyFrom(const PolicyAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PolicyAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyAssignment::IsInitialized() const {
  return true;
}

void PolicyAssignment::InternalSwap(PolicyAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  policies_.InternalSwap(&other->policies_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(direction_, other->direction_);
  swap(default_action_, other->default_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingPolicy::InitAsDefaultInstance() {
}
class RoutingPolicy::_Internal {
 public:
};

RoutingPolicy::RoutingPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RoutingPolicy)
}
RoutingPolicy::RoutingPolicy(const RoutingPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      defined_sets_(from.defined_sets_),
      policies_(from.policies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RoutingPolicy)
}

void RoutingPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingPolicy_gobgp_2eproto.base);
}

RoutingPolicy::~RoutingPolicy() {
  // @@protoc_insertion_point(destructor:gobgpapi.RoutingPolicy)
  SharedDtor();
}

void RoutingPolicy::SharedDtor() {
}

void RoutingPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingPolicy& RoutingPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingPolicy_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RoutingPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RoutingPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defined_sets_.Clear();
  policies_.Clear();
  _internal_metadata_.Clear();
}

const char* RoutingPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gobgpapi.DefinedSet defined_sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defined_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.Policy policies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RoutingPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.DefinedSet defined_sets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_defined_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_defined_sets(i), target, stream);
  }

  // repeated .gobgpapi.Policy policies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_policies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RoutingPolicy)
  return target;
}

size_t RoutingPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RoutingPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.DefinedSet defined_sets = 1;
  total_size += 1UL * this->_internal_defined_sets_size();
  for (const auto& msg : this->defined_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gobgpapi.Policy policies = 2;
  total_size += 1UL * this->_internal_policies_size();
  for (const auto& msg : this->policies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RoutingPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RoutingPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RoutingPolicy)
    MergeFrom(*source);
  }
}

void RoutingPolicy::MergeFrom(const RoutingPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RoutingPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defined_sets_.MergeFrom(from.defined_sets_);
  policies_.MergeFrom(from.policies_);
}

void RoutingPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RoutingPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingPolicy::CopyFrom(const RoutingPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RoutingPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingPolicy::IsInitialized() const {
  return true;
}

void RoutingPolicy::InternalSwap(RoutingPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  defined_sets_.InternalSwap(&other->defined_sets_);
  policies_.InternalSwap(&other->policies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Roa::InitAsDefaultInstance() {
  ::gobgpapi::_Roa_default_instance_._instance.get_mutable()->conf_ = const_cast< ::gobgpapi::RPKIConf*>(
      ::gobgpapi::RPKIConf::internal_default_instance());
}
class Roa::_Internal {
 public:
  static const ::gobgpapi::RPKIConf& conf(const Roa* msg);
};

const ::gobgpapi::RPKIConf&
Roa::_Internal::conf(const Roa* msg) {
  return *msg->conf_;
}
Roa::Roa()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Roa)
}
Roa::Roa(const Roa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from._internal_has_conf()) {
    conf_ = new ::gobgpapi::RPKIConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlen_) -
    reinterpret_cast<char*>(&as_)) + sizeof(maxlen_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Roa)
}

void Roa::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Roa_gobgp_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlen_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(maxlen_));
}

Roa::~Roa() {
  // @@protoc_insertion_point(destructor:gobgpapi.Roa)
  SharedDtor();
}

void Roa::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conf_;
}

void Roa::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Roa& Roa::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Roa_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Roa::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Roa)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlen_) -
      reinterpret_cast<char*>(&as_)) + sizeof(maxlen_));
  _internal_metadata_.Clear();
}

const char* Roa::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefixlen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefixlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxlen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          maxlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Roa.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RPKIConf conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Roa::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Roa)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_as(), target);
  }

  // uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefixlen(), target);
  }

  // uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxlen(), target);
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Roa.prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prefix(), target);
  }

  // .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Roa)
  return target;
}

size_t Roa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Roa)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  // uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefixlen());
  }

  // uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxlen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Roa::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Roa)
  GOOGLE_DCHECK_NE(&from, this);
  const Roa* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Roa>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Roa)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Roa)
    MergeFrom(*source);
  }
}

void Roa::MergeFrom(const Roa& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Roa)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.has_conf()) {
    _internal_mutable_conf()->::gobgpapi::RPKIConf::MergeFrom(from._internal_conf());
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
  if (from.prefixlen() != 0) {
    _internal_set_prefixlen(from._internal_prefixlen());
  }
  if (from.maxlen() != 0) {
    _internal_set_maxlen(from._internal_maxlen());
  }
}

void Roa::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Roa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roa::CopyFrom(const Roa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Roa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roa::IsInitialized() const {
  return true;
}

void Roa::InternalSwap(Roa* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(conf_, other->conf_);
  swap(as_, other->as_);
  swap(prefixlen_, other->prefixlen_);
  swap(maxlen_, other->maxlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Roa::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vrf::InitAsDefaultInstance() {
  ::gobgpapi::_Vrf_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Vrf::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const Vrf* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Vrf::_Internal::rd(const Vrf* msg) {
  return *msg->rd_;
}
void Vrf::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
void Vrf::clear_import_rt() {
  import_rt_.Clear();
}
void Vrf::clear_export_rt() {
  export_rt_.Clear();
}
Vrf::Vrf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Vrf)
}
Vrf::Vrf(const Vrf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      import_rt_(from.import_rt_),
      export_rt_(from.export_rt_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Vrf)
}

void Vrf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vrf_gobgp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(id_));
}

Vrf::~Vrf() {
  // @@protoc_insertion_point(destructor:gobgpapi.Vrf)
  SharedDtor();
}

void Vrf::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void Vrf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vrf& Vrf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vrf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Vrf::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Vrf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  import_rt_.Clear();
  export_rt_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Vrf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Vrf.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any import_rt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_import_rt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any export_rt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_export_rt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vrf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Vrf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Vrf.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rd(this), target, stream);
  }

  // repeated .google.protobuf.Any import_rt = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_import_rt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_import_rt(i), target, stream);
  }

  // repeated .google.protobuf.Any export_rt = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_export_rt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_export_rt(i), target, stream);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Vrf)
  return target;
}

size_t Vrf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Vrf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any import_rt = 3;
  total_size += 1UL * this->_internal_import_rt_size();
  for (const auto& msg : this->import_rt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any export_rt = 4;
  total_size += 1UL * this->_internal_export_rt_size();
  for (const auto& msg : this->export_rt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vrf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Vrf)
  GOOGLE_DCHECK_NE(&from, this);
  const Vrf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vrf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Vrf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Vrf)
    MergeFrom(*source);
  }
}

void Vrf::MergeFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Vrf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  import_rt_.MergeFrom(from.import_rt_);
  export_rt_.MergeFrom(from.export_rt_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Vrf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vrf::CopyFrom(const Vrf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Vrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vrf::IsInitialized() const {
  return true;
}

void Vrf::InternalSwap(Vrf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  import_rt_.InternalSwap(&other->import_rt_);
  export_rt_.InternalSwap(&other->export_rt_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rd_, other->rd_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vrf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefaultRouteDistance::InitAsDefaultInstance() {
}
class DefaultRouteDistance::_Internal {
 public:
};

DefaultRouteDistance::DefaultRouteDistance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DefaultRouteDistance)
}
DefaultRouteDistance::DefaultRouteDistance(const DefaultRouteDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&external_route_distance_, &from.external_route_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_route_distance_) -
    reinterpret_cast<char*>(&external_route_distance_)) + sizeof(internal_route_distance_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DefaultRouteDistance)
}

void DefaultRouteDistance::SharedCtor() {
  ::memset(&external_route_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_route_distance_) -
      reinterpret_cast<char*>(&external_route_distance_)) + sizeof(internal_route_distance_));
}

DefaultRouteDistance::~DefaultRouteDistance() {
  // @@protoc_insertion_point(destructor:gobgpapi.DefaultRouteDistance)
  SharedDtor();
}

void DefaultRouteDistance::SharedDtor() {
}

void DefaultRouteDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultRouteDistance& DefaultRouteDistance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultRouteDistance_gobgp_2eproto.base);
  return *internal_default_instance();
}


void DefaultRouteDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DefaultRouteDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&external_route_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_route_distance_) -
      reinterpret_cast<char*>(&external_route_distance_)) + sizeof(internal_route_distance_));
  _internal_metadata_.Clear();
}

const char* DefaultRouteDistance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 external_route_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          external_route_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 internal_route_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          internal_route_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultRouteDistance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DefaultRouteDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 external_route_distance = 1;
  if (this->external_route_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_external_route_distance(), target);
  }

  // uint32 internal_route_distance = 2;
  if (this->internal_route_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_internal_route_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DefaultRouteDistance)
  return target;
}

size_t DefaultRouteDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DefaultRouteDistance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 external_route_distance = 1;
  if (this->external_route_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_external_route_distance());
  }

  // uint32 internal_route_distance = 2;
  if (this->internal_route_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_route_distance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultRouteDistance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DefaultRouteDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultRouteDistance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultRouteDistance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DefaultRouteDistance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DefaultRouteDistance)
    MergeFrom(*source);
  }
}

void DefaultRouteDistance::MergeFrom(const DefaultRouteDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DefaultRouteDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.external_route_distance() != 0) {
    _internal_set_external_route_distance(from._internal_external_route_distance());
  }
  if (from.internal_route_distance() != 0) {
    _internal_set_internal_route_distance(from._internal_internal_route_distance());
  }
}

void DefaultRouteDistance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DefaultRouteDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultRouteDistance::CopyFrom(const DefaultRouteDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DefaultRouteDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRouteDistance::IsInitialized() const {
  return true;
}

void DefaultRouteDistance::InternalSwap(DefaultRouteDistance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(external_route_distance_, other->external_route_distance_);
  swap(internal_route_distance_, other->internal_route_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultRouteDistance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Global::InitAsDefaultInstance() {
  ::gobgpapi::_Global_default_instance_._instance.get_mutable()->route_selection_options_ = const_cast< ::gobgpapi::RouteSelectionOptionsConfig*>(
      ::gobgpapi::RouteSelectionOptionsConfig::internal_default_instance());
  ::gobgpapi::_Global_default_instance_._instance.get_mutable()->default_route_distance_ = const_cast< ::gobgpapi::DefaultRouteDistance*>(
      ::gobgpapi::DefaultRouteDistance::internal_default_instance());
  ::gobgpapi::_Global_default_instance_._instance.get_mutable()->confederation_ = const_cast< ::gobgpapi::Confederation*>(
      ::gobgpapi::Confederation::internal_default_instance());
  ::gobgpapi::_Global_default_instance_._instance.get_mutable()->graceful_restart_ = const_cast< ::gobgpapi::GracefulRestart*>(
      ::gobgpapi::GracefulRestart::internal_default_instance());
  ::gobgpapi::_Global_default_instance_._instance.get_mutable()->apply_policy_ = const_cast< ::gobgpapi::ApplyPolicy*>(
      ::gobgpapi::ApplyPolicy::internal_default_instance());
}
class Global::_Internal {
 public:
  static const ::gobgpapi::RouteSelectionOptionsConfig& route_selection_options(const Global* msg);
  static const ::gobgpapi::DefaultRouteDistance& default_route_distance(const Global* msg);
  static const ::gobgpapi::Confederation& confederation(const Global* msg);
  static const ::gobgpapi::GracefulRestart& graceful_restart(const Global* msg);
  static const ::gobgpapi::ApplyPolicy& apply_policy(const Global* msg);
};

const ::gobgpapi::RouteSelectionOptionsConfig&
Global::_Internal::route_selection_options(const Global* msg) {
  return *msg->route_selection_options_;
}
const ::gobgpapi::DefaultRouteDistance&
Global::_Internal::default_route_distance(const Global* msg) {
  return *msg->default_route_distance_;
}
const ::gobgpapi::Confederation&
Global::_Internal::confederation(const Global* msg) {
  return *msg->confederation_;
}
const ::gobgpapi::GracefulRestart&
Global::_Internal::graceful_restart(const Global* msg) {
  return *msg->graceful_restart_;
}
const ::gobgpapi::ApplyPolicy&
Global::_Internal::apply_policy(const Global* msg) {
  return *msg->apply_policy_;
}
Global::Global()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Global)
}
Global::Global(const Global& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      listen_addresses_(from.listen_addresses_),
      families_(from.families_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_router_id().empty()) {
    router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.router_id_);
  }
  if (from._internal_has_route_selection_options()) {
    route_selection_options_ = new ::gobgpapi::RouteSelectionOptionsConfig(*from.route_selection_options_);
  } else {
    route_selection_options_ = nullptr;
  }
  if (from._internal_has_default_route_distance()) {
    default_route_distance_ = new ::gobgpapi::DefaultRouteDistance(*from.default_route_distance_);
  } else {
    default_route_distance_ = nullptr;
  }
  if (from._internal_has_confederation()) {
    confederation_ = new ::gobgpapi::Confederation(*from.confederation_);
  } else {
    confederation_ = nullptr;
  }
  if (from._internal_has_graceful_restart()) {
    graceful_restart_ = new ::gobgpapi::GracefulRestart(*from.graceful_restart_);
  } else {
    graceful_restart_ = nullptr;
  }
  if (from._internal_has_apply_policy()) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy(*from.apply_policy_);
  } else {
    apply_policy_ = nullptr;
  }
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_multiple_paths_) -
    reinterpret_cast<char*>(&as_)) + sizeof(use_multiple_paths_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Global)
}

void Global::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Global_gobgp_2eproto.base);
  router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&route_selection_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_multiple_paths_) -
      reinterpret_cast<char*>(&route_selection_options_)) + sizeof(use_multiple_paths_));
}

Global::~Global() {
  // @@protoc_insertion_point(destructor:gobgpapi.Global)
  SharedDtor();
}

void Global::SharedDtor() {
  router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete route_selection_options_;
  if (this != internal_default_instance()) delete default_route_distance_;
  if (this != internal_default_instance()) delete confederation_;
  if (this != internal_default_instance()) delete graceful_restart_;
  if (this != internal_default_instance()) delete apply_policy_;
}

void Global::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Global& Global::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Global_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Global::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Global)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listen_addresses_.Clear();
  families_.Clear();
  router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && route_selection_options_ != nullptr) {
    delete route_selection_options_;
  }
  route_selection_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && default_route_distance_ != nullptr) {
    delete default_route_distance_;
  }
  default_route_distance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && confederation_ != nullptr) {
    delete confederation_;
  }
  confederation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_multiple_paths_) -
      reinterpret_cast<char*>(&as_)) + sizeof(use_multiple_paths_));
  _internal_metadata_.Clear();
}

const char* Global::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string router_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Global.router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 listen_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string listen_addresses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_listen_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.Global.listen_addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 families = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_families(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_families(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_multiple_paths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          use_multiple_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RouteSelectionOptionsConfig route_selection_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_selection_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.DefaultRouteDistance default_route_distance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_route_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.Confederation confederation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_confederation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.GracefulRestart graceful_restart = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_graceful_restart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.ApplyPolicy apply_policy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Global::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Global)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_as(), target);
  }

  // string router_id = 2;
  if (this->router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_router_id().data(), static_cast<int>(this->_internal_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.router_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_router_id(), target);
  }

  // int32 listen_port = 3;
  if (this->listen_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_listen_port(), target);
  }

  // repeated string listen_addresses = 4;
  for (int i = 0, n = this->_internal_listen_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_listen_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.listen_addresses");
    target = stream->WriteString(4, s, target);
  }

  // repeated uint32 families = 5;
  {
    int byte_size = _families_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_families(), byte_size, target);
    }
  }

  // bool use_multiple_paths = 6;
  if (this->use_multiple_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_multiple_paths(), target);
  }

  // .gobgpapi.RouteSelectionOptionsConfig route_selection_options = 7;
  if (this->has_route_selection_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::route_selection_options(this), target, stream);
  }

  // .gobgpapi.DefaultRouteDistance default_route_distance = 8;
  if (this->has_default_route_distance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::default_route_distance(this), target, stream);
  }

  // .gobgpapi.Confederation confederation = 9;
  if (this->has_confederation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::confederation(this), target, stream);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 10;
  if (this->has_graceful_restart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::graceful_restart(this), target, stream);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 11;
  if (this->has_apply_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::apply_policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Global)
  return target;
}

size_t Global::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Global)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string listen_addresses = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(listen_addresses_.size());
  for (int i = 0, n = listen_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      listen_addresses_.Get(i));
  }

  // repeated uint32 families = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->families_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _families_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string router_id = 2;
  if (this->router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_router_id());
  }

  // .gobgpapi.RouteSelectionOptionsConfig route_selection_options = 7;
  if (this->has_route_selection_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_selection_options_);
  }

  // .gobgpapi.DefaultRouteDistance default_route_distance = 8;
  if (this->has_default_route_distance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_route_distance_);
  }

  // .gobgpapi.Confederation confederation = 9;
  if (this->has_confederation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confederation_);
  }

  // .gobgpapi.GracefulRestart graceful_restart = 10;
  if (this->has_graceful_restart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graceful_restart_);
  }

  // .gobgpapi.ApplyPolicy apply_policy = 11;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_policy_);
  }

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  // int32 listen_port = 3;
  if (this->listen_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_listen_port());
  }

  // bool use_multiple_paths = 6;
  if (this->use_multiple_paths() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Global::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Global)
  GOOGLE_DCHECK_NE(&from, this);
  const Global* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Global>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Global)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Global)
    MergeFrom(*source);
  }
}

void Global::MergeFrom(const Global& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Global)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listen_addresses_.MergeFrom(from.listen_addresses_);
  families_.MergeFrom(from.families_);
  if (from.router_id().size() > 0) {

    router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.router_id_);
  }
  if (from.has_route_selection_options()) {
    _internal_mutable_route_selection_options()->::gobgpapi::RouteSelectionOptionsConfig::MergeFrom(from._internal_route_selection_options());
  }
  if (from.has_default_route_distance()) {
    _internal_mutable_default_route_distance()->::gobgpapi::DefaultRouteDistance::MergeFrom(from._internal_default_route_distance());
  }
  if (from.has_confederation()) {
    _internal_mutable_confederation()->::gobgpapi::Confederation::MergeFrom(from._internal_confederation());
  }
  if (from.has_graceful_restart()) {
    _internal_mutable_graceful_restart()->::gobgpapi::GracefulRestart::MergeFrom(from._internal_graceful_restart());
  }
  if (from.has_apply_policy()) {
    _internal_mutable_apply_policy()->::gobgpapi::ApplyPolicy::MergeFrom(from._internal_apply_policy());
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
  if (from.listen_port() != 0) {
    _internal_set_listen_port(from._internal_listen_port());
  }
  if (from.use_multiple_paths() != 0) {
    _internal_set_use_multiple_paths(from._internal_use_multiple_paths());
  }
}

void Global::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global::CopyFrom(const Global& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global::IsInitialized() const {
  return true;
}

void Global::InternalSwap(Global* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  listen_addresses_.InternalSwap(&other->listen_addresses_);
  families_.InternalSwap(&other->families_);
  router_id_.Swap(&other->router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(route_selection_options_, other->route_selection_options_);
  swap(default_route_distance_, other->default_route_distance_);
  swap(confederation_, other->confederation_);
  swap(graceful_restart_, other->graceful_restart_);
  swap(apply_policy_, other->apply_policy_);
  swap(as_, other->as_);
  swap(listen_port_, other->listen_port_);
  swap(use_multiple_paths_, other->use_multiple_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Global::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Confederation::InitAsDefaultInstance() {
}
class Confederation::_Internal {
 public:
};

Confederation::Confederation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Confederation)
}
Confederation::Confederation(const Confederation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_as_list_(from.member_as_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&identifier_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(identifier_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Confederation)
}

void Confederation::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identifier_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(identifier_));
}

Confederation::~Confederation() {
  // @@protoc_insertion_point(destructor:gobgpapi.Confederation)
  SharedDtor();
}

void Confederation::SharedDtor() {
}

void Confederation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Confederation& Confederation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Confederation_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Confederation::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Confederation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_as_list_.Clear();
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identifier_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(identifier_));
  _internal_metadata_.Clear();
}

const char* Confederation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 member_as_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_as_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_member_as_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Confederation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Confederation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // uint32 identifier = 2;
  if (this->identifier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_identifier(), target);
  }

  // repeated uint32 member_as_list = 3;
  {
    int byte_size = _member_as_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_member_as_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Confederation)
  return target;
}

size_t Confederation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Confederation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_as_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->member_as_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _member_as_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 identifier = 2;
  if (this->identifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_identifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Confederation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Confederation)
  GOOGLE_DCHECK_NE(&from, this);
  const Confederation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Confederation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Confederation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Confederation)
    MergeFrom(*source);
  }
}

void Confederation::MergeFrom(const Confederation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Confederation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_as_list_.MergeFrom(from.member_as_list_);
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.identifier() != 0) {
    _internal_set_identifier(from._internal_identifier());
  }
}

void Confederation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Confederation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Confederation::CopyFrom(const Confederation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Confederation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confederation::IsInitialized() const {
  return true;
}

void Confederation::InternalSwap(Confederation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_as_list_.InternalSwap(&other->member_as_list_);
  swap(enabled_, other->enabled_);
  swap(identifier_, other->identifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Confederation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPKIConf::InitAsDefaultInstance() {
}
class RPKIConf::_Internal {
 public:
};

RPKIConf::RPKIConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKIConf)
}
RPKIConf::RPKIConf(const RPKIConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  remote_port_ = from.remote_port_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKIConf)
}

void RPKIConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPKIConf_gobgp_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_port_ = 0u;
}

RPKIConf::~RPKIConf() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKIConf)
  SharedDtor();
}

void RPKIConf::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPKIConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPKIConf& RPKIConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPKIConf_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RPKIConf::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RPKIConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_port_ = 0u;
  _internal_metadata_.Clear();
}

const char* RPKIConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.RPKIConf.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remote_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPKIConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKIConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 remote_port = 2;
  if (this->remote_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_remote_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKIConf)
  return target;
}

size_t RPKIConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RPKIConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 remote_port = 2;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPKIConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RPKIConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RPKIConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPKIConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RPKIConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RPKIConf)
    MergeFrom(*source);
  }
}

void RPKIConf::MergeFrom(const RPKIConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RPKIConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.remote_port() != 0) {
    _internal_set_remote_port(from._internal_remote_port());
  }
}

void RPKIConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RPKIConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIConf::CopyFrom(const RPKIConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RPKIConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIConf::IsInitialized() const {
  return true;
}

void RPKIConf::InternalSwap(RPKIConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(remote_port_, other->remote_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPKIConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RPKIState::InitAsDefaultInstance() {
  ::gobgpapi::_RPKIState_default_instance_._instance.get_mutable()->uptime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::gobgpapi::_RPKIState_default_instance_._instance.get_mutable()->downtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class RPKIState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& uptime(const RPKIState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& downtime(const RPKIState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RPKIState::_Internal::uptime(const RPKIState* msg) {
  return *msg->uptime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RPKIState::_Internal::downtime(const RPKIState* msg) {
  return *msg->downtime_;
}
void RPKIState::clear_uptime() {
  if (GetArenaNoVirtual() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
}
void RPKIState::clear_downtime() {
  if (GetArenaNoVirtual() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
}
RPKIState::RPKIState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKIState)
}
RPKIState::RPKIState(const RPKIState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_uptime()) {
    uptime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.uptime_);
  } else {
    uptime_ = nullptr;
  }
  if (from._internal_has_downtime()) {
    downtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.downtime_);
  } else {
    downtime_ = nullptr;
  }
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_query_) -
    reinterpret_cast<char*>(&up_)) + sizeof(reset_query_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKIState)
}

void RPKIState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPKIState_gobgp_2eproto.base);
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_query_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(reset_query_));
}

RPKIState::~RPKIState() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKIState)
  SharedDtor();
}

void RPKIState::SharedDtor() {
  if (this != internal_default_instance()) delete uptime_;
  if (this != internal_default_instance()) delete downtime_;
}

void RPKIState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPKIState& RPKIState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPKIState_gobgp_2eproto.base);
  return *internal_default_instance();
}


void RPKIState::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RPKIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && uptime_ != nullptr) {
    delete uptime_;
  }
  uptime_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && downtime_ != nullptr) {
    delete downtime_;
  }
  downtime_ = nullptr;
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_query_) -
      reinterpret_cast<char*>(&up_)) + sizeof(reset_query_));
  _internal_metadata_.Clear();
}

const char* RPKIState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp uptime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uptime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp downtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_downtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool up = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_ipv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          record_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 record_ipv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          record_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_ipv4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prefix_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_ipv6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          prefix_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 received_ipv4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          received_ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 received_ipv6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          received_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serial_notify = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          serial_notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cache_reset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cache_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cache_response = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          cache_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_of_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          end_of_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 error = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 serial_query = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          serial_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 reset_query = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          reset_query_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPKIState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKIState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 1;
  if (this->has_uptime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uptime(this), target, stream);
  }

  // .google.protobuf.Timestamp downtime = 2;
  if (this->has_downtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::downtime(this), target, stream);
  }

  // bool up = 3;
  if (this->up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_up(), target);
  }

  // uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_record_ipv4(), target);
  }

  // uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_record_ipv6(), target);
  }

  // uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prefix_ipv4(), target);
  }

  // uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_prefix_ipv6(), target);
  }

  // uint32 serial = 8;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_serial(), target);
  }

  // int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_received_ipv4(), target);
  }

  // int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_received_ipv6(), target);
  }

  // int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_serial_notify(), target);
  }

  // int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_cache_reset(), target);
  }

  // int64 cache_response = 13;
  if (this->cache_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_cache_response(), target);
  }

  // int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_end_of_data(), target);
  }

  // int64 error = 15;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_error(), target);
  }

  // int64 serial_query = 16;
  if (this->serial_query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_serial_query(), target);
  }

  // int64 reset_query = 17;
  if (this->reset_query() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_reset_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKIState)
  return target;
}

size_t RPKIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RPKIState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp uptime = 1;
  if (this->has_uptime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uptime_);
  }

  // .google.protobuf.Timestamp downtime = 2;
  if (this->has_downtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *downtime_);
  }

  // bool up = 3;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_ipv4());
  }

  // uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_record_ipv6());
  }

  // uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_ipv4());
  }

  // uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_ipv6());
  }

  // uint32 serial = 8;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  // int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_received_ipv4());
  }

  // int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_received_ipv6());
  }

  // int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial_notify());
  }

  // int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cache_reset());
  }

  // int64 cache_response = 13;
  if (this->cache_response() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cache_response());
  }

  // int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_of_data());
  }

  // int64 error = 15;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_error());
  }

  // int64 serial_query = 16;
  if (this->serial_query() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial_query());
  }

  // int64 reset_query = 17;
  if (this->reset_query() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_reset_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPKIState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RPKIState)
  GOOGLE_DCHECK_NE(&from, this);
  const RPKIState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPKIState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RPKIState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RPKIState)
    MergeFrom(*source);
  }
}

void RPKIState::MergeFrom(const RPKIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RPKIState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_uptime()) {
    _internal_mutable_uptime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_uptime());
  }
  if (from.has_downtime()) {
    _internal_mutable_downtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_downtime());
  }
  if (from.up() != 0) {
    _internal_set_up(from._internal_up());
  }
  if (from.record_ipv4() != 0) {
    _internal_set_record_ipv4(from._internal_record_ipv4());
  }
  if (from.record_ipv6() != 0) {
    _internal_set_record_ipv6(from._internal_record_ipv6());
  }
  if (from.prefix_ipv4() != 0) {
    _internal_set_prefix_ipv4(from._internal_prefix_ipv4());
  }
  if (from.prefix_ipv6() != 0) {
    _internal_set_prefix_ipv6(from._internal_prefix_ipv6());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.received_ipv4() != 0) {
    _internal_set_received_ipv4(from._internal_received_ipv4());
  }
  if (from.received_ipv6() != 0) {
    _internal_set_received_ipv6(from._internal_received_ipv6());
  }
  if (from.serial_notify() != 0) {
    _internal_set_serial_notify(from._internal_serial_notify());
  }
  if (from.cache_reset() != 0) {
    _internal_set_cache_reset(from._internal_cache_reset());
  }
  if (from.cache_response() != 0) {
    _internal_set_cache_response(from._internal_cache_response());
  }
  if (from.end_of_data() != 0) {
    _internal_set_end_of_data(from._internal_end_of_data());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.serial_query() != 0) {
    _internal_set_serial_query(from._internal_serial_query());
  }
  if (from.reset_query() != 0) {
    _internal_set_reset_query(from._internal_reset_query());
  }
}

void RPKIState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RPKIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIState::CopyFrom(const RPKIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RPKIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIState::IsInitialized() const {
  return true;
}

void RPKIState::InternalSwap(RPKIState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uptime_, other->uptime_);
  swap(downtime_, other->downtime_);
  swap(up_, other->up_);
  swap(record_ipv4_, other->record_ipv4_);
  swap(record_ipv6_, other->record_ipv6_);
  swap(prefix_ipv4_, other->prefix_ipv4_);
  swap(prefix_ipv6_, other->prefix_ipv6_);
  swap(serial_, other->serial_);
  swap(received_ipv4_, other->received_ipv4_);
  swap(received_ipv6_, other->received_ipv6_);
  swap(serial_notify_, other->serial_notify_);
  swap(cache_reset_, other->cache_reset_);
  swap(cache_response_, other->cache_response_);
  swap(end_of_data_, other->end_of_data_);
  swap(error_, other->error_);
  swap(serial_query_, other->serial_query_);
  swap(reset_query_, other->reset_query_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPKIState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rpki::InitAsDefaultInstance() {
  ::gobgpapi::_Rpki_default_instance_._instance.get_mutable()->conf_ = const_cast< ::gobgpapi::RPKIConf*>(
      ::gobgpapi::RPKIConf::internal_default_instance());
  ::gobgpapi::_Rpki_default_instance_._instance.get_mutable()->state_ = const_cast< ::gobgpapi::RPKIState*>(
      ::gobgpapi::RPKIState::internal_default_instance());
}
class Rpki::_Internal {
 public:
  static const ::gobgpapi::RPKIConf& conf(const Rpki* msg);
  static const ::gobgpapi::RPKIState& state(const Rpki* msg);
};

const ::gobgpapi::RPKIConf&
Rpki::_Internal::conf(const Rpki* msg) {
  return *msg->conf_;
}
const ::gobgpapi::RPKIState&
Rpki::_Internal::state(const Rpki* msg) {
  return *msg->state_;
}
Rpki::Rpki()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Rpki)
}
Rpki::Rpki(const Rpki& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_conf()) {
    conf_ = new ::gobgpapi::RPKIConf(*from.conf_);
  } else {
    conf_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::gobgpapi::RPKIState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Rpki)
}

void Rpki::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rpki_gobgp_2eproto.base);
  ::memset(&conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&conf_)) + sizeof(state_));
}

Rpki::~Rpki() {
  // @@protoc_insertion_point(destructor:gobgpapi.Rpki)
  SharedDtor();
}

void Rpki::SharedDtor() {
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete state_;
}

void Rpki::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rpki& Rpki::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rpki_gobgp_2eproto.base);
  return *internal_default_instance();
}


void Rpki::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.Rpki)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Rpki::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.RPKIConf conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.RPKIState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rpki::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Rpki)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conf(this), target, stream);
  }

  // .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Rpki)
  return target;
}

size_t Rpki::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.Rpki)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conf_);
  }

  // .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rpki::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.Rpki)
  GOOGLE_DCHECK_NE(&from, this);
  const Rpki* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rpki>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.Rpki)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.Rpki)
    MergeFrom(*source);
  }
}

void Rpki::MergeFrom(const Rpki& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.Rpki)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conf()) {
    _internal_mutable_conf()->::gobgpapi::RPKIConf::MergeFrom(from._internal_conf());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::gobgpapi::RPKIState::MergeFrom(from._internal_state());
  }
}

void Rpki::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.Rpki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rpki::CopyFrom(const Rpki& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.Rpki)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rpki::IsInitialized() const {
  return true;
}

void Rpki::InternalSwap(Rpki* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(conf_, other->conf_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rpki::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gobgpapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gobgpapi::StartBgpRequest* Arena::CreateMaybeMessage< ::gobgpapi::StartBgpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::StartBgpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::StopBgpRequest* Arena::CreateMaybeMessage< ::gobgpapi::StopBgpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::StopBgpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::GetBgpRequest* Arena::CreateMaybeMessage< ::gobgpapi::GetBgpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::GetBgpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::GetBgpResponse* Arena::CreateMaybeMessage< ::gobgpapi::GetBgpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::GetBgpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeletePeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeletePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeletePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPeerResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UpdatePeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::UpdatePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UpdatePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UpdatePeerResponse* Arena::CreateMaybeMessage< ::gobgpapi::UpdatePeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UpdatePeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ResetPeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::ResetPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ResetPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ShutdownPeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::ShutdownPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ShutdownPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EnablePeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::EnablePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EnablePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DisablePeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::DisablePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DisablePeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MonitorPeerRequest* Arena::CreateMaybeMessage< ::gobgpapi::MonitorPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MonitorPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MonitorPeerResponse* Arena::CreateMaybeMessage< ::gobgpapi::MonitorPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MonitorPeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPeerGroupRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddPeerGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPeerGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeletePeerGroupRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeletePeerGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeletePeerGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UpdatePeerGroupRequest* Arena::CreateMaybeMessage< ::gobgpapi::UpdatePeerGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UpdatePeerGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UpdatePeerGroupResponse* Arena::CreateMaybeMessage< ::gobgpapi::UpdatePeerGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UpdatePeerGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddDynamicNeighborRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddDynamicNeighborRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddDynamicNeighborRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPathRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddPathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPathResponse* Arena::CreateMaybeMessage< ::gobgpapi::AddPathResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeletePathRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeletePathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeletePathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPathRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListPathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPathResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListPathResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPathStreamRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddPathStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPathStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::GetTableRequest* Arena::CreateMaybeMessage< ::gobgpapi::GetTableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::GetTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::GetTableResponse* Arena::CreateMaybeMessage< ::gobgpapi::GetTableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::GetTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MonitorTableRequest* Arena::CreateMaybeMessage< ::gobgpapi::MonitorTableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MonitorTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MonitorTableResponse* Arena::CreateMaybeMessage< ::gobgpapi::MonitorTableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MonitorTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddVrfRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddVrfRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeleteVrfRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeleteVrfRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeleteVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListVrfRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListVrfRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListVrfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListVrfResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListVrfResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListVrfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPolicyRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddPolicyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeletePolicyRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeletePolicyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeletePolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPolicyRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListPolicyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPolicyResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListPolicyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPolicyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::SetPoliciesRequest* Arena::CreateMaybeMessage< ::gobgpapi::SetPoliciesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::SetPoliciesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddDefinedSetRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddDefinedSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddDefinedSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeleteDefinedSetRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeleteDefinedSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeleteDefinedSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListDefinedSetRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListDefinedSetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListDefinedSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListDefinedSetResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListDefinedSetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListDefinedSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddStatementRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddStatementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddStatementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeleteStatementRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeleteStatementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeleteStatementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListStatementRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListStatementRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListStatementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListStatementResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListStatementResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListStatementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPolicyAssignmentRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddPolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeletePolicyAssignmentRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeletePolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeletePolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPolicyAssignmentRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListPolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListPolicyAssignmentResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListPolicyAssignmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListPolicyAssignmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::SetPolicyAssignmentRequest* Arena::CreateMaybeMessage< ::gobgpapi::SetPolicyAssignmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::SetPolicyAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddRpkiRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddRpkiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeleteRpkiRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeleteRpkiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeleteRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListRpkiRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListRpkiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListRpkiResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListRpkiResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListRpkiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EnableRpkiRequest* Arena::CreateMaybeMessage< ::gobgpapi::EnableRpkiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EnableRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DisableRpkiRequest* Arena::CreateMaybeMessage< ::gobgpapi::DisableRpkiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DisableRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ResetRpkiRequest* Arena::CreateMaybeMessage< ::gobgpapi::ResetRpkiRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ResetRpkiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListRpkiTableRequest* Arena::CreateMaybeMessage< ::gobgpapi::ListRpkiTableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListRpkiTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ListRpkiTableResponse* Arena::CreateMaybeMessage< ::gobgpapi::ListRpkiTableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ListRpkiTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EnableZebraRequest* Arena::CreateMaybeMessage< ::gobgpapi::EnableZebraRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EnableZebraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EnableMrtRequest* Arena::CreateMaybeMessage< ::gobgpapi::EnableMrtRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EnableMrtRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DisableMrtRequest* Arena::CreateMaybeMessage< ::gobgpapi::DisableMrtRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DisableMrtRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddBmpRequest* Arena::CreateMaybeMessage< ::gobgpapi::AddBmpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddBmpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DeleteBmpRequest* Arena::CreateMaybeMessage< ::gobgpapi::DeleteBmpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DeleteBmpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Family* Arena::CreateMaybeMessage< ::gobgpapi::Family >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Family >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Validation* Arena::CreateMaybeMessage< ::gobgpapi::Validation >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Validation >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Path* Arena::CreateMaybeMessage< ::gobgpapi::Path >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Destination* Arena::CreateMaybeMessage< ::gobgpapi::Destination >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Destination >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TableLookupPrefix* Arena::CreateMaybeMessage< ::gobgpapi::TableLookupPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TableLookupPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Peer* Arena::CreateMaybeMessage< ::gobgpapi::Peer >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PeerGroup* Arena::CreateMaybeMessage< ::gobgpapi::PeerGroup >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PeerGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DynamicNeighbor* Arena::CreateMaybeMessage< ::gobgpapi::DynamicNeighbor >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DynamicNeighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ApplyPolicy* Arena::CreateMaybeMessage< ::gobgpapi::ApplyPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ApplyPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PrefixLimit* Arena::CreateMaybeMessage< ::gobgpapi::PrefixLimit >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PrefixLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PeerConf* Arena::CreateMaybeMessage< ::gobgpapi::PeerConf >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PeerConf >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PeerGroupConf* Arena::CreateMaybeMessage< ::gobgpapi::PeerGroupConf >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PeerGroupConf >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PeerGroupState* Arena::CreateMaybeMessage< ::gobgpapi::PeerGroupState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PeerGroupState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EbgpMultihop* Arena::CreateMaybeMessage< ::gobgpapi::EbgpMultihop >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EbgpMultihop >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteReflector* Arena::CreateMaybeMessage< ::gobgpapi::RouteReflector >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteReflector >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PeerState* Arena::CreateMaybeMessage< ::gobgpapi::PeerState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PeerState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Messages* Arena::CreateMaybeMessage< ::gobgpapi::Messages >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Messages >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Message* Arena::CreateMaybeMessage< ::gobgpapi::Message >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Queues* Arena::CreateMaybeMessage< ::gobgpapi::Queues >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Queues >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Timers* Arena::CreateMaybeMessage< ::gobgpapi::Timers >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Timers >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TimersConfig* Arena::CreateMaybeMessage< ::gobgpapi::TimersConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TimersConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TimersState* Arena::CreateMaybeMessage< ::gobgpapi::TimersState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TimersState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Transport* Arena::CreateMaybeMessage< ::gobgpapi::Transport >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Transport >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteServer* Arena::CreateMaybeMessage< ::gobgpapi::RouteServer >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteServer >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::GracefulRestart* Arena::CreateMaybeMessage< ::gobgpapi::GracefulRestart >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::GracefulRestart >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MpGracefulRestartConfig* Arena::CreateMaybeMessage< ::gobgpapi::MpGracefulRestartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MpGracefulRestartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MpGracefulRestartState* Arena::CreateMaybeMessage< ::gobgpapi::MpGracefulRestartState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MpGracefulRestartState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MpGracefulRestart* Arena::CreateMaybeMessage< ::gobgpapi::MpGracefulRestart >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MpGracefulRestart >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AfiSafiConfig* Arena::CreateMaybeMessage< ::gobgpapi::AfiSafiConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AfiSafiConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AfiSafiState* Arena::CreateMaybeMessage< ::gobgpapi::AfiSafiState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AfiSafiState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteSelectionOptionsConfig* Arena::CreateMaybeMessage< ::gobgpapi::RouteSelectionOptionsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteSelectionOptionsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteSelectionOptionsState* Arena::CreateMaybeMessage< ::gobgpapi::RouteSelectionOptionsState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteSelectionOptionsState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteSelectionOptions* Arena::CreateMaybeMessage< ::gobgpapi::RouteSelectionOptions >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteSelectionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UseMultiplePathsConfig* Arena::CreateMaybeMessage< ::gobgpapi::UseMultiplePathsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UseMultiplePathsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UseMultiplePathsState* Arena::CreateMaybeMessage< ::gobgpapi::UseMultiplePathsState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UseMultiplePathsState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EbgpConfig* Arena::CreateMaybeMessage< ::gobgpapi::EbgpConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EbgpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EbgpState* Arena::CreateMaybeMessage< ::gobgpapi::EbgpState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EbgpState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Ebgp* Arena::CreateMaybeMessage< ::gobgpapi::Ebgp >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Ebgp >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::IbgpConfig* Arena::CreateMaybeMessage< ::gobgpapi::IbgpConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::IbgpConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::IbgpState* Arena::CreateMaybeMessage< ::gobgpapi::IbgpState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::IbgpState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Ibgp* Arena::CreateMaybeMessage< ::gobgpapi::Ibgp >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Ibgp >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UseMultiplePaths* Arena::CreateMaybeMessage< ::gobgpapi::UseMultiplePaths >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UseMultiplePaths >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteTargetMembershipConfig* Arena::CreateMaybeMessage< ::gobgpapi::RouteTargetMembershipConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteTargetMembershipConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteTargetMembershipState* Arena::CreateMaybeMessage< ::gobgpapi::RouteTargetMembershipState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteTargetMembershipState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteTargetMembership* Arena::CreateMaybeMessage< ::gobgpapi::RouteTargetMembership >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteTargetMembership >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LongLivedGracefulRestartConfig* Arena::CreateMaybeMessage< ::gobgpapi::LongLivedGracefulRestartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LongLivedGracefulRestartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LongLivedGracefulRestartState* Arena::CreateMaybeMessage< ::gobgpapi::LongLivedGracefulRestartState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LongLivedGracefulRestartState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LongLivedGracefulRestart* Arena::CreateMaybeMessage< ::gobgpapi::LongLivedGracefulRestart >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LongLivedGracefulRestart >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AfiSafi* Arena::CreateMaybeMessage< ::gobgpapi::AfiSafi >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AfiSafi >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPathsConfig* Arena::CreateMaybeMessage< ::gobgpapi::AddPathsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPathsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPathsState* Arena::CreateMaybeMessage< ::gobgpapi::AddPathsState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPathsState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AddPaths* Arena::CreateMaybeMessage< ::gobgpapi::AddPaths >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AddPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Prefix* Arena::CreateMaybeMessage< ::gobgpapi::Prefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Prefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DefinedSet* Arena::CreateMaybeMessage< ::gobgpapi::DefinedSet >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DefinedSet >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MatchSet* Arena::CreateMaybeMessage< ::gobgpapi::MatchSet >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MatchSet >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AsPathLength* Arena::CreateMaybeMessage< ::gobgpapi::AsPathLength >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AsPathLength >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Conditions* Arena::CreateMaybeMessage< ::gobgpapi::Conditions >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Conditions >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::CommunityAction* Arena::CreateMaybeMessage< ::gobgpapi::CommunityAction >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::CommunityAction >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MedAction* Arena::CreateMaybeMessage< ::gobgpapi::MedAction >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MedAction >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AsPrependAction* Arena::CreateMaybeMessage< ::gobgpapi::AsPrependAction >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AsPrependAction >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::NexthopAction* Arena::CreateMaybeMessage< ::gobgpapi::NexthopAction >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::NexthopAction >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LocalPrefAction* Arena::CreateMaybeMessage< ::gobgpapi::LocalPrefAction >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LocalPrefAction >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Actions* Arena::CreateMaybeMessage< ::gobgpapi::Actions >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Actions >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Statement* Arena::CreateMaybeMessage< ::gobgpapi::Statement >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Statement >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Policy* Arena::CreateMaybeMessage< ::gobgpapi::Policy >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Policy >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PolicyAssignment* Arena::CreateMaybeMessage< ::gobgpapi::PolicyAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PolicyAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RoutingPolicy* Arena::CreateMaybeMessage< ::gobgpapi::RoutingPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RoutingPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Roa* Arena::CreateMaybeMessage< ::gobgpapi::Roa >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Roa >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Vrf* Arena::CreateMaybeMessage< ::gobgpapi::Vrf >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Vrf >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DefaultRouteDistance* Arena::CreateMaybeMessage< ::gobgpapi::DefaultRouteDistance >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DefaultRouteDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Global* Arena::CreateMaybeMessage< ::gobgpapi::Global >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Global >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Confederation* Arena::CreateMaybeMessage< ::gobgpapi::Confederation >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Confederation >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RPKIConf* Arena::CreateMaybeMessage< ::gobgpapi::RPKIConf >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RPKIConf >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RPKIState* Arena::CreateMaybeMessage< ::gobgpapi::RPKIState >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RPKIState >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::Rpki* Arena::CreateMaybeMessage< ::gobgpapi::Rpki >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::Rpki >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
