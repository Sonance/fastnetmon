// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gobgp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gobgp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gobgp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gobgp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[142]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gobgp_2eproto;
namespace gobgpapi {
class Actions;
class ActionsDefaultTypeInternal;
extern ActionsDefaultTypeInternal _Actions_default_instance_;
class AddBmpRequest;
class AddBmpRequestDefaultTypeInternal;
extern AddBmpRequestDefaultTypeInternal _AddBmpRequest_default_instance_;
class AddDefinedSetRequest;
class AddDefinedSetRequestDefaultTypeInternal;
extern AddDefinedSetRequestDefaultTypeInternal _AddDefinedSetRequest_default_instance_;
class AddDynamicNeighborRequest;
class AddDynamicNeighborRequestDefaultTypeInternal;
extern AddDynamicNeighborRequestDefaultTypeInternal _AddDynamicNeighborRequest_default_instance_;
class AddPathRequest;
class AddPathRequestDefaultTypeInternal;
extern AddPathRequestDefaultTypeInternal _AddPathRequest_default_instance_;
class AddPathResponse;
class AddPathResponseDefaultTypeInternal;
extern AddPathResponseDefaultTypeInternal _AddPathResponse_default_instance_;
class AddPathStreamRequest;
class AddPathStreamRequestDefaultTypeInternal;
extern AddPathStreamRequestDefaultTypeInternal _AddPathStreamRequest_default_instance_;
class AddPaths;
class AddPathsDefaultTypeInternal;
extern AddPathsDefaultTypeInternal _AddPaths_default_instance_;
class AddPathsConfig;
class AddPathsConfigDefaultTypeInternal;
extern AddPathsConfigDefaultTypeInternal _AddPathsConfig_default_instance_;
class AddPathsState;
class AddPathsStateDefaultTypeInternal;
extern AddPathsStateDefaultTypeInternal _AddPathsState_default_instance_;
class AddPeerGroupRequest;
class AddPeerGroupRequestDefaultTypeInternal;
extern AddPeerGroupRequestDefaultTypeInternal _AddPeerGroupRequest_default_instance_;
class AddPeerRequest;
class AddPeerRequestDefaultTypeInternal;
extern AddPeerRequestDefaultTypeInternal _AddPeerRequest_default_instance_;
class AddPolicyAssignmentRequest;
class AddPolicyAssignmentRequestDefaultTypeInternal;
extern AddPolicyAssignmentRequestDefaultTypeInternal _AddPolicyAssignmentRequest_default_instance_;
class AddPolicyRequest;
class AddPolicyRequestDefaultTypeInternal;
extern AddPolicyRequestDefaultTypeInternal _AddPolicyRequest_default_instance_;
class AddRpkiRequest;
class AddRpkiRequestDefaultTypeInternal;
extern AddRpkiRequestDefaultTypeInternal _AddRpkiRequest_default_instance_;
class AddStatementRequest;
class AddStatementRequestDefaultTypeInternal;
extern AddStatementRequestDefaultTypeInternal _AddStatementRequest_default_instance_;
class AddVrfRequest;
class AddVrfRequestDefaultTypeInternal;
extern AddVrfRequestDefaultTypeInternal _AddVrfRequest_default_instance_;
class AfiSafi;
class AfiSafiDefaultTypeInternal;
extern AfiSafiDefaultTypeInternal _AfiSafi_default_instance_;
class AfiSafiConfig;
class AfiSafiConfigDefaultTypeInternal;
extern AfiSafiConfigDefaultTypeInternal _AfiSafiConfig_default_instance_;
class AfiSafiState;
class AfiSafiStateDefaultTypeInternal;
extern AfiSafiStateDefaultTypeInternal _AfiSafiState_default_instance_;
class ApplyPolicy;
class ApplyPolicyDefaultTypeInternal;
extern ApplyPolicyDefaultTypeInternal _ApplyPolicy_default_instance_;
class AsPathLength;
class AsPathLengthDefaultTypeInternal;
extern AsPathLengthDefaultTypeInternal _AsPathLength_default_instance_;
class AsPrependAction;
class AsPrependActionDefaultTypeInternal;
extern AsPrependActionDefaultTypeInternal _AsPrependAction_default_instance_;
class CommunityAction;
class CommunityActionDefaultTypeInternal;
extern CommunityActionDefaultTypeInternal _CommunityAction_default_instance_;
class Conditions;
class ConditionsDefaultTypeInternal;
extern ConditionsDefaultTypeInternal _Conditions_default_instance_;
class Confederation;
class ConfederationDefaultTypeInternal;
extern ConfederationDefaultTypeInternal _Confederation_default_instance_;
class DefaultRouteDistance;
class DefaultRouteDistanceDefaultTypeInternal;
extern DefaultRouteDistanceDefaultTypeInternal _DefaultRouteDistance_default_instance_;
class DefinedSet;
class DefinedSetDefaultTypeInternal;
extern DefinedSetDefaultTypeInternal _DefinedSet_default_instance_;
class DeleteBmpRequest;
class DeleteBmpRequestDefaultTypeInternal;
extern DeleteBmpRequestDefaultTypeInternal _DeleteBmpRequest_default_instance_;
class DeleteDefinedSetRequest;
class DeleteDefinedSetRequestDefaultTypeInternal;
extern DeleteDefinedSetRequestDefaultTypeInternal _DeleteDefinedSetRequest_default_instance_;
class DeletePathRequest;
class DeletePathRequestDefaultTypeInternal;
extern DeletePathRequestDefaultTypeInternal _DeletePathRequest_default_instance_;
class DeletePeerGroupRequest;
class DeletePeerGroupRequestDefaultTypeInternal;
extern DeletePeerGroupRequestDefaultTypeInternal _DeletePeerGroupRequest_default_instance_;
class DeletePeerRequest;
class DeletePeerRequestDefaultTypeInternal;
extern DeletePeerRequestDefaultTypeInternal _DeletePeerRequest_default_instance_;
class DeletePolicyAssignmentRequest;
class DeletePolicyAssignmentRequestDefaultTypeInternal;
extern DeletePolicyAssignmentRequestDefaultTypeInternal _DeletePolicyAssignmentRequest_default_instance_;
class DeletePolicyRequest;
class DeletePolicyRequestDefaultTypeInternal;
extern DeletePolicyRequestDefaultTypeInternal _DeletePolicyRequest_default_instance_;
class DeleteRpkiRequest;
class DeleteRpkiRequestDefaultTypeInternal;
extern DeleteRpkiRequestDefaultTypeInternal _DeleteRpkiRequest_default_instance_;
class DeleteStatementRequest;
class DeleteStatementRequestDefaultTypeInternal;
extern DeleteStatementRequestDefaultTypeInternal _DeleteStatementRequest_default_instance_;
class DeleteVrfRequest;
class DeleteVrfRequestDefaultTypeInternal;
extern DeleteVrfRequestDefaultTypeInternal _DeleteVrfRequest_default_instance_;
class Destination;
class DestinationDefaultTypeInternal;
extern DestinationDefaultTypeInternal _Destination_default_instance_;
class DisableMrtRequest;
class DisableMrtRequestDefaultTypeInternal;
extern DisableMrtRequestDefaultTypeInternal _DisableMrtRequest_default_instance_;
class DisablePeerRequest;
class DisablePeerRequestDefaultTypeInternal;
extern DisablePeerRequestDefaultTypeInternal _DisablePeerRequest_default_instance_;
class DisableRpkiRequest;
class DisableRpkiRequestDefaultTypeInternal;
extern DisableRpkiRequestDefaultTypeInternal _DisableRpkiRequest_default_instance_;
class DynamicNeighbor;
class DynamicNeighborDefaultTypeInternal;
extern DynamicNeighborDefaultTypeInternal _DynamicNeighbor_default_instance_;
class Ebgp;
class EbgpDefaultTypeInternal;
extern EbgpDefaultTypeInternal _Ebgp_default_instance_;
class EbgpConfig;
class EbgpConfigDefaultTypeInternal;
extern EbgpConfigDefaultTypeInternal _EbgpConfig_default_instance_;
class EbgpMultihop;
class EbgpMultihopDefaultTypeInternal;
extern EbgpMultihopDefaultTypeInternal _EbgpMultihop_default_instance_;
class EbgpState;
class EbgpStateDefaultTypeInternal;
extern EbgpStateDefaultTypeInternal _EbgpState_default_instance_;
class EnableMrtRequest;
class EnableMrtRequestDefaultTypeInternal;
extern EnableMrtRequestDefaultTypeInternal _EnableMrtRequest_default_instance_;
class EnablePeerRequest;
class EnablePeerRequestDefaultTypeInternal;
extern EnablePeerRequestDefaultTypeInternal _EnablePeerRequest_default_instance_;
class EnableRpkiRequest;
class EnableRpkiRequestDefaultTypeInternal;
extern EnableRpkiRequestDefaultTypeInternal _EnableRpkiRequest_default_instance_;
class EnableZebraRequest;
class EnableZebraRequestDefaultTypeInternal;
extern EnableZebraRequestDefaultTypeInternal _EnableZebraRequest_default_instance_;
class Family;
class FamilyDefaultTypeInternal;
extern FamilyDefaultTypeInternal _Family_default_instance_;
class GetBgpRequest;
class GetBgpRequestDefaultTypeInternal;
extern GetBgpRequestDefaultTypeInternal _GetBgpRequest_default_instance_;
class GetBgpResponse;
class GetBgpResponseDefaultTypeInternal;
extern GetBgpResponseDefaultTypeInternal _GetBgpResponse_default_instance_;
class GetTableRequest;
class GetTableRequestDefaultTypeInternal;
extern GetTableRequestDefaultTypeInternal _GetTableRequest_default_instance_;
class GetTableResponse;
class GetTableResponseDefaultTypeInternal;
extern GetTableResponseDefaultTypeInternal _GetTableResponse_default_instance_;
class Global;
class GlobalDefaultTypeInternal;
extern GlobalDefaultTypeInternal _Global_default_instance_;
class GracefulRestart;
class GracefulRestartDefaultTypeInternal;
extern GracefulRestartDefaultTypeInternal _GracefulRestart_default_instance_;
class Ibgp;
class IbgpDefaultTypeInternal;
extern IbgpDefaultTypeInternal _Ibgp_default_instance_;
class IbgpConfig;
class IbgpConfigDefaultTypeInternal;
extern IbgpConfigDefaultTypeInternal _IbgpConfig_default_instance_;
class IbgpState;
class IbgpStateDefaultTypeInternal;
extern IbgpStateDefaultTypeInternal _IbgpState_default_instance_;
class ListDefinedSetRequest;
class ListDefinedSetRequestDefaultTypeInternal;
extern ListDefinedSetRequestDefaultTypeInternal _ListDefinedSetRequest_default_instance_;
class ListDefinedSetResponse;
class ListDefinedSetResponseDefaultTypeInternal;
extern ListDefinedSetResponseDefaultTypeInternal _ListDefinedSetResponse_default_instance_;
class ListPathRequest;
class ListPathRequestDefaultTypeInternal;
extern ListPathRequestDefaultTypeInternal _ListPathRequest_default_instance_;
class ListPathResponse;
class ListPathResponseDefaultTypeInternal;
extern ListPathResponseDefaultTypeInternal _ListPathResponse_default_instance_;
class ListPeerRequest;
class ListPeerRequestDefaultTypeInternal;
extern ListPeerRequestDefaultTypeInternal _ListPeerRequest_default_instance_;
class ListPeerResponse;
class ListPeerResponseDefaultTypeInternal;
extern ListPeerResponseDefaultTypeInternal _ListPeerResponse_default_instance_;
class ListPolicyAssignmentRequest;
class ListPolicyAssignmentRequestDefaultTypeInternal;
extern ListPolicyAssignmentRequestDefaultTypeInternal _ListPolicyAssignmentRequest_default_instance_;
class ListPolicyAssignmentResponse;
class ListPolicyAssignmentResponseDefaultTypeInternal;
extern ListPolicyAssignmentResponseDefaultTypeInternal _ListPolicyAssignmentResponse_default_instance_;
class ListPolicyRequest;
class ListPolicyRequestDefaultTypeInternal;
extern ListPolicyRequestDefaultTypeInternal _ListPolicyRequest_default_instance_;
class ListPolicyResponse;
class ListPolicyResponseDefaultTypeInternal;
extern ListPolicyResponseDefaultTypeInternal _ListPolicyResponse_default_instance_;
class ListRpkiRequest;
class ListRpkiRequestDefaultTypeInternal;
extern ListRpkiRequestDefaultTypeInternal _ListRpkiRequest_default_instance_;
class ListRpkiResponse;
class ListRpkiResponseDefaultTypeInternal;
extern ListRpkiResponseDefaultTypeInternal _ListRpkiResponse_default_instance_;
class ListRpkiTableRequest;
class ListRpkiTableRequestDefaultTypeInternal;
extern ListRpkiTableRequestDefaultTypeInternal _ListRpkiTableRequest_default_instance_;
class ListRpkiTableResponse;
class ListRpkiTableResponseDefaultTypeInternal;
extern ListRpkiTableResponseDefaultTypeInternal _ListRpkiTableResponse_default_instance_;
class ListStatementRequest;
class ListStatementRequestDefaultTypeInternal;
extern ListStatementRequestDefaultTypeInternal _ListStatementRequest_default_instance_;
class ListStatementResponse;
class ListStatementResponseDefaultTypeInternal;
extern ListStatementResponseDefaultTypeInternal _ListStatementResponse_default_instance_;
class ListVrfRequest;
class ListVrfRequestDefaultTypeInternal;
extern ListVrfRequestDefaultTypeInternal _ListVrfRequest_default_instance_;
class ListVrfResponse;
class ListVrfResponseDefaultTypeInternal;
extern ListVrfResponseDefaultTypeInternal _ListVrfResponse_default_instance_;
class LocalPrefAction;
class LocalPrefActionDefaultTypeInternal;
extern LocalPrefActionDefaultTypeInternal _LocalPrefAction_default_instance_;
class LongLivedGracefulRestart;
class LongLivedGracefulRestartDefaultTypeInternal;
extern LongLivedGracefulRestartDefaultTypeInternal _LongLivedGracefulRestart_default_instance_;
class LongLivedGracefulRestartConfig;
class LongLivedGracefulRestartConfigDefaultTypeInternal;
extern LongLivedGracefulRestartConfigDefaultTypeInternal _LongLivedGracefulRestartConfig_default_instance_;
class LongLivedGracefulRestartState;
class LongLivedGracefulRestartStateDefaultTypeInternal;
extern LongLivedGracefulRestartStateDefaultTypeInternal _LongLivedGracefulRestartState_default_instance_;
class MatchSet;
class MatchSetDefaultTypeInternal;
extern MatchSetDefaultTypeInternal _MatchSet_default_instance_;
class MedAction;
class MedActionDefaultTypeInternal;
extern MedActionDefaultTypeInternal _MedAction_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Messages;
class MessagesDefaultTypeInternal;
extern MessagesDefaultTypeInternal _Messages_default_instance_;
class MonitorPeerRequest;
class MonitorPeerRequestDefaultTypeInternal;
extern MonitorPeerRequestDefaultTypeInternal _MonitorPeerRequest_default_instance_;
class MonitorPeerResponse;
class MonitorPeerResponseDefaultTypeInternal;
extern MonitorPeerResponseDefaultTypeInternal _MonitorPeerResponse_default_instance_;
class MonitorTableRequest;
class MonitorTableRequestDefaultTypeInternal;
extern MonitorTableRequestDefaultTypeInternal _MonitorTableRequest_default_instance_;
class MonitorTableResponse;
class MonitorTableResponseDefaultTypeInternal;
extern MonitorTableResponseDefaultTypeInternal _MonitorTableResponse_default_instance_;
class MpGracefulRestart;
class MpGracefulRestartDefaultTypeInternal;
extern MpGracefulRestartDefaultTypeInternal _MpGracefulRestart_default_instance_;
class MpGracefulRestartConfig;
class MpGracefulRestartConfigDefaultTypeInternal;
extern MpGracefulRestartConfigDefaultTypeInternal _MpGracefulRestartConfig_default_instance_;
class MpGracefulRestartState;
class MpGracefulRestartStateDefaultTypeInternal;
extern MpGracefulRestartStateDefaultTypeInternal _MpGracefulRestartState_default_instance_;
class NexthopAction;
class NexthopActionDefaultTypeInternal;
extern NexthopActionDefaultTypeInternal _NexthopAction_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class PeerConf;
class PeerConfDefaultTypeInternal;
extern PeerConfDefaultTypeInternal _PeerConf_default_instance_;
class PeerGroup;
class PeerGroupDefaultTypeInternal;
extern PeerGroupDefaultTypeInternal _PeerGroup_default_instance_;
class PeerGroupConf;
class PeerGroupConfDefaultTypeInternal;
extern PeerGroupConfDefaultTypeInternal _PeerGroupConf_default_instance_;
class PeerGroupState;
class PeerGroupStateDefaultTypeInternal;
extern PeerGroupStateDefaultTypeInternal _PeerGroupState_default_instance_;
class PeerState;
class PeerStateDefaultTypeInternal;
extern PeerStateDefaultTypeInternal _PeerState_default_instance_;
class Policy;
class PolicyDefaultTypeInternal;
extern PolicyDefaultTypeInternal _Policy_default_instance_;
class PolicyAssignment;
class PolicyAssignmentDefaultTypeInternal;
extern PolicyAssignmentDefaultTypeInternal _PolicyAssignment_default_instance_;
class Prefix;
class PrefixDefaultTypeInternal;
extern PrefixDefaultTypeInternal _Prefix_default_instance_;
class PrefixLimit;
class PrefixLimitDefaultTypeInternal;
extern PrefixLimitDefaultTypeInternal _PrefixLimit_default_instance_;
class Queues;
class QueuesDefaultTypeInternal;
extern QueuesDefaultTypeInternal _Queues_default_instance_;
class RPKIConf;
class RPKIConfDefaultTypeInternal;
extern RPKIConfDefaultTypeInternal _RPKIConf_default_instance_;
class RPKIState;
class RPKIStateDefaultTypeInternal;
extern RPKIStateDefaultTypeInternal _RPKIState_default_instance_;
class ResetPeerRequest;
class ResetPeerRequestDefaultTypeInternal;
extern ResetPeerRequestDefaultTypeInternal _ResetPeerRequest_default_instance_;
class ResetRpkiRequest;
class ResetRpkiRequestDefaultTypeInternal;
extern ResetRpkiRequestDefaultTypeInternal _ResetRpkiRequest_default_instance_;
class Roa;
class RoaDefaultTypeInternal;
extern RoaDefaultTypeInternal _Roa_default_instance_;
class RouteReflector;
class RouteReflectorDefaultTypeInternal;
extern RouteReflectorDefaultTypeInternal _RouteReflector_default_instance_;
class RouteSelectionOptions;
class RouteSelectionOptionsDefaultTypeInternal;
extern RouteSelectionOptionsDefaultTypeInternal _RouteSelectionOptions_default_instance_;
class RouteSelectionOptionsConfig;
class RouteSelectionOptionsConfigDefaultTypeInternal;
extern RouteSelectionOptionsConfigDefaultTypeInternal _RouteSelectionOptionsConfig_default_instance_;
class RouteSelectionOptionsState;
class RouteSelectionOptionsStateDefaultTypeInternal;
extern RouteSelectionOptionsStateDefaultTypeInternal _RouteSelectionOptionsState_default_instance_;
class RouteServer;
class RouteServerDefaultTypeInternal;
extern RouteServerDefaultTypeInternal _RouteServer_default_instance_;
class RouteTargetMembership;
class RouteTargetMembershipDefaultTypeInternal;
extern RouteTargetMembershipDefaultTypeInternal _RouteTargetMembership_default_instance_;
class RouteTargetMembershipConfig;
class RouteTargetMembershipConfigDefaultTypeInternal;
extern RouteTargetMembershipConfigDefaultTypeInternal _RouteTargetMembershipConfig_default_instance_;
class RouteTargetMembershipState;
class RouteTargetMembershipStateDefaultTypeInternal;
extern RouteTargetMembershipStateDefaultTypeInternal _RouteTargetMembershipState_default_instance_;
class RoutingPolicy;
class RoutingPolicyDefaultTypeInternal;
extern RoutingPolicyDefaultTypeInternal _RoutingPolicy_default_instance_;
class Rpki;
class RpkiDefaultTypeInternal;
extern RpkiDefaultTypeInternal _Rpki_default_instance_;
class SetPoliciesRequest;
class SetPoliciesRequestDefaultTypeInternal;
extern SetPoliciesRequestDefaultTypeInternal _SetPoliciesRequest_default_instance_;
class SetPolicyAssignmentRequest;
class SetPolicyAssignmentRequestDefaultTypeInternal;
extern SetPolicyAssignmentRequestDefaultTypeInternal _SetPolicyAssignmentRequest_default_instance_;
class ShutdownPeerRequest;
class ShutdownPeerRequestDefaultTypeInternal;
extern ShutdownPeerRequestDefaultTypeInternal _ShutdownPeerRequest_default_instance_;
class StartBgpRequest;
class StartBgpRequestDefaultTypeInternal;
extern StartBgpRequestDefaultTypeInternal _StartBgpRequest_default_instance_;
class Statement;
class StatementDefaultTypeInternal;
extern StatementDefaultTypeInternal _Statement_default_instance_;
class StopBgpRequest;
class StopBgpRequestDefaultTypeInternal;
extern StopBgpRequestDefaultTypeInternal _StopBgpRequest_default_instance_;
class TableLookupPrefix;
class TableLookupPrefixDefaultTypeInternal;
extern TableLookupPrefixDefaultTypeInternal _TableLookupPrefix_default_instance_;
class Timers;
class TimersDefaultTypeInternal;
extern TimersDefaultTypeInternal _Timers_default_instance_;
class TimersConfig;
class TimersConfigDefaultTypeInternal;
extern TimersConfigDefaultTypeInternal _TimersConfig_default_instance_;
class TimersState;
class TimersStateDefaultTypeInternal;
extern TimersStateDefaultTypeInternal _TimersState_default_instance_;
class Transport;
class TransportDefaultTypeInternal;
extern TransportDefaultTypeInternal _Transport_default_instance_;
class UpdatePeerGroupRequest;
class UpdatePeerGroupRequestDefaultTypeInternal;
extern UpdatePeerGroupRequestDefaultTypeInternal _UpdatePeerGroupRequest_default_instance_;
class UpdatePeerGroupResponse;
class UpdatePeerGroupResponseDefaultTypeInternal;
extern UpdatePeerGroupResponseDefaultTypeInternal _UpdatePeerGroupResponse_default_instance_;
class UpdatePeerRequest;
class UpdatePeerRequestDefaultTypeInternal;
extern UpdatePeerRequestDefaultTypeInternal _UpdatePeerRequest_default_instance_;
class UpdatePeerResponse;
class UpdatePeerResponseDefaultTypeInternal;
extern UpdatePeerResponseDefaultTypeInternal _UpdatePeerResponse_default_instance_;
class UseMultiplePaths;
class UseMultiplePathsDefaultTypeInternal;
extern UseMultiplePathsDefaultTypeInternal _UseMultiplePaths_default_instance_;
class UseMultiplePathsConfig;
class UseMultiplePathsConfigDefaultTypeInternal;
extern UseMultiplePathsConfigDefaultTypeInternal _UseMultiplePathsConfig_default_instance_;
class UseMultiplePathsState;
class UseMultiplePathsStateDefaultTypeInternal;
extern UseMultiplePathsStateDefaultTypeInternal _UseMultiplePathsState_default_instance_;
class Validation;
class ValidationDefaultTypeInternal;
extern ValidationDefaultTypeInternal _Validation_default_instance_;
class Vrf;
class VrfDefaultTypeInternal;
extern VrfDefaultTypeInternal _Vrf_default_instance_;
}  // namespace gobgpapi
PROTOBUF_NAMESPACE_OPEN
template<> ::gobgpapi::Actions* Arena::CreateMaybeMessage<::gobgpapi::Actions>(Arena*);
template<> ::gobgpapi::AddBmpRequest* Arena::CreateMaybeMessage<::gobgpapi::AddBmpRequest>(Arena*);
template<> ::gobgpapi::AddDefinedSetRequest* Arena::CreateMaybeMessage<::gobgpapi::AddDefinedSetRequest>(Arena*);
template<> ::gobgpapi::AddDynamicNeighborRequest* Arena::CreateMaybeMessage<::gobgpapi::AddDynamicNeighborRequest>(Arena*);
template<> ::gobgpapi::AddPathRequest* Arena::CreateMaybeMessage<::gobgpapi::AddPathRequest>(Arena*);
template<> ::gobgpapi::AddPathResponse* Arena::CreateMaybeMessage<::gobgpapi::AddPathResponse>(Arena*);
template<> ::gobgpapi::AddPathStreamRequest* Arena::CreateMaybeMessage<::gobgpapi::AddPathStreamRequest>(Arena*);
template<> ::gobgpapi::AddPaths* Arena::CreateMaybeMessage<::gobgpapi::AddPaths>(Arena*);
template<> ::gobgpapi::AddPathsConfig* Arena::CreateMaybeMessage<::gobgpapi::AddPathsConfig>(Arena*);
template<> ::gobgpapi::AddPathsState* Arena::CreateMaybeMessage<::gobgpapi::AddPathsState>(Arena*);
template<> ::gobgpapi::AddPeerGroupRequest* Arena::CreateMaybeMessage<::gobgpapi::AddPeerGroupRequest>(Arena*);
template<> ::gobgpapi::AddPeerRequest* Arena::CreateMaybeMessage<::gobgpapi::AddPeerRequest>(Arena*);
template<> ::gobgpapi::AddPolicyAssignmentRequest* Arena::CreateMaybeMessage<::gobgpapi::AddPolicyAssignmentRequest>(Arena*);
template<> ::gobgpapi::AddPolicyRequest* Arena::CreateMaybeMessage<::gobgpapi::AddPolicyRequest>(Arena*);
template<> ::gobgpapi::AddRpkiRequest* Arena::CreateMaybeMessage<::gobgpapi::AddRpkiRequest>(Arena*);
template<> ::gobgpapi::AddStatementRequest* Arena::CreateMaybeMessage<::gobgpapi::AddStatementRequest>(Arena*);
template<> ::gobgpapi::AddVrfRequest* Arena::CreateMaybeMessage<::gobgpapi::AddVrfRequest>(Arena*);
template<> ::gobgpapi::AfiSafi* Arena::CreateMaybeMessage<::gobgpapi::AfiSafi>(Arena*);
template<> ::gobgpapi::AfiSafiConfig* Arena::CreateMaybeMessage<::gobgpapi::AfiSafiConfig>(Arena*);
template<> ::gobgpapi::AfiSafiState* Arena::CreateMaybeMessage<::gobgpapi::AfiSafiState>(Arena*);
template<> ::gobgpapi::ApplyPolicy* Arena::CreateMaybeMessage<::gobgpapi::ApplyPolicy>(Arena*);
template<> ::gobgpapi::AsPathLength* Arena::CreateMaybeMessage<::gobgpapi::AsPathLength>(Arena*);
template<> ::gobgpapi::AsPrependAction* Arena::CreateMaybeMessage<::gobgpapi::AsPrependAction>(Arena*);
template<> ::gobgpapi::CommunityAction* Arena::CreateMaybeMessage<::gobgpapi::CommunityAction>(Arena*);
template<> ::gobgpapi::Conditions* Arena::CreateMaybeMessage<::gobgpapi::Conditions>(Arena*);
template<> ::gobgpapi::Confederation* Arena::CreateMaybeMessage<::gobgpapi::Confederation>(Arena*);
template<> ::gobgpapi::DefaultRouteDistance* Arena::CreateMaybeMessage<::gobgpapi::DefaultRouteDistance>(Arena*);
template<> ::gobgpapi::DefinedSet* Arena::CreateMaybeMessage<::gobgpapi::DefinedSet>(Arena*);
template<> ::gobgpapi::DeleteBmpRequest* Arena::CreateMaybeMessage<::gobgpapi::DeleteBmpRequest>(Arena*);
template<> ::gobgpapi::DeleteDefinedSetRequest* Arena::CreateMaybeMessage<::gobgpapi::DeleteDefinedSetRequest>(Arena*);
template<> ::gobgpapi::DeletePathRequest* Arena::CreateMaybeMessage<::gobgpapi::DeletePathRequest>(Arena*);
template<> ::gobgpapi::DeletePeerGroupRequest* Arena::CreateMaybeMessage<::gobgpapi::DeletePeerGroupRequest>(Arena*);
template<> ::gobgpapi::DeletePeerRequest* Arena::CreateMaybeMessage<::gobgpapi::DeletePeerRequest>(Arena*);
template<> ::gobgpapi::DeletePolicyAssignmentRequest* Arena::CreateMaybeMessage<::gobgpapi::DeletePolicyAssignmentRequest>(Arena*);
template<> ::gobgpapi::DeletePolicyRequest* Arena::CreateMaybeMessage<::gobgpapi::DeletePolicyRequest>(Arena*);
template<> ::gobgpapi::DeleteRpkiRequest* Arena::CreateMaybeMessage<::gobgpapi::DeleteRpkiRequest>(Arena*);
template<> ::gobgpapi::DeleteStatementRequest* Arena::CreateMaybeMessage<::gobgpapi::DeleteStatementRequest>(Arena*);
template<> ::gobgpapi::DeleteVrfRequest* Arena::CreateMaybeMessage<::gobgpapi::DeleteVrfRequest>(Arena*);
template<> ::gobgpapi::Destination* Arena::CreateMaybeMessage<::gobgpapi::Destination>(Arena*);
template<> ::gobgpapi::DisableMrtRequest* Arena::CreateMaybeMessage<::gobgpapi::DisableMrtRequest>(Arena*);
template<> ::gobgpapi::DisablePeerRequest* Arena::CreateMaybeMessage<::gobgpapi::DisablePeerRequest>(Arena*);
template<> ::gobgpapi::DisableRpkiRequest* Arena::CreateMaybeMessage<::gobgpapi::DisableRpkiRequest>(Arena*);
template<> ::gobgpapi::DynamicNeighbor* Arena::CreateMaybeMessage<::gobgpapi::DynamicNeighbor>(Arena*);
template<> ::gobgpapi::Ebgp* Arena::CreateMaybeMessage<::gobgpapi::Ebgp>(Arena*);
template<> ::gobgpapi::EbgpConfig* Arena::CreateMaybeMessage<::gobgpapi::EbgpConfig>(Arena*);
template<> ::gobgpapi::EbgpMultihop* Arena::CreateMaybeMessage<::gobgpapi::EbgpMultihop>(Arena*);
template<> ::gobgpapi::EbgpState* Arena::CreateMaybeMessage<::gobgpapi::EbgpState>(Arena*);
template<> ::gobgpapi::EnableMrtRequest* Arena::CreateMaybeMessage<::gobgpapi::EnableMrtRequest>(Arena*);
template<> ::gobgpapi::EnablePeerRequest* Arena::CreateMaybeMessage<::gobgpapi::EnablePeerRequest>(Arena*);
template<> ::gobgpapi::EnableRpkiRequest* Arena::CreateMaybeMessage<::gobgpapi::EnableRpkiRequest>(Arena*);
template<> ::gobgpapi::EnableZebraRequest* Arena::CreateMaybeMessage<::gobgpapi::EnableZebraRequest>(Arena*);
template<> ::gobgpapi::Family* Arena::CreateMaybeMessage<::gobgpapi::Family>(Arena*);
template<> ::gobgpapi::GetBgpRequest* Arena::CreateMaybeMessage<::gobgpapi::GetBgpRequest>(Arena*);
template<> ::gobgpapi::GetBgpResponse* Arena::CreateMaybeMessage<::gobgpapi::GetBgpResponse>(Arena*);
template<> ::gobgpapi::GetTableRequest* Arena::CreateMaybeMessage<::gobgpapi::GetTableRequest>(Arena*);
template<> ::gobgpapi::GetTableResponse* Arena::CreateMaybeMessage<::gobgpapi::GetTableResponse>(Arena*);
template<> ::gobgpapi::Global* Arena::CreateMaybeMessage<::gobgpapi::Global>(Arena*);
template<> ::gobgpapi::GracefulRestart* Arena::CreateMaybeMessage<::gobgpapi::GracefulRestart>(Arena*);
template<> ::gobgpapi::Ibgp* Arena::CreateMaybeMessage<::gobgpapi::Ibgp>(Arena*);
template<> ::gobgpapi::IbgpConfig* Arena::CreateMaybeMessage<::gobgpapi::IbgpConfig>(Arena*);
template<> ::gobgpapi::IbgpState* Arena::CreateMaybeMessage<::gobgpapi::IbgpState>(Arena*);
template<> ::gobgpapi::ListDefinedSetRequest* Arena::CreateMaybeMessage<::gobgpapi::ListDefinedSetRequest>(Arena*);
template<> ::gobgpapi::ListDefinedSetResponse* Arena::CreateMaybeMessage<::gobgpapi::ListDefinedSetResponse>(Arena*);
template<> ::gobgpapi::ListPathRequest* Arena::CreateMaybeMessage<::gobgpapi::ListPathRequest>(Arena*);
template<> ::gobgpapi::ListPathResponse* Arena::CreateMaybeMessage<::gobgpapi::ListPathResponse>(Arena*);
template<> ::gobgpapi::ListPeerRequest* Arena::CreateMaybeMessage<::gobgpapi::ListPeerRequest>(Arena*);
template<> ::gobgpapi::ListPeerResponse* Arena::CreateMaybeMessage<::gobgpapi::ListPeerResponse>(Arena*);
template<> ::gobgpapi::ListPolicyAssignmentRequest* Arena::CreateMaybeMessage<::gobgpapi::ListPolicyAssignmentRequest>(Arena*);
template<> ::gobgpapi::ListPolicyAssignmentResponse* Arena::CreateMaybeMessage<::gobgpapi::ListPolicyAssignmentResponse>(Arena*);
template<> ::gobgpapi::ListPolicyRequest* Arena::CreateMaybeMessage<::gobgpapi::ListPolicyRequest>(Arena*);
template<> ::gobgpapi::ListPolicyResponse* Arena::CreateMaybeMessage<::gobgpapi::ListPolicyResponse>(Arena*);
template<> ::gobgpapi::ListRpkiRequest* Arena::CreateMaybeMessage<::gobgpapi::ListRpkiRequest>(Arena*);
template<> ::gobgpapi::ListRpkiResponse* Arena::CreateMaybeMessage<::gobgpapi::ListRpkiResponse>(Arena*);
template<> ::gobgpapi::ListRpkiTableRequest* Arena::CreateMaybeMessage<::gobgpapi::ListRpkiTableRequest>(Arena*);
template<> ::gobgpapi::ListRpkiTableResponse* Arena::CreateMaybeMessage<::gobgpapi::ListRpkiTableResponse>(Arena*);
template<> ::gobgpapi::ListStatementRequest* Arena::CreateMaybeMessage<::gobgpapi::ListStatementRequest>(Arena*);
template<> ::gobgpapi::ListStatementResponse* Arena::CreateMaybeMessage<::gobgpapi::ListStatementResponse>(Arena*);
template<> ::gobgpapi::ListVrfRequest* Arena::CreateMaybeMessage<::gobgpapi::ListVrfRequest>(Arena*);
template<> ::gobgpapi::ListVrfResponse* Arena::CreateMaybeMessage<::gobgpapi::ListVrfResponse>(Arena*);
template<> ::gobgpapi::LocalPrefAction* Arena::CreateMaybeMessage<::gobgpapi::LocalPrefAction>(Arena*);
template<> ::gobgpapi::LongLivedGracefulRestart* Arena::CreateMaybeMessage<::gobgpapi::LongLivedGracefulRestart>(Arena*);
template<> ::gobgpapi::LongLivedGracefulRestartConfig* Arena::CreateMaybeMessage<::gobgpapi::LongLivedGracefulRestartConfig>(Arena*);
template<> ::gobgpapi::LongLivedGracefulRestartState* Arena::CreateMaybeMessage<::gobgpapi::LongLivedGracefulRestartState>(Arena*);
template<> ::gobgpapi::MatchSet* Arena::CreateMaybeMessage<::gobgpapi::MatchSet>(Arena*);
template<> ::gobgpapi::MedAction* Arena::CreateMaybeMessage<::gobgpapi::MedAction>(Arena*);
template<> ::gobgpapi::Message* Arena::CreateMaybeMessage<::gobgpapi::Message>(Arena*);
template<> ::gobgpapi::Messages* Arena::CreateMaybeMessage<::gobgpapi::Messages>(Arena*);
template<> ::gobgpapi::MonitorPeerRequest* Arena::CreateMaybeMessage<::gobgpapi::MonitorPeerRequest>(Arena*);
template<> ::gobgpapi::MonitorPeerResponse* Arena::CreateMaybeMessage<::gobgpapi::MonitorPeerResponse>(Arena*);
template<> ::gobgpapi::MonitorTableRequest* Arena::CreateMaybeMessage<::gobgpapi::MonitorTableRequest>(Arena*);
template<> ::gobgpapi::MonitorTableResponse* Arena::CreateMaybeMessage<::gobgpapi::MonitorTableResponse>(Arena*);
template<> ::gobgpapi::MpGracefulRestart* Arena::CreateMaybeMessage<::gobgpapi::MpGracefulRestart>(Arena*);
template<> ::gobgpapi::MpGracefulRestartConfig* Arena::CreateMaybeMessage<::gobgpapi::MpGracefulRestartConfig>(Arena*);
template<> ::gobgpapi::MpGracefulRestartState* Arena::CreateMaybeMessage<::gobgpapi::MpGracefulRestartState>(Arena*);
template<> ::gobgpapi::NexthopAction* Arena::CreateMaybeMessage<::gobgpapi::NexthopAction>(Arena*);
template<> ::gobgpapi::Path* Arena::CreateMaybeMessage<::gobgpapi::Path>(Arena*);
template<> ::gobgpapi::Peer* Arena::CreateMaybeMessage<::gobgpapi::Peer>(Arena*);
template<> ::gobgpapi::PeerConf* Arena::CreateMaybeMessage<::gobgpapi::PeerConf>(Arena*);
template<> ::gobgpapi::PeerGroup* Arena::CreateMaybeMessage<::gobgpapi::PeerGroup>(Arena*);
template<> ::gobgpapi::PeerGroupConf* Arena::CreateMaybeMessage<::gobgpapi::PeerGroupConf>(Arena*);
template<> ::gobgpapi::PeerGroupState* Arena::CreateMaybeMessage<::gobgpapi::PeerGroupState>(Arena*);
template<> ::gobgpapi::PeerState* Arena::CreateMaybeMessage<::gobgpapi::PeerState>(Arena*);
template<> ::gobgpapi::Policy* Arena::CreateMaybeMessage<::gobgpapi::Policy>(Arena*);
template<> ::gobgpapi::PolicyAssignment* Arena::CreateMaybeMessage<::gobgpapi::PolicyAssignment>(Arena*);
template<> ::gobgpapi::Prefix* Arena::CreateMaybeMessage<::gobgpapi::Prefix>(Arena*);
template<> ::gobgpapi::PrefixLimit* Arena::CreateMaybeMessage<::gobgpapi::PrefixLimit>(Arena*);
template<> ::gobgpapi::Queues* Arena::CreateMaybeMessage<::gobgpapi::Queues>(Arena*);
template<> ::gobgpapi::RPKIConf* Arena::CreateMaybeMessage<::gobgpapi::RPKIConf>(Arena*);
template<> ::gobgpapi::RPKIState* Arena::CreateMaybeMessage<::gobgpapi::RPKIState>(Arena*);
template<> ::gobgpapi::ResetPeerRequest* Arena::CreateMaybeMessage<::gobgpapi::ResetPeerRequest>(Arena*);
template<> ::gobgpapi::ResetRpkiRequest* Arena::CreateMaybeMessage<::gobgpapi::ResetRpkiRequest>(Arena*);
template<> ::gobgpapi::Roa* Arena::CreateMaybeMessage<::gobgpapi::Roa>(Arena*);
template<> ::gobgpapi::RouteReflector* Arena::CreateMaybeMessage<::gobgpapi::RouteReflector>(Arena*);
template<> ::gobgpapi::RouteSelectionOptions* Arena::CreateMaybeMessage<::gobgpapi::RouteSelectionOptions>(Arena*);
template<> ::gobgpapi::RouteSelectionOptionsConfig* Arena::CreateMaybeMessage<::gobgpapi::RouteSelectionOptionsConfig>(Arena*);
template<> ::gobgpapi::RouteSelectionOptionsState* Arena::CreateMaybeMessage<::gobgpapi::RouteSelectionOptionsState>(Arena*);
template<> ::gobgpapi::RouteServer* Arena::CreateMaybeMessage<::gobgpapi::RouteServer>(Arena*);
template<> ::gobgpapi::RouteTargetMembership* Arena::CreateMaybeMessage<::gobgpapi::RouteTargetMembership>(Arena*);
template<> ::gobgpapi::RouteTargetMembershipConfig* Arena::CreateMaybeMessage<::gobgpapi::RouteTargetMembershipConfig>(Arena*);
template<> ::gobgpapi::RouteTargetMembershipState* Arena::CreateMaybeMessage<::gobgpapi::RouteTargetMembershipState>(Arena*);
template<> ::gobgpapi::RoutingPolicy* Arena::CreateMaybeMessage<::gobgpapi::RoutingPolicy>(Arena*);
template<> ::gobgpapi::Rpki* Arena::CreateMaybeMessage<::gobgpapi::Rpki>(Arena*);
template<> ::gobgpapi::SetPoliciesRequest* Arena::CreateMaybeMessage<::gobgpapi::SetPoliciesRequest>(Arena*);
template<> ::gobgpapi::SetPolicyAssignmentRequest* Arena::CreateMaybeMessage<::gobgpapi::SetPolicyAssignmentRequest>(Arena*);
template<> ::gobgpapi::ShutdownPeerRequest* Arena::CreateMaybeMessage<::gobgpapi::ShutdownPeerRequest>(Arena*);
template<> ::gobgpapi::StartBgpRequest* Arena::CreateMaybeMessage<::gobgpapi::StartBgpRequest>(Arena*);
template<> ::gobgpapi::Statement* Arena::CreateMaybeMessage<::gobgpapi::Statement>(Arena*);
template<> ::gobgpapi::StopBgpRequest* Arena::CreateMaybeMessage<::gobgpapi::StopBgpRequest>(Arena*);
template<> ::gobgpapi::TableLookupPrefix* Arena::CreateMaybeMessage<::gobgpapi::TableLookupPrefix>(Arena*);
template<> ::gobgpapi::Timers* Arena::CreateMaybeMessage<::gobgpapi::Timers>(Arena*);
template<> ::gobgpapi::TimersConfig* Arena::CreateMaybeMessage<::gobgpapi::TimersConfig>(Arena*);
template<> ::gobgpapi::TimersState* Arena::CreateMaybeMessage<::gobgpapi::TimersState>(Arena*);
template<> ::gobgpapi::Transport* Arena::CreateMaybeMessage<::gobgpapi::Transport>(Arena*);
template<> ::gobgpapi::UpdatePeerGroupRequest* Arena::CreateMaybeMessage<::gobgpapi::UpdatePeerGroupRequest>(Arena*);
template<> ::gobgpapi::UpdatePeerGroupResponse* Arena::CreateMaybeMessage<::gobgpapi::UpdatePeerGroupResponse>(Arena*);
template<> ::gobgpapi::UpdatePeerRequest* Arena::CreateMaybeMessage<::gobgpapi::UpdatePeerRequest>(Arena*);
template<> ::gobgpapi::UpdatePeerResponse* Arena::CreateMaybeMessage<::gobgpapi::UpdatePeerResponse>(Arena*);
template<> ::gobgpapi::UseMultiplePaths* Arena::CreateMaybeMessage<::gobgpapi::UseMultiplePaths>(Arena*);
template<> ::gobgpapi::UseMultiplePathsConfig* Arena::CreateMaybeMessage<::gobgpapi::UseMultiplePathsConfig>(Arena*);
template<> ::gobgpapi::UseMultiplePathsState* Arena::CreateMaybeMessage<::gobgpapi::UseMultiplePathsState>(Arena*);
template<> ::gobgpapi::Validation* Arena::CreateMaybeMessage<::gobgpapi::Validation>(Arena*);
template<> ::gobgpapi::Vrf* Arena::CreateMaybeMessage<::gobgpapi::Vrf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gobgpapi {

enum ResetPeerRequest_SoftResetDirection : int {
  ResetPeerRequest_SoftResetDirection_IN = 0,
  ResetPeerRequest_SoftResetDirection_OUT = 1,
  ResetPeerRequest_SoftResetDirection_BOTH = 2,
  ResetPeerRequest_SoftResetDirection_ResetPeerRequest_SoftResetDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResetPeerRequest_SoftResetDirection_ResetPeerRequest_SoftResetDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResetPeerRequest_SoftResetDirection_IsValid(int value);
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest_SoftResetDirection_SoftResetDirection_MIN = ResetPeerRequest_SoftResetDirection_IN;
constexpr ResetPeerRequest_SoftResetDirection ResetPeerRequest_SoftResetDirection_SoftResetDirection_MAX = ResetPeerRequest_SoftResetDirection_BOTH;
constexpr int ResetPeerRequest_SoftResetDirection_SoftResetDirection_ARRAYSIZE = ResetPeerRequest_SoftResetDirection_SoftResetDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResetPeerRequest_SoftResetDirection_descriptor();
template<typename T>
inline const std::string& ResetPeerRequest_SoftResetDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResetPeerRequest_SoftResetDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResetPeerRequest_SoftResetDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResetPeerRequest_SoftResetDirection_descriptor(), enum_t_value);
}
inline bool ResetPeerRequest_SoftResetDirection_Parse(
    const std::string& name, ResetPeerRequest_SoftResetDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResetPeerRequest_SoftResetDirection>(
    ResetPeerRequest_SoftResetDirection_descriptor(), name, value);
}
enum ListPathRequest_SortType : int {
  ListPathRequest_SortType_NONE = 0,
  ListPathRequest_SortType_PREFIX = 1,
  ListPathRequest_SortType_ListPathRequest_SortType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ListPathRequest_SortType_ListPathRequest_SortType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ListPathRequest_SortType_IsValid(int value);
constexpr ListPathRequest_SortType ListPathRequest_SortType_SortType_MIN = ListPathRequest_SortType_NONE;
constexpr ListPathRequest_SortType ListPathRequest_SortType_SortType_MAX = ListPathRequest_SortType_PREFIX;
constexpr int ListPathRequest_SortType_SortType_ARRAYSIZE = ListPathRequest_SortType_SortType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListPathRequest_SortType_descriptor();
template<typename T>
inline const std::string& ListPathRequest_SortType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListPathRequest_SortType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListPathRequest_SortType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListPathRequest_SortType_descriptor(), enum_t_value);
}
inline bool ListPathRequest_SortType_Parse(
    const std::string& name, ListPathRequest_SortType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListPathRequest_SortType>(
    ListPathRequest_SortType_descriptor(), name, value);
}
enum AddBmpRequest_MonitoringPolicy : int {
  AddBmpRequest_MonitoringPolicy_PRE = 0,
  AddBmpRequest_MonitoringPolicy_POST = 1,
  AddBmpRequest_MonitoringPolicy_BOTH = 2,
  AddBmpRequest_MonitoringPolicy_LOCAL = 3,
  AddBmpRequest_MonitoringPolicy_ALL = 4,
  AddBmpRequest_MonitoringPolicy_AddBmpRequest_MonitoringPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddBmpRequest_MonitoringPolicy_AddBmpRequest_MonitoringPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddBmpRequest_MonitoringPolicy_IsValid(int value);
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MIN = AddBmpRequest_MonitoringPolicy_PRE;
constexpr AddBmpRequest_MonitoringPolicy AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MAX = AddBmpRequest_MonitoringPolicy_ALL;
constexpr int AddBmpRequest_MonitoringPolicy_MonitoringPolicy_ARRAYSIZE = AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddBmpRequest_MonitoringPolicy_descriptor();
template<typename T>
inline const std::string& AddBmpRequest_MonitoringPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddBmpRequest_MonitoringPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddBmpRequest_MonitoringPolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddBmpRequest_MonitoringPolicy_descriptor(), enum_t_value);
}
inline bool AddBmpRequest_MonitoringPolicy_Parse(
    const std::string& name, AddBmpRequest_MonitoringPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddBmpRequest_MonitoringPolicy>(
    AddBmpRequest_MonitoringPolicy_descriptor(), name, value);
}
enum Family_Afi : int {
  Family_Afi_AFI_UNKNOWN = 0,
  Family_Afi_AFI_IP = 1,
  Family_Afi_AFI_IP6 = 2,
  Family_Afi_AFI_L2VPN = 25,
  Family_Afi_AFI_LS = 16388,
  Family_Afi_AFI_OPAQUE = 16397,
  Family_Afi_Family_Afi_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Family_Afi_Family_Afi_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Family_Afi_IsValid(int value);
constexpr Family_Afi Family_Afi_Afi_MIN = Family_Afi_AFI_UNKNOWN;
constexpr Family_Afi Family_Afi_Afi_MAX = Family_Afi_AFI_OPAQUE;
constexpr int Family_Afi_Afi_ARRAYSIZE = Family_Afi_Afi_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Family_Afi_descriptor();
template<typename T>
inline const std::string& Family_Afi_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Family_Afi>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Family_Afi_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Family_Afi_descriptor(), enum_t_value);
}
inline bool Family_Afi_Parse(
    const std::string& name, Family_Afi* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Family_Afi>(
    Family_Afi_descriptor(), name, value);
}
enum Family_Safi : int {
  Family_Safi_SAFI_UNKNOWN = 0,
  Family_Safi_SAFI_UNICAST = 1,
  Family_Safi_SAFI_MULTICAST = 2,
  Family_Safi_SAFI_MPLS_LABEL = 4,
  Family_Safi_SAFI_ENCAPSULATION = 7,
  Family_Safi_SAFI_VPLS = 65,
  Family_Safi_SAFI_EVPN = 70,
  Family_Safi_SAFI_LS = 71,
  Family_Safi_SAFI_MPLS_VPN = 128,
  Family_Safi_SAFI_MPLS_VPN_MULTICAST = 129,
  Family_Safi_SAFI_ROUTE_TARGET_CONSTRAINTS = 132,
  Family_Safi_SAFI_FLOW_SPEC_UNICAST = 133,
  Family_Safi_SAFI_FLOW_SPEC_VPN = 134,
  Family_Safi_SAFI_KEY_VALUE = 241,
  Family_Safi_Family_Safi_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Family_Safi_Family_Safi_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Family_Safi_IsValid(int value);
constexpr Family_Safi Family_Safi_Safi_MIN = Family_Safi_SAFI_UNKNOWN;
constexpr Family_Safi Family_Safi_Safi_MAX = Family_Safi_SAFI_KEY_VALUE;
constexpr int Family_Safi_Safi_ARRAYSIZE = Family_Safi_Safi_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Family_Safi_descriptor();
template<typename T>
inline const std::string& Family_Safi_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Family_Safi>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Family_Safi_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Family_Safi_descriptor(), enum_t_value);
}
inline bool Family_Safi_Parse(
    const std::string& name, Family_Safi* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Family_Safi>(
    Family_Safi_descriptor(), name, value);
}
enum Validation_State : int {
  Validation_State_STATE_NONE = 0,
  Validation_State_STATE_NOT_FOUND = 1,
  Validation_State_STATE_VALID = 2,
  Validation_State_STATE_INVALID = 3,
  Validation_State_Validation_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Validation_State_Validation_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Validation_State_IsValid(int value);
constexpr Validation_State Validation_State_State_MIN = Validation_State_STATE_NONE;
constexpr Validation_State Validation_State_State_MAX = Validation_State_STATE_INVALID;
constexpr int Validation_State_State_ARRAYSIZE = Validation_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Validation_State_descriptor();
template<typename T>
inline const std::string& Validation_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Validation_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Validation_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Validation_State_descriptor(), enum_t_value);
}
inline bool Validation_State_Parse(
    const std::string& name, Validation_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Validation_State>(
    Validation_State_descriptor(), name, value);
}
enum Validation_Reason : int {
  Validation_Reason_REASOT_NONE = 0,
  Validation_Reason_REASON_AS = 1,
  Validation_Reason_REASON_LENGTH = 2,
  Validation_Reason_Validation_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Validation_Reason_Validation_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Validation_Reason_IsValid(int value);
constexpr Validation_Reason Validation_Reason_Reason_MIN = Validation_Reason_REASOT_NONE;
constexpr Validation_Reason Validation_Reason_Reason_MAX = Validation_Reason_REASON_LENGTH;
constexpr int Validation_Reason_Reason_ARRAYSIZE = Validation_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Validation_Reason_descriptor();
template<typename T>
inline const std::string& Validation_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Validation_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Validation_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Validation_Reason_descriptor(), enum_t_value);
}
inline bool Validation_Reason_Parse(
    const std::string& name, Validation_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Validation_Reason>(
    Validation_Reason_descriptor(), name, value);
}
enum PeerConf_RemovePrivateAs : int {
  PeerConf_RemovePrivateAs_NONE = 0,
  PeerConf_RemovePrivateAs_ALL = 1,
  PeerConf_RemovePrivateAs_REPLACE = 2,
  PeerConf_RemovePrivateAs_PeerConf_RemovePrivateAs_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeerConf_RemovePrivateAs_PeerConf_RemovePrivateAs_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeerConf_RemovePrivateAs_IsValid(int value);
constexpr PeerConf_RemovePrivateAs PeerConf_RemovePrivateAs_RemovePrivateAs_MIN = PeerConf_RemovePrivateAs_NONE;
constexpr PeerConf_RemovePrivateAs PeerConf_RemovePrivateAs_RemovePrivateAs_MAX = PeerConf_RemovePrivateAs_REPLACE;
constexpr int PeerConf_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE = PeerConf_RemovePrivateAs_RemovePrivateAs_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerConf_RemovePrivateAs_descriptor();
template<typename T>
inline const std::string& PeerConf_RemovePrivateAs_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerConf_RemovePrivateAs>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerConf_RemovePrivateAs_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerConf_RemovePrivateAs_descriptor(), enum_t_value);
}
inline bool PeerConf_RemovePrivateAs_Parse(
    const std::string& name, PeerConf_RemovePrivateAs* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerConf_RemovePrivateAs>(
    PeerConf_RemovePrivateAs_descriptor(), name, value);
}
enum PeerGroupConf_RemovePrivateAs : int {
  PeerGroupConf_RemovePrivateAs_NONE = 0,
  PeerGroupConf_RemovePrivateAs_ALL = 1,
  PeerGroupConf_RemovePrivateAs_REPLACE = 2,
  PeerGroupConf_RemovePrivateAs_PeerGroupConf_RemovePrivateAs_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeerGroupConf_RemovePrivateAs_PeerGroupConf_RemovePrivateAs_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeerGroupConf_RemovePrivateAs_IsValid(int value);
constexpr PeerGroupConf_RemovePrivateAs PeerGroupConf_RemovePrivateAs_RemovePrivateAs_MIN = PeerGroupConf_RemovePrivateAs_NONE;
constexpr PeerGroupConf_RemovePrivateAs PeerGroupConf_RemovePrivateAs_RemovePrivateAs_MAX = PeerGroupConf_RemovePrivateAs_REPLACE;
constexpr int PeerGroupConf_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE = PeerGroupConf_RemovePrivateAs_RemovePrivateAs_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerGroupConf_RemovePrivateAs_descriptor();
template<typename T>
inline const std::string& PeerGroupConf_RemovePrivateAs_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerGroupConf_RemovePrivateAs>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerGroupConf_RemovePrivateAs_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerGroupConf_RemovePrivateAs_descriptor(), enum_t_value);
}
inline bool PeerGroupConf_RemovePrivateAs_Parse(
    const std::string& name, PeerGroupConf_RemovePrivateAs* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerGroupConf_RemovePrivateAs>(
    PeerGroupConf_RemovePrivateAs_descriptor(), name, value);
}
enum PeerGroupState_RemovePrivateAs : int {
  PeerGroupState_RemovePrivateAs_NONE = 0,
  PeerGroupState_RemovePrivateAs_ALL = 1,
  PeerGroupState_RemovePrivateAs_REPLACE = 2,
  PeerGroupState_RemovePrivateAs_PeerGroupState_RemovePrivateAs_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeerGroupState_RemovePrivateAs_PeerGroupState_RemovePrivateAs_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeerGroupState_RemovePrivateAs_IsValid(int value);
constexpr PeerGroupState_RemovePrivateAs PeerGroupState_RemovePrivateAs_RemovePrivateAs_MIN = PeerGroupState_RemovePrivateAs_NONE;
constexpr PeerGroupState_RemovePrivateAs PeerGroupState_RemovePrivateAs_RemovePrivateAs_MAX = PeerGroupState_RemovePrivateAs_REPLACE;
constexpr int PeerGroupState_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE = PeerGroupState_RemovePrivateAs_RemovePrivateAs_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerGroupState_RemovePrivateAs_descriptor();
template<typename T>
inline const std::string& PeerGroupState_RemovePrivateAs_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerGroupState_RemovePrivateAs>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerGroupState_RemovePrivateAs_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerGroupState_RemovePrivateAs_descriptor(), enum_t_value);
}
inline bool PeerGroupState_RemovePrivateAs_Parse(
    const std::string& name, PeerGroupState_RemovePrivateAs* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerGroupState_RemovePrivateAs>(
    PeerGroupState_RemovePrivateAs_descriptor(), name, value);
}
enum PeerState_SessionState : int {
  PeerState_SessionState_UNKNOWN = 0,
  PeerState_SessionState_IDLE = 1,
  PeerState_SessionState_CONNECT = 2,
  PeerState_SessionState_ACTIVE = 3,
  PeerState_SessionState_OPENSENT = 4,
  PeerState_SessionState_OPENCONFIRM = 5,
  PeerState_SessionState_ESTABLISHED = 6,
  PeerState_SessionState_PeerState_SessionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeerState_SessionState_PeerState_SessionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeerState_SessionState_IsValid(int value);
constexpr PeerState_SessionState PeerState_SessionState_SessionState_MIN = PeerState_SessionState_UNKNOWN;
constexpr PeerState_SessionState PeerState_SessionState_SessionState_MAX = PeerState_SessionState_ESTABLISHED;
constexpr int PeerState_SessionState_SessionState_ARRAYSIZE = PeerState_SessionState_SessionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_SessionState_descriptor();
template<typename T>
inline const std::string& PeerState_SessionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerState_SessionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerState_SessionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerState_SessionState_descriptor(), enum_t_value);
}
inline bool PeerState_SessionState_Parse(
    const std::string& name, PeerState_SessionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerState_SessionState>(
    PeerState_SessionState_descriptor(), name, value);
}
enum PeerState_AdminState : int {
  PeerState_AdminState_UP = 0,
  PeerState_AdminState_DOWN = 1,
  PeerState_AdminState_PFX_CT = 2,
  PeerState_AdminState_PeerState_AdminState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeerState_AdminState_PeerState_AdminState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeerState_AdminState_IsValid(int value);
constexpr PeerState_AdminState PeerState_AdminState_AdminState_MIN = PeerState_AdminState_UP;
constexpr PeerState_AdminState PeerState_AdminState_AdminState_MAX = PeerState_AdminState_PFX_CT;
constexpr int PeerState_AdminState_AdminState_ARRAYSIZE = PeerState_AdminState_AdminState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerState_AdminState_descriptor();
template<typename T>
inline const std::string& PeerState_AdminState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerState_AdminState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerState_AdminState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerState_AdminState_descriptor(), enum_t_value);
}
inline bool PeerState_AdminState_Parse(
    const std::string& name, PeerState_AdminState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerState_AdminState>(
    PeerState_AdminState_descriptor(), name, value);
}
enum Conditions_RouteType : int {
  Conditions_RouteType_ROUTE_TYPE_NONE = 0,
  Conditions_RouteType_ROUTE_TYPE_INTERNAL = 1,
  Conditions_RouteType_ROUTE_TYPE_EXTERNAL = 2,
  Conditions_RouteType_ROUTE_TYPE_LOCAL = 3,
  Conditions_RouteType_Conditions_RouteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Conditions_RouteType_Conditions_RouteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Conditions_RouteType_IsValid(int value);
constexpr Conditions_RouteType Conditions_RouteType_RouteType_MIN = Conditions_RouteType_ROUTE_TYPE_NONE;
constexpr Conditions_RouteType Conditions_RouteType_RouteType_MAX = Conditions_RouteType_ROUTE_TYPE_LOCAL;
constexpr int Conditions_RouteType_RouteType_ARRAYSIZE = Conditions_RouteType_RouteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Conditions_RouteType_descriptor();
template<typename T>
inline const std::string& Conditions_RouteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Conditions_RouteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Conditions_RouteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Conditions_RouteType_descriptor(), enum_t_value);
}
inline bool Conditions_RouteType_Parse(
    const std::string& name, Conditions_RouteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Conditions_RouteType>(
    Conditions_RouteType_descriptor(), name, value);
}
enum TableType : int {
  GLOBAL = 0,
  LOCAL = 1,
  ADJ_IN = 2,
  ADJ_OUT = 3,
  VRF = 4,
  TableType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TableType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TableType_IsValid(int value);
constexpr TableType TableType_MIN = GLOBAL;
constexpr TableType TableType_MAX = VRF;
constexpr int TableType_ARRAYSIZE = TableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableType_descriptor();
template<typename T>
inline const std::string& TableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableType_descriptor(), enum_t_value);
}
inline bool TableType_Parse(
    const std::string& name, TableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableType>(
    TableType_descriptor(), name, value);
}
enum TableLookupOption : int {
  LOOKUP_EXACT = 0,
  LOOKUP_LONGER = 1,
  LOOKUP_SHORTER = 2,
  TableLookupOption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TableLookupOption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TableLookupOption_IsValid(int value);
constexpr TableLookupOption TableLookupOption_MIN = LOOKUP_EXACT;
constexpr TableLookupOption TableLookupOption_MAX = LOOKUP_SHORTER;
constexpr int TableLookupOption_ARRAYSIZE = TableLookupOption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableLookupOption_descriptor();
template<typename T>
inline const std::string& TableLookupOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TableLookupOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TableLookupOption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TableLookupOption_descriptor(), enum_t_value);
}
inline bool TableLookupOption_Parse(
    const std::string& name, TableLookupOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TableLookupOption>(
    TableLookupOption_descriptor(), name, value);
}
enum DefinedType : int {
  PREFIX = 0,
  NEIGHBOR = 1,
  TAG = 2,
  AS_PATH = 3,
  COMMUNITY = 4,
  EXT_COMMUNITY = 5,
  LARGE_COMMUNITY = 6,
  NEXT_HOP = 7,
  DefinedType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DefinedType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DefinedType_IsValid(int value);
constexpr DefinedType DefinedType_MIN = PREFIX;
constexpr DefinedType DefinedType_MAX = NEXT_HOP;
constexpr int DefinedType_ARRAYSIZE = DefinedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DefinedType_descriptor();
template<typename T>
inline const std::string& DefinedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DefinedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DefinedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DefinedType_descriptor(), enum_t_value);
}
inline bool DefinedType_Parse(
    const std::string& name, DefinedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DefinedType>(
    DefinedType_descriptor(), name, value);
}
enum MatchType : int {
  ANY = 0,
  ALL = 1,
  INVERT = 2,
  MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MatchType_IsValid(int value);
constexpr MatchType MatchType_MIN = ANY;
constexpr MatchType MatchType_MAX = INVERT;
constexpr int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor();
template<typename T>
inline const std::string& MatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchType_descriptor(), enum_t_value);
}
inline bool MatchType_Parse(
    const std::string& name, MatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum AsPathLengthType : int {
  EQ = 0,
  GE = 1,
  LE = 2,
  AsPathLengthType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AsPathLengthType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AsPathLengthType_IsValid(int value);
constexpr AsPathLengthType AsPathLengthType_MIN = EQ;
constexpr AsPathLengthType AsPathLengthType_MAX = LE;
constexpr int AsPathLengthType_ARRAYSIZE = AsPathLengthType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AsPathLengthType_descriptor();
template<typename T>
inline const std::string& AsPathLengthType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AsPathLengthType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AsPathLengthType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AsPathLengthType_descriptor(), enum_t_value);
}
inline bool AsPathLengthType_Parse(
    const std::string& name, AsPathLengthType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AsPathLengthType>(
    AsPathLengthType_descriptor(), name, value);
}
enum RouteAction : int {
  NONE = 0,
  ACCEPT = 1,
  REJECT = 2,
  RouteAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RouteAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RouteAction_IsValid(int value);
constexpr RouteAction RouteAction_MIN = NONE;
constexpr RouteAction RouteAction_MAX = REJECT;
constexpr int RouteAction_ARRAYSIZE = RouteAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RouteAction_descriptor();
template<typename T>
inline const std::string& RouteAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RouteAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RouteAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RouteAction_descriptor(), enum_t_value);
}
inline bool RouteAction_Parse(
    const std::string& name, RouteAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RouteAction>(
    RouteAction_descriptor(), name, value);
}
enum CommunityActionType : int {
  COMMUNITY_ADD = 0,
  COMMUNITY_REMOVE = 1,
  COMMUNITY_REPLACE = 2,
  CommunityActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommunityActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommunityActionType_IsValid(int value);
constexpr CommunityActionType CommunityActionType_MIN = COMMUNITY_ADD;
constexpr CommunityActionType CommunityActionType_MAX = COMMUNITY_REPLACE;
constexpr int CommunityActionType_ARRAYSIZE = CommunityActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommunityActionType_descriptor();
template<typename T>
inline const std::string& CommunityActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommunityActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommunityActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommunityActionType_descriptor(), enum_t_value);
}
inline bool CommunityActionType_Parse(
    const std::string& name, CommunityActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommunityActionType>(
    CommunityActionType_descriptor(), name, value);
}
enum MedActionType : int {
  MED_MOD = 0,
  MED_REPLACE = 1,
  MedActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MedActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MedActionType_IsValid(int value);
constexpr MedActionType MedActionType_MIN = MED_MOD;
constexpr MedActionType MedActionType_MAX = MED_REPLACE;
constexpr int MedActionType_ARRAYSIZE = MedActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MedActionType_descriptor();
template<typename T>
inline const std::string& MedActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MedActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MedActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MedActionType_descriptor(), enum_t_value);
}
inline bool MedActionType_Parse(
    const std::string& name, MedActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MedActionType>(
    MedActionType_descriptor(), name, value);
}
enum PolicyDirection : int {
  UNKNOWN = 0,
  IMPORT = 1,
  EXPORT = 2,
  PolicyDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PolicyDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PolicyDirection_IsValid(int value);
constexpr PolicyDirection PolicyDirection_MIN = UNKNOWN;
constexpr PolicyDirection PolicyDirection_MAX = EXPORT;
constexpr int PolicyDirection_ARRAYSIZE = PolicyDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyDirection_descriptor();
template<typename T>
inline const std::string& PolicyDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolicyDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolicyDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolicyDirection_descriptor(), enum_t_value);
}
inline bool PolicyDirection_Parse(
    const std::string& name, PolicyDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolicyDirection>(
    PolicyDirection_descriptor(), name, value);
}
// ===================================================================

class StartBgpRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.StartBgpRequest) */ {
 public:
  StartBgpRequest();
  virtual ~StartBgpRequest();

  StartBgpRequest(const StartBgpRequest& from);
  StartBgpRequest(StartBgpRequest&& from) noexcept
    : StartBgpRequest() {
    *this = ::std::move(from);
  }

  inline StartBgpRequest& operator=(const StartBgpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBgpRequest& operator=(StartBgpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartBgpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartBgpRequest* internal_default_instance() {
    return reinterpret_cast<const StartBgpRequest*>(
               &_StartBgpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartBgpRequest& a, StartBgpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBgpRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartBgpRequest* New() const final {
    return CreateMaybeMessage<StartBgpRequest>(nullptr);
  }

  StartBgpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartBgpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartBgpRequest& from);
  void MergeFrom(const StartBgpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBgpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.StartBgpRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalFieldNumber = 1,
  };
  // .gobgpapi.Global global = 1;
  bool has_global() const;
  private:
  bool _internal_has_global() const;
  public:
  void clear_global();
  const ::gobgpapi::Global& global() const;
  ::gobgpapi::Global* release_global();
  ::gobgpapi::Global* mutable_global();
  void set_allocated_global(::gobgpapi::Global* global);
  private:
  const ::gobgpapi::Global& _internal_global() const;
  ::gobgpapi::Global* _internal_mutable_global();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.StartBgpRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Global* global_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class StopBgpRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.StopBgpRequest) */ {
 public:
  StopBgpRequest();
  virtual ~StopBgpRequest();

  StopBgpRequest(const StopBgpRequest& from);
  StopBgpRequest(StopBgpRequest&& from) noexcept
    : StopBgpRequest() {
    *this = ::std::move(from);
  }

  inline StopBgpRequest& operator=(const StopBgpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopBgpRequest& operator=(StopBgpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopBgpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopBgpRequest* internal_default_instance() {
    return reinterpret_cast<const StopBgpRequest*>(
               &_StopBgpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopBgpRequest& a, StopBgpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopBgpRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopBgpRequest* New() const final {
    return CreateMaybeMessage<StopBgpRequest>(nullptr);
  }

  StopBgpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopBgpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopBgpRequest& from);
  void MergeFrom(const StopBgpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopBgpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.StopBgpRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.StopBgpRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class GetBgpRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetBgpRequest) */ {
 public:
  GetBgpRequest();
  virtual ~GetBgpRequest();

  GetBgpRequest(const GetBgpRequest& from);
  GetBgpRequest(GetBgpRequest&& from) noexcept
    : GetBgpRequest() {
    *this = ::std::move(from);
  }

  inline GetBgpRequest& operator=(const GetBgpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBgpRequest& operator=(GetBgpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBgpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBgpRequest* internal_default_instance() {
    return reinterpret_cast<const GetBgpRequest*>(
               &_GetBgpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetBgpRequest& a, GetBgpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBgpRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBgpRequest* New() const final {
    return CreateMaybeMessage<GetBgpRequest>(nullptr);
  }

  GetBgpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBgpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBgpRequest& from);
  void MergeFrom(const GetBgpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBgpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.GetBgpRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.GetBgpRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class GetBgpResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetBgpResponse) */ {
 public:
  GetBgpResponse();
  virtual ~GetBgpResponse();

  GetBgpResponse(const GetBgpResponse& from);
  GetBgpResponse(GetBgpResponse&& from) noexcept
    : GetBgpResponse() {
    *this = ::std::move(from);
  }

  inline GetBgpResponse& operator=(const GetBgpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBgpResponse& operator=(GetBgpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBgpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBgpResponse* internal_default_instance() {
    return reinterpret_cast<const GetBgpResponse*>(
               &_GetBgpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBgpResponse& a, GetBgpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBgpResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBgpResponse* New() const final {
    return CreateMaybeMessage<GetBgpResponse>(nullptr);
  }

  GetBgpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBgpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBgpResponse& from);
  void MergeFrom(const GetBgpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBgpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.GetBgpResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalFieldNumber = 1,
  };
  // .gobgpapi.Global global = 1;
  bool has_global() const;
  private:
  bool _internal_has_global() const;
  public:
  void clear_global();
  const ::gobgpapi::Global& global() const;
  ::gobgpapi::Global* release_global();
  ::gobgpapi::Global* mutable_global();
  void set_allocated_global(::gobgpapi::Global* global);
  private:
  const ::gobgpapi::Global& _internal_global() const;
  ::gobgpapi::Global* _internal_mutable_global();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.GetBgpResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Global* global_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPeerRequest) */ {
 public:
  AddPeerRequest();
  virtual ~AddPeerRequest();

  AddPeerRequest(const AddPeerRequest& from);
  AddPeerRequest(AddPeerRequest&& from) noexcept
    : AddPeerRequest() {
    *this = ::std::move(from);
  }

  inline AddPeerRequest& operator=(const AddPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerRequest& operator=(AddPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerRequest* internal_default_instance() {
    return reinterpret_cast<const AddPeerRequest*>(
               &_AddPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddPeerRequest& a, AddPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerRequest* New() const final {
    return CreateMaybeMessage<AddPeerRequest>(nullptr);
  }

  AddPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPeerRequest& from);
  void MergeFrom(const AddPeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
  };
  // .gobgpapi.Peer peer = 1;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::gobgpapi::Peer& peer() const;
  ::gobgpapi::Peer* release_peer();
  ::gobgpapi::Peer* mutable_peer();
  void set_allocated_peer(::gobgpapi::Peer* peer);
  private:
  const ::gobgpapi::Peer& _internal_peer() const;
  ::gobgpapi::Peer* _internal_mutable_peer();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Peer* peer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeletePeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePeerRequest) */ {
 public:
  DeletePeerRequest();
  virtual ~DeletePeerRequest();

  DeletePeerRequest(const DeletePeerRequest& from);
  DeletePeerRequest(DeletePeerRequest&& from) noexcept
    : DeletePeerRequest() {
    *this = ::std::move(from);
  }

  inline DeletePeerRequest& operator=(const DeletePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePeerRequest& operator=(DeletePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePeerRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePeerRequest*>(
               &_DeletePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeletePeerRequest& a, DeletePeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePeerRequest* New() const final {
    return CreateMaybeMessage<DeletePeerRequest>(nullptr);
  }

  DeletePeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePeerRequest& from);
  void MergeFrom(const DeletePeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeletePeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kInterfaceFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string interface = 2;
  void clear_interface();
  const std::string& interface() const;
  void set_interface(const std::string& value);
  void set_interface(std::string&& value);
  void set_interface(const char* value);
  void set_interface(const char* value, size_t size);
  std::string* mutable_interface();
  std::string* release_interface();
  void set_allocated_interface(std::string* interface);
  private:
  const std::string& _internal_interface() const;
  void _internal_set_interface(const std::string& value);
  std::string* _internal_mutable_interface();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPeerRequest) */ {
 public:
  ListPeerRequest();
  virtual ~ListPeerRequest();

  ListPeerRequest(const ListPeerRequest& from);
  ListPeerRequest(ListPeerRequest&& from) noexcept
    : ListPeerRequest() {
    *this = ::std::move(from);
  }

  inline ListPeerRequest& operator=(const ListPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPeerRequest& operator=(ListPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPeerRequest* internal_default_instance() {
    return reinterpret_cast<const ListPeerRequest*>(
               &_ListPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListPeerRequest& a, ListPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPeerRequest* New() const final {
    return CreateMaybeMessage<ListPeerRequest>(nullptr);
  }

  ListPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPeerRequest& from);
  void MergeFrom(const ListPeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kEnableAdvertisedFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool enableAdvertised = 2;
  void clear_enableadvertised();
  bool enableadvertised() const;
  void set_enableadvertised(bool value);
  private:
  bool _internal_enableadvertised() const;
  void _internal_set_enableadvertised(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool enableadvertised_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPeerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPeerResponse) */ {
 public:
  ListPeerResponse();
  virtual ~ListPeerResponse();

  ListPeerResponse(const ListPeerResponse& from);
  ListPeerResponse(ListPeerResponse&& from) noexcept
    : ListPeerResponse() {
    *this = ::std::move(from);
  }

  inline ListPeerResponse& operator=(const ListPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPeerResponse& operator=(ListPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPeerResponse* internal_default_instance() {
    return reinterpret_cast<const ListPeerResponse*>(
               &_ListPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListPeerResponse& a, ListPeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPeerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPeerResponse* New() const final {
    return CreateMaybeMessage<ListPeerResponse>(nullptr);
  }

  ListPeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPeerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPeerResponse& from);
  void MergeFrom(const ListPeerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPeerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPeerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
  };
  // .gobgpapi.Peer peer = 1;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::gobgpapi::Peer& peer() const;
  ::gobgpapi::Peer* release_peer();
  ::gobgpapi::Peer* mutable_peer();
  void set_allocated_peer(::gobgpapi::Peer* peer);
  private:
  const ::gobgpapi::Peer& _internal_peer() const;
  ::gobgpapi::Peer* _internal_mutable_peer();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPeerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Peer* peer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class UpdatePeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UpdatePeerRequest) */ {
 public:
  UpdatePeerRequest();
  virtual ~UpdatePeerRequest();

  UpdatePeerRequest(const UpdatePeerRequest& from);
  UpdatePeerRequest(UpdatePeerRequest&& from) noexcept
    : UpdatePeerRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePeerRequest& operator=(const UpdatePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePeerRequest& operator=(UpdatePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePeerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePeerRequest*>(
               &_UpdatePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdatePeerRequest& a, UpdatePeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePeerRequest* New() const final {
    return CreateMaybeMessage<UpdatePeerRequest>(nullptr);
  }

  UpdatePeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePeerRequest& from);
  void MergeFrom(const UpdatePeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UpdatePeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
    kDoSoftResetInFieldNumber = 2,
  };
  // .gobgpapi.Peer peer = 1;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::gobgpapi::Peer& peer() const;
  ::gobgpapi::Peer* release_peer();
  ::gobgpapi::Peer* mutable_peer();
  void set_allocated_peer(::gobgpapi::Peer* peer);
  private:
  const ::gobgpapi::Peer& _internal_peer() const;
  ::gobgpapi::Peer* _internal_mutable_peer();
  public:

  // bool do_soft_reset_in = 2;
  void clear_do_soft_reset_in();
  bool do_soft_reset_in() const;
  void set_do_soft_reset_in(bool value);
  private:
  bool _internal_do_soft_reset_in() const;
  void _internal_set_do_soft_reset_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UpdatePeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Peer* peer_;
  bool do_soft_reset_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class UpdatePeerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UpdatePeerResponse) */ {
 public:
  UpdatePeerResponse();
  virtual ~UpdatePeerResponse();

  UpdatePeerResponse(const UpdatePeerResponse& from);
  UpdatePeerResponse(UpdatePeerResponse&& from) noexcept
    : UpdatePeerResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePeerResponse& operator=(const UpdatePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePeerResponse& operator=(UpdatePeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePeerResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePeerResponse*>(
               &_UpdatePeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdatePeerResponse& a, UpdatePeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePeerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePeerResponse* New() const final {
    return CreateMaybeMessage<UpdatePeerResponse>(nullptr);
  }

  UpdatePeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePeerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePeerResponse& from);
  void MergeFrom(const UpdatePeerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePeerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UpdatePeerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeedsSoftResetInFieldNumber = 1,
  };
  // bool needs_soft_reset_in = 1;
  void clear_needs_soft_reset_in();
  bool needs_soft_reset_in() const;
  void set_needs_soft_reset_in(bool value);
  private:
  bool _internal_needs_soft_reset_in() const;
  void _internal_set_needs_soft_reset_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UpdatePeerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool needs_soft_reset_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ResetPeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ResetPeerRequest) */ {
 public:
  ResetPeerRequest();
  virtual ~ResetPeerRequest();

  ResetPeerRequest(const ResetPeerRequest& from);
  ResetPeerRequest(ResetPeerRequest&& from) noexcept
    : ResetPeerRequest() {
    *this = ::std::move(from);
  }

  inline ResetPeerRequest& operator=(const ResetPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetPeerRequest& operator=(ResetPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetPeerRequest* internal_default_instance() {
    return reinterpret_cast<const ResetPeerRequest*>(
               &_ResetPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ResetPeerRequest& a, ResetPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetPeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetPeerRequest* New() const final {
    return CreateMaybeMessage<ResetPeerRequest>(nullptr);
  }

  ResetPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetPeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetPeerRequest& from);
  void MergeFrom(const ResetPeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetPeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ResetPeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResetPeerRequest_SoftResetDirection SoftResetDirection;
  static constexpr SoftResetDirection IN =
    ResetPeerRequest_SoftResetDirection_IN;
  static constexpr SoftResetDirection OUT =
    ResetPeerRequest_SoftResetDirection_OUT;
  static constexpr SoftResetDirection BOTH =
    ResetPeerRequest_SoftResetDirection_BOTH;
  static inline bool SoftResetDirection_IsValid(int value) {
    return ResetPeerRequest_SoftResetDirection_IsValid(value);
  }
  static constexpr SoftResetDirection SoftResetDirection_MIN =
    ResetPeerRequest_SoftResetDirection_SoftResetDirection_MIN;
  static constexpr SoftResetDirection SoftResetDirection_MAX =
    ResetPeerRequest_SoftResetDirection_SoftResetDirection_MAX;
  static constexpr int SoftResetDirection_ARRAYSIZE =
    ResetPeerRequest_SoftResetDirection_SoftResetDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SoftResetDirection_descriptor() {
    return ResetPeerRequest_SoftResetDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& SoftResetDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SoftResetDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SoftResetDirection_Name.");
    return ResetPeerRequest_SoftResetDirection_Name(enum_t_value);
  }
  static inline bool SoftResetDirection_Parse(const std::string& name,
      SoftResetDirection* value) {
    return ResetPeerRequest_SoftResetDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCommunicationFieldNumber = 2,
    kSoftFieldNumber = 3,
    kDirectionFieldNumber = 4,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string communication = 2;
  void clear_communication();
  const std::string& communication() const;
  void set_communication(const std::string& value);
  void set_communication(std::string&& value);
  void set_communication(const char* value);
  void set_communication(const char* value, size_t size);
  std::string* mutable_communication();
  std::string* release_communication();
  void set_allocated_communication(std::string* communication);
  private:
  const std::string& _internal_communication() const;
  void _internal_set_communication(const std::string& value);
  std::string* _internal_mutable_communication();
  public:

  // bool soft = 3;
  void clear_soft();
  bool soft() const;
  void set_soft(bool value);
  private:
  bool _internal_soft() const;
  void _internal_set_soft(bool value);
  public:

  // .gobgpapi.ResetPeerRequest.SoftResetDirection direction = 4;
  void clear_direction();
  ::gobgpapi::ResetPeerRequest_SoftResetDirection direction() const;
  void set_direction(::gobgpapi::ResetPeerRequest_SoftResetDirection value);
  private:
  ::gobgpapi::ResetPeerRequest_SoftResetDirection _internal_direction() const;
  void _internal_set_direction(::gobgpapi::ResetPeerRequest_SoftResetDirection value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ResetPeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr communication_;
  bool soft_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ShutdownPeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ShutdownPeerRequest) */ {
 public:
  ShutdownPeerRequest();
  virtual ~ShutdownPeerRequest();

  ShutdownPeerRequest(const ShutdownPeerRequest& from);
  ShutdownPeerRequest(ShutdownPeerRequest&& from) noexcept
    : ShutdownPeerRequest() {
    *this = ::std::move(from);
  }

  inline ShutdownPeerRequest& operator=(const ShutdownPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownPeerRequest& operator=(ShutdownPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownPeerRequest* internal_default_instance() {
    return reinterpret_cast<const ShutdownPeerRequest*>(
               &_ShutdownPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ShutdownPeerRequest& a, ShutdownPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownPeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownPeerRequest* New() const final {
    return CreateMaybeMessage<ShutdownPeerRequest>(nullptr);
  }

  ShutdownPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownPeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownPeerRequest& from);
  void MergeFrom(const ShutdownPeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownPeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ShutdownPeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCommunicationFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string communication = 2;
  void clear_communication();
  const std::string& communication() const;
  void set_communication(const std::string& value);
  void set_communication(std::string&& value);
  void set_communication(const char* value);
  void set_communication(const char* value, size_t size);
  std::string* mutable_communication();
  std::string* release_communication();
  void set_allocated_communication(std::string* communication);
  private:
  const std::string& _internal_communication() const;
  void _internal_set_communication(const std::string& value);
  std::string* _internal_mutable_communication();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ShutdownPeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr communication_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class EnablePeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnablePeerRequest) */ {
 public:
  EnablePeerRequest();
  virtual ~EnablePeerRequest();

  EnablePeerRequest(const EnablePeerRequest& from);
  EnablePeerRequest(EnablePeerRequest&& from) noexcept
    : EnablePeerRequest() {
    *this = ::std::move(from);
  }

  inline EnablePeerRequest& operator=(const EnablePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnablePeerRequest& operator=(EnablePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnablePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnablePeerRequest* internal_default_instance() {
    return reinterpret_cast<const EnablePeerRequest*>(
               &_EnablePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EnablePeerRequest& a, EnablePeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnablePeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnablePeerRequest* New() const final {
    return CreateMaybeMessage<EnablePeerRequest>(nullptr);
  }

  EnablePeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnablePeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnablePeerRequest& from);
  void MergeFrom(const EnablePeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnablePeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EnablePeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EnablePeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DisablePeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisablePeerRequest) */ {
 public:
  DisablePeerRequest();
  virtual ~DisablePeerRequest();

  DisablePeerRequest(const DisablePeerRequest& from);
  DisablePeerRequest(DisablePeerRequest&& from) noexcept
    : DisablePeerRequest() {
    *this = ::std::move(from);
  }

  inline DisablePeerRequest& operator=(const DisablePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisablePeerRequest& operator=(DisablePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisablePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisablePeerRequest* internal_default_instance() {
    return reinterpret_cast<const DisablePeerRequest*>(
               &_DisablePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DisablePeerRequest& a, DisablePeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisablePeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisablePeerRequest* New() const final {
    return CreateMaybeMessage<DisablePeerRequest>(nullptr);
  }

  DisablePeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisablePeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisablePeerRequest& from);
  void MergeFrom(const DisablePeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisablePeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DisablePeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCommunicationFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string communication = 2;
  void clear_communication();
  const std::string& communication() const;
  void set_communication(const std::string& value);
  void set_communication(std::string&& value);
  void set_communication(const char* value);
  void set_communication(const char* value, size_t size);
  std::string* mutable_communication();
  std::string* release_communication();
  void set_allocated_communication(std::string* communication);
  private:
  const std::string& _internal_communication() const;
  void _internal_set_communication(const std::string& value);
  std::string* _internal_mutable_communication();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DisablePeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr communication_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MonitorPeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MonitorPeerRequest) */ {
 public:
  MonitorPeerRequest();
  virtual ~MonitorPeerRequest();

  MonitorPeerRequest(const MonitorPeerRequest& from);
  MonitorPeerRequest(MonitorPeerRequest&& from) noexcept
    : MonitorPeerRequest() {
    *this = ::std::move(from);
  }

  inline MonitorPeerRequest& operator=(const MonitorPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorPeerRequest& operator=(MonitorPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorPeerRequest* internal_default_instance() {
    return reinterpret_cast<const MonitorPeerRequest*>(
               &_MonitorPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MonitorPeerRequest& a, MonitorPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorPeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorPeerRequest* New() const final {
    return CreateMaybeMessage<MonitorPeerRequest>(nullptr);
  }

  MonitorPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorPeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorPeerRequest& from);
  void MergeFrom(const MonitorPeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorPeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MonitorPeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCurrentFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool current = 2;
  void clear_current();
  bool current() const;
  void set_current(bool value);
  private:
  bool _internal_current() const;
  void _internal_set_current(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MonitorPeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MonitorPeerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MonitorPeerResponse) */ {
 public:
  MonitorPeerResponse();
  virtual ~MonitorPeerResponse();

  MonitorPeerResponse(const MonitorPeerResponse& from);
  MonitorPeerResponse(MonitorPeerResponse&& from) noexcept
    : MonitorPeerResponse() {
    *this = ::std::move(from);
  }

  inline MonitorPeerResponse& operator=(const MonitorPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorPeerResponse& operator=(MonitorPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorPeerResponse* internal_default_instance() {
    return reinterpret_cast<const MonitorPeerResponse*>(
               &_MonitorPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MonitorPeerResponse& a, MonitorPeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorPeerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorPeerResponse* New() const final {
    return CreateMaybeMessage<MonitorPeerResponse>(nullptr);
  }

  MonitorPeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorPeerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorPeerResponse& from);
  void MergeFrom(const MonitorPeerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorPeerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MonitorPeerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
  };
  // .gobgpapi.Peer peer = 1;
  bool has_peer() const;
  private:
  bool _internal_has_peer() const;
  public:
  void clear_peer();
  const ::gobgpapi::Peer& peer() const;
  ::gobgpapi::Peer* release_peer();
  ::gobgpapi::Peer* mutable_peer();
  void set_allocated_peer(::gobgpapi::Peer* peer);
  private:
  const ::gobgpapi::Peer& _internal_peer() const;
  ::gobgpapi::Peer* _internal_mutable_peer();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MonitorPeerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Peer* peer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPeerGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPeerGroupRequest) */ {
 public:
  AddPeerGroupRequest();
  virtual ~AddPeerGroupRequest();

  AddPeerGroupRequest(const AddPeerGroupRequest& from);
  AddPeerGroupRequest(AddPeerGroupRequest&& from) noexcept
    : AddPeerGroupRequest() {
    *this = ::std::move(from);
  }

  inline AddPeerGroupRequest& operator=(const AddPeerGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPeerGroupRequest& operator=(AddPeerGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPeerGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPeerGroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddPeerGroupRequest*>(
               &_AddPeerGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddPeerGroupRequest& a, AddPeerGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPeerGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPeerGroupRequest* New() const final {
    return CreateMaybeMessage<AddPeerGroupRequest>(nullptr);
  }

  AddPeerGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPeerGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPeerGroupRequest& from);
  void MergeFrom(const AddPeerGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPeerGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPeerGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerGroupFieldNumber = 1,
  };
  // .gobgpapi.PeerGroup peer_group = 1;
  bool has_peer_group() const;
  private:
  bool _internal_has_peer_group() const;
  public:
  void clear_peer_group();
  const ::gobgpapi::PeerGroup& peer_group() const;
  ::gobgpapi::PeerGroup* release_peer_group();
  ::gobgpapi::PeerGroup* mutable_peer_group();
  void set_allocated_peer_group(::gobgpapi::PeerGroup* peer_group);
  private:
  const ::gobgpapi::PeerGroup& _internal_peer_group() const;
  ::gobgpapi::PeerGroup* _internal_mutable_peer_group();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPeerGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PeerGroup* peer_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeletePeerGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePeerGroupRequest) */ {
 public:
  DeletePeerGroupRequest();
  virtual ~DeletePeerGroupRequest();

  DeletePeerGroupRequest(const DeletePeerGroupRequest& from);
  DeletePeerGroupRequest(DeletePeerGroupRequest&& from) noexcept
    : DeletePeerGroupRequest() {
    *this = ::std::move(from);
  }

  inline DeletePeerGroupRequest& operator=(const DeletePeerGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePeerGroupRequest& operator=(DeletePeerGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePeerGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePeerGroupRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePeerGroupRequest*>(
               &_DeletePeerGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeletePeerGroupRequest& a, DeletePeerGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePeerGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePeerGroupRequest* New() const final {
    return CreateMaybeMessage<DeletePeerGroupRequest>(nullptr);
  }

  DeletePeerGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePeerGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePeerGroupRequest& from);
  void MergeFrom(const DeletePeerGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePeerGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeletePeerGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePeerGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class UpdatePeerGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UpdatePeerGroupRequest) */ {
 public:
  UpdatePeerGroupRequest();
  virtual ~UpdatePeerGroupRequest();

  UpdatePeerGroupRequest(const UpdatePeerGroupRequest& from);
  UpdatePeerGroupRequest(UpdatePeerGroupRequest&& from) noexcept
    : UpdatePeerGroupRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePeerGroupRequest& operator=(const UpdatePeerGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePeerGroupRequest& operator=(UpdatePeerGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePeerGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePeerGroupRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePeerGroupRequest*>(
               &_UpdatePeerGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdatePeerGroupRequest& a, UpdatePeerGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePeerGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePeerGroupRequest* New() const final {
    return CreateMaybeMessage<UpdatePeerGroupRequest>(nullptr);
  }

  UpdatePeerGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePeerGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePeerGroupRequest& from);
  void MergeFrom(const UpdatePeerGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePeerGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UpdatePeerGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerGroupFieldNumber = 1,
    kDoSoftResetInFieldNumber = 2,
  };
  // .gobgpapi.PeerGroup peer_group = 1;
  bool has_peer_group() const;
  private:
  bool _internal_has_peer_group() const;
  public:
  void clear_peer_group();
  const ::gobgpapi::PeerGroup& peer_group() const;
  ::gobgpapi::PeerGroup* release_peer_group();
  ::gobgpapi::PeerGroup* mutable_peer_group();
  void set_allocated_peer_group(::gobgpapi::PeerGroup* peer_group);
  private:
  const ::gobgpapi::PeerGroup& _internal_peer_group() const;
  ::gobgpapi::PeerGroup* _internal_mutable_peer_group();
  public:

  // bool do_soft_reset_in = 2;
  void clear_do_soft_reset_in();
  bool do_soft_reset_in() const;
  void set_do_soft_reset_in(bool value);
  private:
  bool _internal_do_soft_reset_in() const;
  void _internal_set_do_soft_reset_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UpdatePeerGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PeerGroup* peer_group_;
  bool do_soft_reset_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class UpdatePeerGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UpdatePeerGroupResponse) */ {
 public:
  UpdatePeerGroupResponse();
  virtual ~UpdatePeerGroupResponse();

  UpdatePeerGroupResponse(const UpdatePeerGroupResponse& from);
  UpdatePeerGroupResponse(UpdatePeerGroupResponse&& from) noexcept
    : UpdatePeerGroupResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePeerGroupResponse& operator=(const UpdatePeerGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePeerGroupResponse& operator=(UpdatePeerGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePeerGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePeerGroupResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePeerGroupResponse*>(
               &_UpdatePeerGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdatePeerGroupResponse& a, UpdatePeerGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePeerGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePeerGroupResponse* New() const final {
    return CreateMaybeMessage<UpdatePeerGroupResponse>(nullptr);
  }

  UpdatePeerGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePeerGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePeerGroupResponse& from);
  void MergeFrom(const UpdatePeerGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePeerGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UpdatePeerGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeedsSoftResetInFieldNumber = 1,
  };
  // bool needs_soft_reset_in = 1;
  void clear_needs_soft_reset_in();
  bool needs_soft_reset_in() const;
  void set_needs_soft_reset_in(bool value);
  private:
  bool _internal_needs_soft_reset_in() const;
  void _internal_set_needs_soft_reset_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UpdatePeerGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool needs_soft_reset_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddDynamicNeighborRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddDynamicNeighborRequest) */ {
 public:
  AddDynamicNeighborRequest();
  virtual ~AddDynamicNeighborRequest();

  AddDynamicNeighborRequest(const AddDynamicNeighborRequest& from);
  AddDynamicNeighborRequest(AddDynamicNeighborRequest&& from) noexcept
    : AddDynamicNeighborRequest() {
    *this = ::std::move(from);
  }

  inline AddDynamicNeighborRequest& operator=(const AddDynamicNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDynamicNeighborRequest& operator=(AddDynamicNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDynamicNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDynamicNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const AddDynamicNeighborRequest*>(
               &_AddDynamicNeighborRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AddDynamicNeighborRequest& a, AddDynamicNeighborRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDynamicNeighborRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDynamicNeighborRequest* New() const final {
    return CreateMaybeMessage<AddDynamicNeighborRequest>(nullptr);
  }

  AddDynamicNeighborRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDynamicNeighborRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDynamicNeighborRequest& from);
  void MergeFrom(const AddDynamicNeighborRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDynamicNeighborRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddDynamicNeighborRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicNeighborFieldNumber = 1,
  };
  // .gobgpapi.DynamicNeighbor dynamic_neighbor = 1;
  bool has_dynamic_neighbor() const;
  private:
  bool _internal_has_dynamic_neighbor() const;
  public:
  void clear_dynamic_neighbor();
  const ::gobgpapi::DynamicNeighbor& dynamic_neighbor() const;
  ::gobgpapi::DynamicNeighbor* release_dynamic_neighbor();
  ::gobgpapi::DynamicNeighbor* mutable_dynamic_neighbor();
  void set_allocated_dynamic_neighbor(::gobgpapi::DynamicNeighbor* dynamic_neighbor);
  private:
  const ::gobgpapi::DynamicNeighbor& _internal_dynamic_neighbor() const;
  ::gobgpapi::DynamicNeighbor* _internal_mutable_dynamic_neighbor();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddDynamicNeighborRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::DynamicNeighbor* dynamic_neighbor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPathRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathRequest) */ {
 public:
  AddPathRequest();
  virtual ~AddPathRequest();

  AddPathRequest(const AddPathRequest& from);
  AddPathRequest(AddPathRequest&& from) noexcept
    : AddPathRequest() {
    *this = ::std::move(from);
  }

  inline AddPathRequest& operator=(const AddPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPathRequest& operator=(AddPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathRequest* internal_default_instance() {
    return reinterpret_cast<const AddPathRequest*>(
               &_AddPathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AddPathRequest& a, AddPathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPathRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPathRequest* New() const final {
    return CreateMaybeMessage<AddPathRequest>(nullptr);
  }

  AddPathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPathRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPathRequest& from);
  void MergeFrom(const AddPathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPathRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPathRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfIdFieldNumber = 2,
    kPathFieldNumber = 3,
    kTableTypeFieldNumber = 1,
  };
  // string vrf_id = 2;
  void clear_vrf_id();
  const std::string& vrf_id() const;
  void set_vrf_id(const std::string& value);
  void set_vrf_id(std::string&& value);
  void set_vrf_id(const char* value);
  void set_vrf_id(const char* value, size_t size);
  std::string* mutable_vrf_id();
  std::string* release_vrf_id();
  void set_allocated_vrf_id(std::string* vrf_id);
  private:
  const std::string& _internal_vrf_id() const;
  void _internal_set_vrf_id(const std::string& value);
  std::string* _internal_mutable_vrf_id();
  public:

  // .gobgpapi.Path path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::gobgpapi::Path& path() const;
  ::gobgpapi::Path* release_path();
  ::gobgpapi::Path* mutable_path();
  void set_allocated_path(::gobgpapi::Path* path);
  private:
  const ::gobgpapi::Path& _internal_path() const;
  ::gobgpapi::Path* _internal_mutable_path();
  public:

  // .gobgpapi.TableType table_type = 1;
  void clear_table_type();
  ::gobgpapi::TableType table_type() const;
  void set_table_type(::gobgpapi::TableType value);
  private:
  ::gobgpapi::TableType _internal_table_type() const;
  void _internal_set_table_type(::gobgpapi::TableType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_id_;
  ::gobgpapi::Path* path_;
  int table_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPathResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathResponse) */ {
 public:
  AddPathResponse();
  virtual ~AddPathResponse();

  AddPathResponse(const AddPathResponse& from);
  AddPathResponse(AddPathResponse&& from) noexcept
    : AddPathResponse() {
    *this = ::std::move(from);
  }

  inline AddPathResponse& operator=(const AddPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPathResponse& operator=(AddPathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathResponse* internal_default_instance() {
    return reinterpret_cast<const AddPathResponse*>(
               &_AddPathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AddPathResponse& a, AddPathResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPathResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPathResponse* New() const final {
    return CreateMaybeMessage<AddPathResponse>(nullptr);
  }

  AddPathResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPathResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPathResponse& from);
  void MergeFrom(const AddPathResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPathResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPathResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeletePathRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePathRequest) */ {
 public:
  DeletePathRequest();
  virtual ~DeletePathRequest();

  DeletePathRequest(const DeletePathRequest& from);
  DeletePathRequest(DeletePathRequest&& from) noexcept
    : DeletePathRequest() {
    *this = ::std::move(from);
  }

  inline DeletePathRequest& operator=(const DeletePathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePathRequest& operator=(DeletePathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePathRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePathRequest*>(
               &_DeletePathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeletePathRequest& a, DeletePathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePathRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePathRequest* New() const final {
    return CreateMaybeMessage<DeletePathRequest>(nullptr);
  }

  DeletePathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePathRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePathRequest& from);
  void MergeFrom(const DeletePathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePathRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeletePathRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfIdFieldNumber = 2,
    kUuidFieldNumber = 5,
    kFamilyFieldNumber = 3,
    kPathFieldNumber = 4,
    kTableTypeFieldNumber = 1,
  };
  // string vrf_id = 2;
  void clear_vrf_id();
  const std::string& vrf_id() const;
  void set_vrf_id(const std::string& value);
  void set_vrf_id(std::string&& value);
  void set_vrf_id(const char* value);
  void set_vrf_id(const char* value, size_t size);
  std::string* mutable_vrf_id();
  std::string* release_vrf_id();
  void set_allocated_vrf_id(std::string* vrf_id);
  private:
  const std::string& _internal_vrf_id() const;
  void _internal_set_vrf_id(const std::string& value);
  std::string* _internal_mutable_vrf_id();
  public:

  // bytes uuid = 5;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .gobgpapi.Family family = 3;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // .gobgpapi.Path path = 4;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::gobgpapi::Path& path() const;
  ::gobgpapi::Path* release_path();
  ::gobgpapi::Path* mutable_path();
  void set_allocated_path(::gobgpapi::Path* path);
  private:
  const ::gobgpapi::Path& _internal_path() const;
  ::gobgpapi::Path* _internal_mutable_path();
  public:

  // .gobgpapi.TableType table_type = 1;
  void clear_table_type();
  ::gobgpapi::TableType table_type() const;
  void set_table_type(::gobgpapi::TableType value);
  private:
  ::gobgpapi::TableType _internal_table_type() const;
  void _internal_set_table_type(::gobgpapi::TableType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePathRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::gobgpapi::Family* family_;
  ::gobgpapi::Path* path_;
  int table_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPathRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPathRequest) */ {
 public:
  ListPathRequest();
  virtual ~ListPathRequest();

  ListPathRequest(const ListPathRequest& from);
  ListPathRequest(ListPathRequest&& from) noexcept
    : ListPathRequest() {
    *this = ::std::move(from);
  }

  inline ListPathRequest& operator=(const ListPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPathRequest& operator=(ListPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPathRequest* internal_default_instance() {
    return reinterpret_cast<const ListPathRequest*>(
               &_ListPathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListPathRequest& a, ListPathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPathRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPathRequest* New() const final {
    return CreateMaybeMessage<ListPathRequest>(nullptr);
  }

  ListPathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPathRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPathRequest& from);
  void MergeFrom(const ListPathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPathRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPathRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListPathRequest_SortType SortType;
  static constexpr SortType NONE =
    ListPathRequest_SortType_NONE;
  static constexpr SortType PREFIX =
    ListPathRequest_SortType_PREFIX;
  static inline bool SortType_IsValid(int value) {
    return ListPathRequest_SortType_IsValid(value);
  }
  static constexpr SortType SortType_MIN =
    ListPathRequest_SortType_SortType_MIN;
  static constexpr SortType SortType_MAX =
    ListPathRequest_SortType_SortType_MAX;
  static constexpr int SortType_ARRAYSIZE =
    ListPathRequest_SortType_SortType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortType_descriptor() {
    return ListPathRequest_SortType_descriptor();
  }
  template<typename T>
  static inline const std::string& SortType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortType_Name.");
    return ListPathRequest_SortType_Name(enum_t_value);
  }
  static inline bool SortType_Parse(const std::string& name,
      SortType* value) {
    return ListPathRequest_SortType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixesFieldNumber = 4,
    kNameFieldNumber = 2,
    kFamilyFieldNumber = 3,
    kTableTypeFieldNumber = 1,
    kSortTypeFieldNumber = 5,
    kEnableFilteredFieldNumber = 6,
  };
  // repeated .gobgpapi.TableLookupPrefix prefixes = 4;
  int prefixes_size() const;
  private:
  int _internal_prefixes_size() const;
  public:
  void clear_prefixes();
  ::gobgpapi::TableLookupPrefix* mutable_prefixes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >*
      mutable_prefixes();
  private:
  const ::gobgpapi::TableLookupPrefix& _internal_prefixes(int index) const;
  ::gobgpapi::TableLookupPrefix* _internal_add_prefixes();
  public:
  const ::gobgpapi::TableLookupPrefix& prefixes(int index) const;
  ::gobgpapi::TableLookupPrefix* add_prefixes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >&
      prefixes() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.Family family = 3;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // .gobgpapi.TableType table_type = 1;
  void clear_table_type();
  ::gobgpapi::TableType table_type() const;
  void set_table_type(::gobgpapi::TableType value);
  private:
  ::gobgpapi::TableType _internal_table_type() const;
  void _internal_set_table_type(::gobgpapi::TableType value);
  public:

  // .gobgpapi.ListPathRequest.SortType sort_type = 5;
  void clear_sort_type();
  ::gobgpapi::ListPathRequest_SortType sort_type() const;
  void set_sort_type(::gobgpapi::ListPathRequest_SortType value);
  private:
  ::gobgpapi::ListPathRequest_SortType _internal_sort_type() const;
  void _internal_set_sort_type(::gobgpapi::ListPathRequest_SortType value);
  public:

  // bool enable_filtered = 6;
  void clear_enable_filtered();
  bool enable_filtered() const;
  void set_enable_filtered(bool value);
  private:
  bool _internal_enable_filtered() const;
  void _internal_set_enable_filtered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPathRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TableLookupPrefix > prefixes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gobgpapi::Family* family_;
  int table_type_;
  int sort_type_;
  bool enable_filtered_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPathResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPathResponse) */ {
 public:
  ListPathResponse();
  virtual ~ListPathResponse();

  ListPathResponse(const ListPathResponse& from);
  ListPathResponse(ListPathResponse&& from) noexcept
    : ListPathResponse() {
    *this = ::std::move(from);
  }

  inline ListPathResponse& operator=(const ListPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPathResponse& operator=(ListPathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPathResponse* internal_default_instance() {
    return reinterpret_cast<const ListPathResponse*>(
               &_ListPathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListPathResponse& a, ListPathResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPathResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPathResponse* New() const final {
    return CreateMaybeMessage<ListPathResponse>(nullptr);
  }

  ListPathResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPathResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPathResponse& from);
  void MergeFrom(const ListPathResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPathResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPathResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 1,
  };
  // .gobgpapi.Destination destination = 1;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::gobgpapi::Destination& destination() const;
  ::gobgpapi::Destination* release_destination();
  ::gobgpapi::Destination* mutable_destination();
  void set_allocated_destination(::gobgpapi::Destination* destination);
  private:
  const ::gobgpapi::Destination& _internal_destination() const;
  ::gobgpapi::Destination* _internal_mutable_destination();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPathResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Destination* destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPathStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathStreamRequest) */ {
 public:
  AddPathStreamRequest();
  virtual ~AddPathStreamRequest();

  AddPathStreamRequest(const AddPathStreamRequest& from);
  AddPathStreamRequest(AddPathStreamRequest&& from) noexcept
    : AddPathStreamRequest() {
    *this = ::std::move(from);
  }

  inline AddPathStreamRequest& operator=(const AddPathStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPathStreamRequest& operator=(AddPathStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPathStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathStreamRequest* internal_default_instance() {
    return reinterpret_cast<const AddPathStreamRequest*>(
               &_AddPathStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(AddPathStreamRequest& a, AddPathStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPathStreamRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPathStreamRequest* New() const final {
    return CreateMaybeMessage<AddPathStreamRequest>(nullptr);
  }

  AddPathStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPathStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPathStreamRequest& from);
  void MergeFrom(const AddPathStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPathStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPathStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 3,
    kVrfIdFieldNumber = 2,
    kTableTypeFieldNumber = 1,
  };
  // repeated .gobgpapi.Path paths = 3;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::gobgpapi::Path* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >*
      mutable_paths();
  private:
  const ::gobgpapi::Path& _internal_paths(int index) const;
  ::gobgpapi::Path* _internal_add_paths();
  public:
  const ::gobgpapi::Path& paths(int index) const;
  ::gobgpapi::Path* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >&
      paths() const;

  // string vrf_id = 2;
  void clear_vrf_id();
  const std::string& vrf_id() const;
  void set_vrf_id(const std::string& value);
  void set_vrf_id(std::string&& value);
  void set_vrf_id(const char* value);
  void set_vrf_id(const char* value, size_t size);
  std::string* mutable_vrf_id();
  std::string* release_vrf_id();
  void set_allocated_vrf_id(std::string* vrf_id);
  private:
  const std::string& _internal_vrf_id() const;
  void _internal_set_vrf_id(const std::string& value);
  std::string* _internal_mutable_vrf_id();
  public:

  // .gobgpapi.TableType table_type = 1;
  void clear_table_type();
  ::gobgpapi::TableType table_type() const;
  void set_table_type(::gobgpapi::TableType value);
  private:
  ::gobgpapi::TableType _internal_table_type() const;
  void _internal_set_table_type(::gobgpapi::TableType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathStreamRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path > paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_id_;
  int table_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class GetTableRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetTableRequest) */ {
 public:
  GetTableRequest();
  virtual ~GetTableRequest();

  GetTableRequest(const GetTableRequest& from);
  GetTableRequest(GetTableRequest&& from) noexcept
    : GetTableRequest() {
    *this = ::std::move(from);
  }

  inline GetTableRequest& operator=(const GetTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTableRequest& operator=(GetTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTableRequest* internal_default_instance() {
    return reinterpret_cast<const GetTableRequest*>(
               &_GetTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetTableRequest& a, GetTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTableRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTableRequest* New() const final {
    return CreateMaybeMessage<GetTableRequest>(nullptr);
  }

  GetTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTableRequest& from);
  void MergeFrom(const GetTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.GetTableRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kFamilyFieldNumber = 2,
    kTableTypeFieldNumber = 1,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.Family family = 2;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // .gobgpapi.TableType table_type = 1;
  void clear_table_type();
  ::gobgpapi::TableType table_type() const;
  void set_table_type(::gobgpapi::TableType value);
  private:
  ::gobgpapi::TableType _internal_table_type() const;
  void _internal_set_table_type(::gobgpapi::TableType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.GetTableRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gobgpapi::Family* family_;
  int table_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class GetTableResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GetTableResponse) */ {
 public:
  GetTableResponse();
  virtual ~GetTableResponse();

  GetTableResponse(const GetTableResponse& from);
  GetTableResponse(GetTableResponse&& from) noexcept
    : GetTableResponse() {
    *this = ::std::move(from);
  }

  inline GetTableResponse& operator=(const GetTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTableResponse& operator=(GetTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTableResponse* internal_default_instance() {
    return reinterpret_cast<const GetTableResponse*>(
               &_GetTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetTableResponse& a, GetTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTableResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTableResponse* New() const final {
    return CreateMaybeMessage<GetTableResponse>(nullptr);
  }

  GetTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTableResponse& from);
  void MergeFrom(const GetTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.GetTableResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumDestinationFieldNumber = 1,
    kNumPathFieldNumber = 2,
    kNumAcceptedFieldNumber = 3,
  };
  // uint64 num_destination = 1;
  void clear_num_destination();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_destination() const;
  void set_num_destination(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_destination() const;
  void _internal_set_num_destination(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_path = 2;
  void clear_num_path();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_path() const;
  void set_num_path(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_path() const;
  void _internal_set_num_path(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_accepted = 3;
  void clear_num_accepted();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_accepted() const;
  void set_num_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_accepted() const;
  void _internal_set_num_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.GetTableResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_destination_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_accepted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MonitorTableRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MonitorTableRequest) */ {
 public:
  MonitorTableRequest();
  virtual ~MonitorTableRequest();

  MonitorTableRequest(const MonitorTableRequest& from);
  MonitorTableRequest(MonitorTableRequest&& from) noexcept
    : MonitorTableRequest() {
    *this = ::std::move(from);
  }

  inline MonitorTableRequest& operator=(const MonitorTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorTableRequest& operator=(MonitorTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorTableRequest* internal_default_instance() {
    return reinterpret_cast<const MonitorTableRequest*>(
               &_MonitorTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MonitorTableRequest& a, MonitorTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorTableRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorTableRequest* New() const final {
    return CreateMaybeMessage<MonitorTableRequest>(nullptr);
  }

  MonitorTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorTableRequest& from);
  void MergeFrom(const MonitorTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MonitorTableRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFamilyFieldNumber = 3,
    kTableTypeFieldNumber = 1,
    kCurrentFieldNumber = 4,
    kPostPolicyFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.Family family = 3;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // .gobgpapi.TableType table_type = 1;
  void clear_table_type();
  ::gobgpapi::TableType table_type() const;
  void set_table_type(::gobgpapi::TableType value);
  private:
  ::gobgpapi::TableType _internal_table_type() const;
  void _internal_set_table_type(::gobgpapi::TableType value);
  public:

  // bool current = 4;
  void clear_current();
  bool current() const;
  void set_current(bool value);
  private:
  bool _internal_current() const;
  void _internal_set_current(bool value);
  public:

  // bool post_policy = 5;
  void clear_post_policy();
  bool post_policy() const;
  void set_post_policy(bool value);
  private:
  bool _internal_post_policy() const;
  void _internal_set_post_policy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MonitorTableRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gobgpapi::Family* family_;
  int table_type_;
  bool current_;
  bool post_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MonitorTableResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MonitorTableResponse) */ {
 public:
  MonitorTableResponse();
  virtual ~MonitorTableResponse();

  MonitorTableResponse(const MonitorTableResponse& from);
  MonitorTableResponse(MonitorTableResponse&& from) noexcept
    : MonitorTableResponse() {
    *this = ::std::move(from);
  }

  inline MonitorTableResponse& operator=(const MonitorTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorTableResponse& operator=(MonitorTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitorTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorTableResponse* internal_default_instance() {
    return reinterpret_cast<const MonitorTableResponse*>(
               &_MonitorTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MonitorTableResponse& a, MonitorTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorTableResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitorTableResponse* New() const final {
    return CreateMaybeMessage<MonitorTableResponse>(nullptr);
  }

  MonitorTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitorTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitorTableResponse& from);
  void MergeFrom(const MonitorTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MonitorTableResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // .gobgpapi.Path path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::gobgpapi::Path& path() const;
  ::gobgpapi::Path* release_path();
  ::gobgpapi::Path* mutable_path();
  void set_allocated_path(::gobgpapi::Path* path);
  private:
  const ::gobgpapi::Path& _internal_path() const;
  ::gobgpapi::Path* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MonitorTableResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Path* path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddVrfRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddVrfRequest) */ {
 public:
  AddVrfRequest();
  virtual ~AddVrfRequest();

  AddVrfRequest(const AddVrfRequest& from);
  AddVrfRequest(AddVrfRequest&& from) noexcept
    : AddVrfRequest() {
    *this = ::std::move(from);
  }

  inline AddVrfRequest& operator=(const AddVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddVrfRequest& operator=(AddVrfRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddVrfRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddVrfRequest* internal_default_instance() {
    return reinterpret_cast<const AddVrfRequest*>(
               &_AddVrfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AddVrfRequest& a, AddVrfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddVrfRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddVrfRequest* New() const final {
    return CreateMaybeMessage<AddVrfRequest>(nullptr);
  }

  AddVrfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddVrfRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddVrfRequest& from);
  void MergeFrom(const AddVrfRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddVrfRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddVrfRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfFieldNumber = 1,
  };
  // .gobgpapi.Vrf vrf = 1;
  bool has_vrf() const;
  private:
  bool _internal_has_vrf() const;
  public:
  void clear_vrf();
  const ::gobgpapi::Vrf& vrf() const;
  ::gobgpapi::Vrf* release_vrf();
  ::gobgpapi::Vrf* mutable_vrf();
  void set_allocated_vrf(::gobgpapi::Vrf* vrf);
  private:
  const ::gobgpapi::Vrf& _internal_vrf() const;
  ::gobgpapi::Vrf* _internal_mutable_vrf();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddVrfRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Vrf* vrf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeleteVrfRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteVrfRequest) */ {
 public:
  DeleteVrfRequest();
  virtual ~DeleteVrfRequest();

  DeleteVrfRequest(const DeleteVrfRequest& from);
  DeleteVrfRequest(DeleteVrfRequest&& from) noexcept
    : DeleteVrfRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVrfRequest& operator=(const DeleteVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVrfRequest& operator=(DeleteVrfRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteVrfRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteVrfRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVrfRequest*>(
               &_DeleteVrfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeleteVrfRequest& a, DeleteVrfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVrfRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteVrfRequest* New() const final {
    return CreateMaybeMessage<DeleteVrfRequest>(nullptr);
  }

  DeleteVrfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteVrfRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteVrfRequest& from);
  void MergeFrom(const DeleteVrfRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVrfRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeleteVrfRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteVrfRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListVrfRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListVrfRequest) */ {
 public:
  ListVrfRequest();
  virtual ~ListVrfRequest();

  ListVrfRequest(const ListVrfRequest& from);
  ListVrfRequest(ListVrfRequest&& from) noexcept
    : ListVrfRequest() {
    *this = ::std::move(from);
  }

  inline ListVrfRequest& operator=(const ListVrfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVrfRequest& operator=(ListVrfRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVrfRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVrfRequest* internal_default_instance() {
    return reinterpret_cast<const ListVrfRequest*>(
               &_ListVrfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ListVrfRequest& a, ListVrfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVrfRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVrfRequest* New() const final {
    return CreateMaybeMessage<ListVrfRequest>(nullptr);
  }

  ListVrfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVrfRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVrfRequest& from);
  void MergeFrom(const ListVrfRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVrfRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListVrfRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListVrfRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListVrfResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListVrfResponse) */ {
 public:
  ListVrfResponse();
  virtual ~ListVrfResponse();

  ListVrfResponse(const ListVrfResponse& from);
  ListVrfResponse(ListVrfResponse&& from) noexcept
    : ListVrfResponse() {
    *this = ::std::move(from);
  }

  inline ListVrfResponse& operator=(const ListVrfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVrfResponse& operator=(ListVrfResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListVrfResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListVrfResponse* internal_default_instance() {
    return reinterpret_cast<const ListVrfResponse*>(
               &_ListVrfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ListVrfResponse& a, ListVrfResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVrfResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListVrfResponse* New() const final {
    return CreateMaybeMessage<ListVrfResponse>(nullptr);
  }

  ListVrfResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListVrfResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListVrfResponse& from);
  void MergeFrom(const ListVrfResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVrfResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListVrfResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfFieldNumber = 1,
  };
  // .gobgpapi.Vrf vrf = 1;
  bool has_vrf() const;
  private:
  bool _internal_has_vrf() const;
  public:
  void clear_vrf();
  const ::gobgpapi::Vrf& vrf() const;
  ::gobgpapi::Vrf* release_vrf();
  ::gobgpapi::Vrf* mutable_vrf();
  void set_allocated_vrf(::gobgpapi::Vrf* vrf);
  private:
  const ::gobgpapi::Vrf& _internal_vrf() const;
  ::gobgpapi::Vrf* _internal_mutable_vrf();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListVrfResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Vrf* vrf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPolicyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPolicyRequest) */ {
 public:
  AddPolicyRequest();
  virtual ~AddPolicyRequest();

  AddPolicyRequest(const AddPolicyRequest& from);
  AddPolicyRequest(AddPolicyRequest&& from) noexcept
    : AddPolicyRequest() {
    *this = ::std::move(from);
  }

  inline AddPolicyRequest& operator=(const AddPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPolicyRequest& operator=(AddPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const AddPolicyRequest*>(
               &_AddPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AddPolicyRequest& a, AddPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPolicyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPolicyRequest* New() const final {
    return CreateMaybeMessage<AddPolicyRequest>(nullptr);
  }

  AddPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPolicyRequest& from);
  void MergeFrom(const AddPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPolicyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
    kReferExistingStatementsFieldNumber = 2,
  };
  // .gobgpapi.Policy policy = 1;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::gobgpapi::Policy& policy() const;
  ::gobgpapi::Policy* release_policy();
  ::gobgpapi::Policy* mutable_policy();
  void set_allocated_policy(::gobgpapi::Policy* policy);
  private:
  const ::gobgpapi::Policy& _internal_policy() const;
  ::gobgpapi::Policy* _internal_mutable_policy();
  public:

  // bool refer_existing_statements = 2;
  void clear_refer_existing_statements();
  bool refer_existing_statements() const;
  void set_refer_existing_statements(bool value);
  private:
  bool _internal_refer_existing_statements() const;
  void _internal_set_refer_existing_statements(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPolicyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Policy* policy_;
  bool refer_existing_statements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeletePolicyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePolicyRequest) */ {
 public:
  DeletePolicyRequest();
  virtual ~DeletePolicyRequest();

  DeletePolicyRequest(const DeletePolicyRequest& from);
  DeletePolicyRequest(DeletePolicyRequest&& from) noexcept
    : DeletePolicyRequest() {
    *this = ::std::move(from);
  }

  inline DeletePolicyRequest& operator=(const DeletePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePolicyRequest& operator=(DeletePolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePolicyRequest*>(
               &_DeletePolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DeletePolicyRequest& a, DeletePolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePolicyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePolicyRequest* New() const final {
    return CreateMaybeMessage<DeletePolicyRequest>(nullptr);
  }

  DeletePolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePolicyRequest& from);
  void MergeFrom(const DeletePolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeletePolicyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
    kPreserveStatementsFieldNumber = 2,
    kAllFieldNumber = 3,
  };
  // .gobgpapi.Policy policy = 1;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::gobgpapi::Policy& policy() const;
  ::gobgpapi::Policy* release_policy();
  ::gobgpapi::Policy* mutable_policy();
  void set_allocated_policy(::gobgpapi::Policy* policy);
  private:
  const ::gobgpapi::Policy& _internal_policy() const;
  ::gobgpapi::Policy* _internal_mutable_policy();
  public:

  // bool preserve_statements = 2;
  void clear_preserve_statements();
  bool preserve_statements() const;
  void set_preserve_statements(bool value);
  private:
  bool _internal_preserve_statements() const;
  void _internal_set_preserve_statements(bool value);
  public:

  // bool all = 3;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePolicyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Policy* policy_;
  bool preserve_statements_;
  bool all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPolicyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPolicyRequest) */ {
 public:
  ListPolicyRequest();
  virtual ~ListPolicyRequest();

  ListPolicyRequest(const ListPolicyRequest& from);
  ListPolicyRequest(ListPolicyRequest&& from) noexcept
    : ListPolicyRequest() {
    *this = ::std::move(from);
  }

  inline ListPolicyRequest& operator=(const ListPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPolicyRequest& operator=(ListPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const ListPolicyRequest*>(
               &_ListPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ListPolicyRequest& a, ListPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPolicyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPolicyRequest* New() const final {
    return CreateMaybeMessage<ListPolicyRequest>(nullptr);
  }

  ListPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPolicyRequest& from);
  void MergeFrom(const ListPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPolicyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPolicyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPolicyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPolicyResponse) */ {
 public:
  ListPolicyResponse();
  virtual ~ListPolicyResponse();

  ListPolicyResponse(const ListPolicyResponse& from);
  ListPolicyResponse(ListPolicyResponse&& from) noexcept
    : ListPolicyResponse() {
    *this = ::std::move(from);
  }

  inline ListPolicyResponse& operator=(const ListPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPolicyResponse& operator=(ListPolicyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPolicyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const ListPolicyResponse*>(
               &_ListPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ListPolicyResponse& a, ListPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPolicyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPolicyResponse* New() const final {
    return CreateMaybeMessage<ListPolicyResponse>(nullptr);
  }

  ListPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPolicyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPolicyResponse& from);
  void MergeFrom(const ListPolicyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPolicyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPolicyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 1,
  };
  // .gobgpapi.Policy policy = 1;
  bool has_policy() const;
  private:
  bool _internal_has_policy() const;
  public:
  void clear_policy();
  const ::gobgpapi::Policy& policy() const;
  ::gobgpapi::Policy* release_policy();
  ::gobgpapi::Policy* mutable_policy();
  void set_allocated_policy(::gobgpapi::Policy* policy);
  private:
  const ::gobgpapi::Policy& _internal_policy() const;
  ::gobgpapi::Policy* _internal_mutable_policy();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPolicyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Policy* policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class SetPoliciesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.SetPoliciesRequest) */ {
 public:
  SetPoliciesRequest();
  virtual ~SetPoliciesRequest();

  SetPoliciesRequest(const SetPoliciesRequest& from);
  SetPoliciesRequest(SetPoliciesRequest&& from) noexcept
    : SetPoliciesRequest() {
    *this = ::std::move(from);
  }

  inline SetPoliciesRequest& operator=(const SetPoliciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPoliciesRequest& operator=(SetPoliciesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPoliciesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPoliciesRequest* internal_default_instance() {
    return reinterpret_cast<const SetPoliciesRequest*>(
               &_SetPoliciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SetPoliciesRequest& a, SetPoliciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPoliciesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPoliciesRequest* New() const final {
    return CreateMaybeMessage<SetPoliciesRequest>(nullptr);
  }

  SetPoliciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPoliciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPoliciesRequest& from);
  void MergeFrom(const SetPoliciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPoliciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.SetPoliciesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefinedSetsFieldNumber = 1,
    kPoliciesFieldNumber = 2,
    kAssignmentsFieldNumber = 3,
  };
  // repeated .gobgpapi.DefinedSet defined_sets = 1;
  int defined_sets_size() const;
  private:
  int _internal_defined_sets_size() const;
  public:
  void clear_defined_sets();
  ::gobgpapi::DefinedSet* mutable_defined_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >*
      mutable_defined_sets();
  private:
  const ::gobgpapi::DefinedSet& _internal_defined_sets(int index) const;
  ::gobgpapi::DefinedSet* _internal_add_defined_sets();
  public:
  const ::gobgpapi::DefinedSet& defined_sets(int index) const;
  ::gobgpapi::DefinedSet* add_defined_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >&
      defined_sets() const;

  // repeated .gobgpapi.Policy policies = 2;
  int policies_size() const;
  private:
  int _internal_policies_size() const;
  public:
  void clear_policies();
  ::gobgpapi::Policy* mutable_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >*
      mutable_policies();
  private:
  const ::gobgpapi::Policy& _internal_policies(int index) const;
  ::gobgpapi::Policy* _internal_add_policies();
  public:
  const ::gobgpapi::Policy& policies(int index) const;
  ::gobgpapi::Policy* add_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >&
      policies() const;

  // repeated .gobgpapi.PolicyAssignment assignments = 3;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::gobgpapi::PolicyAssignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::PolicyAssignment >*
      mutable_assignments();
  private:
  const ::gobgpapi::PolicyAssignment& _internal_assignments(int index) const;
  ::gobgpapi::PolicyAssignment* _internal_add_assignments();
  public:
  const ::gobgpapi::PolicyAssignment& assignments(int index) const;
  ::gobgpapi::PolicyAssignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::PolicyAssignment >&
      assignments() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.SetPoliciesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet > defined_sets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy > policies_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::PolicyAssignment > assignments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddDefinedSetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddDefinedSetRequest) */ {
 public:
  AddDefinedSetRequest();
  virtual ~AddDefinedSetRequest();

  AddDefinedSetRequest(const AddDefinedSetRequest& from);
  AddDefinedSetRequest(AddDefinedSetRequest&& from) noexcept
    : AddDefinedSetRequest() {
    *this = ::std::move(from);
  }

  inline AddDefinedSetRequest& operator=(const AddDefinedSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDefinedSetRequest& operator=(AddDefinedSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDefinedSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDefinedSetRequest* internal_default_instance() {
    return reinterpret_cast<const AddDefinedSetRequest*>(
               &_AddDefinedSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AddDefinedSetRequest& a, AddDefinedSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDefinedSetRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDefinedSetRequest* New() const final {
    return CreateMaybeMessage<AddDefinedSetRequest>(nullptr);
  }

  AddDefinedSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDefinedSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDefinedSetRequest& from);
  void MergeFrom(const AddDefinedSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDefinedSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddDefinedSetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefinedSetFieldNumber = 1,
  };
  // .gobgpapi.DefinedSet defined_set = 1;
  bool has_defined_set() const;
  private:
  bool _internal_has_defined_set() const;
  public:
  void clear_defined_set();
  const ::gobgpapi::DefinedSet& defined_set() const;
  ::gobgpapi::DefinedSet* release_defined_set();
  ::gobgpapi::DefinedSet* mutable_defined_set();
  void set_allocated_defined_set(::gobgpapi::DefinedSet* defined_set);
  private:
  const ::gobgpapi::DefinedSet& _internal_defined_set() const;
  ::gobgpapi::DefinedSet* _internal_mutable_defined_set();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddDefinedSetRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::DefinedSet* defined_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeleteDefinedSetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteDefinedSetRequest) */ {
 public:
  DeleteDefinedSetRequest();
  virtual ~DeleteDefinedSetRequest();

  DeleteDefinedSetRequest(const DeleteDefinedSetRequest& from);
  DeleteDefinedSetRequest(DeleteDefinedSetRequest&& from) noexcept
    : DeleteDefinedSetRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDefinedSetRequest& operator=(const DeleteDefinedSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDefinedSetRequest& operator=(DeleteDefinedSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDefinedSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDefinedSetRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDefinedSetRequest*>(
               &_DeleteDefinedSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(DeleteDefinedSetRequest& a, DeleteDefinedSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDefinedSetRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDefinedSetRequest* New() const final {
    return CreateMaybeMessage<DeleteDefinedSetRequest>(nullptr);
  }

  DeleteDefinedSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDefinedSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDefinedSetRequest& from);
  void MergeFrom(const DeleteDefinedSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDefinedSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeleteDefinedSetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefinedSetFieldNumber = 1,
    kAllFieldNumber = 2,
  };
  // .gobgpapi.DefinedSet defined_set = 1;
  bool has_defined_set() const;
  private:
  bool _internal_has_defined_set() const;
  public:
  void clear_defined_set();
  const ::gobgpapi::DefinedSet& defined_set() const;
  ::gobgpapi::DefinedSet* release_defined_set();
  ::gobgpapi::DefinedSet* mutable_defined_set();
  void set_allocated_defined_set(::gobgpapi::DefinedSet* defined_set);
  private:
  const ::gobgpapi::DefinedSet& _internal_defined_set() const;
  ::gobgpapi::DefinedSet* _internal_mutable_defined_set();
  public:

  // bool all = 2;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteDefinedSetRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::DefinedSet* defined_set_;
  bool all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListDefinedSetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListDefinedSetRequest) */ {
 public:
  ListDefinedSetRequest();
  virtual ~ListDefinedSetRequest();

  ListDefinedSetRequest(const ListDefinedSetRequest& from);
  ListDefinedSetRequest(ListDefinedSetRequest&& from) noexcept
    : ListDefinedSetRequest() {
    *this = ::std::move(from);
  }

  inline ListDefinedSetRequest& operator=(const ListDefinedSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDefinedSetRequest& operator=(ListDefinedSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDefinedSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDefinedSetRequest* internal_default_instance() {
    return reinterpret_cast<const ListDefinedSetRequest*>(
               &_ListDefinedSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ListDefinedSetRequest& a, ListDefinedSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDefinedSetRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDefinedSetRequest* New() const final {
    return CreateMaybeMessage<ListDefinedSetRequest>(nullptr);
  }

  ListDefinedSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDefinedSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDefinedSetRequest& from);
  void MergeFrom(const ListDefinedSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDefinedSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListDefinedSetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDefinedTypeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.DefinedType defined_type = 1;
  void clear_defined_type();
  ::gobgpapi::DefinedType defined_type() const;
  void set_defined_type(::gobgpapi::DefinedType value);
  private:
  ::gobgpapi::DefinedType _internal_defined_type() const;
  void _internal_set_defined_type(::gobgpapi::DefinedType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListDefinedSetRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int defined_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListDefinedSetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListDefinedSetResponse) */ {
 public:
  ListDefinedSetResponse();
  virtual ~ListDefinedSetResponse();

  ListDefinedSetResponse(const ListDefinedSetResponse& from);
  ListDefinedSetResponse(ListDefinedSetResponse&& from) noexcept
    : ListDefinedSetResponse() {
    *this = ::std::move(from);
  }

  inline ListDefinedSetResponse& operator=(const ListDefinedSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDefinedSetResponse& operator=(ListDefinedSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDefinedSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDefinedSetResponse* internal_default_instance() {
    return reinterpret_cast<const ListDefinedSetResponse*>(
               &_ListDefinedSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ListDefinedSetResponse& a, ListDefinedSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDefinedSetResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDefinedSetResponse* New() const final {
    return CreateMaybeMessage<ListDefinedSetResponse>(nullptr);
  }

  ListDefinedSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDefinedSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDefinedSetResponse& from);
  void MergeFrom(const ListDefinedSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDefinedSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListDefinedSetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefinedSetFieldNumber = 1,
  };
  // .gobgpapi.DefinedSet defined_set = 1;
  bool has_defined_set() const;
  private:
  bool _internal_has_defined_set() const;
  public:
  void clear_defined_set();
  const ::gobgpapi::DefinedSet& defined_set() const;
  ::gobgpapi::DefinedSet* release_defined_set();
  ::gobgpapi::DefinedSet* mutable_defined_set();
  void set_allocated_defined_set(::gobgpapi::DefinedSet* defined_set);
  private:
  const ::gobgpapi::DefinedSet& _internal_defined_set() const;
  ::gobgpapi::DefinedSet* _internal_mutable_defined_set();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListDefinedSetResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::DefinedSet* defined_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddStatementRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddStatementRequest) */ {
 public:
  AddStatementRequest();
  virtual ~AddStatementRequest();

  AddStatementRequest(const AddStatementRequest& from);
  AddStatementRequest(AddStatementRequest&& from) noexcept
    : AddStatementRequest() {
    *this = ::std::move(from);
  }

  inline AddStatementRequest& operator=(const AddStatementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddStatementRequest& operator=(AddStatementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddStatementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddStatementRequest* internal_default_instance() {
    return reinterpret_cast<const AddStatementRequest*>(
               &_AddStatementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(AddStatementRequest& a, AddStatementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddStatementRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddStatementRequest* New() const final {
    return CreateMaybeMessage<AddStatementRequest>(nullptr);
  }

  AddStatementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddStatementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddStatementRequest& from);
  void MergeFrom(const AddStatementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddStatementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddStatementRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementFieldNumber = 1,
  };
  // .gobgpapi.Statement statement = 1;
  bool has_statement() const;
  private:
  bool _internal_has_statement() const;
  public:
  void clear_statement();
  const ::gobgpapi::Statement& statement() const;
  ::gobgpapi::Statement* release_statement();
  ::gobgpapi::Statement* mutable_statement();
  void set_allocated_statement(::gobgpapi::Statement* statement);
  private:
  const ::gobgpapi::Statement& _internal_statement() const;
  ::gobgpapi::Statement* _internal_mutable_statement();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddStatementRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Statement* statement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeleteStatementRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteStatementRequest) */ {
 public:
  DeleteStatementRequest();
  virtual ~DeleteStatementRequest();

  DeleteStatementRequest(const DeleteStatementRequest& from);
  DeleteStatementRequest(DeleteStatementRequest&& from) noexcept
    : DeleteStatementRequest() {
    *this = ::std::move(from);
  }

  inline DeleteStatementRequest& operator=(const DeleteStatementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStatementRequest& operator=(DeleteStatementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStatementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteStatementRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteStatementRequest*>(
               &_DeleteStatementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DeleteStatementRequest& a, DeleteStatementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStatementRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStatementRequest* New() const final {
    return CreateMaybeMessage<DeleteStatementRequest>(nullptr);
  }

  DeleteStatementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStatementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStatementRequest& from);
  void MergeFrom(const DeleteStatementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStatementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeleteStatementRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementFieldNumber = 1,
    kAllFieldNumber = 2,
  };
  // .gobgpapi.Statement statement = 1;
  bool has_statement() const;
  private:
  bool _internal_has_statement() const;
  public:
  void clear_statement();
  const ::gobgpapi::Statement& statement() const;
  ::gobgpapi::Statement* release_statement();
  ::gobgpapi::Statement* mutable_statement();
  void set_allocated_statement(::gobgpapi::Statement* statement);
  private:
  const ::gobgpapi::Statement& _internal_statement() const;
  ::gobgpapi::Statement* _internal_mutable_statement();
  public:

  // bool all = 2;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteStatementRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Statement* statement_;
  bool all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListStatementRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListStatementRequest) */ {
 public:
  ListStatementRequest();
  virtual ~ListStatementRequest();

  ListStatementRequest(const ListStatementRequest& from);
  ListStatementRequest(ListStatementRequest&& from) noexcept
    : ListStatementRequest() {
    *this = ::std::move(from);
  }

  inline ListStatementRequest& operator=(const ListStatementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStatementRequest& operator=(ListStatementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStatementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListStatementRequest* internal_default_instance() {
    return reinterpret_cast<const ListStatementRequest*>(
               &_ListStatementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ListStatementRequest& a, ListStatementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStatementRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStatementRequest* New() const final {
    return CreateMaybeMessage<ListStatementRequest>(nullptr);
  }

  ListStatementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStatementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStatementRequest& from);
  void MergeFrom(const ListStatementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStatementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListStatementRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListStatementRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListStatementResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListStatementResponse) */ {
 public:
  ListStatementResponse();
  virtual ~ListStatementResponse();

  ListStatementResponse(const ListStatementResponse& from);
  ListStatementResponse(ListStatementResponse&& from) noexcept
    : ListStatementResponse() {
    *this = ::std::move(from);
  }

  inline ListStatementResponse& operator=(const ListStatementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStatementResponse& operator=(ListStatementResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStatementResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListStatementResponse* internal_default_instance() {
    return reinterpret_cast<const ListStatementResponse*>(
               &_ListStatementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ListStatementResponse& a, ListStatementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStatementResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStatementResponse* New() const final {
    return CreateMaybeMessage<ListStatementResponse>(nullptr);
  }

  ListStatementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStatementResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStatementResponse& from);
  void MergeFrom(const ListStatementResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStatementResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListStatementResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementFieldNumber = 1,
  };
  // .gobgpapi.Statement statement = 1;
  bool has_statement() const;
  private:
  bool _internal_has_statement() const;
  public:
  void clear_statement();
  const ::gobgpapi::Statement& statement() const;
  ::gobgpapi::Statement* release_statement();
  ::gobgpapi::Statement* mutable_statement();
  void set_allocated_statement(::gobgpapi::Statement* statement);
  private:
  const ::gobgpapi::Statement& _internal_statement() const;
  ::gobgpapi::Statement* _internal_mutable_statement();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListStatementResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Statement* statement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPolicyAssignmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPolicyAssignmentRequest) */ {
 public:
  AddPolicyAssignmentRequest();
  virtual ~AddPolicyAssignmentRequest();

  AddPolicyAssignmentRequest(const AddPolicyAssignmentRequest& from);
  AddPolicyAssignmentRequest(AddPolicyAssignmentRequest&& from) noexcept
    : AddPolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline AddPolicyAssignmentRequest& operator=(const AddPolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPolicyAssignmentRequest& operator=(AddPolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const AddPolicyAssignmentRequest*>(
               &_AddPolicyAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(AddPolicyAssignmentRequest& a, AddPolicyAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPolicyAssignmentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPolicyAssignmentRequest* New() const final {
    return CreateMaybeMessage<AddPolicyAssignmentRequest>(nullptr);
  }

  AddPolicyAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPolicyAssignmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPolicyAssignmentRequest& from);
  void MergeFrom(const AddPolicyAssignmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPolicyAssignmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPolicyAssignmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
  };
  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);
  private:
  const ::gobgpapi::PolicyAssignment& _internal_assignment() const;
  ::gobgpapi::PolicyAssignment* _internal_mutable_assignment();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPolicyAssignmentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeletePolicyAssignmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeletePolicyAssignmentRequest) */ {
 public:
  DeletePolicyAssignmentRequest();
  virtual ~DeletePolicyAssignmentRequest();

  DeletePolicyAssignmentRequest(const DeletePolicyAssignmentRequest& from);
  DeletePolicyAssignmentRequest(DeletePolicyAssignmentRequest&& from) noexcept
    : DeletePolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline DeletePolicyAssignmentRequest& operator=(const DeletePolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePolicyAssignmentRequest& operator=(DeletePolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePolicyAssignmentRequest*>(
               &_DeletePolicyAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DeletePolicyAssignmentRequest& a, DeletePolicyAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePolicyAssignmentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePolicyAssignmentRequest* New() const final {
    return CreateMaybeMessage<DeletePolicyAssignmentRequest>(nullptr);
  }

  DeletePolicyAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePolicyAssignmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePolicyAssignmentRequest& from);
  void MergeFrom(const DeletePolicyAssignmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePolicyAssignmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeletePolicyAssignmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
    kAllFieldNumber = 2,
  };
  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);
  private:
  const ::gobgpapi::PolicyAssignment& _internal_assignment() const;
  ::gobgpapi::PolicyAssignment* _internal_mutable_assignment();
  public:

  // bool all = 2;
  void clear_all();
  bool all() const;
  void set_all(bool value);
  private:
  bool _internal_all() const;
  void _internal_set_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeletePolicyAssignmentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  bool all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPolicyAssignmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPolicyAssignmentRequest) */ {
 public:
  ListPolicyAssignmentRequest();
  virtual ~ListPolicyAssignmentRequest();

  ListPolicyAssignmentRequest(const ListPolicyAssignmentRequest& from);
  ListPolicyAssignmentRequest(ListPolicyAssignmentRequest&& from) noexcept
    : ListPolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline ListPolicyAssignmentRequest& operator=(const ListPolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPolicyAssignmentRequest& operator=(ListPolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const ListPolicyAssignmentRequest*>(
               &_ListPolicyAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ListPolicyAssignmentRequest& a, ListPolicyAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPolicyAssignmentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPolicyAssignmentRequest* New() const final {
    return CreateMaybeMessage<ListPolicyAssignmentRequest>(nullptr);
  }

  ListPolicyAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPolicyAssignmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPolicyAssignmentRequest& from);
  void MergeFrom(const ListPolicyAssignmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPolicyAssignmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPolicyAssignmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.PolicyDirection direction = 2;
  void clear_direction();
  ::gobgpapi::PolicyDirection direction() const;
  void set_direction(::gobgpapi::PolicyDirection value);
  private:
  ::gobgpapi::PolicyDirection _internal_direction() const;
  void _internal_set_direction(::gobgpapi::PolicyDirection value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPolicyAssignmentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListPolicyAssignmentResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListPolicyAssignmentResponse) */ {
 public:
  ListPolicyAssignmentResponse();
  virtual ~ListPolicyAssignmentResponse();

  ListPolicyAssignmentResponse(const ListPolicyAssignmentResponse& from);
  ListPolicyAssignmentResponse(ListPolicyAssignmentResponse&& from) noexcept
    : ListPolicyAssignmentResponse() {
    *this = ::std::move(from);
  }

  inline ListPolicyAssignmentResponse& operator=(const ListPolicyAssignmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPolicyAssignmentResponse& operator=(ListPolicyAssignmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPolicyAssignmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPolicyAssignmentResponse* internal_default_instance() {
    return reinterpret_cast<const ListPolicyAssignmentResponse*>(
               &_ListPolicyAssignmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ListPolicyAssignmentResponse& a, ListPolicyAssignmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPolicyAssignmentResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPolicyAssignmentResponse* New() const final {
    return CreateMaybeMessage<ListPolicyAssignmentResponse>(nullptr);
  }

  ListPolicyAssignmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPolicyAssignmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPolicyAssignmentResponse& from);
  void MergeFrom(const ListPolicyAssignmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPolicyAssignmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListPolicyAssignmentResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
  };
  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);
  private:
  const ::gobgpapi::PolicyAssignment& _internal_assignment() const;
  ::gobgpapi::PolicyAssignment* _internal_mutable_assignment();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListPolicyAssignmentResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class SetPolicyAssignmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.SetPolicyAssignmentRequest) */ {
 public:
  SetPolicyAssignmentRequest();
  virtual ~SetPolicyAssignmentRequest();

  SetPolicyAssignmentRequest(const SetPolicyAssignmentRequest& from);
  SetPolicyAssignmentRequest(SetPolicyAssignmentRequest&& from) noexcept
    : SetPolicyAssignmentRequest() {
    *this = ::std::move(from);
  }

  inline SetPolicyAssignmentRequest& operator=(const SetPolicyAssignmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPolicyAssignmentRequest& operator=(SetPolicyAssignmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPolicyAssignmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPolicyAssignmentRequest* internal_default_instance() {
    return reinterpret_cast<const SetPolicyAssignmentRequest*>(
               &_SetPolicyAssignmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SetPolicyAssignmentRequest& a, SetPolicyAssignmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPolicyAssignmentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPolicyAssignmentRequest* New() const final {
    return CreateMaybeMessage<SetPolicyAssignmentRequest>(nullptr);
  }

  SetPolicyAssignmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPolicyAssignmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPolicyAssignmentRequest& from);
  void MergeFrom(const SetPolicyAssignmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPolicyAssignmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.SetPolicyAssignmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
  };
  // .gobgpapi.PolicyAssignment assignment = 1;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* release_assignment();
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);
  private:
  const ::gobgpapi::PolicyAssignment& _internal_assignment() const;
  ::gobgpapi::PolicyAssignment* _internal_mutable_assignment();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.SetPolicyAssignmentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* assignment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddRpkiRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddRpkiRequest) */ {
 public:
  AddRpkiRequest();
  virtual ~AddRpkiRequest();

  AddRpkiRequest(const AddRpkiRequest& from);
  AddRpkiRequest(AddRpkiRequest&& from) noexcept
    : AddRpkiRequest() {
    *this = ::std::move(from);
  }

  inline AddRpkiRequest& operator=(const AddRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRpkiRequest& operator=(AddRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const AddRpkiRequest*>(
               &_AddRpkiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(AddRpkiRequest& a, AddRpkiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRpkiRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRpkiRequest* New() const final {
    return CreateMaybeMessage<AddRpkiRequest>(nullptr);
  }

  AddRpkiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRpkiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRpkiRequest& from);
  void MergeFrom(const AddRpkiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRpkiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddRpkiRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kLifetimeFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 lifetime = 3;
  void clear_lifetime();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetime() const;
  void set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetime() const;
  void _internal_set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddRpkiRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeleteRpkiRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteRpkiRequest) */ {
 public:
  DeleteRpkiRequest();
  virtual ~DeleteRpkiRequest();

  DeleteRpkiRequest(const DeleteRpkiRequest& from);
  DeleteRpkiRequest(DeleteRpkiRequest&& from) noexcept
    : DeleteRpkiRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRpkiRequest& operator=(const DeleteRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRpkiRequest& operator=(DeleteRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRpkiRequest*>(
               &_DeleteRpkiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(DeleteRpkiRequest& a, DeleteRpkiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRpkiRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRpkiRequest* New() const final {
    return CreateMaybeMessage<DeleteRpkiRequest>(nullptr);
  }

  DeleteRpkiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRpkiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRpkiRequest& from);
  void MergeFrom(const DeleteRpkiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRpkiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeleteRpkiRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteRpkiRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListRpkiRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListRpkiRequest) */ {
 public:
  ListRpkiRequest();
  virtual ~ListRpkiRequest();

  ListRpkiRequest(const ListRpkiRequest& from);
  ListRpkiRequest(ListRpkiRequest&& from) noexcept
    : ListRpkiRequest() {
    *this = ::std::move(from);
  }

  inline ListRpkiRequest& operator=(const ListRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpkiRequest& operator=(ListRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const ListRpkiRequest*>(
               &_ListRpkiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ListRpkiRequest& a, ListRpkiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpkiRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRpkiRequest* New() const final {
    return CreateMaybeMessage<ListRpkiRequest>(nullptr);
  }

  ListRpkiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRpkiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRpkiRequest& from);
  void MergeFrom(const ListRpkiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpkiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListRpkiRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
  };
  // .gobgpapi.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListRpkiRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Family* family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListRpkiResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListRpkiResponse) */ {
 public:
  ListRpkiResponse();
  virtual ~ListRpkiResponse();

  ListRpkiResponse(const ListRpkiResponse& from);
  ListRpkiResponse(ListRpkiResponse&& from) noexcept
    : ListRpkiResponse() {
    *this = ::std::move(from);
  }

  inline ListRpkiResponse& operator=(const ListRpkiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpkiResponse& operator=(ListRpkiResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRpkiResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRpkiResponse* internal_default_instance() {
    return reinterpret_cast<const ListRpkiResponse*>(
               &_ListRpkiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ListRpkiResponse& a, ListRpkiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpkiResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRpkiResponse* New() const final {
    return CreateMaybeMessage<ListRpkiResponse>(nullptr);
  }

  ListRpkiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRpkiResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRpkiResponse& from);
  void MergeFrom(const ListRpkiResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpkiResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListRpkiResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
  };
  // .gobgpapi.Rpki server = 1;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::gobgpapi::Rpki& server() const;
  ::gobgpapi::Rpki* release_server();
  ::gobgpapi::Rpki* mutable_server();
  void set_allocated_server(::gobgpapi::Rpki* server);
  private:
  const ::gobgpapi::Rpki& _internal_server() const;
  ::gobgpapi::Rpki* _internal_mutable_server();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListRpkiResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Rpki* server_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class EnableRpkiRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableRpkiRequest) */ {
 public:
  EnableRpkiRequest();
  virtual ~EnableRpkiRequest();

  EnableRpkiRequest(const EnableRpkiRequest& from);
  EnableRpkiRequest(EnableRpkiRequest&& from) noexcept
    : EnableRpkiRequest() {
    *this = ::std::move(from);
  }

  inline EnableRpkiRequest& operator=(const EnableRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableRpkiRequest& operator=(EnableRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const EnableRpkiRequest*>(
               &_EnableRpkiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(EnableRpkiRequest& a, EnableRpkiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableRpkiRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableRpkiRequest* New() const final {
    return CreateMaybeMessage<EnableRpkiRequest>(nullptr);
  }

  EnableRpkiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableRpkiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableRpkiRequest& from);
  void MergeFrom(const EnableRpkiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableRpkiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EnableRpkiRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableRpkiRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DisableRpkiRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableRpkiRequest) */ {
 public:
  DisableRpkiRequest();
  virtual ~DisableRpkiRequest();

  DisableRpkiRequest(const DisableRpkiRequest& from);
  DisableRpkiRequest(DisableRpkiRequest&& from) noexcept
    : DisableRpkiRequest() {
    *this = ::std::move(from);
  }

  inline DisableRpkiRequest& operator=(const DisableRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableRpkiRequest& operator=(DisableRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const DisableRpkiRequest*>(
               &_DisableRpkiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(DisableRpkiRequest& a, DisableRpkiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableRpkiRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableRpkiRequest* New() const final {
    return CreateMaybeMessage<DisableRpkiRequest>(nullptr);
  }

  DisableRpkiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableRpkiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableRpkiRequest& from);
  void MergeFrom(const DisableRpkiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableRpkiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DisableRpkiRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableRpkiRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ResetRpkiRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ResetRpkiRequest) */ {
 public:
  ResetRpkiRequest();
  virtual ~ResetRpkiRequest();

  ResetRpkiRequest(const ResetRpkiRequest& from);
  ResetRpkiRequest(ResetRpkiRequest&& from) noexcept
    : ResetRpkiRequest() {
    *this = ::std::move(from);
  }

  inline ResetRpkiRequest& operator=(const ResetRpkiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetRpkiRequest& operator=(ResetRpkiRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetRpkiRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetRpkiRequest* internal_default_instance() {
    return reinterpret_cast<const ResetRpkiRequest*>(
               &_ResetRpkiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ResetRpkiRequest& a, ResetRpkiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetRpkiRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetRpkiRequest* New() const final {
    return CreateMaybeMessage<ResetRpkiRequest>(nullptr);
  }

  ResetRpkiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetRpkiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetRpkiRequest& from);
  void MergeFrom(const ResetRpkiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetRpkiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ResetRpkiRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
    kSoftFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool soft = 3;
  void clear_soft();
  bool soft() const;
  void set_soft(bool value);
  private:
  bool _internal_soft() const;
  void _internal_set_soft(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ResetRpkiRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  bool soft_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListRpkiTableRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListRpkiTableRequest) */ {
 public:
  ListRpkiTableRequest();
  virtual ~ListRpkiTableRequest();

  ListRpkiTableRequest(const ListRpkiTableRequest& from);
  ListRpkiTableRequest(ListRpkiTableRequest&& from) noexcept
    : ListRpkiTableRequest() {
    *this = ::std::move(from);
  }

  inline ListRpkiTableRequest& operator=(const ListRpkiTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpkiTableRequest& operator=(ListRpkiTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRpkiTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRpkiTableRequest* internal_default_instance() {
    return reinterpret_cast<const ListRpkiTableRequest*>(
               &_ListRpkiTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ListRpkiTableRequest& a, ListRpkiTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpkiTableRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRpkiTableRequest* New() const final {
    return CreateMaybeMessage<ListRpkiTableRequest>(nullptr);
  }

  ListRpkiTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRpkiTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRpkiTableRequest& from);
  void MergeFrom(const ListRpkiTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpkiTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListRpkiTableRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
  };
  // .gobgpapi.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListRpkiTableRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Family* family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ListRpkiTableResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ListRpkiTableResponse) */ {
 public:
  ListRpkiTableResponse();
  virtual ~ListRpkiTableResponse();

  ListRpkiTableResponse(const ListRpkiTableResponse& from);
  ListRpkiTableResponse(ListRpkiTableResponse&& from) noexcept
    : ListRpkiTableResponse() {
    *this = ::std::move(from);
  }

  inline ListRpkiTableResponse& operator=(const ListRpkiTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpkiTableResponse& operator=(ListRpkiTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRpkiTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRpkiTableResponse* internal_default_instance() {
    return reinterpret_cast<const ListRpkiTableResponse*>(
               &_ListRpkiTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ListRpkiTableResponse& a, ListRpkiTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpkiTableResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRpkiTableResponse* New() const final {
    return CreateMaybeMessage<ListRpkiTableResponse>(nullptr);
  }

  ListRpkiTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRpkiTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRpkiTableResponse& from);
  void MergeFrom(const ListRpkiTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpkiTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ListRpkiTableResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoaFieldNumber = 1,
  };
  // .gobgpapi.Roa roa = 1;
  bool has_roa() const;
  private:
  bool _internal_has_roa() const;
  public:
  void clear_roa();
  const ::gobgpapi::Roa& roa() const;
  ::gobgpapi::Roa* release_roa();
  ::gobgpapi::Roa* mutable_roa();
  void set_allocated_roa(::gobgpapi::Roa* roa);
  private:
  const ::gobgpapi::Roa& _internal_roa() const;
  ::gobgpapi::Roa* _internal_mutable_roa();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ListRpkiTableResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Roa* roa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class EnableZebraRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableZebraRequest) */ {
 public:
  EnableZebraRequest();
  virtual ~EnableZebraRequest();

  EnableZebraRequest(const EnableZebraRequest& from);
  EnableZebraRequest(EnableZebraRequest&& from) noexcept
    : EnableZebraRequest() {
    *this = ::std::move(from);
  }

  inline EnableZebraRequest& operator=(const EnableZebraRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableZebraRequest& operator=(EnableZebraRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableZebraRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableZebraRequest* internal_default_instance() {
    return reinterpret_cast<const EnableZebraRequest*>(
               &_EnableZebraRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(EnableZebraRequest& a, EnableZebraRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableZebraRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableZebraRequest* New() const final {
    return CreateMaybeMessage<EnableZebraRequest>(nullptr);
  }

  EnableZebraRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableZebraRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableZebraRequest& from);
  void MergeFrom(const EnableZebraRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableZebraRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EnableZebraRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteTypesFieldNumber = 2,
    kUrlFieldNumber = 1,
    kSoftwareNameFieldNumber = 7,
    kVersionFieldNumber = 3,
    kNexthopTriggerEnableFieldNumber = 4,
    kNexthopTriggerDelayFieldNumber = 5,
    kMplsLabelRangeSizeFieldNumber = 6,
  };
  // repeated string route_types = 2;
  int route_types_size() const;
  private:
  int _internal_route_types_size() const;
  public:
  void clear_route_types();
  const std::string& route_types(int index) const;
  std::string* mutable_route_types(int index);
  void set_route_types(int index, const std::string& value);
  void set_route_types(int index, std::string&& value);
  void set_route_types(int index, const char* value);
  void set_route_types(int index, const char* value, size_t size);
  std::string* add_route_types();
  void add_route_types(const std::string& value);
  void add_route_types(std::string&& value);
  void add_route_types(const char* value);
  void add_route_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& route_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_route_types();
  private:
  const std::string& _internal_route_types(int index) const;
  std::string* _internal_add_route_types();
  public:

  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string software_name = 7;
  void clear_software_name();
  const std::string& software_name() const;
  void set_software_name(const std::string& value);
  void set_software_name(std::string&& value);
  void set_software_name(const char* value);
  void set_software_name(const char* value, size_t size);
  std::string* mutable_software_name();
  std::string* release_software_name();
  void set_allocated_software_name(std::string* software_name);
  private:
  const std::string& _internal_software_name() const;
  void _internal_set_software_name(const std::string& value);
  std::string* _internal_mutable_software_name();
  public:

  // uint32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool nexthop_trigger_enable = 4;
  void clear_nexthop_trigger_enable();
  bool nexthop_trigger_enable() const;
  void set_nexthop_trigger_enable(bool value);
  private:
  bool _internal_nexthop_trigger_enable() const;
  void _internal_set_nexthop_trigger_enable(bool value);
  public:

  // uint32 nexthop_trigger_delay = 5;
  void clear_nexthop_trigger_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 nexthop_trigger_delay() const;
  void set_nexthop_trigger_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nexthop_trigger_delay() const;
  void _internal_set_nexthop_trigger_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mpls_label_range_size = 6;
  void clear_mpls_label_range_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls_label_range_size() const;
  void set_mpls_label_range_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mpls_label_range_size() const;
  void _internal_set_mpls_label_range_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableZebraRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> route_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr software_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  bool nexthop_trigger_enable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nexthop_trigger_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls_label_range_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class EnableMrtRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EnableMrtRequest) */ {
 public:
  EnableMrtRequest();
  virtual ~EnableMrtRequest();

  EnableMrtRequest(const EnableMrtRequest& from);
  EnableMrtRequest(EnableMrtRequest&& from) noexcept
    : EnableMrtRequest() {
    *this = ::std::move(from);
  }

  inline EnableMrtRequest& operator=(const EnableMrtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableMrtRequest& operator=(EnableMrtRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableMrtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableMrtRequest* internal_default_instance() {
    return reinterpret_cast<const EnableMrtRequest*>(
               &_EnableMrtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(EnableMrtRequest& a, EnableMrtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableMrtRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableMrtRequest* New() const final {
    return CreateMaybeMessage<EnableMrtRequest>(nullptr);
  }

  EnableMrtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableMrtRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableMrtRequest& from);
  void MergeFrom(const EnableMrtRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableMrtRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EnableMrtRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 2,
    kDumpIntervalFieldNumber = 3,
    kRotationIntervalFieldNumber = 4,
    kDumpTypeFieldNumber = 1,
  };
  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint64 dump_interval = 3;
  void clear_dump_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 dump_interval() const;
  void set_dump_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dump_interval() const;
  void _internal_set_dump_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rotation_interval = 4;
  void clear_rotation_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 rotation_interval() const;
  void set_rotation_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rotation_interval() const;
  void _internal_set_rotation_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 dump_type = 1;
  void clear_dump_type();
  ::PROTOBUF_NAMESPACE_ID::int32 dump_type() const;
  void set_dump_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dump_type() const;
  void _internal_set_dump_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EnableMrtRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dump_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rotation_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 dump_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DisableMrtRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DisableMrtRequest) */ {
 public:
  DisableMrtRequest();
  virtual ~DisableMrtRequest();

  DisableMrtRequest(const DisableMrtRequest& from);
  DisableMrtRequest(DisableMrtRequest&& from) noexcept
    : DisableMrtRequest() {
    *this = ::std::move(from);
  }

  inline DisableMrtRequest& operator=(const DisableMrtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableMrtRequest& operator=(DisableMrtRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisableMrtRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisableMrtRequest* internal_default_instance() {
    return reinterpret_cast<const DisableMrtRequest*>(
               &_DisableMrtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(DisableMrtRequest& a, DisableMrtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableMrtRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisableMrtRequest* New() const final {
    return CreateMaybeMessage<DisableMrtRequest>(nullptr);
  }

  DisableMrtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisableMrtRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisableMrtRequest& from);
  void MergeFrom(const DisableMrtRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisableMrtRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DisableMrtRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DisableMrtRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddBmpRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddBmpRequest) */ {
 public:
  AddBmpRequest();
  virtual ~AddBmpRequest();

  AddBmpRequest(const AddBmpRequest& from);
  AddBmpRequest(AddBmpRequest&& from) noexcept
    : AddBmpRequest() {
    *this = ::std::move(from);
  }

  inline AddBmpRequest& operator=(const AddBmpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBmpRequest& operator=(AddBmpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddBmpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBmpRequest* internal_default_instance() {
    return reinterpret_cast<const AddBmpRequest*>(
               &_AddBmpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(AddBmpRequest& a, AddBmpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBmpRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddBmpRequest* New() const final {
    return CreateMaybeMessage<AddBmpRequest>(nullptr);
  }

  AddBmpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddBmpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddBmpRequest& from);
  void MergeFrom(const AddBmpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBmpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddBmpRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddBmpRequest_MonitoringPolicy MonitoringPolicy;
  static constexpr MonitoringPolicy PRE =
    AddBmpRequest_MonitoringPolicy_PRE;
  static constexpr MonitoringPolicy POST =
    AddBmpRequest_MonitoringPolicy_POST;
  static constexpr MonitoringPolicy BOTH =
    AddBmpRequest_MonitoringPolicy_BOTH;
  static constexpr MonitoringPolicy LOCAL =
    AddBmpRequest_MonitoringPolicy_LOCAL;
  static constexpr MonitoringPolicy ALL =
    AddBmpRequest_MonitoringPolicy_ALL;
  static inline bool MonitoringPolicy_IsValid(int value) {
    return AddBmpRequest_MonitoringPolicy_IsValid(value);
  }
  static constexpr MonitoringPolicy MonitoringPolicy_MIN =
    AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MIN;
  static constexpr MonitoringPolicy MonitoringPolicy_MAX =
    AddBmpRequest_MonitoringPolicy_MonitoringPolicy_MAX;
  static constexpr int MonitoringPolicy_ARRAYSIZE =
    AddBmpRequest_MonitoringPolicy_MonitoringPolicy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MonitoringPolicy_descriptor() {
    return AddBmpRequest_MonitoringPolicy_descriptor();
  }
  template<typename T>
  static inline const std::string& MonitoringPolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MonitoringPolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MonitoringPolicy_Name.");
    return AddBmpRequest_MonitoringPolicy_Name(enum_t_value);
  }
  static inline bool MonitoringPolicy_Parse(const std::string& name,
      MonitoringPolicy* value) {
    return AddBmpRequest_MonitoringPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSysNameFieldNumber = 5,
    kSysDescrFieldNumber = 6,
    kPortFieldNumber = 2,
    kPolicyFieldNumber = 3,
    kStatisticsTimeoutFieldNumber = 4,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string SysName = 5;
  void clear_sysname();
  const std::string& sysname() const;
  void set_sysname(const std::string& value);
  void set_sysname(std::string&& value);
  void set_sysname(const char* value);
  void set_sysname(const char* value, size_t size);
  std::string* mutable_sysname();
  std::string* release_sysname();
  void set_allocated_sysname(std::string* sysname);
  private:
  const std::string& _internal_sysname() const;
  void _internal_set_sysname(const std::string& value);
  std::string* _internal_mutable_sysname();
  public:

  // string SysDescr = 6;
  void clear_sysdescr();
  const std::string& sysdescr() const;
  void set_sysdescr(const std::string& value);
  void set_sysdescr(std::string&& value);
  void set_sysdescr(const char* value);
  void set_sysdescr(const char* value, size_t size);
  std::string* mutable_sysdescr();
  std::string* release_sysdescr();
  void set_allocated_sysdescr(std::string* sysdescr);
  private:
  const std::string& _internal_sysdescr() const;
  void _internal_set_sysdescr(const std::string& value);
  std::string* _internal_mutable_sysdescr();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .gobgpapi.AddBmpRequest.MonitoringPolicy policy = 3;
  void clear_policy();
  ::gobgpapi::AddBmpRequest_MonitoringPolicy policy() const;
  void set_policy(::gobgpapi::AddBmpRequest_MonitoringPolicy value);
  private:
  ::gobgpapi::AddBmpRequest_MonitoringPolicy _internal_policy() const;
  void _internal_set_policy(::gobgpapi::AddBmpRequest_MonitoringPolicy value);
  public:

  // int32 StatisticsTimeout = 4;
  void clear_statisticstimeout();
  ::PROTOBUF_NAMESPACE_ID::int32 statisticstimeout() const;
  void set_statisticstimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statisticstimeout() const;
  void _internal_set_statisticstimeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddBmpRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sysname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sysdescr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  int policy_;
  ::PROTOBUF_NAMESPACE_ID::int32 statisticstimeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DeleteBmpRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DeleteBmpRequest) */ {
 public:
  DeleteBmpRequest();
  virtual ~DeleteBmpRequest();

  DeleteBmpRequest(const DeleteBmpRequest& from);
  DeleteBmpRequest(DeleteBmpRequest&& from) noexcept
    : DeleteBmpRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBmpRequest& operator=(const DeleteBmpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBmpRequest& operator=(DeleteBmpRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteBmpRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBmpRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBmpRequest*>(
               &_DeleteBmpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DeleteBmpRequest& a, DeleteBmpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBmpRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteBmpRequest* New() const final {
    return CreateMaybeMessage<DeleteBmpRequest>(nullptr);
  }

  DeleteBmpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBmpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteBmpRequest& from);
  void MergeFrom(const DeleteBmpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBmpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DeleteBmpRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DeleteBmpRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Family :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Family) */ {
 public:
  Family();
  virtual ~Family();

  Family(const Family& from);
  Family(Family&& from) noexcept
    : Family() {
    *this = ::std::move(from);
  }

  inline Family& operator=(const Family& from) {
    CopyFrom(from);
    return *this;
  }
  inline Family& operator=(Family&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Family& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Family* internal_default_instance() {
    return reinterpret_cast<const Family*>(
               &_Family_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Family& a, Family& b) {
    a.Swap(&b);
  }
  inline void Swap(Family* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Family* New() const final {
    return CreateMaybeMessage<Family>(nullptr);
  }

  Family* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Family>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Family& from);
  void MergeFrom(const Family& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Family* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Family";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Family_Afi Afi;
  static constexpr Afi AFI_UNKNOWN =
    Family_Afi_AFI_UNKNOWN;
  static constexpr Afi AFI_IP =
    Family_Afi_AFI_IP;
  static constexpr Afi AFI_IP6 =
    Family_Afi_AFI_IP6;
  static constexpr Afi AFI_L2VPN =
    Family_Afi_AFI_L2VPN;
  static constexpr Afi AFI_LS =
    Family_Afi_AFI_LS;
  static constexpr Afi AFI_OPAQUE =
    Family_Afi_AFI_OPAQUE;
  static inline bool Afi_IsValid(int value) {
    return Family_Afi_IsValid(value);
  }
  static constexpr Afi Afi_MIN =
    Family_Afi_Afi_MIN;
  static constexpr Afi Afi_MAX =
    Family_Afi_Afi_MAX;
  static constexpr int Afi_ARRAYSIZE =
    Family_Afi_Afi_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Afi_descriptor() {
    return Family_Afi_descriptor();
  }
  template<typename T>
  static inline const std::string& Afi_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Afi>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Afi_Name.");
    return Family_Afi_Name(enum_t_value);
  }
  static inline bool Afi_Parse(const std::string& name,
      Afi* value) {
    return Family_Afi_Parse(name, value);
  }

  typedef Family_Safi Safi;
  static constexpr Safi SAFI_UNKNOWN =
    Family_Safi_SAFI_UNKNOWN;
  static constexpr Safi SAFI_UNICAST =
    Family_Safi_SAFI_UNICAST;
  static constexpr Safi SAFI_MULTICAST =
    Family_Safi_SAFI_MULTICAST;
  static constexpr Safi SAFI_MPLS_LABEL =
    Family_Safi_SAFI_MPLS_LABEL;
  static constexpr Safi SAFI_ENCAPSULATION =
    Family_Safi_SAFI_ENCAPSULATION;
  static constexpr Safi SAFI_VPLS =
    Family_Safi_SAFI_VPLS;
  static constexpr Safi SAFI_EVPN =
    Family_Safi_SAFI_EVPN;
  static constexpr Safi SAFI_LS =
    Family_Safi_SAFI_LS;
  static constexpr Safi SAFI_MPLS_VPN =
    Family_Safi_SAFI_MPLS_VPN;
  static constexpr Safi SAFI_MPLS_VPN_MULTICAST =
    Family_Safi_SAFI_MPLS_VPN_MULTICAST;
  static constexpr Safi SAFI_ROUTE_TARGET_CONSTRAINTS =
    Family_Safi_SAFI_ROUTE_TARGET_CONSTRAINTS;
  static constexpr Safi SAFI_FLOW_SPEC_UNICAST =
    Family_Safi_SAFI_FLOW_SPEC_UNICAST;
  static constexpr Safi SAFI_FLOW_SPEC_VPN =
    Family_Safi_SAFI_FLOW_SPEC_VPN;
  static constexpr Safi SAFI_KEY_VALUE =
    Family_Safi_SAFI_KEY_VALUE;
  static inline bool Safi_IsValid(int value) {
    return Family_Safi_IsValid(value);
  }
  static constexpr Safi Safi_MIN =
    Family_Safi_Safi_MIN;
  static constexpr Safi Safi_MAX =
    Family_Safi_Safi_MAX;
  static constexpr int Safi_ARRAYSIZE =
    Family_Safi_Safi_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Safi_descriptor() {
    return Family_Safi_descriptor();
  }
  template<typename T>
  static inline const std::string& Safi_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Safi>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Safi_Name.");
    return Family_Safi_Name(enum_t_value);
  }
  static inline bool Safi_Parse(const std::string& name,
      Safi* value) {
    return Family_Safi_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAfiFieldNumber = 1,
    kSafiFieldNumber = 2,
  };
  // .gobgpapi.Family.Afi afi = 1;
  void clear_afi();
  ::gobgpapi::Family_Afi afi() const;
  void set_afi(::gobgpapi::Family_Afi value);
  private:
  ::gobgpapi::Family_Afi _internal_afi() const;
  void _internal_set_afi(::gobgpapi::Family_Afi value);
  public:

  // .gobgpapi.Family.Safi safi = 2;
  void clear_safi();
  ::gobgpapi::Family_Safi safi() const;
  void set_safi(::gobgpapi::Family_Safi value);
  private:
  ::gobgpapi::Family_Safi _internal_safi() const;
  void _internal_set_safi(::gobgpapi::Family_Safi value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Family)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int afi_;
  int safi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Validation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Validation) */ {
 public:
  Validation();
  virtual ~Validation();

  Validation(const Validation& from);
  Validation(Validation&& from) noexcept
    : Validation() {
    *this = ::std::move(from);
  }

  inline Validation& operator=(const Validation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validation& operator=(Validation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Validation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Validation* internal_default_instance() {
    return reinterpret_cast<const Validation*>(
               &_Validation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Validation& a, Validation& b) {
    a.Swap(&b);
  }
  inline void Swap(Validation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Validation* New() const final {
    return CreateMaybeMessage<Validation>(nullptr);
  }

  Validation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Validation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Validation& from);
  void MergeFrom(const Validation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Validation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Validation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Validation_State State;
  static constexpr State STATE_NONE =
    Validation_State_STATE_NONE;
  static constexpr State STATE_NOT_FOUND =
    Validation_State_STATE_NOT_FOUND;
  static constexpr State STATE_VALID =
    Validation_State_STATE_VALID;
  static constexpr State STATE_INVALID =
    Validation_State_STATE_INVALID;
  static inline bool State_IsValid(int value) {
    return Validation_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Validation_State_State_MIN;
  static constexpr State State_MAX =
    Validation_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Validation_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Validation_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Validation_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Validation_State_Parse(name, value);
  }

  typedef Validation_Reason Reason;
  static constexpr Reason REASOT_NONE =
    Validation_Reason_REASOT_NONE;
  static constexpr Reason REASON_AS =
    Validation_Reason_REASON_AS;
  static constexpr Reason REASON_LENGTH =
    Validation_Reason_REASON_LENGTH;
  static inline bool Reason_IsValid(int value) {
    return Validation_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    Validation_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    Validation_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    Validation_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return Validation_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return Validation_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(const std::string& name,
      Reason* value) {
    return Validation_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMatchedFieldNumber = 3,
    kUnmatchedAsFieldNumber = 4,
    kUnmatchedLengthFieldNumber = 5,
    kStateFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // repeated .gobgpapi.Roa matched = 3;
  int matched_size() const;
  private:
  int _internal_matched_size() const;
  public:
  void clear_matched();
  ::gobgpapi::Roa* mutable_matched(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >*
      mutable_matched();
  private:
  const ::gobgpapi::Roa& _internal_matched(int index) const;
  ::gobgpapi::Roa* _internal_add_matched();
  public:
  const ::gobgpapi::Roa& matched(int index) const;
  ::gobgpapi::Roa* add_matched();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >&
      matched() const;

  // repeated .gobgpapi.Roa unmatched_as = 4;
  int unmatched_as_size() const;
  private:
  int _internal_unmatched_as_size() const;
  public:
  void clear_unmatched_as();
  ::gobgpapi::Roa* mutable_unmatched_as(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >*
      mutable_unmatched_as();
  private:
  const ::gobgpapi::Roa& _internal_unmatched_as(int index) const;
  ::gobgpapi::Roa* _internal_add_unmatched_as();
  public:
  const ::gobgpapi::Roa& unmatched_as(int index) const;
  ::gobgpapi::Roa* add_unmatched_as();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >&
      unmatched_as() const;

  // repeated .gobgpapi.Roa unmatched_length = 5;
  int unmatched_length_size() const;
  private:
  int _internal_unmatched_length_size() const;
  public:
  void clear_unmatched_length();
  ::gobgpapi::Roa* mutable_unmatched_length(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >*
      mutable_unmatched_length();
  private:
  const ::gobgpapi::Roa& _internal_unmatched_length(int index) const;
  ::gobgpapi::Roa* _internal_add_unmatched_length();
  public:
  const ::gobgpapi::Roa& unmatched_length(int index) const;
  ::gobgpapi::Roa* add_unmatched_length();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >&
      unmatched_length() const;

  // .gobgpapi.Validation.State state = 1;
  void clear_state();
  ::gobgpapi::Validation_State state() const;
  void set_state(::gobgpapi::Validation_State value);
  private:
  ::gobgpapi::Validation_State _internal_state() const;
  void _internal_set_state(::gobgpapi::Validation_State value);
  public:

  // .gobgpapi.Validation.Reason reason = 2;
  void clear_reason();
  ::gobgpapi::Validation_Reason reason() const;
  void set_reason(::gobgpapi::Validation_Reason value);
  private:
  ::gobgpapi::Validation_Reason _internal_reason() const;
  void _internal_set_reason(::gobgpapi::Validation_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Validation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa > matched_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa > unmatched_as_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa > unmatched_length_;
  int state_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPattrsFieldNumber = 2,
    kPattrsBinaryFieldNumber = 21,
    kSourceIdFieldNumber = 11,
    kNeighborIpFieldNumber = 15,
    kUuidFieldNumber = 16,
    kNlriBinaryFieldNumber = 20,
    kNlriFieldNumber = 1,
    kAgeFieldNumber = 3,
    kValidationFieldNumber = 7,
    kFamilyFieldNumber = 9,
    kBestFieldNumber = 4,
    kIsWithdrawFieldNumber = 5,
    kNoImplicitWithdrawFieldNumber = 8,
    kFilteredFieldNumber = 12,
    kSourceAsnFieldNumber = 10,
    kStaleFieldNumber = 13,
    kIsFromExternalFieldNumber = 14,
    kIsNexthopInvalidFieldNumber = 17,
    kIdentifierFieldNumber = 18,
    kLocalIdentifierFieldNumber = 19,
  };
  // repeated .google.protobuf.Any pattrs = 2;
  int pattrs_size() const;
  private:
  int _internal_pattrs_size() const;
  public:
  void clear_pattrs();
  PROTOBUF_NAMESPACE_ID::Any* mutable_pattrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_pattrs();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_pattrs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_pattrs();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& pattrs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_pattrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      pattrs() const;

  // repeated bytes pattrs_binary = 21;
  int pattrs_binary_size() const;
  private:
  int _internal_pattrs_binary_size() const;
  public:
  void clear_pattrs_binary();
  const std::string& pattrs_binary(int index) const;
  std::string* mutable_pattrs_binary(int index);
  void set_pattrs_binary(int index, const std::string& value);
  void set_pattrs_binary(int index, std::string&& value);
  void set_pattrs_binary(int index, const char* value);
  void set_pattrs_binary(int index, const void* value, size_t size);
  std::string* add_pattrs_binary();
  void add_pattrs_binary(const std::string& value);
  void add_pattrs_binary(std::string&& value);
  void add_pattrs_binary(const char* value);
  void add_pattrs_binary(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pattrs_binary() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pattrs_binary();
  private:
  const std::string& _internal_pattrs_binary(int index) const;
  std::string* _internal_add_pattrs_binary();
  public:

  // string source_id = 11;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // string neighbor_ip = 15;
  void clear_neighbor_ip();
  const std::string& neighbor_ip() const;
  void set_neighbor_ip(const std::string& value);
  void set_neighbor_ip(std::string&& value);
  void set_neighbor_ip(const char* value);
  void set_neighbor_ip(const char* value, size_t size);
  std::string* mutable_neighbor_ip();
  std::string* release_neighbor_ip();
  void set_allocated_neighbor_ip(std::string* neighbor_ip);
  private:
  const std::string& _internal_neighbor_ip() const;
  void _internal_set_neighbor_ip(const std::string& value);
  std::string* _internal_mutable_neighbor_ip();
  public:

  // bytes uuid = 16;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes nlri_binary = 20;
  void clear_nlri_binary();
  const std::string& nlri_binary() const;
  void set_nlri_binary(const std::string& value);
  void set_nlri_binary(std::string&& value);
  void set_nlri_binary(const char* value);
  void set_nlri_binary(const void* value, size_t size);
  std::string* mutable_nlri_binary();
  std::string* release_nlri_binary();
  void set_allocated_nlri_binary(std::string* nlri_binary);
  private:
  const std::string& _internal_nlri_binary() const;
  void _internal_set_nlri_binary(const std::string& value);
  std::string* _internal_mutable_nlri_binary();
  public:

  // .google.protobuf.Any nlri = 1;
  bool has_nlri() const;
  private:
  bool _internal_has_nlri() const;
  public:
  void clear_nlri();
  const PROTOBUF_NAMESPACE_ID::Any& nlri() const;
  PROTOBUF_NAMESPACE_ID::Any* release_nlri();
  PROTOBUF_NAMESPACE_ID::Any* mutable_nlri();
  void set_allocated_nlri(PROTOBUF_NAMESPACE_ID::Any* nlri);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_nlri() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_nlri();
  public:

  // .google.protobuf.Timestamp age = 3;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  const PROTOBUF_NAMESPACE_ID::Timestamp& age() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_age();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_age();
  void set_allocated_age(PROTOBUF_NAMESPACE_ID::Timestamp* age);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_age() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_age();
  public:

  // .gobgpapi.Validation validation = 7;
  bool has_validation() const;
  private:
  bool _internal_has_validation() const;
  public:
  void clear_validation();
  const ::gobgpapi::Validation& validation() const;
  ::gobgpapi::Validation* release_validation();
  ::gobgpapi::Validation* mutable_validation();
  void set_allocated_validation(::gobgpapi::Validation* validation);
  private:
  const ::gobgpapi::Validation& _internal_validation() const;
  ::gobgpapi::Validation* _internal_mutable_validation();
  public:

  // .gobgpapi.Family family = 9;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // bool best = 4;
  void clear_best();
  bool best() const;
  void set_best(bool value);
  private:
  bool _internal_best() const;
  void _internal_set_best(bool value);
  public:

  // bool is_withdraw = 5;
  void clear_is_withdraw();
  bool is_withdraw() const;
  void set_is_withdraw(bool value);
  private:
  bool _internal_is_withdraw() const;
  void _internal_set_is_withdraw(bool value);
  public:

  // bool no_implicit_withdraw = 8;
  void clear_no_implicit_withdraw();
  bool no_implicit_withdraw() const;
  void set_no_implicit_withdraw(bool value);
  private:
  bool _internal_no_implicit_withdraw() const;
  void _internal_set_no_implicit_withdraw(bool value);
  public:

  // bool filtered = 12;
  void clear_filtered();
  bool filtered() const;
  void set_filtered(bool value);
  private:
  bool _internal_filtered() const;
  void _internal_set_filtered(bool value);
  public:

  // uint32 source_asn = 10;
  void clear_source_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_asn() const;
  void set_source_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source_asn() const;
  void _internal_set_source_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool stale = 13;
  void clear_stale();
  bool stale() const;
  void set_stale(bool value);
  private:
  bool _internal_stale() const;
  void _internal_set_stale(bool value);
  public:

  // bool is_from_external = 14;
  void clear_is_from_external();
  bool is_from_external() const;
  void set_is_from_external(bool value);
  private:
  bool _internal_is_from_external() const;
  void _internal_set_is_from_external(bool value);
  public:

  // bool is_nexthop_invalid = 17;
  void clear_is_nexthop_invalid();
  bool is_nexthop_invalid() const;
  void set_is_nexthop_invalid(bool value);
  private:
  bool _internal_is_nexthop_invalid() const;
  void _internal_set_is_nexthop_invalid(bool value);
  public:

  // uint32 identifier = 18;
  void clear_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 identifier() const;
  void set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_identifier() const;
  void _internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_identifier = 19;
  void clear_local_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_identifier() const;
  void set_local_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_identifier() const;
  void _internal_set_local_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > pattrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pattrs_binary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nlri_binary_;
  PROTOBUF_NAMESPACE_ID::Any* nlri_;
  PROTOBUF_NAMESPACE_ID::Timestamp* age_;
  ::gobgpapi::Validation* validation_;
  ::gobgpapi::Family* family_;
  bool best_;
  bool is_withdraw_;
  bool no_implicit_withdraw_;
  bool filtered_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_asn_;
  bool stale_;
  bool is_from_external_;
  bool is_nexthop_invalid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 identifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Destination :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Destination) */ {
 public:
  Destination();
  virtual ~Destination();

  Destination(const Destination& from);
  Destination(Destination&& from) noexcept
    : Destination() {
    *this = ::std::move(from);
  }

  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Destination& operator=(Destination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Destination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Destination* internal_default_instance() {
    return reinterpret_cast<const Destination*>(
               &_Destination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(Destination& a, Destination& b) {
    a.Swap(&b);
  }
  inline void Swap(Destination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Destination* New() const final {
    return CreateMaybeMessage<Destination>(nullptr);
  }

  Destination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Destination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Destination& from);
  void MergeFrom(const Destination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Destination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Destination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kPrefixFieldNumber = 1,
  };
  // repeated .gobgpapi.Path paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::gobgpapi::Path* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >*
      mutable_paths();
  private:
  const ::gobgpapi::Path& _internal_paths(int index) const;
  ::gobgpapi::Path* _internal_add_paths();
  public:
  const ::gobgpapi::Path& paths(int index) const;
  ::gobgpapi::Path* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >&
      paths() const;

  // string prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Destination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path > paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class TableLookupPrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TableLookupPrefix) */ {
 public:
  TableLookupPrefix();
  virtual ~TableLookupPrefix();

  TableLookupPrefix(const TableLookupPrefix& from);
  TableLookupPrefix(TableLookupPrefix&& from) noexcept
    : TableLookupPrefix() {
    *this = ::std::move(from);
  }

  inline TableLookupPrefix& operator=(const TableLookupPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableLookupPrefix& operator=(TableLookupPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableLookupPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableLookupPrefix* internal_default_instance() {
    return reinterpret_cast<const TableLookupPrefix*>(
               &_TableLookupPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TableLookupPrefix& a, TableLookupPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(TableLookupPrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableLookupPrefix* New() const final {
    return CreateMaybeMessage<TableLookupPrefix>(nullptr);
  }

  TableLookupPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableLookupPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableLookupPrefix& from);
  void MergeFrom(const TableLookupPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableLookupPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TableLookupPrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kLookupOptionFieldNumber = 2,
  };
  // string prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .gobgpapi.TableLookupOption lookup_option = 2;
  void clear_lookup_option();
  ::gobgpapi::TableLookupOption lookup_option() const;
  void set_lookup_option(::gobgpapi::TableLookupOption value);
  private:
  ::gobgpapi::TableLookupOption _internal_lookup_option() const;
  void _internal_set_lookup_option(::gobgpapi::TableLookupOption value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TableLookupPrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  int lookup_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Peer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const final {
    return CreateMaybeMessage<Peer>(nullptr);
  }

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Peer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfiSafisFieldNumber = 10,
    kApplyPolicyFieldNumber = 1,
    kConfFieldNumber = 2,
    kEbgpMultihopFieldNumber = 3,
    kRouteReflectorFieldNumber = 4,
    kStateFieldNumber = 5,
    kTimersFieldNumber = 6,
    kTransportFieldNumber = 7,
    kRouteServerFieldNumber = 8,
    kGracefulRestartFieldNumber = 9,
  };
  // repeated .gobgpapi.AfiSafi afi_safis = 10;
  int afi_safis_size() const;
  private:
  int _internal_afi_safis_size() const;
  public:
  void clear_afi_safis();
  ::gobgpapi::AfiSafi* mutable_afi_safis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >*
      mutable_afi_safis();
  private:
  const ::gobgpapi::AfiSafi& _internal_afi_safis(int index) const;
  ::gobgpapi::AfiSafi* _internal_add_afi_safis();
  public:
  const ::gobgpapi::AfiSafi& afi_safis(int index) const;
  ::gobgpapi::AfiSafi* add_afi_safis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >&
      afi_safis() const;

  // .gobgpapi.ApplyPolicy apply_policy = 1;
  bool has_apply_policy() const;
  private:
  bool _internal_has_apply_policy() const;
  public:
  void clear_apply_policy();
  const ::gobgpapi::ApplyPolicy& apply_policy() const;
  ::gobgpapi::ApplyPolicy* release_apply_policy();
  ::gobgpapi::ApplyPolicy* mutable_apply_policy();
  void set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy);
  private:
  const ::gobgpapi::ApplyPolicy& _internal_apply_policy() const;
  ::gobgpapi::ApplyPolicy* _internal_mutable_apply_policy();
  public:

  // .gobgpapi.PeerConf conf = 2;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::gobgpapi::PeerConf& conf() const;
  ::gobgpapi::PeerConf* release_conf();
  ::gobgpapi::PeerConf* mutable_conf();
  void set_allocated_conf(::gobgpapi::PeerConf* conf);
  private:
  const ::gobgpapi::PeerConf& _internal_conf() const;
  ::gobgpapi::PeerConf* _internal_mutable_conf();
  public:

  // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
  bool has_ebgp_multihop() const;
  private:
  bool _internal_has_ebgp_multihop() const;
  public:
  void clear_ebgp_multihop();
  const ::gobgpapi::EbgpMultihop& ebgp_multihop() const;
  ::gobgpapi::EbgpMultihop* release_ebgp_multihop();
  ::gobgpapi::EbgpMultihop* mutable_ebgp_multihop();
  void set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop);
  private:
  const ::gobgpapi::EbgpMultihop& _internal_ebgp_multihop() const;
  ::gobgpapi::EbgpMultihop* _internal_mutable_ebgp_multihop();
  public:

  // .gobgpapi.RouteReflector route_reflector = 4;
  bool has_route_reflector() const;
  private:
  bool _internal_has_route_reflector() const;
  public:
  void clear_route_reflector();
  const ::gobgpapi::RouteReflector& route_reflector() const;
  ::gobgpapi::RouteReflector* release_route_reflector();
  ::gobgpapi::RouteReflector* mutable_route_reflector();
  void set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector);
  private:
  const ::gobgpapi::RouteReflector& _internal_route_reflector() const;
  ::gobgpapi::RouteReflector* _internal_mutable_route_reflector();
  public:

  // .gobgpapi.PeerState state = 5;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::PeerState& state() const;
  ::gobgpapi::PeerState* release_state();
  ::gobgpapi::PeerState* mutable_state();
  void set_allocated_state(::gobgpapi::PeerState* state);
  private:
  const ::gobgpapi::PeerState& _internal_state() const;
  ::gobgpapi::PeerState* _internal_mutable_state();
  public:

  // .gobgpapi.Timers timers = 6;
  bool has_timers() const;
  private:
  bool _internal_has_timers() const;
  public:
  void clear_timers();
  const ::gobgpapi::Timers& timers() const;
  ::gobgpapi::Timers* release_timers();
  ::gobgpapi::Timers* mutable_timers();
  void set_allocated_timers(::gobgpapi::Timers* timers);
  private:
  const ::gobgpapi::Timers& _internal_timers() const;
  ::gobgpapi::Timers* _internal_mutable_timers();
  public:

  // .gobgpapi.Transport transport = 7;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::gobgpapi::Transport& transport() const;
  ::gobgpapi::Transport* release_transport();
  ::gobgpapi::Transport* mutable_transport();
  void set_allocated_transport(::gobgpapi::Transport* transport);
  private:
  const ::gobgpapi::Transport& _internal_transport() const;
  ::gobgpapi::Transport* _internal_mutable_transport();
  public:

  // .gobgpapi.RouteServer route_server = 8;
  bool has_route_server() const;
  private:
  bool _internal_has_route_server() const;
  public:
  void clear_route_server();
  const ::gobgpapi::RouteServer& route_server() const;
  ::gobgpapi::RouteServer* release_route_server();
  ::gobgpapi::RouteServer* mutable_route_server();
  void set_allocated_route_server(::gobgpapi::RouteServer* route_server);
  private:
  const ::gobgpapi::RouteServer& _internal_route_server() const;
  ::gobgpapi::RouteServer* _internal_mutable_route_server();
  public:

  // .gobgpapi.GracefulRestart graceful_restart = 9;
  bool has_graceful_restart() const;
  private:
  bool _internal_has_graceful_restart() const;
  public:
  void clear_graceful_restart();
  const ::gobgpapi::GracefulRestart& graceful_restart() const;
  ::gobgpapi::GracefulRestart* release_graceful_restart();
  ::gobgpapi::GracefulRestart* mutable_graceful_restart();
  void set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart);
  private:
  const ::gobgpapi::GracefulRestart& _internal_graceful_restart() const;
  ::gobgpapi::GracefulRestart* _internal_mutable_graceful_restart();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Peer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi > afi_safis_;
  ::gobgpapi::ApplyPolicy* apply_policy_;
  ::gobgpapi::PeerConf* conf_;
  ::gobgpapi::EbgpMultihop* ebgp_multihop_;
  ::gobgpapi::RouteReflector* route_reflector_;
  ::gobgpapi::PeerState* state_;
  ::gobgpapi::Timers* timers_;
  ::gobgpapi::Transport* transport_;
  ::gobgpapi::RouteServer* route_server_;
  ::gobgpapi::GracefulRestart* graceful_restart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class PeerGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PeerGroup) */ {
 public:
  PeerGroup();
  virtual ~PeerGroup();

  PeerGroup(const PeerGroup& from);
  PeerGroup(PeerGroup&& from) noexcept
    : PeerGroup() {
    *this = ::std::move(from);
  }

  inline PeerGroup& operator=(const PeerGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerGroup& operator=(PeerGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerGroup* internal_default_instance() {
    return reinterpret_cast<const PeerGroup*>(
               &_PeerGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(PeerGroup& a, PeerGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerGroup* New() const final {
    return CreateMaybeMessage<PeerGroup>(nullptr);
  }

  PeerGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerGroup& from);
  void MergeFrom(const PeerGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PeerGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfiSafisFieldNumber = 10,
    kApplyPolicyFieldNumber = 1,
    kConfFieldNumber = 2,
    kEbgpMultihopFieldNumber = 3,
    kRouteReflectorFieldNumber = 4,
    kInfoFieldNumber = 5,
    kTimersFieldNumber = 6,
    kTransportFieldNumber = 7,
    kRouteServerFieldNumber = 8,
    kGracefulRestartFieldNumber = 9,
  };
  // repeated .gobgpapi.AfiSafi afi_safis = 10;
  int afi_safis_size() const;
  private:
  int _internal_afi_safis_size() const;
  public:
  void clear_afi_safis();
  ::gobgpapi::AfiSafi* mutable_afi_safis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >*
      mutable_afi_safis();
  private:
  const ::gobgpapi::AfiSafi& _internal_afi_safis(int index) const;
  ::gobgpapi::AfiSafi* _internal_add_afi_safis();
  public:
  const ::gobgpapi::AfiSafi& afi_safis(int index) const;
  ::gobgpapi::AfiSafi* add_afi_safis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >&
      afi_safis() const;

  // .gobgpapi.ApplyPolicy apply_policy = 1;
  bool has_apply_policy() const;
  private:
  bool _internal_has_apply_policy() const;
  public:
  void clear_apply_policy();
  const ::gobgpapi::ApplyPolicy& apply_policy() const;
  ::gobgpapi::ApplyPolicy* release_apply_policy();
  ::gobgpapi::ApplyPolicy* mutable_apply_policy();
  void set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy);
  private:
  const ::gobgpapi::ApplyPolicy& _internal_apply_policy() const;
  ::gobgpapi::ApplyPolicy* _internal_mutable_apply_policy();
  public:

  // .gobgpapi.PeerGroupConf conf = 2;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::gobgpapi::PeerGroupConf& conf() const;
  ::gobgpapi::PeerGroupConf* release_conf();
  ::gobgpapi::PeerGroupConf* mutable_conf();
  void set_allocated_conf(::gobgpapi::PeerGroupConf* conf);
  private:
  const ::gobgpapi::PeerGroupConf& _internal_conf() const;
  ::gobgpapi::PeerGroupConf* _internal_mutable_conf();
  public:

  // .gobgpapi.EbgpMultihop ebgp_multihop = 3;
  bool has_ebgp_multihop() const;
  private:
  bool _internal_has_ebgp_multihop() const;
  public:
  void clear_ebgp_multihop();
  const ::gobgpapi::EbgpMultihop& ebgp_multihop() const;
  ::gobgpapi::EbgpMultihop* release_ebgp_multihop();
  ::gobgpapi::EbgpMultihop* mutable_ebgp_multihop();
  void set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop);
  private:
  const ::gobgpapi::EbgpMultihop& _internal_ebgp_multihop() const;
  ::gobgpapi::EbgpMultihop* _internal_mutable_ebgp_multihop();
  public:

  // .gobgpapi.RouteReflector route_reflector = 4;
  bool has_route_reflector() const;
  private:
  bool _internal_has_route_reflector() const;
  public:
  void clear_route_reflector();
  const ::gobgpapi::RouteReflector& route_reflector() const;
  ::gobgpapi::RouteReflector* release_route_reflector();
  ::gobgpapi::RouteReflector* mutable_route_reflector();
  void set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector);
  private:
  const ::gobgpapi::RouteReflector& _internal_route_reflector() const;
  ::gobgpapi::RouteReflector* _internal_mutable_route_reflector();
  public:

  // .gobgpapi.PeerGroupState info = 5;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::gobgpapi::PeerGroupState& info() const;
  ::gobgpapi::PeerGroupState* release_info();
  ::gobgpapi::PeerGroupState* mutable_info();
  void set_allocated_info(::gobgpapi::PeerGroupState* info);
  private:
  const ::gobgpapi::PeerGroupState& _internal_info() const;
  ::gobgpapi::PeerGroupState* _internal_mutable_info();
  public:

  // .gobgpapi.Timers timers = 6;
  bool has_timers() const;
  private:
  bool _internal_has_timers() const;
  public:
  void clear_timers();
  const ::gobgpapi::Timers& timers() const;
  ::gobgpapi::Timers* release_timers();
  ::gobgpapi::Timers* mutable_timers();
  void set_allocated_timers(::gobgpapi::Timers* timers);
  private:
  const ::gobgpapi::Timers& _internal_timers() const;
  ::gobgpapi::Timers* _internal_mutable_timers();
  public:

  // .gobgpapi.Transport transport = 7;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::gobgpapi::Transport& transport() const;
  ::gobgpapi::Transport* release_transport();
  ::gobgpapi::Transport* mutable_transport();
  void set_allocated_transport(::gobgpapi::Transport* transport);
  private:
  const ::gobgpapi::Transport& _internal_transport() const;
  ::gobgpapi::Transport* _internal_mutable_transport();
  public:

  // .gobgpapi.RouteServer route_server = 8;
  bool has_route_server() const;
  private:
  bool _internal_has_route_server() const;
  public:
  void clear_route_server();
  const ::gobgpapi::RouteServer& route_server() const;
  ::gobgpapi::RouteServer* release_route_server();
  ::gobgpapi::RouteServer* mutable_route_server();
  void set_allocated_route_server(::gobgpapi::RouteServer* route_server);
  private:
  const ::gobgpapi::RouteServer& _internal_route_server() const;
  ::gobgpapi::RouteServer* _internal_mutable_route_server();
  public:

  // .gobgpapi.GracefulRestart graceful_restart = 9;
  bool has_graceful_restart() const;
  private:
  bool _internal_has_graceful_restart() const;
  public:
  void clear_graceful_restart();
  const ::gobgpapi::GracefulRestart& graceful_restart() const;
  ::gobgpapi::GracefulRestart* release_graceful_restart();
  ::gobgpapi::GracefulRestart* mutable_graceful_restart();
  void set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart);
  private:
  const ::gobgpapi::GracefulRestart& _internal_graceful_restart() const;
  ::gobgpapi::GracefulRestart* _internal_mutable_graceful_restart();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi > afi_safis_;
  ::gobgpapi::ApplyPolicy* apply_policy_;
  ::gobgpapi::PeerGroupConf* conf_;
  ::gobgpapi::EbgpMultihop* ebgp_multihop_;
  ::gobgpapi::RouteReflector* route_reflector_;
  ::gobgpapi::PeerGroupState* info_;
  ::gobgpapi::Timers* timers_;
  ::gobgpapi::Transport* transport_;
  ::gobgpapi::RouteServer* route_server_;
  ::gobgpapi::GracefulRestart* graceful_restart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DynamicNeighbor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DynamicNeighbor) */ {
 public:
  DynamicNeighbor();
  virtual ~DynamicNeighbor();

  DynamicNeighbor(const DynamicNeighbor& from);
  DynamicNeighbor(DynamicNeighbor&& from) noexcept
    : DynamicNeighbor() {
    *this = ::std::move(from);
  }

  inline DynamicNeighbor& operator=(const DynamicNeighbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicNeighbor& operator=(DynamicNeighbor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicNeighbor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicNeighbor* internal_default_instance() {
    return reinterpret_cast<const DynamicNeighbor*>(
               &_DynamicNeighbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(DynamicNeighbor& a, DynamicNeighbor& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicNeighbor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicNeighbor* New() const final {
    return CreateMaybeMessage<DynamicNeighbor>(nullptr);
  }

  DynamicNeighbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicNeighbor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicNeighbor& from);
  void MergeFrom(const DynamicNeighbor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicNeighbor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DynamicNeighbor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kPeerGroupFieldNumber = 2,
  };
  // string prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // string peer_group = 2;
  void clear_peer_group();
  const std::string& peer_group() const;
  void set_peer_group(const std::string& value);
  void set_peer_group(std::string&& value);
  void set_peer_group(const char* value);
  void set_peer_group(const char* value, size_t size);
  std::string* mutable_peer_group();
  std::string* release_peer_group();
  void set_allocated_peer_group(std::string* peer_group);
  private:
  const std::string& _internal_peer_group() const;
  void _internal_set_peer_group(const std::string& value);
  std::string* _internal_mutable_peer_group();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DynamicNeighbor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class ApplyPolicy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ApplyPolicy) */ {
 public:
  ApplyPolicy();
  virtual ~ApplyPolicy();

  ApplyPolicy(const ApplyPolicy& from);
  ApplyPolicy(ApplyPolicy&& from) noexcept
    : ApplyPolicy() {
    *this = ::std::move(from);
  }

  inline ApplyPolicy& operator=(const ApplyPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyPolicy& operator=(ApplyPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyPolicy* internal_default_instance() {
    return reinterpret_cast<const ApplyPolicy*>(
               &_ApplyPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ApplyPolicy& a, ApplyPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyPolicy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyPolicy* New() const final {
    return CreateMaybeMessage<ApplyPolicy>(nullptr);
  }

  ApplyPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyPolicy& from);
  void MergeFrom(const ApplyPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ApplyPolicy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInPolicyFieldNumber = 1,
    kExportPolicyFieldNumber = 2,
    kImportPolicyFieldNumber = 3,
  };
  // .gobgpapi.PolicyAssignment in_policy = 1;
  bool has_in_policy() const;
  private:
  bool _internal_has_in_policy() const;
  public:
  void clear_in_policy();
  const ::gobgpapi::PolicyAssignment& in_policy() const;
  ::gobgpapi::PolicyAssignment* release_in_policy();
  ::gobgpapi::PolicyAssignment* mutable_in_policy();
  void set_allocated_in_policy(::gobgpapi::PolicyAssignment* in_policy);
  private:
  const ::gobgpapi::PolicyAssignment& _internal_in_policy() const;
  ::gobgpapi::PolicyAssignment* _internal_mutable_in_policy();
  public:

  // .gobgpapi.PolicyAssignment export_policy = 2;
  bool has_export_policy() const;
  private:
  bool _internal_has_export_policy() const;
  public:
  void clear_export_policy();
  const ::gobgpapi::PolicyAssignment& export_policy() const;
  ::gobgpapi::PolicyAssignment* release_export_policy();
  ::gobgpapi::PolicyAssignment* mutable_export_policy();
  void set_allocated_export_policy(::gobgpapi::PolicyAssignment* export_policy);
  private:
  const ::gobgpapi::PolicyAssignment& _internal_export_policy() const;
  ::gobgpapi::PolicyAssignment* _internal_mutable_export_policy();
  public:

  // .gobgpapi.PolicyAssignment import_policy = 3;
  bool has_import_policy() const;
  private:
  bool _internal_has_import_policy() const;
  public:
  void clear_import_policy();
  const ::gobgpapi::PolicyAssignment& import_policy() const;
  ::gobgpapi::PolicyAssignment* release_import_policy();
  ::gobgpapi::PolicyAssignment* mutable_import_policy();
  void set_allocated_import_policy(::gobgpapi::PolicyAssignment* import_policy);
  private:
  const ::gobgpapi::PolicyAssignment& _internal_import_policy() const;
  ::gobgpapi::PolicyAssignment* _internal_mutable_import_policy();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ApplyPolicy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::PolicyAssignment* in_policy_;
  ::gobgpapi::PolicyAssignment* export_policy_;
  ::gobgpapi::PolicyAssignment* import_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class PrefixLimit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PrefixLimit) */ {
 public:
  PrefixLimit();
  virtual ~PrefixLimit();

  PrefixLimit(const PrefixLimit& from);
  PrefixLimit(PrefixLimit&& from) noexcept
    : PrefixLimit() {
    *this = ::std::move(from);
  }

  inline PrefixLimit& operator=(const PrefixLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefixLimit& operator=(PrefixLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrefixLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrefixLimit* internal_default_instance() {
    return reinterpret_cast<const PrefixLimit*>(
               &_PrefixLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(PrefixLimit& a, PrefixLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefixLimit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrefixLimit* New() const final {
    return CreateMaybeMessage<PrefixLimit>(nullptr);
  }

  PrefixLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrefixLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrefixLimit& from);
  void MergeFrom(const PrefixLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrefixLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PrefixLimit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
    kMaxPrefixesFieldNumber = 2,
    kShutdownThresholdPctFieldNumber = 3,
  };
  // .gobgpapi.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // uint32 max_prefixes = 2;
  void clear_max_prefixes();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_prefixes() const;
  void set_max_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_prefixes() const;
  void _internal_set_max_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 shutdown_threshold_pct = 3;
  void clear_shutdown_threshold_pct();
  ::PROTOBUF_NAMESPACE_ID::uint32 shutdown_threshold_pct() const;
  void set_shutdown_threshold_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shutdown_threshold_pct() const;
  void _internal_set_shutdown_threshold_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PrefixLimit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Family* family_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_prefixes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shutdown_threshold_pct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class PeerConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PeerConf) */ {
 public:
  PeerConf();
  virtual ~PeerConf();

  PeerConf(const PeerConf& from);
  PeerConf(PeerConf&& from) noexcept
    : PeerConf() {
    *this = ::std::move(from);
  }

  inline PeerConf& operator=(const PeerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConf& operator=(PeerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerConf* internal_default_instance() {
    return reinterpret_cast<const PeerConf*>(
               &_PeerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(PeerConf& a, PeerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerConf* New() const final {
    return CreateMaybeMessage<PeerConf>(nullptr);
  }

  PeerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerConf& from);
  void MergeFrom(const PeerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PeerConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PeerConf_RemovePrivateAs RemovePrivateAs;
  static constexpr RemovePrivateAs NONE =
    PeerConf_RemovePrivateAs_NONE;
  static constexpr RemovePrivateAs ALL =
    PeerConf_RemovePrivateAs_ALL;
  static constexpr RemovePrivateAs REPLACE =
    PeerConf_RemovePrivateAs_REPLACE;
  static inline bool RemovePrivateAs_IsValid(int value) {
    return PeerConf_RemovePrivateAs_IsValid(value);
  }
  static constexpr RemovePrivateAs RemovePrivateAs_MIN =
    PeerConf_RemovePrivateAs_RemovePrivateAs_MIN;
  static constexpr RemovePrivateAs RemovePrivateAs_MAX =
    PeerConf_RemovePrivateAs_RemovePrivateAs_MAX;
  static constexpr int RemovePrivateAs_ARRAYSIZE =
    PeerConf_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemovePrivateAs_descriptor() {
    return PeerConf_RemovePrivateAs_descriptor();
  }
  template<typename T>
  static inline const std::string& RemovePrivateAs_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemovePrivateAs>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemovePrivateAs_Name.");
    return PeerConf_RemovePrivateAs_Name(enum_t_value);
  }
  static inline bool RemovePrivateAs_Parse(const std::string& name,
      RemovePrivateAs* value) {
    return PeerConf_RemovePrivateAs_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAuthPasswordFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kNeighborAddressFieldNumber = 4,
    kPeerGroupFieldNumber = 6,
    kNeighborInterfaceFieldNumber = 11,
    kVrfFieldNumber = 12,
    kLocalAsFieldNumber = 3,
    kPeerAsFieldNumber = 5,
    kPeerTypeFieldNumber = 7,
    kRemovePrivateAsFieldNumber = 8,
    kSendCommunityFieldNumber = 10,
    kRouteFlapDampingFieldNumber = 9,
    kReplacePeerAsFieldNumber = 14,
    kAdminDownFieldNumber = 15,
    kAllowOwnAsFieldNumber = 13,
  };
  // string auth_password = 1;
  void clear_auth_password();
  const std::string& auth_password() const;
  void set_auth_password(const std::string& value);
  void set_auth_password(std::string&& value);
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  std::string* mutable_auth_password();
  std::string* release_auth_password();
  void set_allocated_auth_password(std::string* auth_password);
  private:
  const std::string& _internal_auth_password() const;
  void _internal_set_auth_password(const std::string& value);
  std::string* _internal_mutable_auth_password();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string neighbor_address = 4;
  void clear_neighbor_address();
  const std::string& neighbor_address() const;
  void set_neighbor_address(const std::string& value);
  void set_neighbor_address(std::string&& value);
  void set_neighbor_address(const char* value);
  void set_neighbor_address(const char* value, size_t size);
  std::string* mutable_neighbor_address();
  std::string* release_neighbor_address();
  void set_allocated_neighbor_address(std::string* neighbor_address);
  private:
  const std::string& _internal_neighbor_address() const;
  void _internal_set_neighbor_address(const std::string& value);
  std::string* _internal_mutable_neighbor_address();
  public:

  // string peer_group = 6;
  void clear_peer_group();
  const std::string& peer_group() const;
  void set_peer_group(const std::string& value);
  void set_peer_group(std::string&& value);
  void set_peer_group(const char* value);
  void set_peer_group(const char* value, size_t size);
  std::string* mutable_peer_group();
  std::string* release_peer_group();
  void set_allocated_peer_group(std::string* peer_group);
  private:
  const std::string& _internal_peer_group() const;
  void _internal_set_peer_group(const std::string& value);
  std::string* _internal_mutable_peer_group();
  public:

  // string neighbor_interface = 11;
  void clear_neighbor_interface();
  const std::string& neighbor_interface() const;
  void set_neighbor_interface(const std::string& value);
  void set_neighbor_interface(std::string&& value);
  void set_neighbor_interface(const char* value);
  void set_neighbor_interface(const char* value, size_t size);
  std::string* mutable_neighbor_interface();
  std::string* release_neighbor_interface();
  void set_allocated_neighbor_interface(std::string* neighbor_interface);
  private:
  const std::string& _internal_neighbor_interface() const;
  void _internal_set_neighbor_interface(const std::string& value);
  std::string* _internal_mutable_neighbor_interface();
  public:

  // string vrf = 12;
  void clear_vrf();
  const std::string& vrf() const;
  void set_vrf(const std::string& value);
  void set_vrf(std::string&& value);
  void set_vrf(const char* value);
  void set_vrf(const char* value, size_t size);
  std::string* mutable_vrf();
  std::string* release_vrf();
  void set_allocated_vrf(std::string* vrf);
  private:
  const std::string& _internal_vrf() const;
  void _internal_set_vrf(const std::string& value);
  std::string* _internal_mutable_vrf();
  public:

  // uint32 local_as = 3;
  void clear_local_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as() const;
  void set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_as() const;
  void _internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_as = 5;
  void clear_peer_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as() const;
  void set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_as() const;
  void _internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_type = 7;
  void clear_peer_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type() const;
  void set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_type() const;
  void _internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
  void clear_remove_private_as();
  ::gobgpapi::PeerConf_RemovePrivateAs remove_private_as() const;
  void set_remove_private_as(::gobgpapi::PeerConf_RemovePrivateAs value);
  private:
  ::gobgpapi::PeerConf_RemovePrivateAs _internal_remove_private_as() const;
  void _internal_set_remove_private_as(::gobgpapi::PeerConf_RemovePrivateAs value);
  public:

  // uint32 send_community = 10;
  void clear_send_community();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community() const;
  void set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_community() const;
  void _internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool route_flap_damping = 9;
  void clear_route_flap_damping();
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);
  private:
  bool _internal_route_flap_damping() const;
  void _internal_set_route_flap_damping(bool value);
  public:

  // bool replace_peer_as = 14;
  void clear_replace_peer_as();
  bool replace_peer_as() const;
  void set_replace_peer_as(bool value);
  private:
  bool _internal_replace_peer_as() const;
  void _internal_set_replace_peer_as(bool value);
  public:

  // bool admin_down = 15;
  void clear_admin_down();
  bool admin_down() const;
  void set_admin_down(bool value);
  private:
  bool _internal_admin_down() const;
  void _internal_set_admin_down(bool value);
  public:

  // uint32 allow_own_as = 13;
  void clear_allow_own_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 allow_own_as() const;
  void set_allow_own_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_allow_own_as() const;
  void _internal_set_allow_own_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_interface_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type_;
  int remove_private_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community_;
  bool route_flap_damping_;
  bool replace_peer_as_;
  bool admin_down_;
  ::PROTOBUF_NAMESPACE_ID::uint32 allow_own_as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class PeerGroupConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PeerGroupConf) */ {
 public:
  PeerGroupConf();
  virtual ~PeerGroupConf();

  PeerGroupConf(const PeerGroupConf& from);
  PeerGroupConf(PeerGroupConf&& from) noexcept
    : PeerGroupConf() {
    *this = ::std::move(from);
  }

  inline PeerGroupConf& operator=(const PeerGroupConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerGroupConf& operator=(PeerGroupConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerGroupConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerGroupConf* internal_default_instance() {
    return reinterpret_cast<const PeerGroupConf*>(
               &_PeerGroupConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(PeerGroupConf& a, PeerGroupConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerGroupConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerGroupConf* New() const final {
    return CreateMaybeMessage<PeerGroupConf>(nullptr);
  }

  PeerGroupConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerGroupConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerGroupConf& from);
  void MergeFrom(const PeerGroupConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerGroupConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PeerGroupConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PeerGroupConf_RemovePrivateAs RemovePrivateAs;
  static constexpr RemovePrivateAs NONE =
    PeerGroupConf_RemovePrivateAs_NONE;
  static constexpr RemovePrivateAs ALL =
    PeerGroupConf_RemovePrivateAs_ALL;
  static constexpr RemovePrivateAs REPLACE =
    PeerGroupConf_RemovePrivateAs_REPLACE;
  static inline bool RemovePrivateAs_IsValid(int value) {
    return PeerGroupConf_RemovePrivateAs_IsValid(value);
  }
  static constexpr RemovePrivateAs RemovePrivateAs_MIN =
    PeerGroupConf_RemovePrivateAs_RemovePrivateAs_MIN;
  static constexpr RemovePrivateAs RemovePrivateAs_MAX =
    PeerGroupConf_RemovePrivateAs_RemovePrivateAs_MAX;
  static constexpr int RemovePrivateAs_ARRAYSIZE =
    PeerGroupConf_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemovePrivateAs_descriptor() {
    return PeerGroupConf_RemovePrivateAs_descriptor();
  }
  template<typename T>
  static inline const std::string& RemovePrivateAs_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemovePrivateAs>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemovePrivateAs_Name.");
    return PeerGroupConf_RemovePrivateAs_Name(enum_t_value);
  }
  static inline bool RemovePrivateAs_Parse(const std::string& name,
      RemovePrivateAs* value) {
    return PeerGroupConf_RemovePrivateAs_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAuthPasswordFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kPeerGroupNameFieldNumber = 5,
    kLocalAsFieldNumber = 3,
    kPeerAsFieldNumber = 4,
    kPeerTypeFieldNumber = 6,
    kRemovePrivateAsFieldNumber = 7,
    kRouteFlapDampingFieldNumber = 8,
    kSendCommunityFieldNumber = 9,
  };
  // string auth_password = 1;
  void clear_auth_password();
  const std::string& auth_password() const;
  void set_auth_password(const std::string& value);
  void set_auth_password(std::string&& value);
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  std::string* mutable_auth_password();
  std::string* release_auth_password();
  void set_allocated_auth_password(std::string* auth_password);
  private:
  const std::string& _internal_auth_password() const;
  void _internal_set_auth_password(const std::string& value);
  std::string* _internal_mutable_auth_password();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string peer_group_name = 5;
  void clear_peer_group_name();
  const std::string& peer_group_name() const;
  void set_peer_group_name(const std::string& value);
  void set_peer_group_name(std::string&& value);
  void set_peer_group_name(const char* value);
  void set_peer_group_name(const char* value, size_t size);
  std::string* mutable_peer_group_name();
  std::string* release_peer_group_name();
  void set_allocated_peer_group_name(std::string* peer_group_name);
  private:
  const std::string& _internal_peer_group_name() const;
  void _internal_set_peer_group_name(const std::string& value);
  std::string* _internal_mutable_peer_group_name();
  public:

  // uint32 local_as = 3;
  void clear_local_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as() const;
  void set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_as() const;
  void _internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_as = 4;
  void clear_peer_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as() const;
  void set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_as() const;
  void _internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_type = 6;
  void clear_peer_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type() const;
  void set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_type() const;
  void _internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .gobgpapi.PeerGroupConf.RemovePrivateAs remove_private_as = 7;
  void clear_remove_private_as();
  ::gobgpapi::PeerGroupConf_RemovePrivateAs remove_private_as() const;
  void set_remove_private_as(::gobgpapi::PeerGroupConf_RemovePrivateAs value);
  private:
  ::gobgpapi::PeerGroupConf_RemovePrivateAs _internal_remove_private_as() const;
  void _internal_set_remove_private_as(::gobgpapi::PeerGroupConf_RemovePrivateAs value);
  public:

  // bool route_flap_damping = 8;
  void clear_route_flap_damping();
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);
  private:
  bool _internal_route_flap_damping() const;
  void _internal_set_route_flap_damping(bool value);
  public:

  // uint32 send_community = 9;
  void clear_send_community();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community() const;
  void set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_community() const;
  void _internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerGroupConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_group_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type_;
  int remove_private_as_;
  bool route_flap_damping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class PeerGroupState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PeerGroupState) */ {
 public:
  PeerGroupState();
  virtual ~PeerGroupState();

  PeerGroupState(const PeerGroupState& from);
  PeerGroupState(PeerGroupState&& from) noexcept
    : PeerGroupState() {
    *this = ::std::move(from);
  }

  inline PeerGroupState& operator=(const PeerGroupState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerGroupState& operator=(PeerGroupState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerGroupState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerGroupState* internal_default_instance() {
    return reinterpret_cast<const PeerGroupState*>(
               &_PeerGroupState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(PeerGroupState& a, PeerGroupState& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerGroupState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerGroupState* New() const final {
    return CreateMaybeMessage<PeerGroupState>(nullptr);
  }

  PeerGroupState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerGroupState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerGroupState& from);
  void MergeFrom(const PeerGroupState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerGroupState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PeerGroupState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PeerGroupState_RemovePrivateAs RemovePrivateAs;
  static constexpr RemovePrivateAs NONE =
    PeerGroupState_RemovePrivateAs_NONE;
  static constexpr RemovePrivateAs ALL =
    PeerGroupState_RemovePrivateAs_ALL;
  static constexpr RemovePrivateAs REPLACE =
    PeerGroupState_RemovePrivateAs_REPLACE;
  static inline bool RemovePrivateAs_IsValid(int value) {
    return PeerGroupState_RemovePrivateAs_IsValid(value);
  }
  static constexpr RemovePrivateAs RemovePrivateAs_MIN =
    PeerGroupState_RemovePrivateAs_RemovePrivateAs_MIN;
  static constexpr RemovePrivateAs RemovePrivateAs_MAX =
    PeerGroupState_RemovePrivateAs_RemovePrivateAs_MAX;
  static constexpr int RemovePrivateAs_ARRAYSIZE =
    PeerGroupState_RemovePrivateAs_RemovePrivateAs_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemovePrivateAs_descriptor() {
    return PeerGroupState_RemovePrivateAs_descriptor();
  }
  template<typename T>
  static inline const std::string& RemovePrivateAs_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemovePrivateAs>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemovePrivateAs_Name.");
    return PeerGroupState_RemovePrivateAs_Name(enum_t_value);
  }
  static inline bool RemovePrivateAs_Parse(const std::string& name,
      RemovePrivateAs* value) {
    return PeerGroupState_RemovePrivateAs_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAuthPasswordFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kPeerGroupNameFieldNumber = 5,
    kLocalAsFieldNumber = 3,
    kPeerAsFieldNumber = 4,
    kPeerTypeFieldNumber = 6,
    kRemovePrivateAsFieldNumber = 7,
    kRouteFlapDampingFieldNumber = 8,
    kSendCommunityFieldNumber = 9,
    kTotalPathsFieldNumber = 10,
    kTotalPrefixesFieldNumber = 11,
  };
  // string auth_password = 1;
  void clear_auth_password();
  const std::string& auth_password() const;
  void set_auth_password(const std::string& value);
  void set_auth_password(std::string&& value);
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  std::string* mutable_auth_password();
  std::string* release_auth_password();
  void set_allocated_auth_password(std::string* auth_password);
  private:
  const std::string& _internal_auth_password() const;
  void _internal_set_auth_password(const std::string& value);
  std::string* _internal_mutable_auth_password();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string peer_group_name = 5;
  void clear_peer_group_name();
  const std::string& peer_group_name() const;
  void set_peer_group_name(const std::string& value);
  void set_peer_group_name(std::string&& value);
  void set_peer_group_name(const char* value);
  void set_peer_group_name(const char* value, size_t size);
  std::string* mutable_peer_group_name();
  std::string* release_peer_group_name();
  void set_allocated_peer_group_name(std::string* peer_group_name);
  private:
  const std::string& _internal_peer_group_name() const;
  void _internal_set_peer_group_name(const std::string& value);
  std::string* _internal_mutable_peer_group_name();
  public:

  // uint32 local_as = 3;
  void clear_local_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as() const;
  void set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_as() const;
  void _internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_as = 4;
  void clear_peer_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as() const;
  void set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_as() const;
  void _internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_type = 6;
  void clear_peer_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type() const;
  void set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_type() const;
  void _internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .gobgpapi.PeerGroupState.RemovePrivateAs remove_private_as = 7;
  void clear_remove_private_as();
  ::gobgpapi::PeerGroupState_RemovePrivateAs remove_private_as() const;
  void set_remove_private_as(::gobgpapi::PeerGroupState_RemovePrivateAs value);
  private:
  ::gobgpapi::PeerGroupState_RemovePrivateAs _internal_remove_private_as() const;
  void _internal_set_remove_private_as(::gobgpapi::PeerGroupState_RemovePrivateAs value);
  public:

  // bool route_flap_damping = 8;
  void clear_route_flap_damping();
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);
  private:
  bool _internal_route_flap_damping() const;
  void _internal_set_route_flap_damping(bool value);
  public:

  // uint32 send_community = 9;
  void clear_send_community();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community() const;
  void set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_community() const;
  void _internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_paths = 10;
  void clear_total_paths();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_paths() const;
  void set_total_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_paths() const;
  void _internal_set_total_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_prefixes = 11;
  void clear_total_prefixes();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_prefixes() const;
  void set_total_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_prefixes() const;
  void _internal_set_total_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerGroupState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_group_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type_;
  int remove_private_as_;
  bool route_flap_damping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_paths_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_prefixes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class EbgpMultihop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EbgpMultihop) */ {
 public:
  EbgpMultihop();
  virtual ~EbgpMultihop();

  EbgpMultihop(const EbgpMultihop& from);
  EbgpMultihop(EbgpMultihop&& from) noexcept
    : EbgpMultihop() {
    *this = ::std::move(from);
  }

  inline EbgpMultihop& operator=(const EbgpMultihop& from) {
    CopyFrom(from);
    return *this;
  }
  inline EbgpMultihop& operator=(EbgpMultihop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EbgpMultihop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbgpMultihop* internal_default_instance() {
    return reinterpret_cast<const EbgpMultihop*>(
               &_EbgpMultihop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(EbgpMultihop& a, EbgpMultihop& b) {
    a.Swap(&b);
  }
  inline void Swap(EbgpMultihop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EbgpMultihop* New() const final {
    return CreateMaybeMessage<EbgpMultihop>(nullptr);
  }

  EbgpMultihop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EbgpMultihop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EbgpMultihop& from);
  void MergeFrom(const EbgpMultihop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EbgpMultihop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EbgpMultihop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kMultihopTtlFieldNumber = 2,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 multihop_ttl = 2;
  void clear_multihop_ttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 multihop_ttl() const;
  void set_multihop_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multihop_ttl() const;
  void _internal_set_multihop_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EbgpMultihop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multihop_ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteReflector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteReflector) */ {
 public:
  RouteReflector();
  virtual ~RouteReflector();

  RouteReflector(const RouteReflector& from);
  RouteReflector(RouteReflector&& from) noexcept
    : RouteReflector() {
    *this = ::std::move(from);
  }

  inline RouteReflector& operator=(const RouteReflector& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteReflector& operator=(RouteReflector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteReflector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteReflector* internal_default_instance() {
    return reinterpret_cast<const RouteReflector*>(
               &_RouteReflector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(RouteReflector& a, RouteReflector& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteReflector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteReflector* New() const final {
    return CreateMaybeMessage<RouteReflector>(nullptr);
  }

  RouteReflector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteReflector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteReflector& from);
  void MergeFrom(const RouteReflector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteReflector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteReflector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteReflectorClusterIdFieldNumber = 2,
    kRouteReflectorClientFieldNumber = 1,
  };
  // string route_reflector_cluster_id = 2;
  void clear_route_reflector_cluster_id();
  const std::string& route_reflector_cluster_id() const;
  void set_route_reflector_cluster_id(const std::string& value);
  void set_route_reflector_cluster_id(std::string&& value);
  void set_route_reflector_cluster_id(const char* value);
  void set_route_reflector_cluster_id(const char* value, size_t size);
  std::string* mutable_route_reflector_cluster_id();
  std::string* release_route_reflector_cluster_id();
  void set_allocated_route_reflector_cluster_id(std::string* route_reflector_cluster_id);
  private:
  const std::string& _internal_route_reflector_cluster_id() const;
  void _internal_set_route_reflector_cluster_id(const std::string& value);
  std::string* _internal_mutable_route_reflector_cluster_id();
  public:

  // bool route_reflector_client = 1;
  void clear_route_reflector_client();
  bool route_reflector_client() const;
  void set_route_reflector_client(bool value);
  private:
  bool _internal_route_reflector_client() const;
  void _internal_set_route_reflector_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteReflector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_reflector_cluster_id_;
  bool route_reflector_client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class PeerState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PeerState) */ {
 public:
  PeerState();
  virtual ~PeerState();

  PeerState(const PeerState& from);
  PeerState(PeerState&& from) noexcept
    : PeerState() {
    *this = ::std::move(from);
  }

  inline PeerState& operator=(const PeerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerState& operator=(PeerState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerState* internal_default_instance() {
    return reinterpret_cast<const PeerState*>(
               &_PeerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(PeerState& a, PeerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerState* New() const final {
    return CreateMaybeMessage<PeerState>(nullptr);
  }

  PeerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerState& from);
  void MergeFrom(const PeerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PeerState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PeerState_SessionState SessionState;
  static constexpr SessionState UNKNOWN =
    PeerState_SessionState_UNKNOWN;
  static constexpr SessionState IDLE =
    PeerState_SessionState_IDLE;
  static constexpr SessionState CONNECT =
    PeerState_SessionState_CONNECT;
  static constexpr SessionState ACTIVE =
    PeerState_SessionState_ACTIVE;
  static constexpr SessionState OPENSENT =
    PeerState_SessionState_OPENSENT;
  static constexpr SessionState OPENCONFIRM =
    PeerState_SessionState_OPENCONFIRM;
  static constexpr SessionState ESTABLISHED =
    PeerState_SessionState_ESTABLISHED;
  static inline bool SessionState_IsValid(int value) {
    return PeerState_SessionState_IsValid(value);
  }
  static constexpr SessionState SessionState_MIN =
    PeerState_SessionState_SessionState_MIN;
  static constexpr SessionState SessionState_MAX =
    PeerState_SessionState_SessionState_MAX;
  static constexpr int SessionState_ARRAYSIZE =
    PeerState_SessionState_SessionState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SessionState_descriptor() {
    return PeerState_SessionState_descriptor();
  }
  template<typename T>
  static inline const std::string& SessionState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SessionState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SessionState_Name.");
    return PeerState_SessionState_Name(enum_t_value);
  }
  static inline bool SessionState_Parse(const std::string& name,
      SessionState* value) {
    return PeerState_SessionState_Parse(name, value);
  }

  typedef PeerState_AdminState AdminState;
  static constexpr AdminState UP =
    PeerState_AdminState_UP;
  static constexpr AdminState DOWN =
    PeerState_AdminState_DOWN;
  static constexpr AdminState PFX_CT =
    PeerState_AdminState_PFX_CT;
  static inline bool AdminState_IsValid(int value) {
    return PeerState_AdminState_IsValid(value);
  }
  static constexpr AdminState AdminState_MIN =
    PeerState_AdminState_AdminState_MIN;
  static constexpr AdminState AdminState_MAX =
    PeerState_AdminState_AdminState_MAX;
  static constexpr int AdminState_ARRAYSIZE =
    PeerState_AdminState_AdminState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AdminState_descriptor() {
    return PeerState_AdminState_descriptor();
  }
  template<typename T>
  static inline const std::string& AdminState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AdminState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AdminState_Name.");
    return PeerState_AdminState_Name(enum_t_value);
  }
  static inline bool AdminState_Parse(const std::string& name,
      AdminState* value) {
    return PeerState_AdminState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteCapFieldNumber = 18,
    kLocalCapFieldNumber = 19,
    kAuthPasswordFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kNeighborAddressFieldNumber = 5,
    kPeerGroupFieldNumber = 7,
    kRouterIdFieldNumber = 20,
    kMessagesFieldNumber = 4,
    kQueuesFieldNumber = 9,
    kLocalAsFieldNumber = 3,
    kPeerAsFieldNumber = 6,
    kPeerTypeFieldNumber = 8,
    kRemovePrivateAsFieldNumber = 10,
    kRouteFlapDampingFieldNumber = 11,
    kSendCommunityFieldNumber = 12,
    kSessionStateFieldNumber = 13,
    kAdminStateFieldNumber = 15,
    kOutQFieldNumber = 16,
    kFlopsFieldNumber = 17,
  };
  // repeated .google.protobuf.Any remote_cap = 18;
  int remote_cap_size() const;
  private:
  int _internal_remote_cap_size() const;
  public:
  void clear_remote_cap();
  PROTOBUF_NAMESPACE_ID::Any* mutable_remote_cap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_remote_cap();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_remote_cap(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_remote_cap();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& remote_cap(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_remote_cap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      remote_cap() const;

  // repeated .google.protobuf.Any local_cap = 19;
  int local_cap_size() const;
  private:
  int _internal_local_cap_size() const;
  public:
  void clear_local_cap();
  PROTOBUF_NAMESPACE_ID::Any* mutable_local_cap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_local_cap();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_local_cap(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_local_cap();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& local_cap(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_local_cap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      local_cap() const;

  // string auth_password = 1;
  void clear_auth_password();
  const std::string& auth_password() const;
  void set_auth_password(const std::string& value);
  void set_auth_password(std::string&& value);
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  std::string* mutable_auth_password();
  std::string* release_auth_password();
  void set_allocated_auth_password(std::string* auth_password);
  private:
  const std::string& _internal_auth_password() const;
  void _internal_set_auth_password(const std::string& value);
  std::string* _internal_mutable_auth_password();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string neighbor_address = 5;
  void clear_neighbor_address();
  const std::string& neighbor_address() const;
  void set_neighbor_address(const std::string& value);
  void set_neighbor_address(std::string&& value);
  void set_neighbor_address(const char* value);
  void set_neighbor_address(const char* value, size_t size);
  std::string* mutable_neighbor_address();
  std::string* release_neighbor_address();
  void set_allocated_neighbor_address(std::string* neighbor_address);
  private:
  const std::string& _internal_neighbor_address() const;
  void _internal_set_neighbor_address(const std::string& value);
  std::string* _internal_mutable_neighbor_address();
  public:

  // string peer_group = 7;
  void clear_peer_group();
  const std::string& peer_group() const;
  void set_peer_group(const std::string& value);
  void set_peer_group(std::string&& value);
  void set_peer_group(const char* value);
  void set_peer_group(const char* value, size_t size);
  std::string* mutable_peer_group();
  std::string* release_peer_group();
  void set_allocated_peer_group(std::string* peer_group);
  private:
  const std::string& _internal_peer_group() const;
  void _internal_set_peer_group(const std::string& value);
  std::string* _internal_mutable_peer_group();
  public:

  // string router_id = 20;
  void clear_router_id();
  const std::string& router_id() const;
  void set_router_id(const std::string& value);
  void set_router_id(std::string&& value);
  void set_router_id(const char* value);
  void set_router_id(const char* value, size_t size);
  std::string* mutable_router_id();
  std::string* release_router_id();
  void set_allocated_router_id(std::string* router_id);
  private:
  const std::string& _internal_router_id() const;
  void _internal_set_router_id(const std::string& value);
  std::string* _internal_mutable_router_id();
  public:

  // .gobgpapi.Messages messages = 4;
  bool has_messages() const;
  private:
  bool _internal_has_messages() const;
  public:
  void clear_messages();
  const ::gobgpapi::Messages& messages() const;
  ::gobgpapi::Messages* release_messages();
  ::gobgpapi::Messages* mutable_messages();
  void set_allocated_messages(::gobgpapi::Messages* messages);
  private:
  const ::gobgpapi::Messages& _internal_messages() const;
  ::gobgpapi::Messages* _internal_mutable_messages();
  public:

  // .gobgpapi.Queues queues = 9;
  bool has_queues() const;
  private:
  bool _internal_has_queues() const;
  public:
  void clear_queues();
  const ::gobgpapi::Queues& queues() const;
  ::gobgpapi::Queues* release_queues();
  ::gobgpapi::Queues* mutable_queues();
  void set_allocated_queues(::gobgpapi::Queues* queues);
  private:
  const ::gobgpapi::Queues& _internal_queues() const;
  ::gobgpapi::Queues* _internal_mutable_queues();
  public:

  // uint32 local_as = 3;
  void clear_local_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as() const;
  void set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_as() const;
  void _internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_as = 6;
  void clear_peer_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as() const;
  void set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_as() const;
  void _internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_type = 8;
  void clear_peer_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type() const;
  void set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_type() const;
  void _internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 remove_private_as = 10;
  void clear_remove_private_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 remove_private_as() const;
  void set_remove_private_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remove_private_as() const;
  void _internal_set_remove_private_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool route_flap_damping = 11;
  void clear_route_flap_damping();
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);
  private:
  bool _internal_route_flap_damping() const;
  void _internal_set_route_flap_damping(bool value);
  public:

  // uint32 send_community = 12;
  void clear_send_community();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community() const;
  void set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_community() const;
  void _internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .gobgpapi.PeerState.SessionState session_state = 13;
  void clear_session_state();
  ::gobgpapi::PeerState_SessionState session_state() const;
  void set_session_state(::gobgpapi::PeerState_SessionState value);
  private:
  ::gobgpapi::PeerState_SessionState _internal_session_state() const;
  void _internal_set_session_state(::gobgpapi::PeerState_SessionState value);
  public:

  // .gobgpapi.PeerState.AdminState admin_state = 15;
  void clear_admin_state();
  ::gobgpapi::PeerState_AdminState admin_state() const;
  void set_admin_state(::gobgpapi::PeerState_AdminState value);
  private:
  ::gobgpapi::PeerState_AdminState _internal_admin_state() const;
  void _internal_set_admin_state(::gobgpapi::PeerState_AdminState value);
  public:

  // uint32 out_q = 16;
  void clear_out_q();
  ::PROTOBUF_NAMESPACE_ID::uint32 out_q() const;
  void set_out_q(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_out_q() const;
  void _internal_set_out_q(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 flops = 17;
  void clear_flops();
  ::PROTOBUF_NAMESPACE_ID::uint32 flops() const;
  void set_flops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flops() const;
  void _internal_set_flops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > remote_cap_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > local_cap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr router_id_;
  ::gobgpapi::Messages* messages_;
  ::gobgpapi::Queues* queues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remove_private_as_;
  bool route_flap_damping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_community_;
  int session_state_;
  int admin_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_q_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Messages :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Messages) */ {
 public:
  Messages();
  virtual ~Messages();

  Messages(const Messages& from);
  Messages(Messages&& from) noexcept
    : Messages() {
    *this = ::std::move(from);
  }

  inline Messages& operator=(const Messages& from) {
    CopyFrom(from);
    return *this;
  }
  inline Messages& operator=(Messages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Messages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Messages* internal_default_instance() {
    return reinterpret_cast<const Messages*>(
               &_Messages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Messages& a, Messages& b) {
    a.Swap(&b);
  }
  inline void Swap(Messages* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Messages* New() const final {
    return CreateMaybeMessage<Messages>(nullptr);
  }

  Messages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Messages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Messages& from);
  void MergeFrom(const Messages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Messages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Messages";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedFieldNumber = 1,
    kSentFieldNumber = 2,
  };
  // .gobgpapi.Message received = 1;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  const ::gobgpapi::Message& received() const;
  ::gobgpapi::Message* release_received();
  ::gobgpapi::Message* mutable_received();
  void set_allocated_received(::gobgpapi::Message* received);
  private:
  const ::gobgpapi::Message& _internal_received() const;
  ::gobgpapi::Message* _internal_mutable_received();
  public:

  // .gobgpapi.Message sent = 2;
  bool has_sent() const;
  private:
  bool _internal_has_sent() const;
  public:
  void clear_sent();
  const ::gobgpapi::Message& sent() const;
  ::gobgpapi::Message* release_sent();
  ::gobgpapi::Message* mutable_sent();
  void set_allocated_sent(::gobgpapi::Message* sent);
  private:
  const ::gobgpapi::Message& _internal_sent() const;
  ::gobgpapi::Message* _internal_mutable_sent();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Messages)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Message* received_;
  ::gobgpapi::Message* sent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationFieldNumber = 1,
    kUpdateFieldNumber = 2,
    kOpenFieldNumber = 3,
    kKeepaliveFieldNumber = 4,
    kRefreshFieldNumber = 5,
    kDiscardedFieldNumber = 6,
    kTotalFieldNumber = 7,
    kWithdrawUpdateFieldNumber = 8,
    kWithdrawPrefixFieldNumber = 9,
  };
  // uint64 notification = 1;
  void clear_notification();
  ::PROTOBUF_NAMESPACE_ID::uint64 notification() const;
  void set_notification(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_notification() const;
  void _internal_set_notification(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 update = 2;
  void clear_update();
  ::PROTOBUF_NAMESPACE_ID::uint64 update() const;
  void set_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_update() const;
  void _internal_set_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 open = 3;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::uint64 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 keepalive = 4;
  void clear_keepalive();
  ::PROTOBUF_NAMESPACE_ID::uint64 keepalive() const;
  void set_keepalive(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_keepalive() const;
  void _internal_set_keepalive(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 refresh = 5;
  void clear_refresh();
  ::PROTOBUF_NAMESPACE_ID::uint64 refresh() const;
  void set_refresh(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_refresh() const;
  void _internal_set_refresh(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 discarded = 6;
  void clear_discarded();
  ::PROTOBUF_NAMESPACE_ID::uint64 discarded() const;
  void set_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_discarded() const;
  void _internal_set_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total = 7;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 withdraw_update = 8;
  void clear_withdraw_update();
  ::PROTOBUF_NAMESPACE_ID::uint64 withdraw_update() const;
  void set_withdraw_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_withdraw_update() const;
  void _internal_set_withdraw_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 withdraw_prefix = 9;
  void clear_withdraw_prefix();
  ::PROTOBUF_NAMESPACE_ID::uint64 withdraw_prefix() const;
  void set_withdraw_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_withdraw_prefix() const;
  void _internal_set_withdraw_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 notification_;
  ::PROTOBUF_NAMESPACE_ID::uint64 update_;
  ::PROTOBUF_NAMESPACE_ID::uint64 open_;
  ::PROTOBUF_NAMESPACE_ID::uint64 keepalive_;
  ::PROTOBUF_NAMESPACE_ID::uint64 refresh_;
  ::PROTOBUF_NAMESPACE_ID::uint64 discarded_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  ::PROTOBUF_NAMESPACE_ID::uint64 withdraw_update_;
  ::PROTOBUF_NAMESPACE_ID::uint64 withdraw_prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Queues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Queues) */ {
 public:
  Queues();
  virtual ~Queues();

  Queues(const Queues& from);
  Queues(Queues&& from) noexcept
    : Queues() {
    *this = ::std::move(from);
  }

  inline Queues& operator=(const Queues& from) {
    CopyFrom(from);
    return *this;
  }
  inline Queues& operator=(Queues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Queues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Queues* internal_default_instance() {
    return reinterpret_cast<const Queues*>(
               &_Queues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Queues& a, Queues& b) {
    a.Swap(&b);
  }
  inline void Swap(Queues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Queues* New() const final {
    return CreateMaybeMessage<Queues>(nullptr);
  }

  Queues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Queues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Queues& from);
  void MergeFrom(const Queues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Queues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Queues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kOutputFieldNumber = 2,
  };
  // uint32 input = 1;
  void clear_input();
  ::PROTOBUF_NAMESPACE_ID::uint32 input() const;
  void set_input(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input() const;
  void _internal_set_input(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 output = 2;
  void clear_output();
  ::PROTOBUF_NAMESPACE_ID::uint32 output() const;
  void set_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output() const;
  void _internal_set_output(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Queues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Timers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Timers) */ {
 public:
  Timers();
  virtual ~Timers();

  Timers(const Timers& from);
  Timers(Timers&& from) noexcept
    : Timers() {
    *this = ::std::move(from);
  }

  inline Timers& operator=(const Timers& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timers& operator=(Timers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timers* internal_default_instance() {
    return reinterpret_cast<const Timers*>(
               &_Timers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(Timers& a, Timers& b) {
    a.Swap(&b);
  }
  inline void Swap(Timers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timers* New() const final {
    return CreateMaybeMessage<Timers>(nullptr);
  }

  Timers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timers& from);
  void MergeFrom(const Timers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Timers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.TimersConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::TimersConfig& config() const;
  ::gobgpapi::TimersConfig* release_config();
  ::gobgpapi::TimersConfig* mutable_config();
  void set_allocated_config(::gobgpapi::TimersConfig* config);
  private:
  const ::gobgpapi::TimersConfig& _internal_config() const;
  ::gobgpapi::TimersConfig* _internal_mutable_config();
  public:

  // .gobgpapi.TimersState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::TimersState& state() const;
  ::gobgpapi::TimersState* release_state();
  ::gobgpapi::TimersState* mutable_state();
  void set_allocated_state(::gobgpapi::TimersState* state);
  private:
  const ::gobgpapi::TimersState& _internal_state() const;
  ::gobgpapi::TimersState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Timers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::TimersConfig* config_;
  ::gobgpapi::TimersState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class TimersConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TimersConfig) */ {
 public:
  TimersConfig();
  virtual ~TimersConfig();

  TimersConfig(const TimersConfig& from);
  TimersConfig(TimersConfig&& from) noexcept
    : TimersConfig() {
    *this = ::std::move(from);
  }

  inline TimersConfig& operator=(const TimersConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimersConfig& operator=(TimersConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimersConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimersConfig* internal_default_instance() {
    return reinterpret_cast<const TimersConfig*>(
               &_TimersConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(TimersConfig& a, TimersConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TimersConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimersConfig* New() const final {
    return CreateMaybeMessage<TimersConfig>(nullptr);
  }

  TimersConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimersConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimersConfig& from);
  void MergeFrom(const TimersConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimersConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TimersConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectRetryFieldNumber = 1,
    kHoldTimeFieldNumber = 2,
    kKeepaliveIntervalFieldNumber = 3,
    kMinimumAdvertisementIntervalFieldNumber = 4,
    kIdleHoldTimeAfterResetFieldNumber = 5,
  };
  // uint64 connect_retry = 1;
  void clear_connect_retry();
  ::PROTOBUF_NAMESPACE_ID::uint64 connect_retry() const;
  void set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_connect_retry() const;
  void _internal_set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hold_time = 2;
  void clear_hold_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 hold_time() const;
  void set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hold_time() const;
  void _internal_set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 keepalive_interval = 3;
  void clear_keepalive_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 keepalive_interval() const;
  void set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_keepalive_interval() const;
  void _internal_set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minimum_advertisement_interval = 4;
  void clear_minimum_advertisement_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 minimum_advertisement_interval() const;
  void set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minimum_advertisement_interval() const;
  void _internal_set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 idle_hold_time_after_reset = 5;
  void clear_idle_hold_time_after_reset();
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_hold_time_after_reset() const;
  void set_idle_hold_time_after_reset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idle_hold_time_after_reset() const;
  void _internal_set_idle_hold_time_after_reset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TimersConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 connect_retry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hold_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 keepalive_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minimum_advertisement_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_hold_time_after_reset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class TimersState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TimersState) */ {
 public:
  TimersState();
  virtual ~TimersState();

  TimersState(const TimersState& from);
  TimersState(TimersState&& from) noexcept
    : TimersState() {
    *this = ::std::move(from);
  }

  inline TimersState& operator=(const TimersState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimersState& operator=(TimersState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimersState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimersState* internal_default_instance() {
    return reinterpret_cast<const TimersState*>(
               &_TimersState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TimersState& a, TimersState& b) {
    a.Swap(&b);
  }
  inline void Swap(TimersState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimersState* New() const final {
    return CreateMaybeMessage<TimersState>(nullptr);
  }

  TimersState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimersState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimersState& from);
  void MergeFrom(const TimersState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimersState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TimersState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUptimeFieldNumber = 6,
    kDowntimeFieldNumber = 7,
    kConnectRetryFieldNumber = 1,
    kHoldTimeFieldNumber = 2,
    kKeepaliveIntervalFieldNumber = 3,
    kMinimumAdvertisementIntervalFieldNumber = 4,
    kNegotiatedHoldTimeFieldNumber = 5,
  };
  // .google.protobuf.Timestamp uptime = 6;
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& uptime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_uptime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_uptime();
  void set_allocated_uptime(PROTOBUF_NAMESPACE_ID::Timestamp* uptime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_uptime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_uptime();
  public:

  // .google.protobuf.Timestamp downtime = 7;
  bool has_downtime() const;
  private:
  bool _internal_has_downtime() const;
  public:
  void clear_downtime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& downtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_downtime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_downtime();
  void set_allocated_downtime(PROTOBUF_NAMESPACE_ID::Timestamp* downtime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_downtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_downtime();
  public:

  // uint64 connect_retry = 1;
  void clear_connect_retry();
  ::PROTOBUF_NAMESPACE_ID::uint64 connect_retry() const;
  void set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_connect_retry() const;
  void _internal_set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 hold_time = 2;
  void clear_hold_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 hold_time() const;
  void set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hold_time() const;
  void _internal_set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 keepalive_interval = 3;
  void clear_keepalive_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 keepalive_interval() const;
  void set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_keepalive_interval() const;
  void _internal_set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 minimum_advertisement_interval = 4;
  void clear_minimum_advertisement_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 minimum_advertisement_interval() const;
  void set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_minimum_advertisement_interval() const;
  void _internal_set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 negotiated_hold_time = 5;
  void clear_negotiated_hold_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 negotiated_hold_time() const;
  void set_negotiated_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_negotiated_hold_time() const;
  void _internal_set_negotiated_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TimersState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* uptime_;
  PROTOBUF_NAMESPACE_ID::Timestamp* downtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 connect_retry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hold_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 keepalive_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 minimum_advertisement_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 negotiated_hold_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Transport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Transport) */ {
 public:
  Transport();
  virtual ~Transport();

  Transport(const Transport& from);
  Transport(Transport&& from) noexcept
    : Transport() {
    *this = ::std::move(from);
  }

  inline Transport& operator=(const Transport& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transport& operator=(Transport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transport* internal_default_instance() {
    return reinterpret_cast<const Transport*>(
               &_Transport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Transport& a, Transport& b) {
    a.Swap(&b);
  }
  inline void Swap(Transport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transport* New() const final {
    return CreateMaybeMessage<Transport>(nullptr);
  }

  Transport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transport& from);
  void MergeFrom(const Transport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Transport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAddressFieldNumber = 1,
    kRemoteAddressFieldNumber = 5,
    kBindInterfaceFieldNumber = 8,
    kLocalPortFieldNumber = 2,
    kMtuDiscoveryFieldNumber = 3,
    kPassiveModeFieldNumber = 4,
    kRemotePortFieldNumber = 6,
    kTcpMssFieldNumber = 7,
  };
  // string local_address = 1;
  void clear_local_address();
  const std::string& local_address() const;
  void set_local_address(const std::string& value);
  void set_local_address(std::string&& value);
  void set_local_address(const char* value);
  void set_local_address(const char* value, size_t size);
  std::string* mutable_local_address();
  std::string* release_local_address();
  void set_allocated_local_address(std::string* local_address);
  private:
  const std::string& _internal_local_address() const;
  void _internal_set_local_address(const std::string& value);
  std::string* _internal_mutable_local_address();
  public:

  // string remote_address = 5;
  void clear_remote_address();
  const std::string& remote_address() const;
  void set_remote_address(const std::string& value);
  void set_remote_address(std::string&& value);
  void set_remote_address(const char* value);
  void set_remote_address(const char* value, size_t size);
  std::string* mutable_remote_address();
  std::string* release_remote_address();
  void set_allocated_remote_address(std::string* remote_address);
  private:
  const std::string& _internal_remote_address() const;
  void _internal_set_remote_address(const std::string& value);
  std::string* _internal_mutable_remote_address();
  public:

  // string bind_interface = 8;
  void clear_bind_interface();
  const std::string& bind_interface() const;
  void set_bind_interface(const std::string& value);
  void set_bind_interface(std::string&& value);
  void set_bind_interface(const char* value);
  void set_bind_interface(const char* value, size_t size);
  std::string* mutable_bind_interface();
  std::string* release_bind_interface();
  void set_allocated_bind_interface(std::string* bind_interface);
  private:
  const std::string& _internal_bind_interface() const;
  void _internal_set_bind_interface(const std::string& value);
  std::string* _internal_mutable_bind_interface();
  public:

  // uint32 local_port = 2;
  void clear_local_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_port() const;
  void set_local_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_port() const;
  void _internal_set_local_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool mtu_discovery = 3;
  void clear_mtu_discovery();
  bool mtu_discovery() const;
  void set_mtu_discovery(bool value);
  private:
  bool _internal_mtu_discovery() const;
  void _internal_set_mtu_discovery(bool value);
  public:

  // bool passive_mode = 4;
  void clear_passive_mode();
  bool passive_mode() const;
  void set_passive_mode(bool value);
  private:
  bool _internal_passive_mode() const;
  void _internal_set_passive_mode(bool value);
  public:

  // uint32 remote_port = 6;
  void clear_remote_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_port() const;
  void set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_port() const;
  void _internal_set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tcp_mss = 7;
  void clear_tcp_mss();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcp_mss() const;
  void set_tcp_mss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcp_mss() const;
  void _internal_set_tcp_mss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Transport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bind_interface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_port_;
  bool mtu_discovery_;
  bool passive_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcp_mss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteServer) */ {
 public:
  RouteServer();
  virtual ~RouteServer();

  RouteServer(const RouteServer& from);
  RouteServer(RouteServer&& from) noexcept
    : RouteServer() {
    *this = ::std::move(from);
  }

  inline RouteServer& operator=(const RouteServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteServer& operator=(RouteServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteServer* internal_default_instance() {
    return reinterpret_cast<const RouteServer*>(
               &_RouteServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(RouteServer& a, RouteServer& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteServer* New() const final {
    return CreateMaybeMessage<RouteServer>(nullptr);
  }

  RouteServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteServer& from);
  void MergeFrom(const RouteServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteServerClientFieldNumber = 1,
    kSecondaryRouteFieldNumber = 2,
  };
  // bool route_server_client = 1;
  void clear_route_server_client();
  bool route_server_client() const;
  void set_route_server_client(bool value);
  private:
  bool _internal_route_server_client() const;
  void _internal_set_route_server_client(bool value);
  public:

  // bool secondary_route = 2;
  void clear_secondary_route();
  bool secondary_route() const;
  void set_secondary_route(bool value);
  private:
  bool _internal_secondary_route() const;
  void _internal_set_secondary_route(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool route_server_client_;
  bool secondary_route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class GracefulRestart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.GracefulRestart) */ {
 public:
  GracefulRestart();
  virtual ~GracefulRestart();

  GracefulRestart(const GracefulRestart& from);
  GracefulRestart(GracefulRestart&& from) noexcept
    : GracefulRestart() {
    *this = ::std::move(from);
  }

  inline GracefulRestart& operator=(const GracefulRestart& from) {
    CopyFrom(from);
    return *this;
  }
  inline GracefulRestart& operator=(GracefulRestart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GracefulRestart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GracefulRestart* internal_default_instance() {
    return reinterpret_cast<const GracefulRestart*>(
               &_GracefulRestart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GracefulRestart& a, GracefulRestart& b) {
    a.Swap(&b);
  }
  inline void Swap(GracefulRestart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GracefulRestart* New() const final {
    return CreateMaybeMessage<GracefulRestart>(nullptr);
  }

  GracefulRestart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GracefulRestart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GracefulRestart& from);
  void MergeFrom(const GracefulRestart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GracefulRestart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.GracefulRestart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 11,
    kRestartTimeFieldNumber = 2,
    kEnabledFieldNumber = 1,
    kHelperOnlyFieldNumber = 3,
    kNotificationEnabledFieldNumber = 5,
    kLonglivedEnabledFieldNumber = 6,
    kDeferralTimeFieldNumber = 4,
    kStaleRoutesTimeFieldNumber = 7,
    kPeerRestartTimeFieldNumber = 8,
    kPeerRestartingFieldNumber = 9,
    kLocalRestartingFieldNumber = 10,
  };
  // string mode = 11;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // uint32 restart_time = 2;
  void clear_restart_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 restart_time() const;
  void set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_restart_time() const;
  void _internal_set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool helper_only = 3;
  void clear_helper_only();
  bool helper_only() const;
  void set_helper_only(bool value);
  private:
  bool _internal_helper_only() const;
  void _internal_set_helper_only(bool value);
  public:

  // bool notification_enabled = 5;
  void clear_notification_enabled();
  bool notification_enabled() const;
  void set_notification_enabled(bool value);
  private:
  bool _internal_notification_enabled() const;
  void _internal_set_notification_enabled(bool value);
  public:

  // bool longlived_enabled = 6;
  void clear_longlived_enabled();
  bool longlived_enabled() const;
  void set_longlived_enabled(bool value);
  private:
  bool _internal_longlived_enabled() const;
  void _internal_set_longlived_enabled(bool value);
  public:

  // uint32 deferral_time = 4;
  void clear_deferral_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 deferral_time() const;
  void set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deferral_time() const;
  void _internal_set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stale_routes_time = 7;
  void clear_stale_routes_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 stale_routes_time() const;
  void set_stale_routes_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stale_routes_time() const;
  void _internal_set_stale_routes_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 peer_restart_time = 8;
  void clear_peer_restart_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_restart_time() const;
  void set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_restart_time() const;
  void _internal_set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool peer_restarting = 9;
  void clear_peer_restarting();
  bool peer_restarting() const;
  void set_peer_restarting(bool value);
  private:
  bool _internal_peer_restarting() const;
  void _internal_set_peer_restarting(bool value);
  public:

  // bool local_restarting = 10;
  void clear_local_restarting();
  bool local_restarting() const;
  void set_local_restarting(bool value);
  private:
  bool _internal_local_restarting() const;
  void _internal_set_local_restarting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.GracefulRestart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 restart_time_;
  bool enabled_;
  bool helper_only_;
  bool notification_enabled_;
  bool longlived_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deferral_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stale_routes_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_restart_time_;
  bool peer_restarting_;
  bool local_restarting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MpGracefulRestartConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpGracefulRestartConfig) */ {
 public:
  MpGracefulRestartConfig();
  virtual ~MpGracefulRestartConfig();

  MpGracefulRestartConfig(const MpGracefulRestartConfig& from);
  MpGracefulRestartConfig(MpGracefulRestartConfig&& from) noexcept
    : MpGracefulRestartConfig() {
    *this = ::std::move(from);
  }

  inline MpGracefulRestartConfig& operator=(const MpGracefulRestartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpGracefulRestartConfig& operator=(MpGracefulRestartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpGracefulRestartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpGracefulRestartConfig* internal_default_instance() {
    return reinterpret_cast<const MpGracefulRestartConfig*>(
               &_MpGracefulRestartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(MpGracefulRestartConfig& a, MpGracefulRestartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MpGracefulRestartConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpGracefulRestartConfig* New() const final {
    return CreateMaybeMessage<MpGracefulRestartConfig>(nullptr);
  }

  MpGracefulRestartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpGracefulRestartConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpGracefulRestartConfig& from);
  void MergeFrom(const MpGracefulRestartConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpGracefulRestartConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MpGracefulRestartConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MpGracefulRestartConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MpGracefulRestartState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpGracefulRestartState) */ {
 public:
  MpGracefulRestartState();
  virtual ~MpGracefulRestartState();

  MpGracefulRestartState(const MpGracefulRestartState& from);
  MpGracefulRestartState(MpGracefulRestartState&& from) noexcept
    : MpGracefulRestartState() {
    *this = ::std::move(from);
  }

  inline MpGracefulRestartState& operator=(const MpGracefulRestartState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpGracefulRestartState& operator=(MpGracefulRestartState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpGracefulRestartState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpGracefulRestartState* internal_default_instance() {
    return reinterpret_cast<const MpGracefulRestartState*>(
               &_MpGracefulRestartState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(MpGracefulRestartState& a, MpGracefulRestartState& b) {
    a.Swap(&b);
  }
  inline void Swap(MpGracefulRestartState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpGracefulRestartState* New() const final {
    return CreateMaybeMessage<MpGracefulRestartState>(nullptr);
  }

  MpGracefulRestartState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpGracefulRestartState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpGracefulRestartState& from);
  void MergeFrom(const MpGracefulRestartState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpGracefulRestartState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MpGracefulRestartState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kReceivedFieldNumber = 2,
    kAdvertisedFieldNumber = 3,
    kEndOfRibReceivedFieldNumber = 4,
    kEndOfRibSentFieldNumber = 5,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool received = 2;
  void clear_received();
  bool received() const;
  void set_received(bool value);
  private:
  bool _internal_received() const;
  void _internal_set_received(bool value);
  public:

  // bool advertised = 3;
  void clear_advertised();
  bool advertised() const;
  void set_advertised(bool value);
  private:
  bool _internal_advertised() const;
  void _internal_set_advertised(bool value);
  public:

  // bool end_of_rib_received = 4;
  void clear_end_of_rib_received();
  bool end_of_rib_received() const;
  void set_end_of_rib_received(bool value);
  private:
  bool _internal_end_of_rib_received() const;
  void _internal_set_end_of_rib_received(bool value);
  public:

  // bool end_of_rib_sent = 5;
  void clear_end_of_rib_sent();
  bool end_of_rib_sent() const;
  void set_end_of_rib_sent(bool value);
  private:
  bool _internal_end_of_rib_sent() const;
  void _internal_set_end_of_rib_sent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MpGracefulRestartState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  bool received_;
  bool advertised_;
  bool end_of_rib_received_;
  bool end_of_rib_sent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MpGracefulRestart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpGracefulRestart) */ {
 public:
  MpGracefulRestart();
  virtual ~MpGracefulRestart();

  MpGracefulRestart(const MpGracefulRestart& from);
  MpGracefulRestart(MpGracefulRestart&& from) noexcept
    : MpGracefulRestart() {
    *this = ::std::move(from);
  }

  inline MpGracefulRestart& operator=(const MpGracefulRestart& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpGracefulRestart& operator=(MpGracefulRestart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpGracefulRestart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpGracefulRestart* internal_default_instance() {
    return reinterpret_cast<const MpGracefulRestart*>(
               &_MpGracefulRestart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(MpGracefulRestart& a, MpGracefulRestart& b) {
    a.Swap(&b);
  }
  inline void Swap(MpGracefulRestart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpGracefulRestart* New() const final {
    return CreateMaybeMessage<MpGracefulRestart>(nullptr);
  }

  MpGracefulRestart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpGracefulRestart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpGracefulRestart& from);
  void MergeFrom(const MpGracefulRestart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpGracefulRestart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MpGracefulRestart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.MpGracefulRestartConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::MpGracefulRestartConfig& config() const;
  ::gobgpapi::MpGracefulRestartConfig* release_config();
  ::gobgpapi::MpGracefulRestartConfig* mutable_config();
  void set_allocated_config(::gobgpapi::MpGracefulRestartConfig* config);
  private:
  const ::gobgpapi::MpGracefulRestartConfig& _internal_config() const;
  ::gobgpapi::MpGracefulRestartConfig* _internal_mutable_config();
  public:

  // .gobgpapi.MpGracefulRestartState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::MpGracefulRestartState& state() const;
  ::gobgpapi::MpGracefulRestartState* release_state();
  ::gobgpapi::MpGracefulRestartState* mutable_state();
  void set_allocated_state(::gobgpapi::MpGracefulRestartState* state);
  private:
  const ::gobgpapi::MpGracefulRestartState& _internal_state() const;
  ::gobgpapi::MpGracefulRestartState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MpGracefulRestart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::MpGracefulRestartConfig* config_;
  ::gobgpapi::MpGracefulRestartState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AfiSafiConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AfiSafiConfig) */ {
 public:
  AfiSafiConfig();
  virtual ~AfiSafiConfig();

  AfiSafiConfig(const AfiSafiConfig& from);
  AfiSafiConfig(AfiSafiConfig&& from) noexcept
    : AfiSafiConfig() {
    *this = ::std::move(from);
  }

  inline AfiSafiConfig& operator=(const AfiSafiConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AfiSafiConfig& operator=(AfiSafiConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AfiSafiConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AfiSafiConfig* internal_default_instance() {
    return reinterpret_cast<const AfiSafiConfig*>(
               &_AfiSafiConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(AfiSafiConfig& a, AfiSafiConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AfiSafiConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AfiSafiConfig* New() const final {
    return CreateMaybeMessage<AfiSafiConfig>(nullptr);
  }

  AfiSafiConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AfiSafiConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AfiSafiConfig& from);
  void MergeFrom(const AfiSafiConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AfiSafiConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AfiSafiConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // .gobgpapi.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // bool enabled = 2;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AfiSafiConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Family* family_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AfiSafiState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AfiSafiState) */ {
 public:
  AfiSafiState();
  virtual ~AfiSafiState();

  AfiSafiState(const AfiSafiState& from);
  AfiSafiState(AfiSafiState&& from) noexcept
    : AfiSafiState() {
    *this = ::std::move(from);
  }

  inline AfiSafiState& operator=(const AfiSafiState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AfiSafiState& operator=(AfiSafiState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AfiSafiState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AfiSafiState* internal_default_instance() {
    return reinterpret_cast<const AfiSafiState*>(
               &_AfiSafiState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(AfiSafiState& a, AfiSafiState& b) {
    a.Swap(&b);
  }
  inline void Swap(AfiSafiState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AfiSafiState* New() const final {
    return CreateMaybeMessage<AfiSafiState>(nullptr);
  }

  AfiSafiState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AfiSafiState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AfiSafiState& from);
  void MergeFrom(const AfiSafiState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AfiSafiState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AfiSafiState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
    kReceivedFieldNumber = 3,
    kAcceptedFieldNumber = 4,
    kAdvertisedFieldNumber = 5,
    kEnabledFieldNumber = 2,
  };
  // .gobgpapi.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // uint64 received = 3;
  void clear_received();
  ::PROTOBUF_NAMESPACE_ID::uint64 received() const;
  void set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_received() const;
  void _internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 accepted = 4;
  void clear_accepted();
  ::PROTOBUF_NAMESPACE_ID::uint64 accepted() const;
  void set_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accepted() const;
  void _internal_set_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 advertised = 5;
  void clear_advertised();
  ::PROTOBUF_NAMESPACE_ID::uint64 advertised() const;
  void set_advertised(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_advertised() const;
  void _internal_set_advertised(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool enabled = 2;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AfiSafiState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::Family* family_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accepted_;
  ::PROTOBUF_NAMESPACE_ID::uint64 advertised_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteSelectionOptionsConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteSelectionOptionsConfig) */ {
 public:
  RouteSelectionOptionsConfig();
  virtual ~RouteSelectionOptionsConfig();

  RouteSelectionOptionsConfig(const RouteSelectionOptionsConfig& from);
  RouteSelectionOptionsConfig(RouteSelectionOptionsConfig&& from) noexcept
    : RouteSelectionOptionsConfig() {
    *this = ::std::move(from);
  }

  inline RouteSelectionOptionsConfig& operator=(const RouteSelectionOptionsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSelectionOptionsConfig& operator=(RouteSelectionOptionsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteSelectionOptionsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSelectionOptionsConfig* internal_default_instance() {
    return reinterpret_cast<const RouteSelectionOptionsConfig*>(
               &_RouteSelectionOptionsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(RouteSelectionOptionsConfig& a, RouteSelectionOptionsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSelectionOptionsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteSelectionOptionsConfig* New() const final {
    return CreateMaybeMessage<RouteSelectionOptionsConfig>(nullptr);
  }

  RouteSelectionOptionsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteSelectionOptionsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteSelectionOptionsConfig& from);
  void MergeFrom(const RouteSelectionOptionsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSelectionOptionsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteSelectionOptionsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlwaysCompareMedFieldNumber = 1,
    kIgnoreAsPathLengthFieldNumber = 2,
    kExternalCompareRouterIdFieldNumber = 3,
    kAdvertiseInactiveRoutesFieldNumber = 4,
    kEnableAigpFieldNumber = 5,
    kIgnoreNextHopIgpMetricFieldNumber = 6,
    kDisableBestPathSelectionFieldNumber = 7,
  };
  // bool always_compare_med = 1;
  void clear_always_compare_med();
  bool always_compare_med() const;
  void set_always_compare_med(bool value);
  private:
  bool _internal_always_compare_med() const;
  void _internal_set_always_compare_med(bool value);
  public:

  // bool ignore_as_path_length = 2;
  void clear_ignore_as_path_length();
  bool ignore_as_path_length() const;
  void set_ignore_as_path_length(bool value);
  private:
  bool _internal_ignore_as_path_length() const;
  void _internal_set_ignore_as_path_length(bool value);
  public:

  // bool external_compare_router_id = 3;
  void clear_external_compare_router_id();
  bool external_compare_router_id() const;
  void set_external_compare_router_id(bool value);
  private:
  bool _internal_external_compare_router_id() const;
  void _internal_set_external_compare_router_id(bool value);
  public:

  // bool advertise_inactive_routes = 4;
  void clear_advertise_inactive_routes();
  bool advertise_inactive_routes() const;
  void set_advertise_inactive_routes(bool value);
  private:
  bool _internal_advertise_inactive_routes() const;
  void _internal_set_advertise_inactive_routes(bool value);
  public:

  // bool enable_aigp = 5;
  void clear_enable_aigp();
  bool enable_aigp() const;
  void set_enable_aigp(bool value);
  private:
  bool _internal_enable_aigp() const;
  void _internal_set_enable_aigp(bool value);
  public:

  // bool ignore_next_hop_igp_metric = 6;
  void clear_ignore_next_hop_igp_metric();
  bool ignore_next_hop_igp_metric() const;
  void set_ignore_next_hop_igp_metric(bool value);
  private:
  bool _internal_ignore_next_hop_igp_metric() const;
  void _internal_set_ignore_next_hop_igp_metric(bool value);
  public:

  // bool disable_best_path_selection = 7;
  void clear_disable_best_path_selection();
  bool disable_best_path_selection() const;
  void set_disable_best_path_selection(bool value);
  private:
  bool _internal_disable_best_path_selection() const;
  void _internal_set_disable_best_path_selection(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteSelectionOptionsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool always_compare_med_;
  bool ignore_as_path_length_;
  bool external_compare_router_id_;
  bool advertise_inactive_routes_;
  bool enable_aigp_;
  bool ignore_next_hop_igp_metric_;
  bool disable_best_path_selection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteSelectionOptionsState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteSelectionOptionsState) */ {
 public:
  RouteSelectionOptionsState();
  virtual ~RouteSelectionOptionsState();

  RouteSelectionOptionsState(const RouteSelectionOptionsState& from);
  RouteSelectionOptionsState(RouteSelectionOptionsState&& from) noexcept
    : RouteSelectionOptionsState() {
    *this = ::std::move(from);
  }

  inline RouteSelectionOptionsState& operator=(const RouteSelectionOptionsState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSelectionOptionsState& operator=(RouteSelectionOptionsState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteSelectionOptionsState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSelectionOptionsState* internal_default_instance() {
    return reinterpret_cast<const RouteSelectionOptionsState*>(
               &_RouteSelectionOptionsState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(RouteSelectionOptionsState& a, RouteSelectionOptionsState& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSelectionOptionsState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteSelectionOptionsState* New() const final {
    return CreateMaybeMessage<RouteSelectionOptionsState>(nullptr);
  }

  RouteSelectionOptionsState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteSelectionOptionsState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteSelectionOptionsState& from);
  void MergeFrom(const RouteSelectionOptionsState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSelectionOptionsState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteSelectionOptionsState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlwaysCompareMedFieldNumber = 1,
    kIgnoreAsPathLengthFieldNumber = 2,
    kExternalCompareRouterIdFieldNumber = 3,
    kAdvertiseInactiveRoutesFieldNumber = 4,
    kEnableAigpFieldNumber = 5,
    kIgnoreNextHopIgpMetricFieldNumber = 6,
    kDisableBestPathSelectionFieldNumber = 7,
  };
  // bool always_compare_med = 1;
  void clear_always_compare_med();
  bool always_compare_med() const;
  void set_always_compare_med(bool value);
  private:
  bool _internal_always_compare_med() const;
  void _internal_set_always_compare_med(bool value);
  public:

  // bool ignore_as_path_length = 2;
  void clear_ignore_as_path_length();
  bool ignore_as_path_length() const;
  void set_ignore_as_path_length(bool value);
  private:
  bool _internal_ignore_as_path_length() const;
  void _internal_set_ignore_as_path_length(bool value);
  public:

  // bool external_compare_router_id = 3;
  void clear_external_compare_router_id();
  bool external_compare_router_id() const;
  void set_external_compare_router_id(bool value);
  private:
  bool _internal_external_compare_router_id() const;
  void _internal_set_external_compare_router_id(bool value);
  public:

  // bool advertise_inactive_routes = 4;
  void clear_advertise_inactive_routes();
  bool advertise_inactive_routes() const;
  void set_advertise_inactive_routes(bool value);
  private:
  bool _internal_advertise_inactive_routes() const;
  void _internal_set_advertise_inactive_routes(bool value);
  public:

  // bool enable_aigp = 5;
  void clear_enable_aigp();
  bool enable_aigp() const;
  void set_enable_aigp(bool value);
  private:
  bool _internal_enable_aigp() const;
  void _internal_set_enable_aigp(bool value);
  public:

  // bool ignore_next_hop_igp_metric = 6;
  void clear_ignore_next_hop_igp_metric();
  bool ignore_next_hop_igp_metric() const;
  void set_ignore_next_hop_igp_metric(bool value);
  private:
  bool _internal_ignore_next_hop_igp_metric() const;
  void _internal_set_ignore_next_hop_igp_metric(bool value);
  public:

  // bool disable_best_path_selection = 7;
  void clear_disable_best_path_selection();
  bool disable_best_path_selection() const;
  void set_disable_best_path_selection(bool value);
  private:
  bool _internal_disable_best_path_selection() const;
  void _internal_set_disable_best_path_selection(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteSelectionOptionsState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool always_compare_med_;
  bool ignore_as_path_length_;
  bool external_compare_router_id_;
  bool advertise_inactive_routes_;
  bool enable_aigp_;
  bool ignore_next_hop_igp_metric_;
  bool disable_best_path_selection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteSelectionOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteSelectionOptions) */ {
 public:
  RouteSelectionOptions();
  virtual ~RouteSelectionOptions();

  RouteSelectionOptions(const RouteSelectionOptions& from);
  RouteSelectionOptions(RouteSelectionOptions&& from) noexcept
    : RouteSelectionOptions() {
    *this = ::std::move(from);
  }

  inline RouteSelectionOptions& operator=(const RouteSelectionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSelectionOptions& operator=(RouteSelectionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteSelectionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteSelectionOptions* internal_default_instance() {
    return reinterpret_cast<const RouteSelectionOptions*>(
               &_RouteSelectionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(RouteSelectionOptions& a, RouteSelectionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSelectionOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteSelectionOptions* New() const final {
    return CreateMaybeMessage<RouteSelectionOptions>(nullptr);
  }

  RouteSelectionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteSelectionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteSelectionOptions& from);
  void MergeFrom(const RouteSelectionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSelectionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteSelectionOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.RouteSelectionOptionsConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::RouteSelectionOptionsConfig& config() const;
  ::gobgpapi::RouteSelectionOptionsConfig* release_config();
  ::gobgpapi::RouteSelectionOptionsConfig* mutable_config();
  void set_allocated_config(::gobgpapi::RouteSelectionOptionsConfig* config);
  private:
  const ::gobgpapi::RouteSelectionOptionsConfig& _internal_config() const;
  ::gobgpapi::RouteSelectionOptionsConfig* _internal_mutable_config();
  public:

  // .gobgpapi.RouteSelectionOptionsState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::RouteSelectionOptionsState& state() const;
  ::gobgpapi::RouteSelectionOptionsState* release_state();
  ::gobgpapi::RouteSelectionOptionsState* mutable_state();
  void set_allocated_state(::gobgpapi::RouteSelectionOptionsState* state);
  private:
  const ::gobgpapi::RouteSelectionOptionsState& _internal_state() const;
  ::gobgpapi::RouteSelectionOptionsState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteSelectionOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::RouteSelectionOptionsConfig* config_;
  ::gobgpapi::RouteSelectionOptionsState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class UseMultiplePathsConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UseMultiplePathsConfig) */ {
 public:
  UseMultiplePathsConfig();
  virtual ~UseMultiplePathsConfig();

  UseMultiplePathsConfig(const UseMultiplePathsConfig& from);
  UseMultiplePathsConfig(UseMultiplePathsConfig&& from) noexcept
    : UseMultiplePathsConfig() {
    *this = ::std::move(from);
  }

  inline UseMultiplePathsConfig& operator=(const UseMultiplePathsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UseMultiplePathsConfig& operator=(UseMultiplePathsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UseMultiplePathsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseMultiplePathsConfig* internal_default_instance() {
    return reinterpret_cast<const UseMultiplePathsConfig*>(
               &_UseMultiplePathsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(UseMultiplePathsConfig& a, UseMultiplePathsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UseMultiplePathsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UseMultiplePathsConfig* New() const final {
    return CreateMaybeMessage<UseMultiplePathsConfig>(nullptr);
  }

  UseMultiplePathsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UseMultiplePathsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UseMultiplePathsConfig& from);
  void MergeFrom(const UseMultiplePathsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseMultiplePathsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UseMultiplePathsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UseMultiplePathsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class UseMultiplePathsState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UseMultiplePathsState) */ {
 public:
  UseMultiplePathsState();
  virtual ~UseMultiplePathsState();

  UseMultiplePathsState(const UseMultiplePathsState& from);
  UseMultiplePathsState(UseMultiplePathsState&& from) noexcept
    : UseMultiplePathsState() {
    *this = ::std::move(from);
  }

  inline UseMultiplePathsState& operator=(const UseMultiplePathsState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UseMultiplePathsState& operator=(UseMultiplePathsState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UseMultiplePathsState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseMultiplePathsState* internal_default_instance() {
    return reinterpret_cast<const UseMultiplePathsState*>(
               &_UseMultiplePathsState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(UseMultiplePathsState& a, UseMultiplePathsState& b) {
    a.Swap(&b);
  }
  inline void Swap(UseMultiplePathsState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UseMultiplePathsState* New() const final {
    return CreateMaybeMessage<UseMultiplePathsState>(nullptr);
  }

  UseMultiplePathsState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UseMultiplePathsState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UseMultiplePathsState& from);
  void MergeFrom(const UseMultiplePathsState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseMultiplePathsState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UseMultiplePathsState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UseMultiplePathsState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class EbgpConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EbgpConfig) */ {
 public:
  EbgpConfig();
  virtual ~EbgpConfig();

  EbgpConfig(const EbgpConfig& from);
  EbgpConfig(EbgpConfig&& from) noexcept
    : EbgpConfig() {
    *this = ::std::move(from);
  }

  inline EbgpConfig& operator=(const EbgpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EbgpConfig& operator=(EbgpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EbgpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbgpConfig* internal_default_instance() {
    return reinterpret_cast<const EbgpConfig*>(
               &_EbgpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(EbgpConfig& a, EbgpConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EbgpConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EbgpConfig* New() const final {
    return CreateMaybeMessage<EbgpConfig>(nullptr);
  }

  EbgpConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EbgpConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EbgpConfig& from);
  void MergeFrom(const EbgpConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EbgpConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EbgpConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowMultipleAsFieldNumber = 1,
    kMaximumPathsFieldNumber = 2,
  };
  // bool allow_multiple_as = 1;
  void clear_allow_multiple_as();
  bool allow_multiple_as() const;
  void set_allow_multiple_as(bool value);
  private:
  bool _internal_allow_multiple_as() const;
  void _internal_set_allow_multiple_as(bool value);
  public:

  // uint32 maximum_paths = 2;
  void clear_maximum_paths();
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths() const;
  void set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maximum_paths() const;
  void _internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EbgpConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool allow_multiple_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class EbgpState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EbgpState) */ {
 public:
  EbgpState();
  virtual ~EbgpState();

  EbgpState(const EbgpState& from);
  EbgpState(EbgpState&& from) noexcept
    : EbgpState() {
    *this = ::std::move(from);
  }

  inline EbgpState& operator=(const EbgpState& from) {
    CopyFrom(from);
    return *this;
  }
  inline EbgpState& operator=(EbgpState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EbgpState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EbgpState* internal_default_instance() {
    return reinterpret_cast<const EbgpState*>(
               &_EbgpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(EbgpState& a, EbgpState& b) {
    a.Swap(&b);
  }
  inline void Swap(EbgpState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EbgpState* New() const final {
    return CreateMaybeMessage<EbgpState>(nullptr);
  }

  EbgpState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EbgpState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EbgpState& from);
  void MergeFrom(const EbgpState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EbgpState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EbgpState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowMultipleAsFieldNumber = 1,
    kMaximumPathsFieldNumber = 2,
  };
  // bool allow_multiple_as = 1;
  void clear_allow_multiple_as();
  bool allow_multiple_as() const;
  void set_allow_multiple_as(bool value);
  private:
  bool _internal_allow_multiple_as() const;
  void _internal_set_allow_multiple_as(bool value);
  public:

  // uint32 maximum_paths = 2;
  void clear_maximum_paths();
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths() const;
  void set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maximum_paths() const;
  void _internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EbgpState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool allow_multiple_as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Ebgp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Ebgp) */ {
 public:
  Ebgp();
  virtual ~Ebgp();

  Ebgp(const Ebgp& from);
  Ebgp(Ebgp&& from) noexcept
    : Ebgp() {
    *this = ::std::move(from);
  }

  inline Ebgp& operator=(const Ebgp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ebgp& operator=(Ebgp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ebgp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ebgp* internal_default_instance() {
    return reinterpret_cast<const Ebgp*>(
               &_Ebgp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(Ebgp& a, Ebgp& b) {
    a.Swap(&b);
  }
  inline void Swap(Ebgp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ebgp* New() const final {
    return CreateMaybeMessage<Ebgp>(nullptr);
  }

  Ebgp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ebgp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ebgp& from);
  void MergeFrom(const Ebgp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ebgp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Ebgp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.EbgpConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::EbgpConfig& config() const;
  ::gobgpapi::EbgpConfig* release_config();
  ::gobgpapi::EbgpConfig* mutable_config();
  void set_allocated_config(::gobgpapi::EbgpConfig* config);
  private:
  const ::gobgpapi::EbgpConfig& _internal_config() const;
  ::gobgpapi::EbgpConfig* _internal_mutable_config();
  public:

  // .gobgpapi.EbgpState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::EbgpState& state() const;
  ::gobgpapi::EbgpState* release_state();
  ::gobgpapi::EbgpState* mutable_state();
  void set_allocated_state(::gobgpapi::EbgpState* state);
  private:
  const ::gobgpapi::EbgpState& _internal_state() const;
  ::gobgpapi::EbgpState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Ebgp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::EbgpConfig* config_;
  ::gobgpapi::EbgpState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class IbgpConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IbgpConfig) */ {
 public:
  IbgpConfig();
  virtual ~IbgpConfig();

  IbgpConfig(const IbgpConfig& from);
  IbgpConfig(IbgpConfig&& from) noexcept
    : IbgpConfig() {
    *this = ::std::move(from);
  }

  inline IbgpConfig& operator=(const IbgpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IbgpConfig& operator=(IbgpConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IbgpConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IbgpConfig* internal_default_instance() {
    return reinterpret_cast<const IbgpConfig*>(
               &_IbgpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(IbgpConfig& a, IbgpConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IbgpConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IbgpConfig* New() const final {
    return CreateMaybeMessage<IbgpConfig>(nullptr);
  }

  IbgpConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IbgpConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IbgpConfig& from);
  void MergeFrom(const IbgpConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IbgpConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.IbgpConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaximumPathsFieldNumber = 1,
  };
  // uint32 maximum_paths = 1;
  void clear_maximum_paths();
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths() const;
  void set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maximum_paths() const;
  void _internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.IbgpConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class IbgpState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IbgpState) */ {
 public:
  IbgpState();
  virtual ~IbgpState();

  IbgpState(const IbgpState& from);
  IbgpState(IbgpState&& from) noexcept
    : IbgpState() {
    *this = ::std::move(from);
  }

  inline IbgpState& operator=(const IbgpState& from) {
    CopyFrom(from);
    return *this;
  }
  inline IbgpState& operator=(IbgpState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IbgpState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IbgpState* internal_default_instance() {
    return reinterpret_cast<const IbgpState*>(
               &_IbgpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(IbgpState& a, IbgpState& b) {
    a.Swap(&b);
  }
  inline void Swap(IbgpState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IbgpState* New() const final {
    return CreateMaybeMessage<IbgpState>(nullptr);
  }

  IbgpState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IbgpState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IbgpState& from);
  void MergeFrom(const IbgpState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IbgpState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.IbgpState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaximumPathsFieldNumber = 1,
  };
  // uint32 maximum_paths = 1;
  void clear_maximum_paths();
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths() const;
  void set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maximum_paths() const;
  void _internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.IbgpState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Ibgp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Ibgp) */ {
 public:
  Ibgp();
  virtual ~Ibgp();

  Ibgp(const Ibgp& from);
  Ibgp(Ibgp&& from) noexcept
    : Ibgp() {
    *this = ::std::move(from);
  }

  inline Ibgp& operator=(const Ibgp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ibgp& operator=(Ibgp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ibgp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ibgp* internal_default_instance() {
    return reinterpret_cast<const Ibgp*>(
               &_Ibgp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(Ibgp& a, Ibgp& b) {
    a.Swap(&b);
  }
  inline void Swap(Ibgp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ibgp* New() const final {
    return CreateMaybeMessage<Ibgp>(nullptr);
  }

  Ibgp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ibgp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ibgp& from);
  void MergeFrom(const Ibgp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ibgp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Ibgp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.IbgpConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::IbgpConfig& config() const;
  ::gobgpapi::IbgpConfig* release_config();
  ::gobgpapi::IbgpConfig* mutable_config();
  void set_allocated_config(::gobgpapi::IbgpConfig* config);
  private:
  const ::gobgpapi::IbgpConfig& _internal_config() const;
  ::gobgpapi::IbgpConfig* _internal_mutable_config();
  public:

  // .gobgpapi.IbgpState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::IbgpState& state() const;
  ::gobgpapi::IbgpState* release_state();
  ::gobgpapi::IbgpState* mutable_state();
  void set_allocated_state(::gobgpapi::IbgpState* state);
  private:
  const ::gobgpapi::IbgpState& _internal_state() const;
  ::gobgpapi::IbgpState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Ibgp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::IbgpConfig* config_;
  ::gobgpapi::IbgpState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class UseMultiplePaths :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UseMultiplePaths) */ {
 public:
  UseMultiplePaths();
  virtual ~UseMultiplePaths();

  UseMultiplePaths(const UseMultiplePaths& from);
  UseMultiplePaths(UseMultiplePaths&& from) noexcept
    : UseMultiplePaths() {
    *this = ::std::move(from);
  }

  inline UseMultiplePaths& operator=(const UseMultiplePaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline UseMultiplePaths& operator=(UseMultiplePaths&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UseMultiplePaths& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseMultiplePaths* internal_default_instance() {
    return reinterpret_cast<const UseMultiplePaths*>(
               &_UseMultiplePaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(UseMultiplePaths& a, UseMultiplePaths& b) {
    a.Swap(&b);
  }
  inline void Swap(UseMultiplePaths* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UseMultiplePaths* New() const final {
    return CreateMaybeMessage<UseMultiplePaths>(nullptr);
  }

  UseMultiplePaths* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UseMultiplePaths>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UseMultiplePaths& from);
  void MergeFrom(const UseMultiplePaths& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseMultiplePaths* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UseMultiplePaths";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
    kEbgpFieldNumber = 3,
    kIbgpFieldNumber = 4,
  };
  // .gobgpapi.UseMultiplePathsConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::UseMultiplePathsConfig& config() const;
  ::gobgpapi::UseMultiplePathsConfig* release_config();
  ::gobgpapi::UseMultiplePathsConfig* mutable_config();
  void set_allocated_config(::gobgpapi::UseMultiplePathsConfig* config);
  private:
  const ::gobgpapi::UseMultiplePathsConfig& _internal_config() const;
  ::gobgpapi::UseMultiplePathsConfig* _internal_mutable_config();
  public:

  // .gobgpapi.UseMultiplePathsState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::UseMultiplePathsState& state() const;
  ::gobgpapi::UseMultiplePathsState* release_state();
  ::gobgpapi::UseMultiplePathsState* mutable_state();
  void set_allocated_state(::gobgpapi::UseMultiplePathsState* state);
  private:
  const ::gobgpapi::UseMultiplePathsState& _internal_state() const;
  ::gobgpapi::UseMultiplePathsState* _internal_mutable_state();
  public:

  // .gobgpapi.Ebgp ebgp = 3;
  bool has_ebgp() const;
  private:
  bool _internal_has_ebgp() const;
  public:
  void clear_ebgp();
  const ::gobgpapi::Ebgp& ebgp() const;
  ::gobgpapi::Ebgp* release_ebgp();
  ::gobgpapi::Ebgp* mutable_ebgp();
  void set_allocated_ebgp(::gobgpapi::Ebgp* ebgp);
  private:
  const ::gobgpapi::Ebgp& _internal_ebgp() const;
  ::gobgpapi::Ebgp* _internal_mutable_ebgp();
  public:

  // .gobgpapi.Ibgp ibgp = 4;
  bool has_ibgp() const;
  private:
  bool _internal_has_ibgp() const;
  public:
  void clear_ibgp();
  const ::gobgpapi::Ibgp& ibgp() const;
  ::gobgpapi::Ibgp* release_ibgp();
  ::gobgpapi::Ibgp* mutable_ibgp();
  void set_allocated_ibgp(::gobgpapi::Ibgp* ibgp);
  private:
  const ::gobgpapi::Ibgp& _internal_ibgp() const;
  ::gobgpapi::Ibgp* _internal_mutable_ibgp();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UseMultiplePaths)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::UseMultiplePathsConfig* config_;
  ::gobgpapi::UseMultiplePathsState* state_;
  ::gobgpapi::Ebgp* ebgp_;
  ::gobgpapi::Ibgp* ibgp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteTargetMembershipConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteTargetMembershipConfig) */ {
 public:
  RouteTargetMembershipConfig();
  virtual ~RouteTargetMembershipConfig();

  RouteTargetMembershipConfig(const RouteTargetMembershipConfig& from);
  RouteTargetMembershipConfig(RouteTargetMembershipConfig&& from) noexcept
    : RouteTargetMembershipConfig() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembershipConfig& operator=(const RouteTargetMembershipConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteTargetMembershipConfig& operator=(RouteTargetMembershipConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteTargetMembershipConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembershipConfig* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembershipConfig*>(
               &_RouteTargetMembershipConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(RouteTargetMembershipConfig& a, RouteTargetMembershipConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteTargetMembershipConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembershipConfig* New() const final {
    return CreateMaybeMessage<RouteTargetMembershipConfig>(nullptr);
  }

  RouteTargetMembershipConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteTargetMembershipConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteTargetMembershipConfig& from);
  void MergeFrom(const RouteTargetMembershipConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteTargetMembershipConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteTargetMembershipConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeferralTimeFieldNumber = 1,
  };
  // uint32 deferral_time = 1;
  void clear_deferral_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 deferral_time() const;
  void set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deferral_time() const;
  void _internal_set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteTargetMembershipConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deferral_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteTargetMembershipState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteTargetMembershipState) */ {
 public:
  RouteTargetMembershipState();
  virtual ~RouteTargetMembershipState();

  RouteTargetMembershipState(const RouteTargetMembershipState& from);
  RouteTargetMembershipState(RouteTargetMembershipState&& from) noexcept
    : RouteTargetMembershipState() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembershipState& operator=(const RouteTargetMembershipState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteTargetMembershipState& operator=(RouteTargetMembershipState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteTargetMembershipState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembershipState* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembershipState*>(
               &_RouteTargetMembershipState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(RouteTargetMembershipState& a, RouteTargetMembershipState& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteTargetMembershipState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembershipState* New() const final {
    return CreateMaybeMessage<RouteTargetMembershipState>(nullptr);
  }

  RouteTargetMembershipState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteTargetMembershipState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteTargetMembershipState& from);
  void MergeFrom(const RouteTargetMembershipState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteTargetMembershipState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteTargetMembershipState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeferralTimeFieldNumber = 1,
  };
  // uint32 deferral_time = 1;
  void clear_deferral_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 deferral_time() const;
  void set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deferral_time() const;
  void _internal_set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteTargetMembershipState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deferral_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RouteTargetMembership :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteTargetMembership) */ {
 public:
  RouteTargetMembership();
  virtual ~RouteTargetMembership();

  RouteTargetMembership(const RouteTargetMembership& from);
  RouteTargetMembership(RouteTargetMembership&& from) noexcept
    : RouteTargetMembership() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembership& operator=(const RouteTargetMembership& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteTargetMembership& operator=(RouteTargetMembership&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteTargetMembership& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembership* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembership*>(
               &_RouteTargetMembership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(RouteTargetMembership& a, RouteTargetMembership& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteTargetMembership* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembership* New() const final {
    return CreateMaybeMessage<RouteTargetMembership>(nullptr);
  }

  RouteTargetMembership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteTargetMembership>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteTargetMembership& from);
  void MergeFrom(const RouteTargetMembership& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteTargetMembership* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteTargetMembership";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.RouteTargetMembershipConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::RouteTargetMembershipConfig& config() const;
  ::gobgpapi::RouteTargetMembershipConfig* release_config();
  ::gobgpapi::RouteTargetMembershipConfig* mutable_config();
  void set_allocated_config(::gobgpapi::RouteTargetMembershipConfig* config);
  private:
  const ::gobgpapi::RouteTargetMembershipConfig& _internal_config() const;
  ::gobgpapi::RouteTargetMembershipConfig* _internal_mutable_config();
  public:

  // .gobgpapi.RouteTargetMembershipState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::RouteTargetMembershipState& state() const;
  ::gobgpapi::RouteTargetMembershipState* release_state();
  ::gobgpapi::RouteTargetMembershipState* mutable_state();
  void set_allocated_state(::gobgpapi::RouteTargetMembershipState* state);
  private:
  const ::gobgpapi::RouteTargetMembershipState& _internal_state() const;
  ::gobgpapi::RouteTargetMembershipState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteTargetMembership)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::RouteTargetMembershipConfig* config_;
  ::gobgpapi::RouteTargetMembershipState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class LongLivedGracefulRestartConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LongLivedGracefulRestartConfig) */ {
 public:
  LongLivedGracefulRestartConfig();
  virtual ~LongLivedGracefulRestartConfig();

  LongLivedGracefulRestartConfig(const LongLivedGracefulRestartConfig& from);
  LongLivedGracefulRestartConfig(LongLivedGracefulRestartConfig&& from) noexcept
    : LongLivedGracefulRestartConfig() {
    *this = ::std::move(from);
  }

  inline LongLivedGracefulRestartConfig& operator=(const LongLivedGracefulRestartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongLivedGracefulRestartConfig& operator=(LongLivedGracefulRestartConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongLivedGracefulRestartConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongLivedGracefulRestartConfig* internal_default_instance() {
    return reinterpret_cast<const LongLivedGracefulRestartConfig*>(
               &_LongLivedGracefulRestartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(LongLivedGracefulRestartConfig& a, LongLivedGracefulRestartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LongLivedGracefulRestartConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongLivedGracefulRestartConfig* New() const final {
    return CreateMaybeMessage<LongLivedGracefulRestartConfig>(nullptr);
  }

  LongLivedGracefulRestartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongLivedGracefulRestartConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongLivedGracefulRestartConfig& from);
  void MergeFrom(const LongLivedGracefulRestartConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongLivedGracefulRestartConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LongLivedGracefulRestartConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kRestartTimeFieldNumber = 2,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 restart_time = 2;
  void clear_restart_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 restart_time() const;
  void set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_restart_time() const;
  void _internal_set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LongLivedGracefulRestartConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 restart_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class LongLivedGracefulRestartState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LongLivedGracefulRestartState) */ {
 public:
  LongLivedGracefulRestartState();
  virtual ~LongLivedGracefulRestartState();

  LongLivedGracefulRestartState(const LongLivedGracefulRestartState& from);
  LongLivedGracefulRestartState(LongLivedGracefulRestartState&& from) noexcept
    : LongLivedGracefulRestartState() {
    *this = ::std::move(from);
  }

  inline LongLivedGracefulRestartState& operator=(const LongLivedGracefulRestartState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongLivedGracefulRestartState& operator=(LongLivedGracefulRestartState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongLivedGracefulRestartState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongLivedGracefulRestartState* internal_default_instance() {
    return reinterpret_cast<const LongLivedGracefulRestartState*>(
               &_LongLivedGracefulRestartState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(LongLivedGracefulRestartState& a, LongLivedGracefulRestartState& b) {
    a.Swap(&b);
  }
  inline void Swap(LongLivedGracefulRestartState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongLivedGracefulRestartState* New() const final {
    return CreateMaybeMessage<LongLivedGracefulRestartState>(nullptr);
  }

  LongLivedGracefulRestartState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongLivedGracefulRestartState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongLivedGracefulRestartState& from);
  void MergeFrom(const LongLivedGracefulRestartState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongLivedGracefulRestartState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LongLivedGracefulRestartState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kReceivedFieldNumber = 2,
    kAdvertisedFieldNumber = 3,
    kPeerRestartTimerExpiredFieldNumber = 5,
    kPeerRestartTimeFieldNumber = 4,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // bool received = 2;
  void clear_received();
  bool received() const;
  void set_received(bool value);
  private:
  bool _internal_received() const;
  void _internal_set_received(bool value);
  public:

  // bool advertised = 3;
  void clear_advertised();
  bool advertised() const;
  void set_advertised(bool value);
  private:
  bool _internal_advertised() const;
  void _internal_set_advertised(bool value);
  public:

  // bool peer_restart_timer_expired = 5;
  void clear_peer_restart_timer_expired();
  bool peer_restart_timer_expired() const;
  void set_peer_restart_timer_expired(bool value);
  private:
  bool _internal_peer_restart_timer_expired() const;
  void _internal_set_peer_restart_timer_expired(bool value);
  public:

  // uint32 peer_restart_time = 4;
  void clear_peer_restart_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_restart_time() const;
  void set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peer_restart_time() const;
  void _internal_set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LongLivedGracefulRestartState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  bool received_;
  bool advertised_;
  bool peer_restart_timer_expired_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peer_restart_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class LongLivedGracefulRestart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LongLivedGracefulRestart) */ {
 public:
  LongLivedGracefulRestart();
  virtual ~LongLivedGracefulRestart();

  LongLivedGracefulRestart(const LongLivedGracefulRestart& from);
  LongLivedGracefulRestart(LongLivedGracefulRestart&& from) noexcept
    : LongLivedGracefulRestart() {
    *this = ::std::move(from);
  }

  inline LongLivedGracefulRestart& operator=(const LongLivedGracefulRestart& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongLivedGracefulRestart& operator=(LongLivedGracefulRestart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongLivedGracefulRestart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongLivedGracefulRestart* internal_default_instance() {
    return reinterpret_cast<const LongLivedGracefulRestart*>(
               &_LongLivedGracefulRestart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(LongLivedGracefulRestart& a, LongLivedGracefulRestart& b) {
    a.Swap(&b);
  }
  inline void Swap(LongLivedGracefulRestart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongLivedGracefulRestart* New() const final {
    return CreateMaybeMessage<LongLivedGracefulRestart>(nullptr);
  }

  LongLivedGracefulRestart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongLivedGracefulRestart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongLivedGracefulRestart& from);
  void MergeFrom(const LongLivedGracefulRestart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongLivedGracefulRestart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LongLivedGracefulRestart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.LongLivedGracefulRestartConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::LongLivedGracefulRestartConfig& config() const;
  ::gobgpapi::LongLivedGracefulRestartConfig* release_config();
  ::gobgpapi::LongLivedGracefulRestartConfig* mutable_config();
  void set_allocated_config(::gobgpapi::LongLivedGracefulRestartConfig* config);
  private:
  const ::gobgpapi::LongLivedGracefulRestartConfig& _internal_config() const;
  ::gobgpapi::LongLivedGracefulRestartConfig* _internal_mutable_config();
  public:

  // .gobgpapi.LongLivedGracefulRestartState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::LongLivedGracefulRestartState& state() const;
  ::gobgpapi::LongLivedGracefulRestartState* release_state();
  ::gobgpapi::LongLivedGracefulRestartState* mutable_state();
  void set_allocated_state(::gobgpapi::LongLivedGracefulRestartState* state);
  private:
  const ::gobgpapi::LongLivedGracefulRestartState& _internal_state() const;
  ::gobgpapi::LongLivedGracefulRestartState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LongLivedGracefulRestart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::LongLivedGracefulRestartConfig* config_;
  ::gobgpapi::LongLivedGracefulRestartState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AfiSafi :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AfiSafi) */ {
 public:
  AfiSafi();
  virtual ~AfiSafi();

  AfiSafi(const AfiSafi& from);
  AfiSafi(AfiSafi&& from) noexcept
    : AfiSafi() {
    *this = ::std::move(from);
  }

  inline AfiSafi& operator=(const AfiSafi& from) {
    CopyFrom(from);
    return *this;
  }
  inline AfiSafi& operator=(AfiSafi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AfiSafi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AfiSafi* internal_default_instance() {
    return reinterpret_cast<const AfiSafi*>(
               &_AfiSafi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(AfiSafi& a, AfiSafi& b) {
    a.Swap(&b);
  }
  inline void Swap(AfiSafi* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AfiSafi* New() const final {
    return CreateMaybeMessage<AfiSafi>(nullptr);
  }

  AfiSafi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AfiSafi>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AfiSafi& from);
  void MergeFrom(const AfiSafi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AfiSafi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AfiSafi";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMpGracefulRestartFieldNumber = 1,
    kConfigFieldNumber = 2,
    kStateFieldNumber = 3,
    kApplyPolicyFieldNumber = 4,
    kRouteSelectionOptionsFieldNumber = 5,
    kUseMultiplePathsFieldNumber = 6,
    kPrefixLimitsFieldNumber = 7,
    kRouteTargetMembershipFieldNumber = 8,
    kLongLivedGracefulRestartFieldNumber = 9,
    kAddPathsFieldNumber = 10,
  };
  // .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
  bool has_mp_graceful_restart() const;
  private:
  bool _internal_has_mp_graceful_restart() const;
  public:
  void clear_mp_graceful_restart();
  const ::gobgpapi::MpGracefulRestart& mp_graceful_restart() const;
  ::gobgpapi::MpGracefulRestart* release_mp_graceful_restart();
  ::gobgpapi::MpGracefulRestart* mutable_mp_graceful_restart();
  void set_allocated_mp_graceful_restart(::gobgpapi::MpGracefulRestart* mp_graceful_restart);
  private:
  const ::gobgpapi::MpGracefulRestart& _internal_mp_graceful_restart() const;
  ::gobgpapi::MpGracefulRestart* _internal_mutable_mp_graceful_restart();
  public:

  // .gobgpapi.AfiSafiConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::AfiSafiConfig& config() const;
  ::gobgpapi::AfiSafiConfig* release_config();
  ::gobgpapi::AfiSafiConfig* mutable_config();
  void set_allocated_config(::gobgpapi::AfiSafiConfig* config);
  private:
  const ::gobgpapi::AfiSafiConfig& _internal_config() const;
  ::gobgpapi::AfiSafiConfig* _internal_mutable_config();
  public:

  // .gobgpapi.AfiSafiState state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::AfiSafiState& state() const;
  ::gobgpapi::AfiSafiState* release_state();
  ::gobgpapi::AfiSafiState* mutable_state();
  void set_allocated_state(::gobgpapi::AfiSafiState* state);
  private:
  const ::gobgpapi::AfiSafiState& _internal_state() const;
  ::gobgpapi::AfiSafiState* _internal_mutable_state();
  public:

  // .gobgpapi.ApplyPolicy apply_policy = 4;
  bool has_apply_policy() const;
  private:
  bool _internal_has_apply_policy() const;
  public:
  void clear_apply_policy();
  const ::gobgpapi::ApplyPolicy& apply_policy() const;
  ::gobgpapi::ApplyPolicy* release_apply_policy();
  ::gobgpapi::ApplyPolicy* mutable_apply_policy();
  void set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy);
  private:
  const ::gobgpapi::ApplyPolicy& _internal_apply_policy() const;
  ::gobgpapi::ApplyPolicy* _internal_mutable_apply_policy();
  public:

  // .gobgpapi.RouteSelectionOptions route_selection_options = 5;
  bool has_route_selection_options() const;
  private:
  bool _internal_has_route_selection_options() const;
  public:
  void clear_route_selection_options();
  const ::gobgpapi::RouteSelectionOptions& route_selection_options() const;
  ::gobgpapi::RouteSelectionOptions* release_route_selection_options();
  ::gobgpapi::RouteSelectionOptions* mutable_route_selection_options();
  void set_allocated_route_selection_options(::gobgpapi::RouteSelectionOptions* route_selection_options);
  private:
  const ::gobgpapi::RouteSelectionOptions& _internal_route_selection_options() const;
  ::gobgpapi::RouteSelectionOptions* _internal_mutable_route_selection_options();
  public:

  // .gobgpapi.UseMultiplePaths use_multiple_paths = 6;
  bool has_use_multiple_paths() const;
  private:
  bool _internal_has_use_multiple_paths() const;
  public:
  void clear_use_multiple_paths();
  const ::gobgpapi::UseMultiplePaths& use_multiple_paths() const;
  ::gobgpapi::UseMultiplePaths* release_use_multiple_paths();
  ::gobgpapi::UseMultiplePaths* mutable_use_multiple_paths();
  void set_allocated_use_multiple_paths(::gobgpapi::UseMultiplePaths* use_multiple_paths);
  private:
  const ::gobgpapi::UseMultiplePaths& _internal_use_multiple_paths() const;
  ::gobgpapi::UseMultiplePaths* _internal_mutable_use_multiple_paths();
  public:

  // .gobgpapi.PrefixLimit prefix_limits = 7;
  bool has_prefix_limits() const;
  private:
  bool _internal_has_prefix_limits() const;
  public:
  void clear_prefix_limits();
  const ::gobgpapi::PrefixLimit& prefix_limits() const;
  ::gobgpapi::PrefixLimit* release_prefix_limits();
  ::gobgpapi::PrefixLimit* mutable_prefix_limits();
  void set_allocated_prefix_limits(::gobgpapi::PrefixLimit* prefix_limits);
  private:
  const ::gobgpapi::PrefixLimit& _internal_prefix_limits() const;
  ::gobgpapi::PrefixLimit* _internal_mutable_prefix_limits();
  public:

  // .gobgpapi.RouteTargetMembership route_target_membership = 8;
  bool has_route_target_membership() const;
  private:
  bool _internal_has_route_target_membership() const;
  public:
  void clear_route_target_membership();
  const ::gobgpapi::RouteTargetMembership& route_target_membership() const;
  ::gobgpapi::RouteTargetMembership* release_route_target_membership();
  ::gobgpapi::RouteTargetMembership* mutable_route_target_membership();
  void set_allocated_route_target_membership(::gobgpapi::RouteTargetMembership* route_target_membership);
  private:
  const ::gobgpapi::RouteTargetMembership& _internal_route_target_membership() const;
  ::gobgpapi::RouteTargetMembership* _internal_mutable_route_target_membership();
  public:

  // .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 9;
  bool has_long_lived_graceful_restart() const;
  private:
  bool _internal_has_long_lived_graceful_restart() const;
  public:
  void clear_long_lived_graceful_restart();
  const ::gobgpapi::LongLivedGracefulRestart& long_lived_graceful_restart() const;
  ::gobgpapi::LongLivedGracefulRestart* release_long_lived_graceful_restart();
  ::gobgpapi::LongLivedGracefulRestart* mutable_long_lived_graceful_restart();
  void set_allocated_long_lived_graceful_restart(::gobgpapi::LongLivedGracefulRestart* long_lived_graceful_restart);
  private:
  const ::gobgpapi::LongLivedGracefulRestart& _internal_long_lived_graceful_restart() const;
  ::gobgpapi::LongLivedGracefulRestart* _internal_mutable_long_lived_graceful_restart();
  public:

  // .gobgpapi.AddPaths add_paths = 10;
  bool has_add_paths() const;
  private:
  bool _internal_has_add_paths() const;
  public:
  void clear_add_paths();
  const ::gobgpapi::AddPaths& add_paths() const;
  ::gobgpapi::AddPaths* release_add_paths();
  ::gobgpapi::AddPaths* mutable_add_paths();
  void set_allocated_add_paths(::gobgpapi::AddPaths* add_paths);
  private:
  const ::gobgpapi::AddPaths& _internal_add_paths() const;
  ::gobgpapi::AddPaths* _internal_mutable_add_paths();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AfiSafi)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::MpGracefulRestart* mp_graceful_restart_;
  ::gobgpapi::AfiSafiConfig* config_;
  ::gobgpapi::AfiSafiState* state_;
  ::gobgpapi::ApplyPolicy* apply_policy_;
  ::gobgpapi::RouteSelectionOptions* route_selection_options_;
  ::gobgpapi::UseMultiplePaths* use_multiple_paths_;
  ::gobgpapi::PrefixLimit* prefix_limits_;
  ::gobgpapi::RouteTargetMembership* route_target_membership_;
  ::gobgpapi::LongLivedGracefulRestart* long_lived_graceful_restart_;
  ::gobgpapi::AddPaths* add_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPathsConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathsConfig) */ {
 public:
  AddPathsConfig();
  virtual ~AddPathsConfig();

  AddPathsConfig(const AddPathsConfig& from);
  AddPathsConfig(AddPathsConfig&& from) noexcept
    : AddPathsConfig() {
    *this = ::std::move(from);
  }

  inline AddPathsConfig& operator=(const AddPathsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPathsConfig& operator=(AddPathsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPathsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathsConfig* internal_default_instance() {
    return reinterpret_cast<const AddPathsConfig*>(
               &_AddPathsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(AddPathsConfig& a, AddPathsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPathsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPathsConfig* New() const final {
    return CreateMaybeMessage<AddPathsConfig>(nullptr);
  }

  AddPathsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPathsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPathsConfig& from);
  void MergeFrom(const AddPathsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPathsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPathsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiveFieldNumber = 1,
    kSendMaxFieldNumber = 2,
  };
  // bool receive = 1;
  void clear_receive();
  bool receive() const;
  void set_receive(bool value);
  private:
  bool _internal_receive() const;
  void _internal_set_receive(bool value);
  public:

  // uint32 send_max = 2;
  void clear_send_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_max() const;
  void set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_max() const;
  void _internal_set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool receive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPathsState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPathsState) */ {
 public:
  AddPathsState();
  virtual ~AddPathsState();

  AddPathsState(const AddPathsState& from);
  AddPathsState(AddPathsState&& from) noexcept
    : AddPathsState() {
    *this = ::std::move(from);
  }

  inline AddPathsState& operator=(const AddPathsState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPathsState& operator=(AddPathsState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPathsState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPathsState* internal_default_instance() {
    return reinterpret_cast<const AddPathsState*>(
               &_AddPathsState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(AddPathsState& a, AddPathsState& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPathsState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPathsState* New() const final {
    return CreateMaybeMessage<AddPathsState>(nullptr);
  }

  AddPathsState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPathsState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPathsState& from);
  void MergeFrom(const AddPathsState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPathsState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPathsState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiveFieldNumber = 1,
    kSendMaxFieldNumber = 2,
  };
  // bool receive = 1;
  void clear_receive();
  bool receive() const;
  void set_receive(bool value);
  private:
  bool _internal_receive() const;
  void _internal_set_receive(bool value);
  public:

  // uint32 send_max = 2;
  void clear_send_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_max() const;
  void set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_max() const;
  void _internal_set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPathsState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool receive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AddPaths :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AddPaths) */ {
 public:
  AddPaths();
  virtual ~AddPaths();

  AddPaths(const AddPaths& from);
  AddPaths(AddPaths&& from) noexcept
    : AddPaths() {
    *this = ::std::move(from);
  }

  inline AddPaths& operator=(const AddPaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPaths& operator=(AddPaths&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPaths& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPaths* internal_default_instance() {
    return reinterpret_cast<const AddPaths*>(
               &_AddPaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(AddPaths& a, AddPaths& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPaths* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPaths* New() const final {
    return CreateMaybeMessage<AddPaths>(nullptr);
  }

  AddPaths* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPaths>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPaths& from);
  void MergeFrom(const AddPaths& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPaths* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AddPaths";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.AddPathsConfig config = 1;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::gobgpapi::AddPathsConfig& config() const;
  ::gobgpapi::AddPathsConfig* release_config();
  ::gobgpapi::AddPathsConfig* mutable_config();
  void set_allocated_config(::gobgpapi::AddPathsConfig* config);
  private:
  const ::gobgpapi::AddPathsConfig& _internal_config() const;
  ::gobgpapi::AddPathsConfig* _internal_mutable_config();
  public:

  // .gobgpapi.AddPathsState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::AddPathsState& state() const;
  ::gobgpapi::AddPathsState* release_state();
  ::gobgpapi::AddPathsState* mutable_state();
  void set_allocated_state(::gobgpapi::AddPathsState* state);
  private:
  const ::gobgpapi::AddPathsState& _internal_state() const;
  ::gobgpapi::AddPathsState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AddPaths)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::AddPathsConfig* config_;
  ::gobgpapi::AddPathsState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Prefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Prefix) */ {
 public:
  Prefix();
  virtual ~Prefix();

  Prefix(const Prefix& from);
  Prefix(Prefix&& from) noexcept
    : Prefix() {
    *this = ::std::move(from);
  }

  inline Prefix& operator=(const Prefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prefix& operator=(Prefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prefix* internal_default_instance() {
    return reinterpret_cast<const Prefix*>(
               &_Prefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(Prefix& a, Prefix& b) {
    a.Swap(&b);
  }
  inline void Swap(Prefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prefix* New() const final {
    return CreateMaybeMessage<Prefix>(nullptr);
  }

  Prefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prefix& from);
  void MergeFrom(const Prefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Prefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpPrefixFieldNumber = 1,
    kMaskLengthMinFieldNumber = 2,
    kMaskLengthMaxFieldNumber = 3,
  };
  // string ip_prefix = 1;
  void clear_ip_prefix();
  const std::string& ip_prefix() const;
  void set_ip_prefix(const std::string& value);
  void set_ip_prefix(std::string&& value);
  void set_ip_prefix(const char* value);
  void set_ip_prefix(const char* value, size_t size);
  std::string* mutable_ip_prefix();
  std::string* release_ip_prefix();
  void set_allocated_ip_prefix(std::string* ip_prefix);
  private:
  const std::string& _internal_ip_prefix() const;
  void _internal_set_ip_prefix(const std::string& value);
  std::string* _internal_mutable_ip_prefix();
  public:

  // uint32 mask_length_min = 2;
  void clear_mask_length_min();
  ::PROTOBUF_NAMESPACE_ID::uint32 mask_length_min() const;
  void set_mask_length_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mask_length_min() const;
  void _internal_set_mask_length_min(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mask_length_max = 3;
  void clear_mask_length_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 mask_length_max() const;
  void set_mask_length_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mask_length_max() const;
  void _internal_set_mask_length_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Prefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mask_length_min_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mask_length_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DefinedSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DefinedSet) */ {
 public:
  DefinedSet();
  virtual ~DefinedSet();

  DefinedSet(const DefinedSet& from);
  DefinedSet(DefinedSet&& from) noexcept
    : DefinedSet() {
    *this = ::std::move(from);
  }

  inline DefinedSet& operator=(const DefinedSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefinedSet& operator=(DefinedSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefinedSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefinedSet* internal_default_instance() {
    return reinterpret_cast<const DefinedSet*>(
               &_DefinedSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(DefinedSet& a, DefinedSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DefinedSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefinedSet* New() const final {
    return CreateMaybeMessage<DefinedSet>(nullptr);
  }

  DefinedSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefinedSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefinedSet& from);
  void MergeFrom(const DefinedSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefinedSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DefinedSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kPrefixesFieldNumber = 4,
    kNameFieldNumber = 2,
    kDefinedTypeFieldNumber = 1,
  };
  // repeated string list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  const std::string& list(int index) const;
  std::string* mutable_list(int index);
  void set_list(int index, const std::string& value);
  void set_list(int index, std::string&& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  std::string* add_list();
  void add_list(const std::string& value);
  void add_list(std::string&& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list();
  private:
  const std::string& _internal_list(int index) const;
  std::string* _internal_add_list();
  public:

  // repeated .gobgpapi.Prefix prefixes = 4;
  int prefixes_size() const;
  private:
  int _internal_prefixes_size() const;
  public:
  void clear_prefixes();
  ::gobgpapi::Prefix* mutable_prefixes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Prefix >*
      mutable_prefixes();
  private:
  const ::gobgpapi::Prefix& _internal_prefixes(int index) const;
  ::gobgpapi::Prefix* _internal_add_prefixes();
  public:
  const ::gobgpapi::Prefix& prefixes(int index) const;
  ::gobgpapi::Prefix* add_prefixes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Prefix >&
      prefixes() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.DefinedType defined_type = 1;
  void clear_defined_type();
  ::gobgpapi::DefinedType defined_type() const;
  void set_defined_type(::gobgpapi::DefinedType value);
  private:
  ::gobgpapi::DefinedType _internal_defined_type() const;
  void _internal_set_defined_type(::gobgpapi::DefinedType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DefinedSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Prefix > prefixes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int defined_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MatchSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MatchSet) */ {
 public:
  MatchSet();
  virtual ~MatchSet();

  MatchSet(const MatchSet& from);
  MatchSet(MatchSet&& from) noexcept
    : MatchSet() {
    *this = ::std::move(from);
  }

  inline MatchSet& operator=(const MatchSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchSet& operator=(MatchSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchSet* internal_default_instance() {
    return reinterpret_cast<const MatchSet*>(
               &_MatchSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(MatchSet& a, MatchSet& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchSet* New() const final {
    return CreateMaybeMessage<MatchSet>(nullptr);
  }

  MatchSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchSet& from);
  void MergeFrom(const MatchSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MatchSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMatchTypeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.MatchType match_type = 1;
  void clear_match_type();
  ::gobgpapi::MatchType match_type() const;
  void set_match_type(::gobgpapi::MatchType value);
  private:
  ::gobgpapi::MatchType _internal_match_type() const;
  void _internal_set_match_type(::gobgpapi::MatchType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MatchSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int match_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AsPathLength :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AsPathLength) */ {
 public:
  AsPathLength();
  virtual ~AsPathLength();

  AsPathLength(const AsPathLength& from);
  AsPathLength(AsPathLength&& from) noexcept
    : AsPathLength() {
    *this = ::std::move(from);
  }

  inline AsPathLength& operator=(const AsPathLength& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsPathLength& operator=(AsPathLength&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsPathLength& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsPathLength* internal_default_instance() {
    return reinterpret_cast<const AsPathLength*>(
               &_AsPathLength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(AsPathLength& a, AsPathLength& b) {
    a.Swap(&b);
  }
  inline void Swap(AsPathLength* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsPathLength* New() const final {
    return CreateMaybeMessage<AsPathLength>(nullptr);
  }

  AsPathLength* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsPathLength>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsPathLength& from);
  void MergeFrom(const AsPathLength& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsPathLength* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AsPathLength";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthTypeFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // .gobgpapi.AsPathLengthType length_type = 1;
  void clear_length_type();
  ::gobgpapi::AsPathLengthType length_type() const;
  void set_length_type(::gobgpapi::AsPathLengthType value);
  private:
  ::gobgpapi::AsPathLengthType _internal_length_type() const;
  void _internal_set_length_type(::gobgpapi::AsPathLengthType value);
  public:

  // uint32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AsPathLength)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int length_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Conditions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Conditions) */ {
 public:
  Conditions();
  virtual ~Conditions();

  Conditions(const Conditions& from);
  Conditions(Conditions&& from) noexcept
    : Conditions() {
    *this = ::std::move(from);
  }

  inline Conditions& operator=(const Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conditions& operator=(Conditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conditions* internal_default_instance() {
    return reinterpret_cast<const Conditions*>(
               &_Conditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(Conditions& a, Conditions& b) {
    a.Swap(&b);
  }
  inline void Swap(Conditions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conditions* New() const final {
    return CreateMaybeMessage<Conditions>(nullptr);
  }

  Conditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conditions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conditions& from);
  void MergeFrom(const Conditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Conditions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Conditions_RouteType RouteType;
  static constexpr RouteType ROUTE_TYPE_NONE =
    Conditions_RouteType_ROUTE_TYPE_NONE;
  static constexpr RouteType ROUTE_TYPE_INTERNAL =
    Conditions_RouteType_ROUTE_TYPE_INTERNAL;
  static constexpr RouteType ROUTE_TYPE_EXTERNAL =
    Conditions_RouteType_ROUTE_TYPE_EXTERNAL;
  static constexpr RouteType ROUTE_TYPE_LOCAL =
    Conditions_RouteType_ROUTE_TYPE_LOCAL;
  static inline bool RouteType_IsValid(int value) {
    return Conditions_RouteType_IsValid(value);
  }
  static constexpr RouteType RouteType_MIN =
    Conditions_RouteType_RouteType_MIN;
  static constexpr RouteType RouteType_MAX =
    Conditions_RouteType_RouteType_MAX;
  static constexpr int RouteType_ARRAYSIZE =
    Conditions_RouteType_RouteType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RouteType_descriptor() {
    return Conditions_RouteType_descriptor();
  }
  template<typename T>
  static inline const std::string& RouteType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RouteType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RouteType_Name.");
    return Conditions_RouteType_Name(enum_t_value);
  }
  static inline bool RouteType_Parse(const std::string& name,
      RouteType* value) {
    return Conditions_RouteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextHopInListFieldNumber = 10,
    kAfiSafiInFieldNumber = 11,
    kPrefixSetFieldNumber = 1,
    kNeighborSetFieldNumber = 2,
    kAsPathLengthFieldNumber = 3,
    kAsPathSetFieldNumber = 4,
    kCommunitySetFieldNumber = 5,
    kExtCommunitySetFieldNumber = 6,
    kLargeCommunitySetFieldNumber = 9,
    kRpkiResultFieldNumber = 7,
    kRouteTypeFieldNumber = 8,
  };
  // repeated string next_hop_in_list = 10;
  int next_hop_in_list_size() const;
  private:
  int _internal_next_hop_in_list_size() const;
  public:
  void clear_next_hop_in_list();
  const std::string& next_hop_in_list(int index) const;
  std::string* mutable_next_hop_in_list(int index);
  void set_next_hop_in_list(int index, const std::string& value);
  void set_next_hop_in_list(int index, std::string&& value);
  void set_next_hop_in_list(int index, const char* value);
  void set_next_hop_in_list(int index, const char* value, size_t size);
  std::string* add_next_hop_in_list();
  void add_next_hop_in_list(const std::string& value);
  void add_next_hop_in_list(std::string&& value);
  void add_next_hop_in_list(const char* value);
  void add_next_hop_in_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& next_hop_in_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_next_hop_in_list();
  private:
  const std::string& _internal_next_hop_in_list(int index) const;
  std::string* _internal_add_next_hop_in_list();
  public:

  // repeated .gobgpapi.Family afi_safi_in = 11;
  int afi_safi_in_size() const;
  private:
  int _internal_afi_safi_in_size() const;
  public:
  void clear_afi_safi_in();
  ::gobgpapi::Family* mutable_afi_safi_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Family >*
      mutable_afi_safi_in();
  private:
  const ::gobgpapi::Family& _internal_afi_safi_in(int index) const;
  ::gobgpapi::Family* _internal_add_afi_safi_in();
  public:
  const ::gobgpapi::Family& afi_safi_in(int index) const;
  ::gobgpapi::Family* add_afi_safi_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Family >&
      afi_safi_in() const;

  // .gobgpapi.MatchSet prefix_set = 1;
  bool has_prefix_set() const;
  private:
  bool _internal_has_prefix_set() const;
  public:
  void clear_prefix_set();
  const ::gobgpapi::MatchSet& prefix_set() const;
  ::gobgpapi::MatchSet* release_prefix_set();
  ::gobgpapi::MatchSet* mutable_prefix_set();
  void set_allocated_prefix_set(::gobgpapi::MatchSet* prefix_set);
  private:
  const ::gobgpapi::MatchSet& _internal_prefix_set() const;
  ::gobgpapi::MatchSet* _internal_mutable_prefix_set();
  public:

  // .gobgpapi.MatchSet neighbor_set = 2;
  bool has_neighbor_set() const;
  private:
  bool _internal_has_neighbor_set() const;
  public:
  void clear_neighbor_set();
  const ::gobgpapi::MatchSet& neighbor_set() const;
  ::gobgpapi::MatchSet* release_neighbor_set();
  ::gobgpapi::MatchSet* mutable_neighbor_set();
  void set_allocated_neighbor_set(::gobgpapi::MatchSet* neighbor_set);
  private:
  const ::gobgpapi::MatchSet& _internal_neighbor_set() const;
  ::gobgpapi::MatchSet* _internal_mutable_neighbor_set();
  public:

  // .gobgpapi.AsPathLength as_path_length = 3;
  bool has_as_path_length() const;
  private:
  bool _internal_has_as_path_length() const;
  public:
  void clear_as_path_length();
  const ::gobgpapi::AsPathLength& as_path_length() const;
  ::gobgpapi::AsPathLength* release_as_path_length();
  ::gobgpapi::AsPathLength* mutable_as_path_length();
  void set_allocated_as_path_length(::gobgpapi::AsPathLength* as_path_length);
  private:
  const ::gobgpapi::AsPathLength& _internal_as_path_length() const;
  ::gobgpapi::AsPathLength* _internal_mutable_as_path_length();
  public:

  // .gobgpapi.MatchSet as_path_set = 4;
  bool has_as_path_set() const;
  private:
  bool _internal_has_as_path_set() const;
  public:
  void clear_as_path_set();
  const ::gobgpapi::MatchSet& as_path_set() const;
  ::gobgpapi::MatchSet* release_as_path_set();
  ::gobgpapi::MatchSet* mutable_as_path_set();
  void set_allocated_as_path_set(::gobgpapi::MatchSet* as_path_set);
  private:
  const ::gobgpapi::MatchSet& _internal_as_path_set() const;
  ::gobgpapi::MatchSet* _internal_mutable_as_path_set();
  public:

  // .gobgpapi.MatchSet community_set = 5;
  bool has_community_set() const;
  private:
  bool _internal_has_community_set() const;
  public:
  void clear_community_set();
  const ::gobgpapi::MatchSet& community_set() const;
  ::gobgpapi::MatchSet* release_community_set();
  ::gobgpapi::MatchSet* mutable_community_set();
  void set_allocated_community_set(::gobgpapi::MatchSet* community_set);
  private:
  const ::gobgpapi::MatchSet& _internal_community_set() const;
  ::gobgpapi::MatchSet* _internal_mutable_community_set();
  public:

  // .gobgpapi.MatchSet ext_community_set = 6;
  bool has_ext_community_set() const;
  private:
  bool _internal_has_ext_community_set() const;
  public:
  void clear_ext_community_set();
  const ::gobgpapi::MatchSet& ext_community_set() const;
  ::gobgpapi::MatchSet* release_ext_community_set();
  ::gobgpapi::MatchSet* mutable_ext_community_set();
  void set_allocated_ext_community_set(::gobgpapi::MatchSet* ext_community_set);
  private:
  const ::gobgpapi::MatchSet& _internal_ext_community_set() const;
  ::gobgpapi::MatchSet* _internal_mutable_ext_community_set();
  public:

  // .gobgpapi.MatchSet large_community_set = 9;
  bool has_large_community_set() const;
  private:
  bool _internal_has_large_community_set() const;
  public:
  void clear_large_community_set();
  const ::gobgpapi::MatchSet& large_community_set() const;
  ::gobgpapi::MatchSet* release_large_community_set();
  ::gobgpapi::MatchSet* mutable_large_community_set();
  void set_allocated_large_community_set(::gobgpapi::MatchSet* large_community_set);
  private:
  const ::gobgpapi::MatchSet& _internal_large_community_set() const;
  ::gobgpapi::MatchSet* _internal_mutable_large_community_set();
  public:

  // int32 rpki_result = 7;
  void clear_rpki_result();
  ::PROTOBUF_NAMESPACE_ID::int32 rpki_result() const;
  void set_rpki_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rpki_result() const;
  void _internal_set_rpki_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .gobgpapi.Conditions.RouteType route_type = 8;
  void clear_route_type();
  ::gobgpapi::Conditions_RouteType route_type() const;
  void set_route_type(::gobgpapi::Conditions_RouteType value);
  private:
  ::gobgpapi::Conditions_RouteType _internal_route_type() const;
  void _internal_set_route_type(::gobgpapi::Conditions_RouteType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Conditions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> next_hop_in_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Family > afi_safi_in_;
  ::gobgpapi::MatchSet* prefix_set_;
  ::gobgpapi::MatchSet* neighbor_set_;
  ::gobgpapi::AsPathLength* as_path_length_;
  ::gobgpapi::MatchSet* as_path_set_;
  ::gobgpapi::MatchSet* community_set_;
  ::gobgpapi::MatchSet* ext_community_set_;
  ::gobgpapi::MatchSet* large_community_set_;
  ::PROTOBUF_NAMESPACE_ID::int32 rpki_result_;
  int route_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class CommunityAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.CommunityAction) */ {
 public:
  CommunityAction();
  virtual ~CommunityAction();

  CommunityAction(const CommunityAction& from);
  CommunityAction(CommunityAction&& from) noexcept
    : CommunityAction() {
    *this = ::std::move(from);
  }

  inline CommunityAction& operator=(const CommunityAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunityAction& operator=(CommunityAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunityAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunityAction* internal_default_instance() {
    return reinterpret_cast<const CommunityAction*>(
               &_CommunityAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CommunityAction& a, CommunityAction& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunityAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunityAction* New() const final {
    return CreateMaybeMessage<CommunityAction>(nullptr);
  }

  CommunityAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunityAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunityAction& from);
  void MergeFrom(const CommunityAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunityAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.CommunityAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 2,
    kActionTypeFieldNumber = 1,
  };
  // repeated string communities = 2;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  const std::string& communities(int index) const;
  std::string* mutable_communities(int index);
  void set_communities(int index, const std::string& value);
  void set_communities(int index, std::string&& value);
  void set_communities(int index, const char* value);
  void set_communities(int index, const char* value, size_t size);
  std::string* add_communities();
  void add_communities(const std::string& value);
  void add_communities(std::string&& value);
  void add_communities(const char* value);
  void add_communities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& communities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_communities();
  private:
  const std::string& _internal_communities(int index) const;
  std::string* _internal_add_communities();
  public:

  // .gobgpapi.CommunityActionType action_type = 1;
  void clear_action_type();
  ::gobgpapi::CommunityActionType action_type() const;
  void set_action_type(::gobgpapi::CommunityActionType value);
  private:
  ::gobgpapi::CommunityActionType _internal_action_type() const;
  void _internal_set_action_type(::gobgpapi::CommunityActionType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.CommunityAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> communities_;
  int action_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class MedAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MedAction) */ {
 public:
  MedAction();
  virtual ~MedAction();

  MedAction(const MedAction& from);
  MedAction(MedAction&& from) noexcept
    : MedAction() {
    *this = ::std::move(from);
  }

  inline MedAction& operator=(const MedAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MedAction& operator=(MedAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MedAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedAction* internal_default_instance() {
    return reinterpret_cast<const MedAction*>(
               &_MedAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(MedAction& a, MedAction& b) {
    a.Swap(&b);
  }
  inline void Swap(MedAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MedAction* New() const final {
    return CreateMaybeMessage<MedAction>(nullptr);
  }

  MedAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MedAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MedAction& from);
  void MergeFrom(const MedAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MedAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kActionTypeFieldNumber = 1,
  };
  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .gobgpapi.MedActionType action_type = 1;
  void clear_action_type();
  ::gobgpapi::MedActionType action_type() const;
  void set_action_type(::gobgpapi::MedActionType value);
  private:
  ::gobgpapi::MedActionType _internal_action_type() const;
  void _internal_set_action_type(::gobgpapi::MedActionType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MedAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  int action_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class AsPrependAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AsPrependAction) */ {
 public:
  AsPrependAction();
  virtual ~AsPrependAction();

  AsPrependAction(const AsPrependAction& from);
  AsPrependAction(AsPrependAction&& from) noexcept
    : AsPrependAction() {
    *this = ::std::move(from);
  }

  inline AsPrependAction& operator=(const AsPrependAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsPrependAction& operator=(AsPrependAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsPrependAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsPrependAction* internal_default_instance() {
    return reinterpret_cast<const AsPrependAction*>(
               &_AsPrependAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(AsPrependAction& a, AsPrependAction& b) {
    a.Swap(&b);
  }
  inline void Swap(AsPrependAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsPrependAction* New() const final {
    return CreateMaybeMessage<AsPrependAction>(nullptr);
  }

  AsPrependAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsPrependAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsPrependAction& from);
  void MergeFrom(const AsPrependAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsPrependAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AsPrependAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnFieldNumber = 1,
    kRepeatFieldNumber = 2,
    kUseLeftMostFieldNumber = 3,
  };
  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 repeat = 2;
  void clear_repeat();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeat() const;
  void set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeat() const;
  void _internal_set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool use_left_most = 3;
  void clear_use_left_most();
  bool use_left_most() const;
  void set_use_left_most(bool value);
  private:
  bool _internal_use_left_most() const;
  void _internal_set_use_left_most(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AsPrependAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeat_;
  bool use_left_most_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class NexthopAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.NexthopAction) */ {
 public:
  NexthopAction();
  virtual ~NexthopAction();

  NexthopAction(const NexthopAction& from);
  NexthopAction(NexthopAction&& from) noexcept
    : NexthopAction() {
    *this = ::std::move(from);
  }

  inline NexthopAction& operator=(const NexthopAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline NexthopAction& operator=(NexthopAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NexthopAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NexthopAction* internal_default_instance() {
    return reinterpret_cast<const NexthopAction*>(
               &_NexthopAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(NexthopAction& a, NexthopAction& b) {
    a.Swap(&b);
  }
  inline void Swap(NexthopAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NexthopAction* New() const final {
    return CreateMaybeMessage<NexthopAction>(nullptr);
  }

  NexthopAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NexthopAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NexthopAction& from);
  void MergeFrom(const NexthopAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NexthopAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.NexthopAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSelfFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool self = 2;
  void clear_self();
  bool self() const;
  void set_self(bool value);
  private:
  bool _internal_self() const;
  void _internal_set_self(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.NexthopAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class LocalPrefAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LocalPrefAction) */ {
 public:
  LocalPrefAction();
  virtual ~LocalPrefAction();

  LocalPrefAction(const LocalPrefAction& from);
  LocalPrefAction(LocalPrefAction&& from) noexcept
    : LocalPrefAction() {
    *this = ::std::move(from);
  }

  inline LocalPrefAction& operator=(const LocalPrefAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPrefAction& operator=(LocalPrefAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalPrefAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPrefAction* internal_default_instance() {
    return reinterpret_cast<const LocalPrefAction*>(
               &_LocalPrefAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(LocalPrefAction& a, LocalPrefAction& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPrefAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalPrefAction* New() const final {
    return CreateMaybeMessage<LocalPrefAction>(nullptr);
  }

  LocalPrefAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalPrefAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalPrefAction& from);
  void MergeFrom(const LocalPrefAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPrefAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LocalPrefAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LocalPrefAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Actions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Actions) */ {
 public:
  Actions();
  virtual ~Actions();

  Actions(const Actions& from);
  Actions(Actions&& from) noexcept
    : Actions() {
    *this = ::std::move(from);
  }

  inline Actions& operator=(const Actions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Actions& operator=(Actions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Actions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actions* internal_default_instance() {
    return reinterpret_cast<const Actions*>(
               &_Actions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(Actions& a, Actions& b) {
    a.Swap(&b);
  }
  inline void Swap(Actions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Actions* New() const final {
    return CreateMaybeMessage<Actions>(nullptr);
  }

  Actions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Actions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Actions& from);
  void MergeFrom(const Actions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Actions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityFieldNumber = 2,
    kMedFieldNumber = 3,
    kAsPrependFieldNumber = 4,
    kExtCommunityFieldNumber = 5,
    kNexthopFieldNumber = 6,
    kLocalPrefFieldNumber = 7,
    kLargeCommunityFieldNumber = 8,
    kRouteActionFieldNumber = 1,
  };
  // .gobgpapi.CommunityAction community = 2;
  bool has_community() const;
  private:
  bool _internal_has_community() const;
  public:
  void clear_community();
  const ::gobgpapi::CommunityAction& community() const;
  ::gobgpapi::CommunityAction* release_community();
  ::gobgpapi::CommunityAction* mutable_community();
  void set_allocated_community(::gobgpapi::CommunityAction* community);
  private:
  const ::gobgpapi::CommunityAction& _internal_community() const;
  ::gobgpapi::CommunityAction* _internal_mutable_community();
  public:

  // .gobgpapi.MedAction med = 3;
  bool has_med() const;
  private:
  bool _internal_has_med() const;
  public:
  void clear_med();
  const ::gobgpapi::MedAction& med() const;
  ::gobgpapi::MedAction* release_med();
  ::gobgpapi::MedAction* mutable_med();
  void set_allocated_med(::gobgpapi::MedAction* med);
  private:
  const ::gobgpapi::MedAction& _internal_med() const;
  ::gobgpapi::MedAction* _internal_mutable_med();
  public:

  // .gobgpapi.AsPrependAction as_prepend = 4;
  bool has_as_prepend() const;
  private:
  bool _internal_has_as_prepend() const;
  public:
  void clear_as_prepend();
  const ::gobgpapi::AsPrependAction& as_prepend() const;
  ::gobgpapi::AsPrependAction* release_as_prepend();
  ::gobgpapi::AsPrependAction* mutable_as_prepend();
  void set_allocated_as_prepend(::gobgpapi::AsPrependAction* as_prepend);
  private:
  const ::gobgpapi::AsPrependAction& _internal_as_prepend() const;
  ::gobgpapi::AsPrependAction* _internal_mutable_as_prepend();
  public:

  // .gobgpapi.CommunityAction ext_community = 5;
  bool has_ext_community() const;
  private:
  bool _internal_has_ext_community() const;
  public:
  void clear_ext_community();
  const ::gobgpapi::CommunityAction& ext_community() const;
  ::gobgpapi::CommunityAction* release_ext_community();
  ::gobgpapi::CommunityAction* mutable_ext_community();
  void set_allocated_ext_community(::gobgpapi::CommunityAction* ext_community);
  private:
  const ::gobgpapi::CommunityAction& _internal_ext_community() const;
  ::gobgpapi::CommunityAction* _internal_mutable_ext_community();
  public:

  // .gobgpapi.NexthopAction nexthop = 6;
  bool has_nexthop() const;
  private:
  bool _internal_has_nexthop() const;
  public:
  void clear_nexthop();
  const ::gobgpapi::NexthopAction& nexthop() const;
  ::gobgpapi::NexthopAction* release_nexthop();
  ::gobgpapi::NexthopAction* mutable_nexthop();
  void set_allocated_nexthop(::gobgpapi::NexthopAction* nexthop);
  private:
  const ::gobgpapi::NexthopAction& _internal_nexthop() const;
  ::gobgpapi::NexthopAction* _internal_mutable_nexthop();
  public:

  // .gobgpapi.LocalPrefAction local_pref = 7;
  bool has_local_pref() const;
  private:
  bool _internal_has_local_pref() const;
  public:
  void clear_local_pref();
  const ::gobgpapi::LocalPrefAction& local_pref() const;
  ::gobgpapi::LocalPrefAction* release_local_pref();
  ::gobgpapi::LocalPrefAction* mutable_local_pref();
  void set_allocated_local_pref(::gobgpapi::LocalPrefAction* local_pref);
  private:
  const ::gobgpapi::LocalPrefAction& _internal_local_pref() const;
  ::gobgpapi::LocalPrefAction* _internal_mutable_local_pref();
  public:

  // .gobgpapi.CommunityAction large_community = 8;
  bool has_large_community() const;
  private:
  bool _internal_has_large_community() const;
  public:
  void clear_large_community();
  const ::gobgpapi::CommunityAction& large_community() const;
  ::gobgpapi::CommunityAction* release_large_community();
  ::gobgpapi::CommunityAction* mutable_large_community();
  void set_allocated_large_community(::gobgpapi::CommunityAction* large_community);
  private:
  const ::gobgpapi::CommunityAction& _internal_large_community() const;
  ::gobgpapi::CommunityAction* _internal_mutable_large_community();
  public:

  // .gobgpapi.RouteAction route_action = 1;
  void clear_route_action();
  ::gobgpapi::RouteAction route_action() const;
  void set_route_action(::gobgpapi::RouteAction value);
  private:
  ::gobgpapi::RouteAction _internal_route_action() const;
  void _internal_set_route_action(::gobgpapi::RouteAction value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Actions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::CommunityAction* community_;
  ::gobgpapi::MedAction* med_;
  ::gobgpapi::AsPrependAction* as_prepend_;
  ::gobgpapi::CommunityAction* ext_community_;
  ::gobgpapi::NexthopAction* nexthop_;
  ::gobgpapi::LocalPrefAction* local_pref_;
  ::gobgpapi::CommunityAction* large_community_;
  int route_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Statement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Statement) */ {
 public:
  Statement();
  virtual ~Statement();

  Statement(const Statement& from);
  Statement(Statement&& from) noexcept
    : Statement() {
    *this = ::std::move(from);
  }

  inline Statement& operator=(const Statement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statement& operator=(Statement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statement* internal_default_instance() {
    return reinterpret_cast<const Statement*>(
               &_Statement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(Statement& a, Statement& b) {
    a.Swap(&b);
  }
  inline void Swap(Statement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statement* New() const final {
    return CreateMaybeMessage<Statement>(nullptr);
  }

  Statement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statement& from);
  void MergeFrom(const Statement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Statement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConditionsFieldNumber = 2,
    kActionsFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.Conditions conditions = 2;
  bool has_conditions() const;
  private:
  bool _internal_has_conditions() const;
  public:
  void clear_conditions();
  const ::gobgpapi::Conditions& conditions() const;
  ::gobgpapi::Conditions* release_conditions();
  ::gobgpapi::Conditions* mutable_conditions();
  void set_allocated_conditions(::gobgpapi::Conditions* conditions);
  private:
  const ::gobgpapi::Conditions& _internal_conditions() const;
  ::gobgpapi::Conditions* _internal_mutable_conditions();
  public:

  // .gobgpapi.Actions actions = 3;
  bool has_actions() const;
  private:
  bool _internal_has_actions() const;
  public:
  void clear_actions();
  const ::gobgpapi::Actions& actions() const;
  ::gobgpapi::Actions* release_actions();
  ::gobgpapi::Actions* mutable_actions();
  void set_allocated_actions(::gobgpapi::Actions* actions);
  private:
  const ::gobgpapi::Actions& _internal_actions() const;
  ::gobgpapi::Actions* _internal_mutable_actions();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Statement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gobgpapi::Conditions* conditions_;
  ::gobgpapi::Actions* actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Policy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Policy) */ {
 public:
  Policy();
  virtual ~Policy();

  Policy(const Policy& from);
  Policy(Policy&& from) noexcept
    : Policy() {
    *this = ::std::move(from);
  }

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Policy& operator=(Policy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Policy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Policy* internal_default_instance() {
    return reinterpret_cast<const Policy*>(
               &_Policy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(Policy& a, Policy& b) {
    a.Swap(&b);
  }
  inline void Swap(Policy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Policy* New() const final {
    return CreateMaybeMessage<Policy>(nullptr);
  }

  Policy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Policy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Policy& from);
  void MergeFrom(const Policy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Policy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Policy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatementsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .gobgpapi.Statement statements = 2;
  int statements_size() const;
  private:
  int _internal_statements_size() const;
  public:
  void clear_statements();
  ::gobgpapi::Statement* mutable_statements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Statement >*
      mutable_statements();
  private:
  const ::gobgpapi::Statement& _internal_statements(int index) const;
  ::gobgpapi::Statement* _internal_add_statements();
  public:
  const ::gobgpapi::Statement& statements(int index) const;
  ::gobgpapi::Statement* add_statements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Statement >&
      statements() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Policy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Statement > statements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class PolicyAssignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PolicyAssignment) */ {
 public:
  PolicyAssignment();
  virtual ~PolicyAssignment();

  PolicyAssignment(const PolicyAssignment& from);
  PolicyAssignment(PolicyAssignment&& from) noexcept
    : PolicyAssignment() {
    *this = ::std::move(from);
  }

  inline PolicyAssignment& operator=(const PolicyAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyAssignment& operator=(PolicyAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyAssignment* internal_default_instance() {
    return reinterpret_cast<const PolicyAssignment*>(
               &_PolicyAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(PolicyAssignment& a, PolicyAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyAssignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyAssignment* New() const final {
    return CreateMaybeMessage<PolicyAssignment>(nullptr);
  }

  PolicyAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyAssignment& from);
  void MergeFrom(const PolicyAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PolicyAssignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoliciesFieldNumber = 4,
    kNameFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kDefaultActionFieldNumber = 5,
  };
  // repeated .gobgpapi.Policy policies = 4;
  int policies_size() const;
  private:
  int _internal_policies_size() const;
  public:
  void clear_policies();
  ::gobgpapi::Policy* mutable_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >*
      mutable_policies();
  private:
  const ::gobgpapi::Policy& _internal_policies(int index) const;
  ::gobgpapi::Policy* _internal_add_policies();
  public:
  const ::gobgpapi::Policy& policies(int index) const;
  ::gobgpapi::Policy* add_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >&
      policies() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .gobgpapi.PolicyDirection direction = 2;
  void clear_direction();
  ::gobgpapi::PolicyDirection direction() const;
  void set_direction(::gobgpapi::PolicyDirection value);
  private:
  ::gobgpapi::PolicyDirection _internal_direction() const;
  void _internal_set_direction(::gobgpapi::PolicyDirection value);
  public:

  // .gobgpapi.RouteAction default_action = 5;
  void clear_default_action();
  ::gobgpapi::RouteAction default_action() const;
  void set_default_action(::gobgpapi::RouteAction value);
  private:
  ::gobgpapi::RouteAction _internal_default_action() const;
  void _internal_set_default_action(::gobgpapi::RouteAction value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PolicyAssignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy > policies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int direction_;
  int default_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RoutingPolicy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RoutingPolicy) */ {
 public:
  RoutingPolicy();
  virtual ~RoutingPolicy();

  RoutingPolicy(const RoutingPolicy& from);
  RoutingPolicy(RoutingPolicy&& from) noexcept
    : RoutingPolicy() {
    *this = ::std::move(from);
  }

  inline RoutingPolicy& operator=(const RoutingPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingPolicy& operator=(RoutingPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingPolicy* internal_default_instance() {
    return reinterpret_cast<const RoutingPolicy*>(
               &_RoutingPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(RoutingPolicy& a, RoutingPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingPolicy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingPolicy* New() const final {
    return CreateMaybeMessage<RoutingPolicy>(nullptr);
  }

  RoutingPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingPolicy& from);
  void MergeFrom(const RoutingPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RoutingPolicy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefinedSetsFieldNumber = 1,
    kPoliciesFieldNumber = 2,
  };
  // repeated .gobgpapi.DefinedSet defined_sets = 1;
  int defined_sets_size() const;
  private:
  int _internal_defined_sets_size() const;
  public:
  void clear_defined_sets();
  ::gobgpapi::DefinedSet* mutable_defined_sets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >*
      mutable_defined_sets();
  private:
  const ::gobgpapi::DefinedSet& _internal_defined_sets(int index) const;
  ::gobgpapi::DefinedSet* _internal_add_defined_sets();
  public:
  const ::gobgpapi::DefinedSet& defined_sets(int index) const;
  ::gobgpapi::DefinedSet* add_defined_sets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >&
      defined_sets() const;

  // repeated .gobgpapi.Policy policies = 2;
  int policies_size() const;
  private:
  int _internal_policies_size() const;
  public:
  void clear_policies();
  ::gobgpapi::Policy* mutable_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >*
      mutable_policies();
  private:
  const ::gobgpapi::Policy& _internal_policies(int index) const;
  ::gobgpapi::Policy* _internal_add_policies();
  public:
  const ::gobgpapi::Policy& policies(int index) const;
  ::gobgpapi::Policy* add_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >&
      policies() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.RoutingPolicy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet > defined_sets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy > policies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Roa :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Roa) */ {
 public:
  Roa();
  virtual ~Roa();

  Roa(const Roa& from);
  Roa(Roa&& from) noexcept
    : Roa() {
    *this = ::std::move(from);
  }

  inline Roa& operator=(const Roa& from) {
    CopyFrom(from);
    return *this;
  }
  inline Roa& operator=(Roa&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Roa& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Roa* internal_default_instance() {
    return reinterpret_cast<const Roa*>(
               &_Roa_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(Roa& a, Roa& b) {
    a.Swap(&b);
  }
  inline void Swap(Roa* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Roa* New() const final {
    return CreateMaybeMessage<Roa>(nullptr);
  }

  Roa* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Roa>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Roa& from);
  void MergeFrom(const Roa& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Roa* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Roa";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 4,
    kConfFieldNumber = 5,
    kAsFieldNumber = 1,
    kPrefixlenFieldNumber = 2,
    kMaxlenFieldNumber = 3,
  };
  // string prefix = 4;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .gobgpapi.RPKIConf conf = 5;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::gobgpapi::RPKIConf& conf() const;
  ::gobgpapi::RPKIConf* release_conf();
  ::gobgpapi::RPKIConf* mutable_conf();
  void set_allocated_conf(::gobgpapi::RPKIConf* conf);
  private:
  const ::gobgpapi::RPKIConf& _internal_conf() const;
  ::gobgpapi::RPKIConf* _internal_mutable_conf();
  public:

  // uint32 as = 1;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prefixlen = 2;
  void clear_prefixlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen() const;
  void set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefixlen() const;
  void _internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxlen = 3;
  void clear_maxlen();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlen() const;
  void set_maxlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxlen() const;
  void _internal_set_maxlen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Roa)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::gobgpapi::RPKIConf* conf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefixlen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Vrf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Vrf) */ {
 public:
  Vrf();
  virtual ~Vrf();

  Vrf(const Vrf& from);
  Vrf(Vrf&& from) noexcept
    : Vrf() {
    *this = ::std::move(from);
  }

  inline Vrf& operator=(const Vrf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vrf& operator=(Vrf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vrf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vrf* internal_default_instance() {
    return reinterpret_cast<const Vrf*>(
               &_Vrf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(Vrf& a, Vrf& b) {
    a.Swap(&b);
  }
  inline void Swap(Vrf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vrf* New() const final {
    return CreateMaybeMessage<Vrf>(nullptr);
  }

  Vrf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vrf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vrf& from);
  void MergeFrom(const Vrf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vrf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Vrf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImportRtFieldNumber = 3,
    kExportRtFieldNumber = 4,
    kNameFieldNumber = 1,
    kRdFieldNumber = 2,
    kIdFieldNumber = 5,
  };
  // repeated .google.protobuf.Any import_rt = 3;
  int import_rt_size() const;
  private:
  int _internal_import_rt_size() const;
  public:
  void clear_import_rt();
  PROTOBUF_NAMESPACE_ID::Any* mutable_import_rt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_import_rt();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_import_rt(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_import_rt();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& import_rt(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_import_rt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      import_rt() const;

  // repeated .google.protobuf.Any export_rt = 4;
  int export_rt_size() const;
  private:
  int _internal_export_rt_size() const;
  public:
  void clear_export_rt();
  PROTOBUF_NAMESPACE_ID::Any* mutable_export_rt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_export_rt();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_export_rt(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_export_rt();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& export_rt(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_export_rt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      export_rt() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any rd = 2;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // uint32 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Vrf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > import_rt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > export_rt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class DefaultRouteDistance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DefaultRouteDistance) */ {
 public:
  DefaultRouteDistance();
  virtual ~DefaultRouteDistance();

  DefaultRouteDistance(const DefaultRouteDistance& from);
  DefaultRouteDistance(DefaultRouteDistance&& from) noexcept
    : DefaultRouteDistance() {
    *this = ::std::move(from);
  }

  inline DefaultRouteDistance& operator=(const DefaultRouteDistance& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultRouteDistance& operator=(DefaultRouteDistance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefaultRouteDistance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultRouteDistance* internal_default_instance() {
    return reinterpret_cast<const DefaultRouteDistance*>(
               &_DefaultRouteDistance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(DefaultRouteDistance& a, DefaultRouteDistance& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultRouteDistance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultRouteDistance* New() const final {
    return CreateMaybeMessage<DefaultRouteDistance>(nullptr);
  }

  DefaultRouteDistance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultRouteDistance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultRouteDistance& from);
  void MergeFrom(const DefaultRouteDistance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultRouteDistance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DefaultRouteDistance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalRouteDistanceFieldNumber = 1,
    kInternalRouteDistanceFieldNumber = 2,
  };
  // uint32 external_route_distance = 1;
  void clear_external_route_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 external_route_distance() const;
  void set_external_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_external_route_distance() const;
  void _internal_set_external_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 internal_route_distance = 2;
  void clear_internal_route_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_route_distance() const;
  void set_internal_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_internal_route_distance() const;
  void _internal_set_internal_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.DefaultRouteDistance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 external_route_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_route_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Global :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Global) */ {
 public:
  Global();
  virtual ~Global();

  Global(const Global& from);
  Global(Global&& from) noexcept
    : Global() {
    *this = ::std::move(from);
  }

  inline Global& operator=(const Global& from) {
    CopyFrom(from);
    return *this;
  }
  inline Global& operator=(Global&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Global& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Global* internal_default_instance() {
    return reinterpret_cast<const Global*>(
               &_Global_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(Global& a, Global& b) {
    a.Swap(&b);
  }
  inline void Swap(Global* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Global* New() const final {
    return CreateMaybeMessage<Global>(nullptr);
  }

  Global* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Global>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Global& from);
  void MergeFrom(const Global& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Global* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Global";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenAddressesFieldNumber = 4,
    kFamiliesFieldNumber = 5,
    kRouterIdFieldNumber = 2,
    kRouteSelectionOptionsFieldNumber = 7,
    kDefaultRouteDistanceFieldNumber = 8,
    kConfederationFieldNumber = 9,
    kGracefulRestartFieldNumber = 10,
    kApplyPolicyFieldNumber = 11,
    kAsFieldNumber = 1,
    kListenPortFieldNumber = 3,
    kUseMultiplePathsFieldNumber = 6,
  };
  // repeated string listen_addresses = 4;
  int listen_addresses_size() const;
  private:
  int _internal_listen_addresses_size() const;
  public:
  void clear_listen_addresses();
  const std::string& listen_addresses(int index) const;
  std::string* mutable_listen_addresses(int index);
  void set_listen_addresses(int index, const std::string& value);
  void set_listen_addresses(int index, std::string&& value);
  void set_listen_addresses(int index, const char* value);
  void set_listen_addresses(int index, const char* value, size_t size);
  std::string* add_listen_addresses();
  void add_listen_addresses(const std::string& value);
  void add_listen_addresses(std::string&& value);
  void add_listen_addresses(const char* value);
  void add_listen_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& listen_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_listen_addresses();
  private:
  const std::string& _internal_listen_addresses(int index) const;
  std::string* _internal_add_listen_addresses();
  public:

  // repeated uint32 families = 5;
  int families_size() const;
  private:
  int _internal_families_size() const;
  public:
  void clear_families();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_families(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_families() const;
  void _internal_add_families(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_families();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 families(int index) const;
  void set_families(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_families(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      families() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_families();

  // string router_id = 2;
  void clear_router_id();
  const std::string& router_id() const;
  void set_router_id(const std::string& value);
  void set_router_id(std::string&& value);
  void set_router_id(const char* value);
  void set_router_id(const char* value, size_t size);
  std::string* mutable_router_id();
  std::string* release_router_id();
  void set_allocated_router_id(std::string* router_id);
  private:
  const std::string& _internal_router_id() const;
  void _internal_set_router_id(const std::string& value);
  std::string* _internal_mutable_router_id();
  public:

  // .gobgpapi.RouteSelectionOptionsConfig route_selection_options = 7;
  bool has_route_selection_options() const;
  private:
  bool _internal_has_route_selection_options() const;
  public:
  void clear_route_selection_options();
  const ::gobgpapi::RouteSelectionOptionsConfig& route_selection_options() const;
  ::gobgpapi::RouteSelectionOptionsConfig* release_route_selection_options();
  ::gobgpapi::RouteSelectionOptionsConfig* mutable_route_selection_options();
  void set_allocated_route_selection_options(::gobgpapi::RouteSelectionOptionsConfig* route_selection_options);
  private:
  const ::gobgpapi::RouteSelectionOptionsConfig& _internal_route_selection_options() const;
  ::gobgpapi::RouteSelectionOptionsConfig* _internal_mutable_route_selection_options();
  public:

  // .gobgpapi.DefaultRouteDistance default_route_distance = 8;
  bool has_default_route_distance() const;
  private:
  bool _internal_has_default_route_distance() const;
  public:
  void clear_default_route_distance();
  const ::gobgpapi::DefaultRouteDistance& default_route_distance() const;
  ::gobgpapi::DefaultRouteDistance* release_default_route_distance();
  ::gobgpapi::DefaultRouteDistance* mutable_default_route_distance();
  void set_allocated_default_route_distance(::gobgpapi::DefaultRouteDistance* default_route_distance);
  private:
  const ::gobgpapi::DefaultRouteDistance& _internal_default_route_distance() const;
  ::gobgpapi::DefaultRouteDistance* _internal_mutable_default_route_distance();
  public:

  // .gobgpapi.Confederation confederation = 9;
  bool has_confederation() const;
  private:
  bool _internal_has_confederation() const;
  public:
  void clear_confederation();
  const ::gobgpapi::Confederation& confederation() const;
  ::gobgpapi::Confederation* release_confederation();
  ::gobgpapi::Confederation* mutable_confederation();
  void set_allocated_confederation(::gobgpapi::Confederation* confederation);
  private:
  const ::gobgpapi::Confederation& _internal_confederation() const;
  ::gobgpapi::Confederation* _internal_mutable_confederation();
  public:

  // .gobgpapi.GracefulRestart graceful_restart = 10;
  bool has_graceful_restart() const;
  private:
  bool _internal_has_graceful_restart() const;
  public:
  void clear_graceful_restart();
  const ::gobgpapi::GracefulRestart& graceful_restart() const;
  ::gobgpapi::GracefulRestart* release_graceful_restart();
  ::gobgpapi::GracefulRestart* mutable_graceful_restart();
  void set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart);
  private:
  const ::gobgpapi::GracefulRestart& _internal_graceful_restart() const;
  ::gobgpapi::GracefulRestart* _internal_mutable_graceful_restart();
  public:

  // .gobgpapi.ApplyPolicy apply_policy = 11;
  bool has_apply_policy() const;
  private:
  bool _internal_has_apply_policy() const;
  public:
  void clear_apply_policy();
  const ::gobgpapi::ApplyPolicy& apply_policy() const;
  ::gobgpapi::ApplyPolicy* release_apply_policy();
  ::gobgpapi::ApplyPolicy* mutable_apply_policy();
  void set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy);
  private:
  const ::gobgpapi::ApplyPolicy& _internal_apply_policy() const;
  ::gobgpapi::ApplyPolicy* _internal_mutable_apply_policy();
  public:

  // uint32 as = 1;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 listen_port = 3;
  void clear_listen_port();
  ::PROTOBUF_NAMESPACE_ID::int32 listen_port() const;
  void set_listen_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listen_port() const;
  void _internal_set_listen_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_multiple_paths = 6;
  void clear_use_multiple_paths();
  bool use_multiple_paths() const;
  void set_use_multiple_paths(bool value);
  private:
  bool _internal_use_multiple_paths() const;
  void _internal_set_use_multiple_paths(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Global)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> listen_addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > families_;
  mutable std::atomic<int> _families_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr router_id_;
  ::gobgpapi::RouteSelectionOptionsConfig* route_selection_options_;
  ::gobgpapi::DefaultRouteDistance* default_route_distance_;
  ::gobgpapi::Confederation* confederation_;
  ::gobgpapi::GracefulRestart* graceful_restart_;
  ::gobgpapi::ApplyPolicy* apply_policy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  ::PROTOBUF_NAMESPACE_ID::int32 listen_port_;
  bool use_multiple_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Confederation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Confederation) */ {
 public:
  Confederation();
  virtual ~Confederation();

  Confederation(const Confederation& from);
  Confederation(Confederation&& from) noexcept
    : Confederation() {
    *this = ::std::move(from);
  }

  inline Confederation& operator=(const Confederation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Confederation& operator=(Confederation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Confederation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Confederation* internal_default_instance() {
    return reinterpret_cast<const Confederation*>(
               &_Confederation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(Confederation& a, Confederation& b) {
    a.Swap(&b);
  }
  inline void Swap(Confederation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Confederation* New() const final {
    return CreateMaybeMessage<Confederation>(nullptr);
  }

  Confederation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Confederation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Confederation& from);
  void MergeFrom(const Confederation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Confederation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Confederation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberAsListFieldNumber = 3,
    kEnabledFieldNumber = 1,
    kIdentifierFieldNumber = 2,
  };
  // repeated uint32 member_as_list = 3;
  int member_as_list_size() const;
  private:
  int _internal_member_as_list_size() const;
  public:
  void clear_member_as_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_as_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_member_as_list() const;
  void _internal_add_member_as_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_member_as_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 member_as_list(int index) const;
  void set_member_as_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_member_as_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      member_as_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_member_as_list();

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 identifier = 2;
  void clear_identifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 identifier() const;
  void set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_identifier() const;
  void _internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Confederation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > member_as_list_;
  mutable std::atomic<int> _member_as_list_cached_byte_size_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RPKIConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RPKIConf) */ {
 public:
  RPKIConf();
  virtual ~RPKIConf();

  RPKIConf(const RPKIConf& from);
  RPKIConf(RPKIConf&& from) noexcept
    : RPKIConf() {
    *this = ::std::move(from);
  }

  inline RPKIConf& operator=(const RPKIConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPKIConf& operator=(RPKIConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPKIConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPKIConf* internal_default_instance() {
    return reinterpret_cast<const RPKIConf*>(
               &_RPKIConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(RPKIConf& a, RPKIConf& b) {
    a.Swap(&b);
  }
  inline void Swap(RPKIConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPKIConf* New() const final {
    return CreateMaybeMessage<RPKIConf>(nullptr);
  }

  RPKIConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPKIConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPKIConf& from);
  void MergeFrom(const RPKIConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPKIConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RPKIConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kRemotePortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 remote_port = 2;
  void clear_remote_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_port() const;
  void set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_port() const;
  void _internal_set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKIConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class RPKIState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RPKIState) */ {
 public:
  RPKIState();
  virtual ~RPKIState();

  RPKIState(const RPKIState& from);
  RPKIState(RPKIState&& from) noexcept
    : RPKIState() {
    *this = ::std::move(from);
  }

  inline RPKIState& operator=(const RPKIState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPKIState& operator=(RPKIState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPKIState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPKIState* internal_default_instance() {
    return reinterpret_cast<const RPKIState*>(
               &_RPKIState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(RPKIState& a, RPKIState& b) {
    a.Swap(&b);
  }
  inline void Swap(RPKIState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPKIState* New() const final {
    return CreateMaybeMessage<RPKIState>(nullptr);
  }

  RPKIState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPKIState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPKIState& from);
  void MergeFrom(const RPKIState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPKIState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RPKIState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUptimeFieldNumber = 1,
    kDowntimeFieldNumber = 2,
    kUpFieldNumber = 3,
    kRecordIpv4FieldNumber = 4,
    kRecordIpv6FieldNumber = 5,
    kPrefixIpv4FieldNumber = 6,
    kPrefixIpv6FieldNumber = 7,
    kSerialFieldNumber = 8,
    kReceivedIpv4FieldNumber = 9,
    kReceivedIpv6FieldNumber = 10,
    kSerialNotifyFieldNumber = 11,
    kCacheResetFieldNumber = 12,
    kCacheResponseFieldNumber = 13,
    kEndOfDataFieldNumber = 14,
    kErrorFieldNumber = 15,
    kSerialQueryFieldNumber = 16,
    kResetQueryFieldNumber = 17,
  };
  // .google.protobuf.Timestamp uptime = 1;
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& uptime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_uptime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_uptime();
  void set_allocated_uptime(PROTOBUF_NAMESPACE_ID::Timestamp* uptime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_uptime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_uptime();
  public:

  // .google.protobuf.Timestamp downtime = 2;
  bool has_downtime() const;
  private:
  bool _internal_has_downtime() const;
  public:
  void clear_downtime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& downtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_downtime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_downtime();
  void set_allocated_downtime(PROTOBUF_NAMESPACE_ID::Timestamp* downtime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_downtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_downtime();
  public:

  // bool up = 3;
  void clear_up();
  bool up() const;
  void set_up(bool value);
  private:
  bool _internal_up() const;
  void _internal_set_up(bool value);
  public:

  // uint32 record_ipv4 = 4;
  void clear_record_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_ipv4() const;
  void set_record_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_ipv4() const;
  void _internal_set_record_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 record_ipv6 = 5;
  void clear_record_ipv6();
  ::PROTOBUF_NAMESPACE_ID::uint32 record_ipv6() const;
  void set_record_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record_ipv6() const;
  void _internal_set_record_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prefix_ipv4 = 6;
  void clear_prefix_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_ipv4() const;
  void set_prefix_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_ipv4() const;
  void _internal_set_prefix_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prefix_ipv6 = 7;
  void clear_prefix_ipv6();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_ipv6() const;
  void set_prefix_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_ipv6() const;
  void _internal_set_prefix_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serial = 8;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 received_ipv4 = 9;
  void clear_received_ipv4();
  ::PROTOBUF_NAMESPACE_ID::int64 received_ipv4() const;
  void set_received_ipv4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_received_ipv4() const;
  void _internal_set_received_ipv4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 received_ipv6 = 10;
  void clear_received_ipv6();
  ::PROTOBUF_NAMESPACE_ID::int64 received_ipv6() const;
  void set_received_ipv6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_received_ipv6() const;
  void _internal_set_received_ipv6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serial_notify = 11;
  void clear_serial_notify();
  ::PROTOBUF_NAMESPACE_ID::int64 serial_notify() const;
  void set_serial_notify(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serial_notify() const;
  void _internal_set_serial_notify(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cache_reset = 12;
  void clear_cache_reset();
  ::PROTOBUF_NAMESPACE_ID::int64 cache_reset() const;
  void set_cache_reset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cache_reset() const;
  void _internal_set_cache_reset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cache_response = 13;
  void clear_cache_response();
  ::PROTOBUF_NAMESPACE_ID::int64 cache_response() const;
  void set_cache_response(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cache_response() const;
  void _internal_set_cache_response(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_of_data = 14;
  void clear_end_of_data();
  ::PROTOBUF_NAMESPACE_ID::int64 end_of_data() const;
  void set_end_of_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_of_data() const;
  void _internal_set_end_of_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 error = 15;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int64 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 serial_query = 16;
  void clear_serial_query();
  ::PROTOBUF_NAMESPACE_ID::int64 serial_query() const;
  void set_serial_query(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serial_query() const;
  void _internal_set_serial_query(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 reset_query = 17;
  void clear_reset_query();
  ::PROTOBUF_NAMESPACE_ID::int64 reset_query() const;
  void set_reset_query(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reset_query() const;
  void _internal_set_reset_query(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKIState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* uptime_;
  PROTOBUF_NAMESPACE_ID::Timestamp* downtime_;
  bool up_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  ::PROTOBUF_NAMESPACE_ID::int64 received_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::int64 received_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::int64 serial_notify_;
  ::PROTOBUF_NAMESPACE_ID::int64 cache_reset_;
  ::PROTOBUF_NAMESPACE_ID::int64 cache_response_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_of_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 error_;
  ::PROTOBUF_NAMESPACE_ID::int64 serial_query_;
  ::PROTOBUF_NAMESPACE_ID::int64 reset_query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// -------------------------------------------------------------------

class Rpki :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.Rpki) */ {
 public:
  Rpki();
  virtual ~Rpki();

  Rpki(const Rpki& from);
  Rpki(Rpki&& from) noexcept
    : Rpki() {
    *this = ::std::move(from);
  }

  inline Rpki& operator=(const Rpki& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rpki& operator=(Rpki&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rpki& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpki* internal_default_instance() {
    return reinterpret_cast<const Rpki*>(
               &_Rpki_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(Rpki& a, Rpki& b) {
    a.Swap(&b);
  }
  inline void Swap(Rpki* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rpki* New() const final {
    return CreateMaybeMessage<Rpki>(nullptr);
  }

  Rpki* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rpki>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rpki& from);
  void MergeFrom(const Rpki& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rpki* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.Rpki";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gobgp_2eproto);
    return ::descriptor_table_gobgp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .gobgpapi.RPKIConf conf = 1;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const ::gobgpapi::RPKIConf& conf() const;
  ::gobgpapi::RPKIConf* release_conf();
  ::gobgpapi::RPKIConf* mutable_conf();
  void set_allocated_conf(::gobgpapi::RPKIConf* conf);
  private:
  const ::gobgpapi::RPKIConf& _internal_conf() const;
  ::gobgpapi::RPKIConf* _internal_mutable_conf();
  public:

  // .gobgpapi.RPKIState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::gobgpapi::RPKIState& state() const;
  ::gobgpapi::RPKIState* release_state();
  ::gobgpapi::RPKIState* mutable_state();
  void set_allocated_state(::gobgpapi::RPKIState* state);
  private:
  const ::gobgpapi::RPKIState& _internal_state() const;
  ::gobgpapi::RPKIState* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.Rpki)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::RPKIConf* conf_;
  ::gobgpapi::RPKIState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gobgp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartBgpRequest

// .gobgpapi.Global global = 1;
inline bool StartBgpRequest::_internal_has_global() const {
  return this != internal_default_instance() && global_ != nullptr;
}
inline bool StartBgpRequest::has_global() const {
  return _internal_has_global();
}
inline void StartBgpRequest::clear_global() {
  if (GetArenaNoVirtual() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
}
inline const ::gobgpapi::Global& StartBgpRequest::_internal_global() const {
  const ::gobgpapi::Global* p = global_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Global*>(
      &::gobgpapi::_Global_default_instance_);
}
inline const ::gobgpapi::Global& StartBgpRequest::global() const {
  // @@protoc_insertion_point(field_get:gobgpapi.StartBgpRequest.global)
  return _internal_global();
}
inline ::gobgpapi::Global* StartBgpRequest::release_global() {
  // @@protoc_insertion_point(field_release:gobgpapi.StartBgpRequest.global)
  
  ::gobgpapi::Global* temp = global_;
  global_ = nullptr;
  return temp;
}
inline ::gobgpapi::Global* StartBgpRequest::_internal_mutable_global() {
  
  if (global_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Global>(GetArenaNoVirtual());
    global_ = p;
  }
  return global_;
}
inline ::gobgpapi::Global* StartBgpRequest::mutable_global() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.StartBgpRequest.global)
  return _internal_mutable_global();
}
inline void StartBgpRequest::set_allocated_global(::gobgpapi::Global* global) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_;
  }
  if (global) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global, submessage_arena);
    }
    
  } else {
    
  }
  global_ = global;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.StartBgpRequest.global)
}

// -------------------------------------------------------------------

// StopBgpRequest

// -------------------------------------------------------------------

// GetBgpRequest

// -------------------------------------------------------------------

// GetBgpResponse

// .gobgpapi.Global global = 1;
inline bool GetBgpResponse::_internal_has_global() const {
  return this != internal_default_instance() && global_ != nullptr;
}
inline bool GetBgpResponse::has_global() const {
  return _internal_has_global();
}
inline void GetBgpResponse::clear_global() {
  if (GetArenaNoVirtual() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
}
inline const ::gobgpapi::Global& GetBgpResponse::_internal_global() const {
  const ::gobgpapi::Global* p = global_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Global*>(
      &::gobgpapi::_Global_default_instance_);
}
inline const ::gobgpapi::Global& GetBgpResponse::global() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetBgpResponse.global)
  return _internal_global();
}
inline ::gobgpapi::Global* GetBgpResponse::release_global() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetBgpResponse.global)
  
  ::gobgpapi::Global* temp = global_;
  global_ = nullptr;
  return temp;
}
inline ::gobgpapi::Global* GetBgpResponse::_internal_mutable_global() {
  
  if (global_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Global>(GetArenaNoVirtual());
    global_ = p;
  }
  return global_;
}
inline ::gobgpapi::Global* GetBgpResponse::mutable_global() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetBgpResponse.global)
  return _internal_mutable_global();
}
inline void GetBgpResponse::set_allocated_global(::gobgpapi::Global* global) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_;
  }
  if (global) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global, submessage_arena);
    }
    
  } else {
    
  }
  global_ = global;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetBgpResponse.global)
}

// -------------------------------------------------------------------

// AddPeerRequest

// .gobgpapi.Peer peer = 1;
inline bool AddPeerRequest::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool AddPeerRequest::has_peer() const {
  return _internal_has_peer();
}
inline void AddPeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
inline const ::gobgpapi::Peer& AddPeerRequest::_internal_peer() const {
  const ::gobgpapi::Peer* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Peer*>(
      &::gobgpapi::_Peer_default_instance_);
}
inline const ::gobgpapi::Peer& AddPeerRequest::peer() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPeerRequest.peer)
  return _internal_peer();
}
inline ::gobgpapi::Peer* AddPeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPeerRequest.peer)
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::gobgpapi::Peer* AddPeerRequest::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  return peer_;
}
inline ::gobgpapi::Peer* AddPeerRequest::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPeerRequest.peer)
  return _internal_mutable_peer();
}
inline void AddPeerRequest::set_allocated_peer(::gobgpapi::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_;
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPeerRequest.peer)
}

// -------------------------------------------------------------------

// DeletePeerRequest

// string address = 1;
inline void DeletePeerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeletePeerRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePeerRequest.address)
  return _internal_address();
}
inline void DeletePeerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePeerRequest.address)
}
inline std::string* DeletePeerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePeerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& DeletePeerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void DeletePeerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeletePeerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeletePeerRequest.address)
}
inline void DeletePeerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeletePeerRequest.address)
}
inline void DeletePeerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeletePeerRequest.address)
}
inline std::string* DeletePeerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePeerRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePeerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePeerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePeerRequest.address)
}

// string interface = 2;
inline void DeletePeerRequest::clear_interface() {
  interface_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeletePeerRequest::interface() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePeerRequest.interface)
  return _internal_interface();
}
inline void DeletePeerRequest::set_interface(const std::string& value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePeerRequest.interface)
}
inline std::string* DeletePeerRequest::mutable_interface() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePeerRequest.interface)
  return _internal_mutable_interface();
}
inline const std::string& DeletePeerRequest::_internal_interface() const {
  return interface_.GetNoArena();
}
inline void DeletePeerRequest::_internal_set_interface(const std::string& value) {
  
  interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeletePeerRequest::set_interface(std::string&& value) {
  
  interface_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeletePeerRequest.interface)
}
inline void DeletePeerRequest::set_interface(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeletePeerRequest.interface)
}
inline void DeletePeerRequest::set_interface(const char* value, size_t size) {
  
  interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeletePeerRequest.interface)
}
inline std::string* DeletePeerRequest::_internal_mutable_interface() {
  
  return interface_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePeerRequest::release_interface() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePeerRequest.interface)
  
  return interface_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePeerRequest::set_allocated_interface(std::string* interface) {
  if (interface != nullptr) {
    
  } else {
    
  }
  interface_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePeerRequest.interface)
}

// -------------------------------------------------------------------

// ListPeerRequest

// string address = 1;
inline void ListPeerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListPeerRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPeerRequest.address)
  return _internal_address();
}
inline void ListPeerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPeerRequest.address)
}
inline std::string* ListPeerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPeerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& ListPeerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void ListPeerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListPeerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ListPeerRequest.address)
}
inline void ListPeerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ListPeerRequest.address)
}
inline void ListPeerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ListPeerRequest.address)
}
inline std::string* ListPeerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListPeerRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPeerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListPeerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPeerRequest.address)
}

// bool enableAdvertised = 2;
inline void ListPeerRequest::clear_enableadvertised() {
  enableadvertised_ = false;
}
inline bool ListPeerRequest::_internal_enableadvertised() const {
  return enableadvertised_;
}
inline bool ListPeerRequest::enableadvertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPeerRequest.enableAdvertised)
  return _internal_enableadvertised();
}
inline void ListPeerRequest::_internal_set_enableadvertised(bool value) {
  
  enableadvertised_ = value;
}
inline void ListPeerRequest::set_enableadvertised(bool value) {
  _internal_set_enableadvertised(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPeerRequest.enableAdvertised)
}

// -------------------------------------------------------------------

// ListPeerResponse

// .gobgpapi.Peer peer = 1;
inline bool ListPeerResponse::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool ListPeerResponse::has_peer() const {
  return _internal_has_peer();
}
inline void ListPeerResponse::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
inline const ::gobgpapi::Peer& ListPeerResponse::_internal_peer() const {
  const ::gobgpapi::Peer* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Peer*>(
      &::gobgpapi::_Peer_default_instance_);
}
inline const ::gobgpapi::Peer& ListPeerResponse::peer() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPeerResponse.peer)
  return _internal_peer();
}
inline ::gobgpapi::Peer* ListPeerResponse::release_peer() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPeerResponse.peer)
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::gobgpapi::Peer* ListPeerResponse::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  return peer_;
}
inline ::gobgpapi::Peer* ListPeerResponse::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPeerResponse.peer)
  return _internal_mutable_peer();
}
inline void ListPeerResponse::set_allocated_peer(::gobgpapi::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_;
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPeerResponse.peer)
}

// -------------------------------------------------------------------

// UpdatePeerRequest

// .gobgpapi.Peer peer = 1;
inline bool UpdatePeerRequest::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool UpdatePeerRequest::has_peer() const {
  return _internal_has_peer();
}
inline void UpdatePeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
inline const ::gobgpapi::Peer& UpdatePeerRequest::_internal_peer() const {
  const ::gobgpapi::Peer* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Peer*>(
      &::gobgpapi::_Peer_default_instance_);
}
inline const ::gobgpapi::Peer& UpdatePeerRequest::peer() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UpdatePeerRequest.peer)
  return _internal_peer();
}
inline ::gobgpapi::Peer* UpdatePeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:gobgpapi.UpdatePeerRequest.peer)
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::gobgpapi::Peer* UpdatePeerRequest::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  return peer_;
}
inline ::gobgpapi::Peer* UpdatePeerRequest::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UpdatePeerRequest.peer)
  return _internal_mutable_peer();
}
inline void UpdatePeerRequest::set_allocated_peer(::gobgpapi::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_;
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UpdatePeerRequest.peer)
}

// bool do_soft_reset_in = 2;
inline void UpdatePeerRequest::clear_do_soft_reset_in() {
  do_soft_reset_in_ = false;
}
inline bool UpdatePeerRequest::_internal_do_soft_reset_in() const {
  return do_soft_reset_in_;
}
inline bool UpdatePeerRequest::do_soft_reset_in() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UpdatePeerRequest.do_soft_reset_in)
  return _internal_do_soft_reset_in();
}
inline void UpdatePeerRequest::_internal_set_do_soft_reset_in(bool value) {
  
  do_soft_reset_in_ = value;
}
inline void UpdatePeerRequest::set_do_soft_reset_in(bool value) {
  _internal_set_do_soft_reset_in(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UpdatePeerRequest.do_soft_reset_in)
}

// -------------------------------------------------------------------

// UpdatePeerResponse

// bool needs_soft_reset_in = 1;
inline void UpdatePeerResponse::clear_needs_soft_reset_in() {
  needs_soft_reset_in_ = false;
}
inline bool UpdatePeerResponse::_internal_needs_soft_reset_in() const {
  return needs_soft_reset_in_;
}
inline bool UpdatePeerResponse::needs_soft_reset_in() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UpdatePeerResponse.needs_soft_reset_in)
  return _internal_needs_soft_reset_in();
}
inline void UpdatePeerResponse::_internal_set_needs_soft_reset_in(bool value) {
  
  needs_soft_reset_in_ = value;
}
inline void UpdatePeerResponse::set_needs_soft_reset_in(bool value) {
  _internal_set_needs_soft_reset_in(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UpdatePeerResponse.needs_soft_reset_in)
}

// -------------------------------------------------------------------

// ResetPeerRequest

// string address = 1;
inline void ResetPeerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetPeerRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetPeerRequest.address)
  return _internal_address();
}
inline void ResetPeerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetPeerRequest.address)
}
inline std::string* ResetPeerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ResetPeerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& ResetPeerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void ResetPeerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetPeerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ResetPeerRequest.address)
}
inline void ResetPeerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ResetPeerRequest.address)
}
inline void ResetPeerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ResetPeerRequest.address)
}
inline std::string* ResetPeerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetPeerRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.ResetPeerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetPeerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ResetPeerRequest.address)
}

// string communication = 2;
inline void ResetPeerRequest::clear_communication() {
  communication_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetPeerRequest::communication() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetPeerRequest.communication)
  return _internal_communication();
}
inline void ResetPeerRequest::set_communication(const std::string& value) {
  _internal_set_communication(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetPeerRequest.communication)
}
inline std::string* ResetPeerRequest::mutable_communication() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ResetPeerRequest.communication)
  return _internal_mutable_communication();
}
inline const std::string& ResetPeerRequest::_internal_communication() const {
  return communication_.GetNoArena();
}
inline void ResetPeerRequest::_internal_set_communication(const std::string& value) {
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetPeerRequest::set_communication(std::string&& value) {
  
  communication_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ResetPeerRequest.communication)
}
inline void ResetPeerRequest::set_communication(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ResetPeerRequest.communication)
}
inline void ResetPeerRequest::set_communication(const char* value, size_t size) {
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ResetPeerRequest.communication)
}
inline std::string* ResetPeerRequest::_internal_mutable_communication() {
  
  return communication_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetPeerRequest::release_communication() {
  // @@protoc_insertion_point(field_release:gobgpapi.ResetPeerRequest.communication)
  
  return communication_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetPeerRequest::set_allocated_communication(std::string* communication) {
  if (communication != nullptr) {
    
  } else {
    
  }
  communication_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), communication);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ResetPeerRequest.communication)
}

// bool soft = 3;
inline void ResetPeerRequest::clear_soft() {
  soft_ = false;
}
inline bool ResetPeerRequest::_internal_soft() const {
  return soft_;
}
inline bool ResetPeerRequest::soft() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetPeerRequest.soft)
  return _internal_soft();
}
inline void ResetPeerRequest::_internal_set_soft(bool value) {
  
  soft_ = value;
}
inline void ResetPeerRequest::set_soft(bool value) {
  _internal_set_soft(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetPeerRequest.soft)
}

// .gobgpapi.ResetPeerRequest.SoftResetDirection direction = 4;
inline void ResetPeerRequest::clear_direction() {
  direction_ = 0;
}
inline ::gobgpapi::ResetPeerRequest_SoftResetDirection ResetPeerRequest::_internal_direction() const {
  return static_cast< ::gobgpapi::ResetPeerRequest_SoftResetDirection >(direction_);
}
inline ::gobgpapi::ResetPeerRequest_SoftResetDirection ResetPeerRequest::direction() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetPeerRequest.direction)
  return _internal_direction();
}
inline void ResetPeerRequest::_internal_set_direction(::gobgpapi::ResetPeerRequest_SoftResetDirection value) {
  
  direction_ = value;
}
inline void ResetPeerRequest::set_direction(::gobgpapi::ResetPeerRequest_SoftResetDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetPeerRequest.direction)
}

// -------------------------------------------------------------------

// ShutdownPeerRequest

// string address = 1;
inline void ShutdownPeerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShutdownPeerRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ShutdownPeerRequest.address)
  return _internal_address();
}
inline void ShutdownPeerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ShutdownPeerRequest.address)
}
inline std::string* ShutdownPeerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ShutdownPeerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& ShutdownPeerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void ShutdownPeerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShutdownPeerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ShutdownPeerRequest.address)
}
inline void ShutdownPeerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ShutdownPeerRequest.address)
}
inline void ShutdownPeerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ShutdownPeerRequest.address)
}
inline std::string* ShutdownPeerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShutdownPeerRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.ShutdownPeerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShutdownPeerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ShutdownPeerRequest.address)
}

// string communication = 2;
inline void ShutdownPeerRequest::clear_communication() {
  communication_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShutdownPeerRequest::communication() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ShutdownPeerRequest.communication)
  return _internal_communication();
}
inline void ShutdownPeerRequest::set_communication(const std::string& value) {
  _internal_set_communication(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ShutdownPeerRequest.communication)
}
inline std::string* ShutdownPeerRequest::mutable_communication() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ShutdownPeerRequest.communication)
  return _internal_mutable_communication();
}
inline const std::string& ShutdownPeerRequest::_internal_communication() const {
  return communication_.GetNoArena();
}
inline void ShutdownPeerRequest::_internal_set_communication(const std::string& value) {
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShutdownPeerRequest::set_communication(std::string&& value) {
  
  communication_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ShutdownPeerRequest.communication)
}
inline void ShutdownPeerRequest::set_communication(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ShutdownPeerRequest.communication)
}
inline void ShutdownPeerRequest::set_communication(const char* value, size_t size) {
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ShutdownPeerRequest.communication)
}
inline std::string* ShutdownPeerRequest::_internal_mutable_communication() {
  
  return communication_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShutdownPeerRequest::release_communication() {
  // @@protoc_insertion_point(field_release:gobgpapi.ShutdownPeerRequest.communication)
  
  return communication_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShutdownPeerRequest::set_allocated_communication(std::string* communication) {
  if (communication != nullptr) {
    
  } else {
    
  }
  communication_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), communication);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ShutdownPeerRequest.communication)
}

// -------------------------------------------------------------------

// EnablePeerRequest

// string address = 1;
inline void EnablePeerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnablePeerRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnablePeerRequest.address)
  return _internal_address();
}
inline void EnablePeerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnablePeerRequest.address)
}
inline std::string* EnablePeerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnablePeerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& EnablePeerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void EnablePeerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnablePeerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnablePeerRequest.address)
}
inline void EnablePeerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnablePeerRequest.address)
}
inline void EnablePeerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnablePeerRequest.address)
}
inline std::string* EnablePeerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnablePeerRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnablePeerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnablePeerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnablePeerRequest.address)
}

// -------------------------------------------------------------------

// DisablePeerRequest

// string address = 1;
inline void DisablePeerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DisablePeerRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DisablePeerRequest.address)
  return _internal_address();
}
inline void DisablePeerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DisablePeerRequest.address)
}
inline std::string* DisablePeerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DisablePeerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& DisablePeerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void DisablePeerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DisablePeerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DisablePeerRequest.address)
}
inline void DisablePeerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DisablePeerRequest.address)
}
inline void DisablePeerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DisablePeerRequest.address)
}
inline std::string* DisablePeerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisablePeerRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DisablePeerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisablePeerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DisablePeerRequest.address)
}

// string communication = 2;
inline void DisablePeerRequest::clear_communication() {
  communication_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DisablePeerRequest::communication() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DisablePeerRequest.communication)
  return _internal_communication();
}
inline void DisablePeerRequest::set_communication(const std::string& value) {
  _internal_set_communication(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DisablePeerRequest.communication)
}
inline std::string* DisablePeerRequest::mutable_communication() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DisablePeerRequest.communication)
  return _internal_mutable_communication();
}
inline const std::string& DisablePeerRequest::_internal_communication() const {
  return communication_.GetNoArena();
}
inline void DisablePeerRequest::_internal_set_communication(const std::string& value) {
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DisablePeerRequest::set_communication(std::string&& value) {
  
  communication_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DisablePeerRequest.communication)
}
inline void DisablePeerRequest::set_communication(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DisablePeerRequest.communication)
}
inline void DisablePeerRequest::set_communication(const char* value, size_t size) {
  
  communication_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DisablePeerRequest.communication)
}
inline std::string* DisablePeerRequest::_internal_mutable_communication() {
  
  return communication_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisablePeerRequest::release_communication() {
  // @@protoc_insertion_point(field_release:gobgpapi.DisablePeerRequest.communication)
  
  return communication_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisablePeerRequest::set_allocated_communication(std::string* communication) {
  if (communication != nullptr) {
    
  } else {
    
  }
  communication_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), communication);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DisablePeerRequest.communication)
}

// -------------------------------------------------------------------

// MonitorPeerRequest

// string address = 1;
inline void MonitorPeerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MonitorPeerRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorPeerRequest.address)
  return _internal_address();
}
inline void MonitorPeerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MonitorPeerRequest.address)
}
inline std::string* MonitorPeerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MonitorPeerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& MonitorPeerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void MonitorPeerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MonitorPeerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.MonitorPeerRequest.address)
}
inline void MonitorPeerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MonitorPeerRequest.address)
}
inline void MonitorPeerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MonitorPeerRequest.address)
}
inline std::string* MonitorPeerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MonitorPeerRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.MonitorPeerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorPeerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MonitorPeerRequest.address)
}

// bool current = 2;
inline void MonitorPeerRequest::clear_current() {
  current_ = false;
}
inline bool MonitorPeerRequest::_internal_current() const {
  return current_;
}
inline bool MonitorPeerRequest::current() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorPeerRequest.current)
  return _internal_current();
}
inline void MonitorPeerRequest::_internal_set_current(bool value) {
  
  current_ = value;
}
inline void MonitorPeerRequest::set_current(bool value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MonitorPeerRequest.current)
}

// -------------------------------------------------------------------

// MonitorPeerResponse

// .gobgpapi.Peer peer = 1;
inline bool MonitorPeerResponse::_internal_has_peer() const {
  return this != internal_default_instance() && peer_ != nullptr;
}
inline bool MonitorPeerResponse::has_peer() const {
  return _internal_has_peer();
}
inline void MonitorPeerResponse::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
inline const ::gobgpapi::Peer& MonitorPeerResponse::_internal_peer() const {
  const ::gobgpapi::Peer* p = peer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Peer*>(
      &::gobgpapi::_Peer_default_instance_);
}
inline const ::gobgpapi::Peer& MonitorPeerResponse::peer() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorPeerResponse.peer)
  return _internal_peer();
}
inline ::gobgpapi::Peer* MonitorPeerResponse::release_peer() {
  // @@protoc_insertion_point(field_release:gobgpapi.MonitorPeerResponse.peer)
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = nullptr;
  return temp;
}
inline ::gobgpapi::Peer* MonitorPeerResponse::_internal_mutable_peer() {
  
  if (peer_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  return peer_;
}
inline ::gobgpapi::Peer* MonitorPeerResponse::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MonitorPeerResponse.peer)
  return _internal_mutable_peer();
}
inline void MonitorPeerResponse::set_allocated_peer(::gobgpapi::Peer* peer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_;
  }
  if (peer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MonitorPeerResponse.peer)
}

// -------------------------------------------------------------------

// AddPeerGroupRequest

// .gobgpapi.PeerGroup peer_group = 1;
inline bool AddPeerGroupRequest::_internal_has_peer_group() const {
  return this != internal_default_instance() && peer_group_ != nullptr;
}
inline bool AddPeerGroupRequest::has_peer_group() const {
  return _internal_has_peer_group();
}
inline void AddPeerGroupRequest::clear_peer_group() {
  if (GetArenaNoVirtual() == nullptr && peer_group_ != nullptr) {
    delete peer_group_;
  }
  peer_group_ = nullptr;
}
inline const ::gobgpapi::PeerGroup& AddPeerGroupRequest::_internal_peer_group() const {
  const ::gobgpapi::PeerGroup* p = peer_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PeerGroup*>(
      &::gobgpapi::_PeerGroup_default_instance_);
}
inline const ::gobgpapi::PeerGroup& AddPeerGroupRequest::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPeerGroupRequest.peer_group)
  return _internal_peer_group();
}
inline ::gobgpapi::PeerGroup* AddPeerGroupRequest::release_peer_group() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPeerGroupRequest.peer_group)
  
  ::gobgpapi::PeerGroup* temp = peer_group_;
  peer_group_ = nullptr;
  return temp;
}
inline ::gobgpapi::PeerGroup* AddPeerGroupRequest::_internal_mutable_peer_group() {
  
  if (peer_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PeerGroup>(GetArenaNoVirtual());
    peer_group_ = p;
  }
  return peer_group_;
}
inline ::gobgpapi::PeerGroup* AddPeerGroupRequest::mutable_peer_group() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPeerGroupRequest.peer_group)
  return _internal_mutable_peer_group();
}
inline void AddPeerGroupRequest::set_allocated_peer_group(::gobgpapi::PeerGroup* peer_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_group_;
  }
  if (peer_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_group, submessage_arena);
    }
    
  } else {
    
  }
  peer_group_ = peer_group;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPeerGroupRequest.peer_group)
}

// -------------------------------------------------------------------

// DeletePeerGroupRequest

// string name = 1;
inline void DeletePeerGroupRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeletePeerGroupRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePeerGroupRequest.name)
  return _internal_name();
}
inline void DeletePeerGroupRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePeerGroupRequest.name)
}
inline std::string* DeletePeerGroupRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePeerGroupRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeletePeerGroupRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void DeletePeerGroupRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeletePeerGroupRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeletePeerGroupRequest.name)
}
inline void DeletePeerGroupRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeletePeerGroupRequest.name)
}
inline void DeletePeerGroupRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeletePeerGroupRequest.name)
}
inline std::string* DeletePeerGroupRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePeerGroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePeerGroupRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePeerGroupRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePeerGroupRequest.name)
}

// -------------------------------------------------------------------

// UpdatePeerGroupRequest

// .gobgpapi.PeerGroup peer_group = 1;
inline bool UpdatePeerGroupRequest::_internal_has_peer_group() const {
  return this != internal_default_instance() && peer_group_ != nullptr;
}
inline bool UpdatePeerGroupRequest::has_peer_group() const {
  return _internal_has_peer_group();
}
inline void UpdatePeerGroupRequest::clear_peer_group() {
  if (GetArenaNoVirtual() == nullptr && peer_group_ != nullptr) {
    delete peer_group_;
  }
  peer_group_ = nullptr;
}
inline const ::gobgpapi::PeerGroup& UpdatePeerGroupRequest::_internal_peer_group() const {
  const ::gobgpapi::PeerGroup* p = peer_group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PeerGroup*>(
      &::gobgpapi::_PeerGroup_default_instance_);
}
inline const ::gobgpapi::PeerGroup& UpdatePeerGroupRequest::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UpdatePeerGroupRequest.peer_group)
  return _internal_peer_group();
}
inline ::gobgpapi::PeerGroup* UpdatePeerGroupRequest::release_peer_group() {
  // @@protoc_insertion_point(field_release:gobgpapi.UpdatePeerGroupRequest.peer_group)
  
  ::gobgpapi::PeerGroup* temp = peer_group_;
  peer_group_ = nullptr;
  return temp;
}
inline ::gobgpapi::PeerGroup* UpdatePeerGroupRequest::_internal_mutable_peer_group() {
  
  if (peer_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PeerGroup>(GetArenaNoVirtual());
    peer_group_ = p;
  }
  return peer_group_;
}
inline ::gobgpapi::PeerGroup* UpdatePeerGroupRequest::mutable_peer_group() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UpdatePeerGroupRequest.peer_group)
  return _internal_mutable_peer_group();
}
inline void UpdatePeerGroupRequest::set_allocated_peer_group(::gobgpapi::PeerGroup* peer_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peer_group_;
  }
  if (peer_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_group, submessage_arena);
    }
    
  } else {
    
  }
  peer_group_ = peer_group;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UpdatePeerGroupRequest.peer_group)
}

// bool do_soft_reset_in = 2;
inline void UpdatePeerGroupRequest::clear_do_soft_reset_in() {
  do_soft_reset_in_ = false;
}
inline bool UpdatePeerGroupRequest::_internal_do_soft_reset_in() const {
  return do_soft_reset_in_;
}
inline bool UpdatePeerGroupRequest::do_soft_reset_in() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UpdatePeerGroupRequest.do_soft_reset_in)
  return _internal_do_soft_reset_in();
}
inline void UpdatePeerGroupRequest::_internal_set_do_soft_reset_in(bool value) {
  
  do_soft_reset_in_ = value;
}
inline void UpdatePeerGroupRequest::set_do_soft_reset_in(bool value) {
  _internal_set_do_soft_reset_in(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UpdatePeerGroupRequest.do_soft_reset_in)
}

// -------------------------------------------------------------------

// UpdatePeerGroupResponse

// bool needs_soft_reset_in = 1;
inline void UpdatePeerGroupResponse::clear_needs_soft_reset_in() {
  needs_soft_reset_in_ = false;
}
inline bool UpdatePeerGroupResponse::_internal_needs_soft_reset_in() const {
  return needs_soft_reset_in_;
}
inline bool UpdatePeerGroupResponse::needs_soft_reset_in() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UpdatePeerGroupResponse.needs_soft_reset_in)
  return _internal_needs_soft_reset_in();
}
inline void UpdatePeerGroupResponse::_internal_set_needs_soft_reset_in(bool value) {
  
  needs_soft_reset_in_ = value;
}
inline void UpdatePeerGroupResponse::set_needs_soft_reset_in(bool value) {
  _internal_set_needs_soft_reset_in(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UpdatePeerGroupResponse.needs_soft_reset_in)
}

// -------------------------------------------------------------------

// AddDynamicNeighborRequest

// .gobgpapi.DynamicNeighbor dynamic_neighbor = 1;
inline bool AddDynamicNeighborRequest::_internal_has_dynamic_neighbor() const {
  return this != internal_default_instance() && dynamic_neighbor_ != nullptr;
}
inline bool AddDynamicNeighborRequest::has_dynamic_neighbor() const {
  return _internal_has_dynamic_neighbor();
}
inline void AddDynamicNeighborRequest::clear_dynamic_neighbor() {
  if (GetArenaNoVirtual() == nullptr && dynamic_neighbor_ != nullptr) {
    delete dynamic_neighbor_;
  }
  dynamic_neighbor_ = nullptr;
}
inline const ::gobgpapi::DynamicNeighbor& AddDynamicNeighborRequest::_internal_dynamic_neighbor() const {
  const ::gobgpapi::DynamicNeighbor* p = dynamic_neighbor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::DynamicNeighbor*>(
      &::gobgpapi::_DynamicNeighbor_default_instance_);
}
inline const ::gobgpapi::DynamicNeighbor& AddDynamicNeighborRequest::dynamic_neighbor() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddDynamicNeighborRequest.dynamic_neighbor)
  return _internal_dynamic_neighbor();
}
inline ::gobgpapi::DynamicNeighbor* AddDynamicNeighborRequest::release_dynamic_neighbor() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddDynamicNeighborRequest.dynamic_neighbor)
  
  ::gobgpapi::DynamicNeighbor* temp = dynamic_neighbor_;
  dynamic_neighbor_ = nullptr;
  return temp;
}
inline ::gobgpapi::DynamicNeighbor* AddDynamicNeighborRequest::_internal_mutable_dynamic_neighbor() {
  
  if (dynamic_neighbor_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::DynamicNeighbor>(GetArenaNoVirtual());
    dynamic_neighbor_ = p;
  }
  return dynamic_neighbor_;
}
inline ::gobgpapi::DynamicNeighbor* AddDynamicNeighborRequest::mutable_dynamic_neighbor() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddDynamicNeighborRequest.dynamic_neighbor)
  return _internal_mutable_dynamic_neighbor();
}
inline void AddDynamicNeighborRequest::set_allocated_dynamic_neighbor(::gobgpapi::DynamicNeighbor* dynamic_neighbor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dynamic_neighbor_;
  }
  if (dynamic_neighbor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamic_neighbor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_neighbor, submessage_arena);
    }
    
  } else {
    
  }
  dynamic_neighbor_ = dynamic_neighbor;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddDynamicNeighborRequest.dynamic_neighbor)
}

// -------------------------------------------------------------------

// AddPathRequest

// .gobgpapi.TableType table_type = 1;
inline void AddPathRequest::clear_table_type() {
  table_type_ = 0;
}
inline ::gobgpapi::TableType AddPathRequest::_internal_table_type() const {
  return static_cast< ::gobgpapi::TableType >(table_type_);
}
inline ::gobgpapi::TableType AddPathRequest::table_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathRequest.table_type)
  return _internal_table_type();
}
inline void AddPathRequest::_internal_set_table_type(::gobgpapi::TableType value) {
  
  table_type_ = value;
}
inline void AddPathRequest::set_table_type(::gobgpapi::TableType value) {
  _internal_set_table_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathRequest.table_type)
}

// string vrf_id = 2;
inline void AddPathRequest::clear_vrf_id() {
  vrf_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddPathRequest::vrf_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathRequest.vrf_id)
  return _internal_vrf_id();
}
inline void AddPathRequest::set_vrf_id(const std::string& value) {
  _internal_set_vrf_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathRequest.vrf_id)
}
inline std::string* AddPathRequest::mutable_vrf_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathRequest.vrf_id)
  return _internal_mutable_vrf_id();
}
inline const std::string& AddPathRequest::_internal_vrf_id() const {
  return vrf_id_.GetNoArena();
}
inline void AddPathRequest::_internal_set_vrf_id(const std::string& value) {
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddPathRequest::set_vrf_id(std::string&& value) {
  
  vrf_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddPathRequest.vrf_id)
}
inline void AddPathRequest::set_vrf_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddPathRequest.vrf_id)
}
inline void AddPathRequest::set_vrf_id(const char* value, size_t size) {
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddPathRequest.vrf_id)
}
inline std::string* AddPathRequest::_internal_mutable_vrf_id() {
  
  return vrf_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddPathRequest::release_vrf_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPathRequest.vrf_id)
  
  return vrf_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddPathRequest::set_allocated_vrf_id(std::string* vrf_id) {
  if (vrf_id != nullptr) {
    
  } else {
    
  }
  vrf_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPathRequest.vrf_id)
}

// .gobgpapi.Path path = 3;
inline bool AddPathRequest::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool AddPathRequest::has_path() const {
  return _internal_has_path();
}
inline void AddPathRequest::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::gobgpapi::Path& AddPathRequest::_internal_path() const {
  const ::gobgpapi::Path* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Path*>(
      &::gobgpapi::_Path_default_instance_);
}
inline const ::gobgpapi::Path& AddPathRequest::path() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathRequest.path)
  return _internal_path();
}
inline ::gobgpapi::Path* AddPathRequest::release_path() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPathRequest.path)
  
  ::gobgpapi::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::gobgpapi::Path* AddPathRequest::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Path>(GetArenaNoVirtual());
    path_ = p;
  }
  return path_;
}
inline ::gobgpapi::Path* AddPathRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathRequest.path)
  return _internal_mutable_path();
}
inline void AddPathRequest::set_allocated_path(::gobgpapi::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPathRequest.path)
}

// -------------------------------------------------------------------

// AddPathResponse

// bytes uuid = 1;
inline void AddPathResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddPathResponse::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathResponse.uuid)
  return _internal_uuid();
}
inline void AddPathResponse::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathResponse.uuid)
}
inline std::string* AddPathResponse::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathResponse.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& AddPathResponse::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void AddPathResponse::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddPathResponse::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddPathResponse.uuid)
}
inline void AddPathResponse::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddPathResponse.uuid)
}
inline void AddPathResponse::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddPathResponse.uuid)
}
inline std::string* AddPathResponse::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddPathResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPathResponse.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddPathResponse::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPathResponse.uuid)
}

// -------------------------------------------------------------------

// DeletePathRequest

// .gobgpapi.TableType table_type = 1;
inline void DeletePathRequest::clear_table_type() {
  table_type_ = 0;
}
inline ::gobgpapi::TableType DeletePathRequest::_internal_table_type() const {
  return static_cast< ::gobgpapi::TableType >(table_type_);
}
inline ::gobgpapi::TableType DeletePathRequest::table_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.table_type)
  return _internal_table_type();
}
inline void DeletePathRequest::_internal_set_table_type(::gobgpapi::TableType value) {
  
  table_type_ = value;
}
inline void DeletePathRequest::set_table_type(::gobgpapi::TableType value) {
  _internal_set_table_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePathRequest.table_type)
}

// string vrf_id = 2;
inline void DeletePathRequest::clear_vrf_id() {
  vrf_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeletePathRequest::vrf_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.vrf_id)
  return _internal_vrf_id();
}
inline void DeletePathRequest::set_vrf_id(const std::string& value) {
  _internal_set_vrf_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePathRequest.vrf_id)
}
inline std::string* DeletePathRequest::mutable_vrf_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePathRequest.vrf_id)
  return _internal_mutable_vrf_id();
}
inline const std::string& DeletePathRequest::_internal_vrf_id() const {
  return vrf_id_.GetNoArena();
}
inline void DeletePathRequest::_internal_set_vrf_id(const std::string& value) {
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeletePathRequest::set_vrf_id(std::string&& value) {
  
  vrf_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeletePathRequest.vrf_id)
}
inline void DeletePathRequest::set_vrf_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeletePathRequest.vrf_id)
}
inline void DeletePathRequest::set_vrf_id(const char* value, size_t size) {
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeletePathRequest.vrf_id)
}
inline std::string* DeletePathRequest::_internal_mutable_vrf_id() {
  
  return vrf_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePathRequest::release_vrf_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePathRequest.vrf_id)
  
  return vrf_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePathRequest::set_allocated_vrf_id(std::string* vrf_id) {
  if (vrf_id != nullptr) {
    
  } else {
    
  }
  vrf_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePathRequest.vrf_id)
}

// .gobgpapi.Family family = 3;
inline bool DeletePathRequest::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool DeletePathRequest::has_family() const {
  return _internal_has_family();
}
inline void DeletePathRequest::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& DeletePathRequest::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& DeletePathRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.family)
  return _internal_family();
}
inline ::gobgpapi::Family* DeletePathRequest::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePathRequest.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* DeletePathRequest::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* DeletePathRequest::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePathRequest.family)
  return _internal_mutable_family();
}
inline void DeletePathRequest::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePathRequest.family)
}

// .gobgpapi.Path path = 4;
inline bool DeletePathRequest::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool DeletePathRequest::has_path() const {
  return _internal_has_path();
}
inline void DeletePathRequest::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::gobgpapi::Path& DeletePathRequest::_internal_path() const {
  const ::gobgpapi::Path* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Path*>(
      &::gobgpapi::_Path_default_instance_);
}
inline const ::gobgpapi::Path& DeletePathRequest::path() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.path)
  return _internal_path();
}
inline ::gobgpapi::Path* DeletePathRequest::release_path() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePathRequest.path)
  
  ::gobgpapi::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::gobgpapi::Path* DeletePathRequest::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Path>(GetArenaNoVirtual());
    path_ = p;
  }
  return path_;
}
inline ::gobgpapi::Path* DeletePathRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePathRequest.path)
  return _internal_mutable_path();
}
inline void DeletePathRequest::set_allocated_path(::gobgpapi::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePathRequest.path)
}

// bytes uuid = 5;
inline void DeletePathRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeletePathRequest::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePathRequest.uuid)
  return _internal_uuid();
}
inline void DeletePathRequest::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePathRequest.uuid)
}
inline std::string* DeletePathRequest::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePathRequest.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& DeletePathRequest::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void DeletePathRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeletePathRequest::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeletePathRequest.uuid)
}
inline void DeletePathRequest::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeletePathRequest.uuid)
}
inline void DeletePathRequest::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeletePathRequest.uuid)
}
inline std::string* DeletePathRequest::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeletePathRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePathRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePathRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePathRequest.uuid)
}

// -------------------------------------------------------------------

// ListPathRequest

// .gobgpapi.TableType table_type = 1;
inline void ListPathRequest::clear_table_type() {
  table_type_ = 0;
}
inline ::gobgpapi::TableType ListPathRequest::_internal_table_type() const {
  return static_cast< ::gobgpapi::TableType >(table_type_);
}
inline ::gobgpapi::TableType ListPathRequest::table_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPathRequest.table_type)
  return _internal_table_type();
}
inline void ListPathRequest::_internal_set_table_type(::gobgpapi::TableType value) {
  
  table_type_ = value;
}
inline void ListPathRequest::set_table_type(::gobgpapi::TableType value) {
  _internal_set_table_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPathRequest.table_type)
}

// string name = 2;
inline void ListPathRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListPathRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPathRequest.name)
  return _internal_name();
}
inline void ListPathRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPathRequest.name)
}
inline std::string* ListPathRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPathRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListPathRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void ListPathRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListPathRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ListPathRequest.name)
}
inline void ListPathRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ListPathRequest.name)
}
inline void ListPathRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ListPathRequest.name)
}
inline std::string* ListPathRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListPathRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPathRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListPathRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPathRequest.name)
}

// .gobgpapi.Family family = 3;
inline bool ListPathRequest::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool ListPathRequest::has_family() const {
  return _internal_has_family();
}
inline void ListPathRequest::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& ListPathRequest::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& ListPathRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPathRequest.family)
  return _internal_family();
}
inline ::gobgpapi::Family* ListPathRequest::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPathRequest.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* ListPathRequest::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* ListPathRequest::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPathRequest.family)
  return _internal_mutable_family();
}
inline void ListPathRequest::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPathRequest.family)
}

// repeated .gobgpapi.TableLookupPrefix prefixes = 4;
inline int ListPathRequest::_internal_prefixes_size() const {
  return prefixes_.size();
}
inline int ListPathRequest::prefixes_size() const {
  return _internal_prefixes_size();
}
inline void ListPathRequest::clear_prefixes() {
  prefixes_.Clear();
}
inline ::gobgpapi::TableLookupPrefix* ListPathRequest::mutable_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPathRequest.prefixes)
  return prefixes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >*
ListPathRequest::mutable_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.ListPathRequest.prefixes)
  return &prefixes_;
}
inline const ::gobgpapi::TableLookupPrefix& ListPathRequest::_internal_prefixes(int index) const {
  return prefixes_.Get(index);
}
inline const ::gobgpapi::TableLookupPrefix& ListPathRequest::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPathRequest.prefixes)
  return _internal_prefixes(index);
}
inline ::gobgpapi::TableLookupPrefix* ListPathRequest::_internal_add_prefixes() {
  return prefixes_.Add();
}
inline ::gobgpapi::TableLookupPrefix* ListPathRequest::add_prefixes() {
  // @@protoc_insertion_point(field_add:gobgpapi.ListPathRequest.prefixes)
  return _internal_add_prefixes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TableLookupPrefix >&
ListPathRequest::prefixes() const {
  // @@protoc_insertion_point(field_list:gobgpapi.ListPathRequest.prefixes)
  return prefixes_;
}

// .gobgpapi.ListPathRequest.SortType sort_type = 5;
inline void ListPathRequest::clear_sort_type() {
  sort_type_ = 0;
}
inline ::gobgpapi::ListPathRequest_SortType ListPathRequest::_internal_sort_type() const {
  return static_cast< ::gobgpapi::ListPathRequest_SortType >(sort_type_);
}
inline ::gobgpapi::ListPathRequest_SortType ListPathRequest::sort_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPathRequest.sort_type)
  return _internal_sort_type();
}
inline void ListPathRequest::_internal_set_sort_type(::gobgpapi::ListPathRequest_SortType value) {
  
  sort_type_ = value;
}
inline void ListPathRequest::set_sort_type(::gobgpapi::ListPathRequest_SortType value) {
  _internal_set_sort_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPathRequest.sort_type)
}

// bool enable_filtered = 6;
inline void ListPathRequest::clear_enable_filtered() {
  enable_filtered_ = false;
}
inline bool ListPathRequest::_internal_enable_filtered() const {
  return enable_filtered_;
}
inline bool ListPathRequest::enable_filtered() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPathRequest.enable_filtered)
  return _internal_enable_filtered();
}
inline void ListPathRequest::_internal_set_enable_filtered(bool value) {
  
  enable_filtered_ = value;
}
inline void ListPathRequest::set_enable_filtered(bool value) {
  _internal_set_enable_filtered(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPathRequest.enable_filtered)
}

// -------------------------------------------------------------------

// ListPathResponse

// .gobgpapi.Destination destination = 1;
inline bool ListPathResponse::_internal_has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline bool ListPathResponse::has_destination() const {
  return _internal_has_destination();
}
inline void ListPathResponse::clear_destination() {
  if (GetArenaNoVirtual() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
inline const ::gobgpapi::Destination& ListPathResponse::_internal_destination() const {
  const ::gobgpapi::Destination* p = destination_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Destination*>(
      &::gobgpapi::_Destination_default_instance_);
}
inline const ::gobgpapi::Destination& ListPathResponse::destination() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPathResponse.destination)
  return _internal_destination();
}
inline ::gobgpapi::Destination* ListPathResponse::release_destination() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPathResponse.destination)
  
  ::gobgpapi::Destination* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::gobgpapi::Destination* ListPathResponse::_internal_mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Destination>(GetArenaNoVirtual());
    destination_ = p;
  }
  return destination_;
}
inline ::gobgpapi::Destination* ListPathResponse::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPathResponse.destination)
  return _internal_mutable_destination();
}
inline void ListPathResponse::set_allocated_destination(::gobgpapi::Destination* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPathResponse.destination)
}

// -------------------------------------------------------------------

// AddPathStreamRequest

// .gobgpapi.TableType table_type = 1;
inline void AddPathStreamRequest::clear_table_type() {
  table_type_ = 0;
}
inline ::gobgpapi::TableType AddPathStreamRequest::_internal_table_type() const {
  return static_cast< ::gobgpapi::TableType >(table_type_);
}
inline ::gobgpapi::TableType AddPathStreamRequest::table_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathStreamRequest.table_type)
  return _internal_table_type();
}
inline void AddPathStreamRequest::_internal_set_table_type(::gobgpapi::TableType value) {
  
  table_type_ = value;
}
inline void AddPathStreamRequest::set_table_type(::gobgpapi::TableType value) {
  _internal_set_table_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathStreamRequest.table_type)
}

// string vrf_id = 2;
inline void AddPathStreamRequest::clear_vrf_id() {
  vrf_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddPathStreamRequest::vrf_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathStreamRequest.vrf_id)
  return _internal_vrf_id();
}
inline void AddPathStreamRequest::set_vrf_id(const std::string& value) {
  _internal_set_vrf_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathStreamRequest.vrf_id)
}
inline std::string* AddPathStreamRequest::mutable_vrf_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathStreamRequest.vrf_id)
  return _internal_mutable_vrf_id();
}
inline const std::string& AddPathStreamRequest::_internal_vrf_id() const {
  return vrf_id_.GetNoArena();
}
inline void AddPathStreamRequest::_internal_set_vrf_id(const std::string& value) {
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddPathStreamRequest::set_vrf_id(std::string&& value) {
  
  vrf_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddPathStreamRequest.vrf_id)
}
inline void AddPathStreamRequest::set_vrf_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddPathStreamRequest.vrf_id)
}
inline void AddPathStreamRequest::set_vrf_id(const char* value, size_t size) {
  
  vrf_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddPathStreamRequest.vrf_id)
}
inline std::string* AddPathStreamRequest::_internal_mutable_vrf_id() {
  
  return vrf_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddPathStreamRequest::release_vrf_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPathStreamRequest.vrf_id)
  
  return vrf_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddPathStreamRequest::set_allocated_vrf_id(std::string* vrf_id) {
  if (vrf_id != nullptr) {
    
  } else {
    
  }
  vrf_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPathStreamRequest.vrf_id)
}

// repeated .gobgpapi.Path paths = 3;
inline int AddPathStreamRequest::_internal_paths_size() const {
  return paths_.size();
}
inline int AddPathStreamRequest::paths_size() const {
  return _internal_paths_size();
}
inline void AddPathStreamRequest::clear_paths() {
  paths_.Clear();
}
inline ::gobgpapi::Path* AddPathStreamRequest::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPathStreamRequest.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >*
AddPathStreamRequest::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.AddPathStreamRequest.paths)
  return &paths_;
}
inline const ::gobgpapi::Path& AddPathStreamRequest::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::gobgpapi::Path& AddPathStreamRequest::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathStreamRequest.paths)
  return _internal_paths(index);
}
inline ::gobgpapi::Path* AddPathStreamRequest::_internal_add_paths() {
  return paths_.Add();
}
inline ::gobgpapi::Path* AddPathStreamRequest::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.AddPathStreamRequest.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >&
AddPathStreamRequest::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.AddPathStreamRequest.paths)
  return paths_;
}

// -------------------------------------------------------------------

// GetTableRequest

// .gobgpapi.TableType table_type = 1;
inline void GetTableRequest::clear_table_type() {
  table_type_ = 0;
}
inline ::gobgpapi::TableType GetTableRequest::_internal_table_type() const {
  return static_cast< ::gobgpapi::TableType >(table_type_);
}
inline ::gobgpapi::TableType GetTableRequest::table_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetTableRequest.table_type)
  return _internal_table_type();
}
inline void GetTableRequest::_internal_set_table_type(::gobgpapi::TableType value) {
  
  table_type_ = value;
}
inline void GetTableRequest::set_table_type(::gobgpapi::TableType value) {
  _internal_set_table_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetTableRequest.table_type)
}

// .gobgpapi.Family family = 2;
inline bool GetTableRequest::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool GetTableRequest::has_family() const {
  return _internal_has_family();
}
inline void GetTableRequest::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& GetTableRequest::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& GetTableRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetTableRequest.family)
  return _internal_family();
}
inline ::gobgpapi::Family* GetTableRequest::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetTableRequest.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* GetTableRequest::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* GetTableRequest::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetTableRequest.family)
  return _internal_mutable_family();
}
inline void GetTableRequest::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetTableRequest.family)
}

// string name = 3;
inline void GetTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTableRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetTableRequest.name)
  return _internal_name();
}
inline void GetTableRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetTableRequest.name)
}
inline std::string* GetTableRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GetTableRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetTableRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetTableRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTableRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.GetTableRequest.name)
}
inline void GetTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.GetTableRequest.name)
}
inline void GetTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.GetTableRequest.name)
}
inline std::string* GetTableRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.GetTableRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTableRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GetTableRequest.name)
}

// -------------------------------------------------------------------

// GetTableResponse

// uint64 num_destination = 1;
inline void GetTableResponse::clear_num_destination() {
  num_destination_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTableResponse::_internal_num_destination() const {
  return num_destination_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTableResponse::num_destination() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetTableResponse.num_destination)
  return _internal_num_destination();
}
inline void GetTableResponse::_internal_set_num_destination(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_destination_ = value;
}
inline void GetTableResponse::set_num_destination(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_destination(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetTableResponse.num_destination)
}

// uint64 num_path = 2;
inline void GetTableResponse::clear_num_path() {
  num_path_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTableResponse::_internal_num_path() const {
  return num_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTableResponse::num_path() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetTableResponse.num_path)
  return _internal_num_path();
}
inline void GetTableResponse::_internal_set_num_path(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_path_ = value;
}
inline void GetTableResponse::set_num_path(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_path(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetTableResponse.num_path)
}

// uint64 num_accepted = 3;
inline void GetTableResponse::clear_num_accepted() {
  num_accepted_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTableResponse::_internal_num_accepted() const {
  return num_accepted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTableResponse::num_accepted() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GetTableResponse.num_accepted)
  return _internal_num_accepted();
}
inline void GetTableResponse::_internal_set_num_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_accepted_ = value;
}
inline void GetTableResponse::set_num_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_accepted(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GetTableResponse.num_accepted)
}

// -------------------------------------------------------------------

// MonitorTableRequest

// .gobgpapi.TableType table_type = 1;
inline void MonitorTableRequest::clear_table_type() {
  table_type_ = 0;
}
inline ::gobgpapi::TableType MonitorTableRequest::_internal_table_type() const {
  return static_cast< ::gobgpapi::TableType >(table_type_);
}
inline ::gobgpapi::TableType MonitorTableRequest::table_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorTableRequest.table_type)
  return _internal_table_type();
}
inline void MonitorTableRequest::_internal_set_table_type(::gobgpapi::TableType value) {
  
  table_type_ = value;
}
inline void MonitorTableRequest::set_table_type(::gobgpapi::TableType value) {
  _internal_set_table_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MonitorTableRequest.table_type)
}

// string name = 2;
inline void MonitorTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MonitorTableRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorTableRequest.name)
  return _internal_name();
}
inline void MonitorTableRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MonitorTableRequest.name)
}
inline std::string* MonitorTableRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MonitorTableRequest.name)
  return _internal_mutable_name();
}
inline const std::string& MonitorTableRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void MonitorTableRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MonitorTableRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.MonitorTableRequest.name)
}
inline void MonitorTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MonitorTableRequest.name)
}
inline void MonitorTableRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MonitorTableRequest.name)
}
inline std::string* MonitorTableRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MonitorTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.MonitorTableRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorTableRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MonitorTableRequest.name)
}

// .gobgpapi.Family family = 3;
inline bool MonitorTableRequest::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool MonitorTableRequest::has_family() const {
  return _internal_has_family();
}
inline void MonitorTableRequest::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& MonitorTableRequest::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& MonitorTableRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorTableRequest.family)
  return _internal_family();
}
inline ::gobgpapi::Family* MonitorTableRequest::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.MonitorTableRequest.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* MonitorTableRequest::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* MonitorTableRequest::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MonitorTableRequest.family)
  return _internal_mutable_family();
}
inline void MonitorTableRequest::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MonitorTableRequest.family)
}

// bool current = 4;
inline void MonitorTableRequest::clear_current() {
  current_ = false;
}
inline bool MonitorTableRequest::_internal_current() const {
  return current_;
}
inline bool MonitorTableRequest::current() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorTableRequest.current)
  return _internal_current();
}
inline void MonitorTableRequest::_internal_set_current(bool value) {
  
  current_ = value;
}
inline void MonitorTableRequest::set_current(bool value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MonitorTableRequest.current)
}

// bool post_policy = 5;
inline void MonitorTableRequest::clear_post_policy() {
  post_policy_ = false;
}
inline bool MonitorTableRequest::_internal_post_policy() const {
  return post_policy_;
}
inline bool MonitorTableRequest::post_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorTableRequest.post_policy)
  return _internal_post_policy();
}
inline void MonitorTableRequest::_internal_set_post_policy(bool value) {
  
  post_policy_ = value;
}
inline void MonitorTableRequest::set_post_policy(bool value) {
  _internal_set_post_policy(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MonitorTableRequest.post_policy)
}

// -------------------------------------------------------------------

// MonitorTableResponse

// .gobgpapi.Path path = 1;
inline bool MonitorTableResponse::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool MonitorTableResponse::has_path() const {
  return _internal_has_path();
}
inline void MonitorTableResponse::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::gobgpapi::Path& MonitorTableResponse::_internal_path() const {
  const ::gobgpapi::Path* p = path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Path*>(
      &::gobgpapi::_Path_default_instance_);
}
inline const ::gobgpapi::Path& MonitorTableResponse::path() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MonitorTableResponse.path)
  return _internal_path();
}
inline ::gobgpapi::Path* MonitorTableResponse::release_path() {
  // @@protoc_insertion_point(field_release:gobgpapi.MonitorTableResponse.path)
  
  ::gobgpapi::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::gobgpapi::Path* MonitorTableResponse::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Path>(GetArenaNoVirtual());
    path_ = p;
  }
  return path_;
}
inline ::gobgpapi::Path* MonitorTableResponse::mutable_path() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MonitorTableResponse.path)
  return _internal_mutable_path();
}
inline void MonitorTableResponse::set_allocated_path(::gobgpapi::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MonitorTableResponse.path)
}

// -------------------------------------------------------------------

// AddVrfRequest

// .gobgpapi.Vrf vrf = 1;
inline bool AddVrfRequest::_internal_has_vrf() const {
  return this != internal_default_instance() && vrf_ != nullptr;
}
inline bool AddVrfRequest::has_vrf() const {
  return _internal_has_vrf();
}
inline void AddVrfRequest::clear_vrf() {
  if (GetArenaNoVirtual() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
}
inline const ::gobgpapi::Vrf& AddVrfRequest::_internal_vrf() const {
  const ::gobgpapi::Vrf* p = vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Vrf*>(
      &::gobgpapi::_Vrf_default_instance_);
}
inline const ::gobgpapi::Vrf& AddVrfRequest::vrf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddVrfRequest.vrf)
  return _internal_vrf();
}
inline ::gobgpapi::Vrf* AddVrfRequest::release_vrf() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddVrfRequest.vrf)
  
  ::gobgpapi::Vrf* temp = vrf_;
  vrf_ = nullptr;
  return temp;
}
inline ::gobgpapi::Vrf* AddVrfRequest::_internal_mutable_vrf() {
  
  if (vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Vrf>(GetArenaNoVirtual());
    vrf_ = p;
  }
  return vrf_;
}
inline ::gobgpapi::Vrf* AddVrfRequest::mutable_vrf() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddVrfRequest.vrf)
  return _internal_mutable_vrf();
}
inline void AddVrfRequest::set_allocated_vrf(::gobgpapi::Vrf* vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vrf_;
  }
  if (vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrf, submessage_arena);
    }
    
  } else {
    
  }
  vrf_ = vrf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddVrfRequest.vrf)
}

// -------------------------------------------------------------------

// DeleteVrfRequest

// string name = 1;
inline void DeleteVrfRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteVrfRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteVrfRequest.name)
  return _internal_name();
}
inline void DeleteVrfRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteVrfRequest.name)
}
inline std::string* DeleteVrfRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteVrfRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteVrfRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void DeleteVrfRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteVrfRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeleteVrfRequest.name)
}
inline void DeleteVrfRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeleteVrfRequest.name)
}
inline void DeleteVrfRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeleteVrfRequest.name)
}
inline std::string* DeleteVrfRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteVrfRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteVrfRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteVrfRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteVrfRequest.name)
}

// -------------------------------------------------------------------

// ListVrfRequest

// string name = 1;
inline void ListVrfRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListVrfRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListVrfRequest.name)
  return _internal_name();
}
inline void ListVrfRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListVrfRequest.name)
}
inline std::string* ListVrfRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListVrfRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListVrfRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void ListVrfRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListVrfRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ListVrfRequest.name)
}
inline void ListVrfRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ListVrfRequest.name)
}
inline void ListVrfRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ListVrfRequest.name)
}
inline std::string* ListVrfRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListVrfRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListVrfRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListVrfRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListVrfRequest.name)
}

// -------------------------------------------------------------------

// ListVrfResponse

// .gobgpapi.Vrf vrf = 1;
inline bool ListVrfResponse::_internal_has_vrf() const {
  return this != internal_default_instance() && vrf_ != nullptr;
}
inline bool ListVrfResponse::has_vrf() const {
  return _internal_has_vrf();
}
inline void ListVrfResponse::clear_vrf() {
  if (GetArenaNoVirtual() == nullptr && vrf_ != nullptr) {
    delete vrf_;
  }
  vrf_ = nullptr;
}
inline const ::gobgpapi::Vrf& ListVrfResponse::_internal_vrf() const {
  const ::gobgpapi::Vrf* p = vrf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Vrf*>(
      &::gobgpapi::_Vrf_default_instance_);
}
inline const ::gobgpapi::Vrf& ListVrfResponse::vrf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListVrfResponse.vrf)
  return _internal_vrf();
}
inline ::gobgpapi::Vrf* ListVrfResponse::release_vrf() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListVrfResponse.vrf)
  
  ::gobgpapi::Vrf* temp = vrf_;
  vrf_ = nullptr;
  return temp;
}
inline ::gobgpapi::Vrf* ListVrfResponse::_internal_mutable_vrf() {
  
  if (vrf_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Vrf>(GetArenaNoVirtual());
    vrf_ = p;
  }
  return vrf_;
}
inline ::gobgpapi::Vrf* ListVrfResponse::mutable_vrf() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListVrfResponse.vrf)
  return _internal_mutable_vrf();
}
inline void ListVrfResponse::set_allocated_vrf(::gobgpapi::Vrf* vrf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vrf_;
  }
  if (vrf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vrf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrf, submessage_arena);
    }
    
  } else {
    
  }
  vrf_ = vrf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListVrfResponse.vrf)
}

// -------------------------------------------------------------------

// AddPolicyRequest

// .gobgpapi.Policy policy = 1;
inline bool AddPolicyRequest::_internal_has_policy() const {
  return this != internal_default_instance() && policy_ != nullptr;
}
inline bool AddPolicyRequest::has_policy() const {
  return _internal_has_policy();
}
inline void AddPolicyRequest::clear_policy() {
  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
}
inline const ::gobgpapi::Policy& AddPolicyRequest::_internal_policy() const {
  const ::gobgpapi::Policy* p = policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Policy*>(
      &::gobgpapi::_Policy_default_instance_);
}
inline const ::gobgpapi::Policy& AddPolicyRequest::policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPolicyRequest.policy)
  return _internal_policy();
}
inline ::gobgpapi::Policy* AddPolicyRequest::release_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPolicyRequest.policy)
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::Policy* AddPolicyRequest::_internal_mutable_policy() {
  
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Policy>(GetArenaNoVirtual());
    policy_ = p;
  }
  return policy_;
}
inline ::gobgpapi::Policy* AddPolicyRequest::mutable_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPolicyRequest.policy)
  return _internal_mutable_policy();
}
inline void AddPolicyRequest::set_allocated_policy(::gobgpapi::Policy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPolicyRequest.policy)
}

// bool refer_existing_statements = 2;
inline void AddPolicyRequest::clear_refer_existing_statements() {
  refer_existing_statements_ = false;
}
inline bool AddPolicyRequest::_internal_refer_existing_statements() const {
  return refer_existing_statements_;
}
inline bool AddPolicyRequest::refer_existing_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPolicyRequest.refer_existing_statements)
  return _internal_refer_existing_statements();
}
inline void AddPolicyRequest::_internal_set_refer_existing_statements(bool value) {
  
  refer_existing_statements_ = value;
}
inline void AddPolicyRequest::set_refer_existing_statements(bool value) {
  _internal_set_refer_existing_statements(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPolicyRequest.refer_existing_statements)
}

// -------------------------------------------------------------------

// DeletePolicyRequest

// .gobgpapi.Policy policy = 1;
inline bool DeletePolicyRequest::_internal_has_policy() const {
  return this != internal_default_instance() && policy_ != nullptr;
}
inline bool DeletePolicyRequest::has_policy() const {
  return _internal_has_policy();
}
inline void DeletePolicyRequest::clear_policy() {
  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
}
inline const ::gobgpapi::Policy& DeletePolicyRequest::_internal_policy() const {
  const ::gobgpapi::Policy* p = policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Policy*>(
      &::gobgpapi::_Policy_default_instance_);
}
inline const ::gobgpapi::Policy& DeletePolicyRequest::policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyRequest.policy)
  return _internal_policy();
}
inline ::gobgpapi::Policy* DeletePolicyRequest::release_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePolicyRequest.policy)
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::Policy* DeletePolicyRequest::_internal_mutable_policy() {
  
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Policy>(GetArenaNoVirtual());
    policy_ = p;
  }
  return policy_;
}
inline ::gobgpapi::Policy* DeletePolicyRequest::mutable_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePolicyRequest.policy)
  return _internal_mutable_policy();
}
inline void DeletePolicyRequest::set_allocated_policy(::gobgpapi::Policy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePolicyRequest.policy)
}

// bool preserve_statements = 2;
inline void DeletePolicyRequest::clear_preserve_statements() {
  preserve_statements_ = false;
}
inline bool DeletePolicyRequest::_internal_preserve_statements() const {
  return preserve_statements_;
}
inline bool DeletePolicyRequest::preserve_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyRequest.preserve_statements)
  return _internal_preserve_statements();
}
inline void DeletePolicyRequest::_internal_set_preserve_statements(bool value) {
  
  preserve_statements_ = value;
}
inline void DeletePolicyRequest::set_preserve_statements(bool value) {
  _internal_set_preserve_statements(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePolicyRequest.preserve_statements)
}

// bool all = 3;
inline void DeletePolicyRequest::clear_all() {
  all_ = false;
}
inline bool DeletePolicyRequest::_internal_all() const {
  return all_;
}
inline bool DeletePolicyRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyRequest.all)
  return _internal_all();
}
inline void DeletePolicyRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void DeletePolicyRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePolicyRequest.all)
}

// -------------------------------------------------------------------

// ListPolicyRequest

// string name = 1;
inline void ListPolicyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPolicyRequest.name)
  return _internal_name();
}
inline void ListPolicyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPolicyRequest.name)
}
inline std::string* ListPolicyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPolicyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListPolicyRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void ListPolicyRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListPolicyRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ListPolicyRequest.name)
}
inline void ListPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ListPolicyRequest.name)
}
inline void ListPolicyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ListPolicyRequest.name)
}
inline std::string* ListPolicyRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPolicyRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListPolicyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPolicyRequest.name)
}

// -------------------------------------------------------------------

// ListPolicyResponse

// .gobgpapi.Policy policy = 1;
inline bool ListPolicyResponse::_internal_has_policy() const {
  return this != internal_default_instance() && policy_ != nullptr;
}
inline bool ListPolicyResponse::has_policy() const {
  return _internal_has_policy();
}
inline void ListPolicyResponse::clear_policy() {
  if (GetArenaNoVirtual() == nullptr && policy_ != nullptr) {
    delete policy_;
  }
  policy_ = nullptr;
}
inline const ::gobgpapi::Policy& ListPolicyResponse::_internal_policy() const {
  const ::gobgpapi::Policy* p = policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Policy*>(
      &::gobgpapi::_Policy_default_instance_);
}
inline const ::gobgpapi::Policy& ListPolicyResponse::policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPolicyResponse.policy)
  return _internal_policy();
}
inline ::gobgpapi::Policy* ListPolicyResponse::release_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPolicyResponse.policy)
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::Policy* ListPolicyResponse::_internal_mutable_policy() {
  
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Policy>(GetArenaNoVirtual());
    policy_ = p;
  }
  return policy_;
}
inline ::gobgpapi::Policy* ListPolicyResponse::mutable_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPolicyResponse.policy)
  return _internal_mutable_policy();
}
inline void ListPolicyResponse::set_allocated_policy(::gobgpapi::Policy* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    
  } else {
    
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPolicyResponse.policy)
}

// -------------------------------------------------------------------

// SetPoliciesRequest

// repeated .gobgpapi.DefinedSet defined_sets = 1;
inline int SetPoliciesRequest::_internal_defined_sets_size() const {
  return defined_sets_.size();
}
inline int SetPoliciesRequest::defined_sets_size() const {
  return _internal_defined_sets_size();
}
inline void SetPoliciesRequest::clear_defined_sets() {
  defined_sets_.Clear();
}
inline ::gobgpapi::DefinedSet* SetPoliciesRequest::mutable_defined_sets(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.SetPoliciesRequest.defined_sets)
  return defined_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >*
SetPoliciesRequest::mutable_defined_sets() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.SetPoliciesRequest.defined_sets)
  return &defined_sets_;
}
inline const ::gobgpapi::DefinedSet& SetPoliciesRequest::_internal_defined_sets(int index) const {
  return defined_sets_.Get(index);
}
inline const ::gobgpapi::DefinedSet& SetPoliciesRequest::defined_sets(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.SetPoliciesRequest.defined_sets)
  return _internal_defined_sets(index);
}
inline ::gobgpapi::DefinedSet* SetPoliciesRequest::_internal_add_defined_sets() {
  return defined_sets_.Add();
}
inline ::gobgpapi::DefinedSet* SetPoliciesRequest::add_defined_sets() {
  // @@protoc_insertion_point(field_add:gobgpapi.SetPoliciesRequest.defined_sets)
  return _internal_add_defined_sets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >&
SetPoliciesRequest::defined_sets() const {
  // @@protoc_insertion_point(field_list:gobgpapi.SetPoliciesRequest.defined_sets)
  return defined_sets_;
}

// repeated .gobgpapi.Policy policies = 2;
inline int SetPoliciesRequest::_internal_policies_size() const {
  return policies_.size();
}
inline int SetPoliciesRequest::policies_size() const {
  return _internal_policies_size();
}
inline void SetPoliciesRequest::clear_policies() {
  policies_.Clear();
}
inline ::gobgpapi::Policy* SetPoliciesRequest::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.SetPoliciesRequest.policies)
  return policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >*
SetPoliciesRequest::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.SetPoliciesRequest.policies)
  return &policies_;
}
inline const ::gobgpapi::Policy& SetPoliciesRequest::_internal_policies(int index) const {
  return policies_.Get(index);
}
inline const ::gobgpapi::Policy& SetPoliciesRequest::policies(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.SetPoliciesRequest.policies)
  return _internal_policies(index);
}
inline ::gobgpapi::Policy* SetPoliciesRequest::_internal_add_policies() {
  return policies_.Add();
}
inline ::gobgpapi::Policy* SetPoliciesRequest::add_policies() {
  // @@protoc_insertion_point(field_add:gobgpapi.SetPoliciesRequest.policies)
  return _internal_add_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >&
SetPoliciesRequest::policies() const {
  // @@protoc_insertion_point(field_list:gobgpapi.SetPoliciesRequest.policies)
  return policies_;
}

// repeated .gobgpapi.PolicyAssignment assignments = 3;
inline int SetPoliciesRequest::_internal_assignments_size() const {
  return assignments_.size();
}
inline int SetPoliciesRequest::assignments_size() const {
  return _internal_assignments_size();
}
inline void SetPoliciesRequest::clear_assignments() {
  assignments_.Clear();
}
inline ::gobgpapi::PolicyAssignment* SetPoliciesRequest::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.SetPoliciesRequest.assignments)
  return assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::PolicyAssignment >*
SetPoliciesRequest::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.SetPoliciesRequest.assignments)
  return &assignments_;
}
inline const ::gobgpapi::PolicyAssignment& SetPoliciesRequest::_internal_assignments(int index) const {
  return assignments_.Get(index);
}
inline const ::gobgpapi::PolicyAssignment& SetPoliciesRequest::assignments(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.SetPoliciesRequest.assignments)
  return _internal_assignments(index);
}
inline ::gobgpapi::PolicyAssignment* SetPoliciesRequest::_internal_add_assignments() {
  return assignments_.Add();
}
inline ::gobgpapi::PolicyAssignment* SetPoliciesRequest::add_assignments() {
  // @@protoc_insertion_point(field_add:gobgpapi.SetPoliciesRequest.assignments)
  return _internal_add_assignments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::PolicyAssignment >&
SetPoliciesRequest::assignments() const {
  // @@protoc_insertion_point(field_list:gobgpapi.SetPoliciesRequest.assignments)
  return assignments_;
}

// -------------------------------------------------------------------

// AddDefinedSetRequest

// .gobgpapi.DefinedSet defined_set = 1;
inline bool AddDefinedSetRequest::_internal_has_defined_set() const {
  return this != internal_default_instance() && defined_set_ != nullptr;
}
inline bool AddDefinedSetRequest::has_defined_set() const {
  return _internal_has_defined_set();
}
inline void AddDefinedSetRequest::clear_defined_set() {
  if (GetArenaNoVirtual() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
}
inline const ::gobgpapi::DefinedSet& AddDefinedSetRequest::_internal_defined_set() const {
  const ::gobgpapi::DefinedSet* p = defined_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::DefinedSet*>(
      &::gobgpapi::_DefinedSet_default_instance_);
}
inline const ::gobgpapi::DefinedSet& AddDefinedSetRequest::defined_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddDefinedSetRequest.defined_set)
  return _internal_defined_set();
}
inline ::gobgpapi::DefinedSet* AddDefinedSetRequest::release_defined_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddDefinedSetRequest.defined_set)
  
  ::gobgpapi::DefinedSet* temp = defined_set_;
  defined_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::DefinedSet* AddDefinedSetRequest::_internal_mutable_defined_set() {
  
  if (defined_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::DefinedSet>(GetArenaNoVirtual());
    defined_set_ = p;
  }
  return defined_set_;
}
inline ::gobgpapi::DefinedSet* AddDefinedSetRequest::mutable_defined_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddDefinedSetRequest.defined_set)
  return _internal_mutable_defined_set();
}
inline void AddDefinedSetRequest::set_allocated_defined_set(::gobgpapi::DefinedSet* defined_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete defined_set_;
  }
  if (defined_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      defined_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defined_set, submessage_arena);
    }
    
  } else {
    
  }
  defined_set_ = defined_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddDefinedSetRequest.defined_set)
}

// -------------------------------------------------------------------

// DeleteDefinedSetRequest

// .gobgpapi.DefinedSet defined_set = 1;
inline bool DeleteDefinedSetRequest::_internal_has_defined_set() const {
  return this != internal_default_instance() && defined_set_ != nullptr;
}
inline bool DeleteDefinedSetRequest::has_defined_set() const {
  return _internal_has_defined_set();
}
inline void DeleteDefinedSetRequest::clear_defined_set() {
  if (GetArenaNoVirtual() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
}
inline const ::gobgpapi::DefinedSet& DeleteDefinedSetRequest::_internal_defined_set() const {
  const ::gobgpapi::DefinedSet* p = defined_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::DefinedSet*>(
      &::gobgpapi::_DefinedSet_default_instance_);
}
inline const ::gobgpapi::DefinedSet& DeleteDefinedSetRequest::defined_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteDefinedSetRequest.defined_set)
  return _internal_defined_set();
}
inline ::gobgpapi::DefinedSet* DeleteDefinedSetRequest::release_defined_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteDefinedSetRequest.defined_set)
  
  ::gobgpapi::DefinedSet* temp = defined_set_;
  defined_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::DefinedSet* DeleteDefinedSetRequest::_internal_mutable_defined_set() {
  
  if (defined_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::DefinedSet>(GetArenaNoVirtual());
    defined_set_ = p;
  }
  return defined_set_;
}
inline ::gobgpapi::DefinedSet* DeleteDefinedSetRequest::mutable_defined_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteDefinedSetRequest.defined_set)
  return _internal_mutable_defined_set();
}
inline void DeleteDefinedSetRequest::set_allocated_defined_set(::gobgpapi::DefinedSet* defined_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete defined_set_;
  }
  if (defined_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      defined_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defined_set, submessage_arena);
    }
    
  } else {
    
  }
  defined_set_ = defined_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteDefinedSetRequest.defined_set)
}

// bool all = 2;
inline void DeleteDefinedSetRequest::clear_all() {
  all_ = false;
}
inline bool DeleteDefinedSetRequest::_internal_all() const {
  return all_;
}
inline bool DeleteDefinedSetRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteDefinedSetRequest.all)
  return _internal_all();
}
inline void DeleteDefinedSetRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void DeleteDefinedSetRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteDefinedSetRequest.all)
}

// -------------------------------------------------------------------

// ListDefinedSetRequest

// .gobgpapi.DefinedType defined_type = 1;
inline void ListDefinedSetRequest::clear_defined_type() {
  defined_type_ = 0;
}
inline ::gobgpapi::DefinedType ListDefinedSetRequest::_internal_defined_type() const {
  return static_cast< ::gobgpapi::DefinedType >(defined_type_);
}
inline ::gobgpapi::DefinedType ListDefinedSetRequest::defined_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListDefinedSetRequest.defined_type)
  return _internal_defined_type();
}
inline void ListDefinedSetRequest::_internal_set_defined_type(::gobgpapi::DefinedType value) {
  
  defined_type_ = value;
}
inline void ListDefinedSetRequest::set_defined_type(::gobgpapi::DefinedType value) {
  _internal_set_defined_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListDefinedSetRequest.defined_type)
}

// string name = 2;
inline void ListDefinedSetRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListDefinedSetRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListDefinedSetRequest.name)
  return _internal_name();
}
inline void ListDefinedSetRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListDefinedSetRequest.name)
}
inline std::string* ListDefinedSetRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListDefinedSetRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListDefinedSetRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void ListDefinedSetRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListDefinedSetRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ListDefinedSetRequest.name)
}
inline void ListDefinedSetRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ListDefinedSetRequest.name)
}
inline void ListDefinedSetRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ListDefinedSetRequest.name)
}
inline std::string* ListDefinedSetRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListDefinedSetRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListDefinedSetRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListDefinedSetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListDefinedSetRequest.name)
}

// -------------------------------------------------------------------

// ListDefinedSetResponse

// .gobgpapi.DefinedSet defined_set = 1;
inline bool ListDefinedSetResponse::_internal_has_defined_set() const {
  return this != internal_default_instance() && defined_set_ != nullptr;
}
inline bool ListDefinedSetResponse::has_defined_set() const {
  return _internal_has_defined_set();
}
inline void ListDefinedSetResponse::clear_defined_set() {
  if (GetArenaNoVirtual() == nullptr && defined_set_ != nullptr) {
    delete defined_set_;
  }
  defined_set_ = nullptr;
}
inline const ::gobgpapi::DefinedSet& ListDefinedSetResponse::_internal_defined_set() const {
  const ::gobgpapi::DefinedSet* p = defined_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::DefinedSet*>(
      &::gobgpapi::_DefinedSet_default_instance_);
}
inline const ::gobgpapi::DefinedSet& ListDefinedSetResponse::defined_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListDefinedSetResponse.defined_set)
  return _internal_defined_set();
}
inline ::gobgpapi::DefinedSet* ListDefinedSetResponse::release_defined_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListDefinedSetResponse.defined_set)
  
  ::gobgpapi::DefinedSet* temp = defined_set_;
  defined_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::DefinedSet* ListDefinedSetResponse::_internal_mutable_defined_set() {
  
  if (defined_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::DefinedSet>(GetArenaNoVirtual());
    defined_set_ = p;
  }
  return defined_set_;
}
inline ::gobgpapi::DefinedSet* ListDefinedSetResponse::mutable_defined_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListDefinedSetResponse.defined_set)
  return _internal_mutable_defined_set();
}
inline void ListDefinedSetResponse::set_allocated_defined_set(::gobgpapi::DefinedSet* defined_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete defined_set_;
  }
  if (defined_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      defined_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defined_set, submessage_arena);
    }
    
  } else {
    
  }
  defined_set_ = defined_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListDefinedSetResponse.defined_set)
}

// -------------------------------------------------------------------

// AddStatementRequest

// .gobgpapi.Statement statement = 1;
inline bool AddStatementRequest::_internal_has_statement() const {
  return this != internal_default_instance() && statement_ != nullptr;
}
inline bool AddStatementRequest::has_statement() const {
  return _internal_has_statement();
}
inline void AddStatementRequest::clear_statement() {
  if (GetArenaNoVirtual() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
}
inline const ::gobgpapi::Statement& AddStatementRequest::_internal_statement() const {
  const ::gobgpapi::Statement* p = statement_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Statement*>(
      &::gobgpapi::_Statement_default_instance_);
}
inline const ::gobgpapi::Statement& AddStatementRequest::statement() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddStatementRequest.statement)
  return _internal_statement();
}
inline ::gobgpapi::Statement* AddStatementRequest::release_statement() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddStatementRequest.statement)
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = nullptr;
  return temp;
}
inline ::gobgpapi::Statement* AddStatementRequest::_internal_mutable_statement() {
  
  if (statement_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Statement>(GetArenaNoVirtual());
    statement_ = p;
  }
  return statement_;
}
inline ::gobgpapi::Statement* AddStatementRequest::mutable_statement() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddStatementRequest.statement)
  return _internal_mutable_statement();
}
inline void AddStatementRequest::set_allocated_statement(::gobgpapi::Statement* statement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete statement_;
  }
  if (statement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statement, submessage_arena);
    }
    
  } else {
    
  }
  statement_ = statement;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddStatementRequest.statement)
}

// -------------------------------------------------------------------

// DeleteStatementRequest

// .gobgpapi.Statement statement = 1;
inline bool DeleteStatementRequest::_internal_has_statement() const {
  return this != internal_default_instance() && statement_ != nullptr;
}
inline bool DeleteStatementRequest::has_statement() const {
  return _internal_has_statement();
}
inline void DeleteStatementRequest::clear_statement() {
  if (GetArenaNoVirtual() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
}
inline const ::gobgpapi::Statement& DeleteStatementRequest::_internal_statement() const {
  const ::gobgpapi::Statement* p = statement_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Statement*>(
      &::gobgpapi::_Statement_default_instance_);
}
inline const ::gobgpapi::Statement& DeleteStatementRequest::statement() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteStatementRequest.statement)
  return _internal_statement();
}
inline ::gobgpapi::Statement* DeleteStatementRequest::release_statement() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteStatementRequest.statement)
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = nullptr;
  return temp;
}
inline ::gobgpapi::Statement* DeleteStatementRequest::_internal_mutable_statement() {
  
  if (statement_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Statement>(GetArenaNoVirtual());
    statement_ = p;
  }
  return statement_;
}
inline ::gobgpapi::Statement* DeleteStatementRequest::mutable_statement() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteStatementRequest.statement)
  return _internal_mutable_statement();
}
inline void DeleteStatementRequest::set_allocated_statement(::gobgpapi::Statement* statement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete statement_;
  }
  if (statement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statement, submessage_arena);
    }
    
  } else {
    
  }
  statement_ = statement;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteStatementRequest.statement)
}

// bool all = 2;
inline void DeleteStatementRequest::clear_all() {
  all_ = false;
}
inline bool DeleteStatementRequest::_internal_all() const {
  return all_;
}
inline bool DeleteStatementRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteStatementRequest.all)
  return _internal_all();
}
inline void DeleteStatementRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void DeleteStatementRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteStatementRequest.all)
}

// -------------------------------------------------------------------

// ListStatementRequest

// string name = 1;
inline void ListStatementRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListStatementRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListStatementRequest.name)
  return _internal_name();
}
inline void ListStatementRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListStatementRequest.name)
}
inline std::string* ListStatementRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListStatementRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListStatementRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void ListStatementRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListStatementRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ListStatementRequest.name)
}
inline void ListStatementRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ListStatementRequest.name)
}
inline void ListStatementRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ListStatementRequest.name)
}
inline std::string* ListStatementRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListStatementRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListStatementRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListStatementRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListStatementRequest.name)
}

// -------------------------------------------------------------------

// ListStatementResponse

// .gobgpapi.Statement statement = 1;
inline bool ListStatementResponse::_internal_has_statement() const {
  return this != internal_default_instance() && statement_ != nullptr;
}
inline bool ListStatementResponse::has_statement() const {
  return _internal_has_statement();
}
inline void ListStatementResponse::clear_statement() {
  if (GetArenaNoVirtual() == nullptr && statement_ != nullptr) {
    delete statement_;
  }
  statement_ = nullptr;
}
inline const ::gobgpapi::Statement& ListStatementResponse::_internal_statement() const {
  const ::gobgpapi::Statement* p = statement_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Statement*>(
      &::gobgpapi::_Statement_default_instance_);
}
inline const ::gobgpapi::Statement& ListStatementResponse::statement() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListStatementResponse.statement)
  return _internal_statement();
}
inline ::gobgpapi::Statement* ListStatementResponse::release_statement() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListStatementResponse.statement)
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = nullptr;
  return temp;
}
inline ::gobgpapi::Statement* ListStatementResponse::_internal_mutable_statement() {
  
  if (statement_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Statement>(GetArenaNoVirtual());
    statement_ = p;
  }
  return statement_;
}
inline ::gobgpapi::Statement* ListStatementResponse::mutable_statement() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListStatementResponse.statement)
  return _internal_mutable_statement();
}
inline void ListStatementResponse::set_allocated_statement(::gobgpapi::Statement* statement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete statement_;
  }
  if (statement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      statement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statement, submessage_arena);
    }
    
  } else {
    
  }
  statement_ = statement;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListStatementResponse.statement)
}

// -------------------------------------------------------------------

// AddPolicyAssignmentRequest

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool AddPolicyAssignmentRequest::_internal_has_assignment() const {
  return this != internal_default_instance() && assignment_ != nullptr;
}
inline bool AddPolicyAssignmentRequest::has_assignment() const {
  return _internal_has_assignment();
}
inline void AddPolicyAssignmentRequest::clear_assignment() {
  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
}
inline const ::gobgpapi::PolicyAssignment& AddPolicyAssignmentRequest::_internal_assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline const ::gobgpapi::PolicyAssignment& AddPolicyAssignmentRequest::assignment() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPolicyAssignmentRequest.assignment)
  return _internal_assignment();
}
inline ::gobgpapi::PolicyAssignment* AddPolicyAssignmentRequest::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPolicyAssignmentRequest.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* AddPolicyAssignmentRequest::_internal_mutable_assignment() {
  
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PolicyAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::gobgpapi::PolicyAssignment* AddPolicyAssignmentRequest::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPolicyAssignmentRequest.assignment)
  return _internal_mutable_assignment();
}
inline void AddPolicyAssignmentRequest::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPolicyAssignmentRequest.assignment)
}

// -------------------------------------------------------------------

// DeletePolicyAssignmentRequest

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool DeletePolicyAssignmentRequest::_internal_has_assignment() const {
  return this != internal_default_instance() && assignment_ != nullptr;
}
inline bool DeletePolicyAssignmentRequest::has_assignment() const {
  return _internal_has_assignment();
}
inline void DeletePolicyAssignmentRequest::clear_assignment() {
  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
}
inline const ::gobgpapi::PolicyAssignment& DeletePolicyAssignmentRequest::_internal_assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline const ::gobgpapi::PolicyAssignment& DeletePolicyAssignmentRequest::assignment() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyAssignmentRequest.assignment)
  return _internal_assignment();
}
inline ::gobgpapi::PolicyAssignment* DeletePolicyAssignmentRequest::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeletePolicyAssignmentRequest.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* DeletePolicyAssignmentRequest::_internal_mutable_assignment() {
  
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PolicyAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::gobgpapi::PolicyAssignment* DeletePolicyAssignmentRequest::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeletePolicyAssignmentRequest.assignment)
  return _internal_mutable_assignment();
}
inline void DeletePolicyAssignmentRequest::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeletePolicyAssignmentRequest.assignment)
}

// bool all = 2;
inline void DeletePolicyAssignmentRequest::clear_all() {
  all_ = false;
}
inline bool DeletePolicyAssignmentRequest::_internal_all() const {
  return all_;
}
inline bool DeletePolicyAssignmentRequest::all() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeletePolicyAssignmentRequest.all)
  return _internal_all();
}
inline void DeletePolicyAssignmentRequest::_internal_set_all(bool value) {
  
  all_ = value;
}
inline void DeletePolicyAssignmentRequest::set_all(bool value) {
  _internal_set_all(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeletePolicyAssignmentRequest.all)
}

// -------------------------------------------------------------------

// ListPolicyAssignmentRequest

// string name = 1;
inline void ListPolicyAssignmentRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListPolicyAssignmentRequest::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPolicyAssignmentRequest.name)
  return _internal_name();
}
inline void ListPolicyAssignmentRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPolicyAssignmentRequest.name)
}
inline std::string* ListPolicyAssignmentRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPolicyAssignmentRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListPolicyAssignmentRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void ListPolicyAssignmentRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListPolicyAssignmentRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ListPolicyAssignmentRequest.name)
}
inline void ListPolicyAssignmentRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ListPolicyAssignmentRequest.name)
}
inline void ListPolicyAssignmentRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ListPolicyAssignmentRequest.name)
}
inline std::string* ListPolicyAssignmentRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListPolicyAssignmentRequest::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPolicyAssignmentRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListPolicyAssignmentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPolicyAssignmentRequest.name)
}

// .gobgpapi.PolicyDirection direction = 2;
inline void ListPolicyAssignmentRequest::clear_direction() {
  direction_ = 0;
}
inline ::gobgpapi::PolicyDirection ListPolicyAssignmentRequest::_internal_direction() const {
  return static_cast< ::gobgpapi::PolicyDirection >(direction_);
}
inline ::gobgpapi::PolicyDirection ListPolicyAssignmentRequest::direction() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPolicyAssignmentRequest.direction)
  return _internal_direction();
}
inline void ListPolicyAssignmentRequest::_internal_set_direction(::gobgpapi::PolicyDirection value) {
  
  direction_ = value;
}
inline void ListPolicyAssignmentRequest::set_direction(::gobgpapi::PolicyDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ListPolicyAssignmentRequest.direction)
}

// -------------------------------------------------------------------

// ListPolicyAssignmentResponse

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool ListPolicyAssignmentResponse::_internal_has_assignment() const {
  return this != internal_default_instance() && assignment_ != nullptr;
}
inline bool ListPolicyAssignmentResponse::has_assignment() const {
  return _internal_has_assignment();
}
inline void ListPolicyAssignmentResponse::clear_assignment() {
  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
}
inline const ::gobgpapi::PolicyAssignment& ListPolicyAssignmentResponse::_internal_assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline const ::gobgpapi::PolicyAssignment& ListPolicyAssignmentResponse::assignment() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListPolicyAssignmentResponse.assignment)
  return _internal_assignment();
}
inline ::gobgpapi::PolicyAssignment* ListPolicyAssignmentResponse::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListPolicyAssignmentResponse.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ListPolicyAssignmentResponse::_internal_mutable_assignment() {
  
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PolicyAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::gobgpapi::PolicyAssignment* ListPolicyAssignmentResponse::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListPolicyAssignmentResponse.assignment)
  return _internal_mutable_assignment();
}
inline void ListPolicyAssignmentResponse::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListPolicyAssignmentResponse.assignment)
}

// -------------------------------------------------------------------

// SetPolicyAssignmentRequest

// .gobgpapi.PolicyAssignment assignment = 1;
inline bool SetPolicyAssignmentRequest::_internal_has_assignment() const {
  return this != internal_default_instance() && assignment_ != nullptr;
}
inline bool SetPolicyAssignmentRequest::has_assignment() const {
  return _internal_has_assignment();
}
inline void SetPolicyAssignmentRequest::clear_assignment() {
  if (GetArenaNoVirtual() == nullptr && assignment_ != nullptr) {
    delete assignment_;
  }
  assignment_ = nullptr;
}
inline const ::gobgpapi::PolicyAssignment& SetPolicyAssignmentRequest::_internal_assignment() const {
  const ::gobgpapi::PolicyAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline const ::gobgpapi::PolicyAssignment& SetPolicyAssignmentRequest::assignment() const {
  // @@protoc_insertion_point(field_get:gobgpapi.SetPolicyAssignmentRequest.assignment)
  return _internal_assignment();
}
inline ::gobgpapi::PolicyAssignment* SetPolicyAssignmentRequest::release_assignment() {
  // @@protoc_insertion_point(field_release:gobgpapi.SetPolicyAssignmentRequest.assignment)
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* SetPolicyAssignmentRequest::_internal_mutable_assignment() {
  
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PolicyAssignment>(GetArenaNoVirtual());
    assignment_ = p;
  }
  return assignment_;
}
inline ::gobgpapi::PolicyAssignment* SetPolicyAssignmentRequest::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.SetPolicyAssignmentRequest.assignment)
  return _internal_mutable_assignment();
}
inline void SetPolicyAssignmentRequest::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    
  } else {
    
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.SetPolicyAssignmentRequest.assignment)
}

// -------------------------------------------------------------------

// AddRpkiRequest

// string address = 1;
inline void AddRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddRpkiRequest.address)
  return _internal_address();
}
inline void AddRpkiRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddRpkiRequest.address)
}
inline std::string* AddRpkiRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddRpkiRequest.address)
  return _internal_mutable_address();
}
inline const std::string& AddRpkiRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void AddRpkiRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddRpkiRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddRpkiRequest.address)
}
inline void AddRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddRpkiRequest.address)
}
inline void AddRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddRpkiRequest.address)
}
inline std::string* AddRpkiRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddRpkiRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddRpkiRequest.address)
}

// uint32 port = 2;
inline void AddRpkiRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRpkiRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddRpkiRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddRpkiRequest.port)
  return _internal_port();
}
inline void AddRpkiRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void AddRpkiRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddRpkiRequest.port)
}

// int64 lifetime = 3;
inline void AddRpkiRequest::clear_lifetime() {
  lifetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddRpkiRequest::_internal_lifetime() const {
  return lifetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddRpkiRequest::lifetime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddRpkiRequest.lifetime)
  return _internal_lifetime();
}
inline void AddRpkiRequest::_internal_set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetime_ = value;
}
inline void AddRpkiRequest::set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetime(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddRpkiRequest.lifetime)
}

// -------------------------------------------------------------------

// DeleteRpkiRequest

// string address = 1;
inline void DeleteRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteRpkiRequest.address)
  return _internal_address();
}
inline void DeleteRpkiRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteRpkiRequest.address)
}
inline std::string* DeleteRpkiRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteRpkiRequest.address)
  return _internal_mutable_address();
}
inline const std::string& DeleteRpkiRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void DeleteRpkiRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteRpkiRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeleteRpkiRequest.address)
}
inline void DeleteRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeleteRpkiRequest.address)
}
inline void DeleteRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeleteRpkiRequest.address)
}
inline std::string* DeleteRpkiRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRpkiRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteRpkiRequest.address)
}

// uint32 port = 2;
inline void DeleteRpkiRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRpkiRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteRpkiRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteRpkiRequest.port)
  return _internal_port();
}
inline void DeleteRpkiRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void DeleteRpkiRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteRpkiRequest.port)
}

// -------------------------------------------------------------------

// ListRpkiRequest

// .gobgpapi.Family family = 1;
inline bool ListRpkiRequest::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool ListRpkiRequest::has_family() const {
  return _internal_has_family();
}
inline void ListRpkiRequest::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& ListRpkiRequest::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& ListRpkiRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListRpkiRequest.family)
  return _internal_family();
}
inline ::gobgpapi::Family* ListRpkiRequest::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListRpkiRequest.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* ListRpkiRequest::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* ListRpkiRequest::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListRpkiRequest.family)
  return _internal_mutable_family();
}
inline void ListRpkiRequest::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListRpkiRequest.family)
}

// -------------------------------------------------------------------

// ListRpkiResponse

// .gobgpapi.Rpki server = 1;
inline bool ListRpkiResponse::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool ListRpkiResponse::has_server() const {
  return _internal_has_server();
}
inline void ListRpkiResponse::clear_server() {
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::gobgpapi::Rpki& ListRpkiResponse::_internal_server() const {
  const ::gobgpapi::Rpki* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Rpki*>(
      &::gobgpapi::_Rpki_default_instance_);
}
inline const ::gobgpapi::Rpki& ListRpkiResponse::server() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListRpkiResponse.server)
  return _internal_server();
}
inline ::gobgpapi::Rpki* ListRpkiResponse::release_server() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListRpkiResponse.server)
  
  ::gobgpapi::Rpki* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::gobgpapi::Rpki* ListRpkiResponse::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Rpki>(GetArenaNoVirtual());
    server_ = p;
  }
  return server_;
}
inline ::gobgpapi::Rpki* ListRpkiResponse::mutable_server() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListRpkiResponse.server)
  return _internal_mutable_server();
}
inline void ListRpkiResponse::set_allocated_server(::gobgpapi::Rpki* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListRpkiResponse.server)
}

// -------------------------------------------------------------------

// EnableRpkiRequest

// string address = 1;
inline void EnableRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnableRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableRpkiRequest.address)
  return _internal_address();
}
inline void EnableRpkiRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableRpkiRequest.address)
}
inline std::string* EnableRpkiRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableRpkiRequest.address)
  return _internal_mutable_address();
}
inline const std::string& EnableRpkiRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void EnableRpkiRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnableRpkiRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableRpkiRequest.address)
}
inline void EnableRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableRpkiRequest.address)
}
inline void EnableRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableRpkiRequest.address)
}
inline std::string* EnableRpkiRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnableRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnableRpkiRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableRpkiRequest.address)
}

// uint32 port = 2;
inline void EnableRpkiRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableRpkiRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableRpkiRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableRpkiRequest.port)
  return _internal_port();
}
inline void EnableRpkiRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void EnableRpkiRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableRpkiRequest.port)
}

// -------------------------------------------------------------------

// DisableRpkiRequest

// string address = 1;
inline void DisableRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DisableRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DisableRpkiRequest.address)
  return _internal_address();
}
inline void DisableRpkiRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DisableRpkiRequest.address)
}
inline std::string* DisableRpkiRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DisableRpkiRequest.address)
  return _internal_mutable_address();
}
inline const std::string& DisableRpkiRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void DisableRpkiRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DisableRpkiRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DisableRpkiRequest.address)
}
inline void DisableRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DisableRpkiRequest.address)
}
inline void DisableRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DisableRpkiRequest.address)
}
inline std::string* DisableRpkiRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisableRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DisableRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisableRpkiRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DisableRpkiRequest.address)
}

// uint32 port = 2;
inline void DisableRpkiRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisableRpkiRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DisableRpkiRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DisableRpkiRequest.port)
  return _internal_port();
}
inline void DisableRpkiRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void DisableRpkiRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DisableRpkiRequest.port)
}

// -------------------------------------------------------------------

// ResetRpkiRequest

// string address = 1;
inline void ResetRpkiRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResetRpkiRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetRpkiRequest.address)
  return _internal_address();
}
inline void ResetRpkiRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetRpkiRequest.address)
}
inline std::string* ResetRpkiRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ResetRpkiRequest.address)
  return _internal_mutable_address();
}
inline const std::string& ResetRpkiRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void ResetRpkiRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResetRpkiRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ResetRpkiRequest.address)
}
inline void ResetRpkiRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ResetRpkiRequest.address)
}
inline void ResetRpkiRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ResetRpkiRequest.address)
}
inline std::string* ResetRpkiRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResetRpkiRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.ResetRpkiRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResetRpkiRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ResetRpkiRequest.address)
}

// uint32 port = 2;
inline void ResetRpkiRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResetRpkiRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResetRpkiRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetRpkiRequest.port)
  return _internal_port();
}
inline void ResetRpkiRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void ResetRpkiRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetRpkiRequest.port)
}

// bool soft = 3;
inline void ResetRpkiRequest::clear_soft() {
  soft_ = false;
}
inline bool ResetRpkiRequest::_internal_soft() const {
  return soft_;
}
inline bool ResetRpkiRequest::soft() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ResetRpkiRequest.soft)
  return _internal_soft();
}
inline void ResetRpkiRequest::_internal_set_soft(bool value) {
  
  soft_ = value;
}
inline void ResetRpkiRequest::set_soft(bool value) {
  _internal_set_soft(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ResetRpkiRequest.soft)
}

// -------------------------------------------------------------------

// ListRpkiTableRequest

// .gobgpapi.Family family = 1;
inline bool ListRpkiTableRequest::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool ListRpkiTableRequest::has_family() const {
  return _internal_has_family();
}
inline void ListRpkiTableRequest::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& ListRpkiTableRequest::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& ListRpkiTableRequest::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListRpkiTableRequest.family)
  return _internal_family();
}
inline ::gobgpapi::Family* ListRpkiTableRequest::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListRpkiTableRequest.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* ListRpkiTableRequest::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* ListRpkiTableRequest::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListRpkiTableRequest.family)
  return _internal_mutable_family();
}
inline void ListRpkiTableRequest::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListRpkiTableRequest.family)
}

// -------------------------------------------------------------------

// ListRpkiTableResponse

// .gobgpapi.Roa roa = 1;
inline bool ListRpkiTableResponse::_internal_has_roa() const {
  return this != internal_default_instance() && roa_ != nullptr;
}
inline bool ListRpkiTableResponse::has_roa() const {
  return _internal_has_roa();
}
inline void ListRpkiTableResponse::clear_roa() {
  if (GetArenaNoVirtual() == nullptr && roa_ != nullptr) {
    delete roa_;
  }
  roa_ = nullptr;
}
inline const ::gobgpapi::Roa& ListRpkiTableResponse::_internal_roa() const {
  const ::gobgpapi::Roa* p = roa_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Roa*>(
      &::gobgpapi::_Roa_default_instance_);
}
inline const ::gobgpapi::Roa& ListRpkiTableResponse::roa() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ListRpkiTableResponse.roa)
  return _internal_roa();
}
inline ::gobgpapi::Roa* ListRpkiTableResponse::release_roa() {
  // @@protoc_insertion_point(field_release:gobgpapi.ListRpkiTableResponse.roa)
  
  ::gobgpapi::Roa* temp = roa_;
  roa_ = nullptr;
  return temp;
}
inline ::gobgpapi::Roa* ListRpkiTableResponse::_internal_mutable_roa() {
  
  if (roa_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Roa>(GetArenaNoVirtual());
    roa_ = p;
  }
  return roa_;
}
inline ::gobgpapi::Roa* ListRpkiTableResponse::mutable_roa() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ListRpkiTableResponse.roa)
  return _internal_mutable_roa();
}
inline void ListRpkiTableResponse::set_allocated_roa(::gobgpapi::Roa* roa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roa_;
  }
  if (roa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roa, submessage_arena);
    }
    
  } else {
    
  }
  roa_ = roa;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ListRpkiTableResponse.roa)
}

// -------------------------------------------------------------------

// EnableZebraRequest

// string url = 1;
inline void EnableZebraRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnableZebraRequest::url() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.url)
  return _internal_url();
}
inline void EnableZebraRequest::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.url)
}
inline std::string* EnableZebraRequest::mutable_url() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableZebraRequest.url)
  return _internal_mutable_url();
}
inline const std::string& EnableZebraRequest::_internal_url() const {
  return url_.GetNoArena();
}
inline void EnableZebraRequest::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnableZebraRequest::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableZebraRequest.url)
}
inline void EnableZebraRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableZebraRequest.url)
}
inline void EnableZebraRequest::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableZebraRequest.url)
}
inline std::string* EnableZebraRequest::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnableZebraRequest::release_url() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableZebraRequest.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnableZebraRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableZebraRequest.url)
}

// repeated string route_types = 2;
inline int EnableZebraRequest::_internal_route_types_size() const {
  return route_types_.size();
}
inline int EnableZebraRequest::route_types_size() const {
  return _internal_route_types_size();
}
inline void EnableZebraRequest::clear_route_types() {
  route_types_.Clear();
}
inline std::string* EnableZebraRequest::add_route_types() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.EnableZebraRequest.route_types)
  return _internal_add_route_types();
}
inline const std::string& EnableZebraRequest::_internal_route_types(int index) const {
  return route_types_.Get(index);
}
inline const std::string& EnableZebraRequest::route_types(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.route_types)
  return _internal_route_types(index);
}
inline std::string* EnableZebraRequest::mutable_route_types(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableZebraRequest.route_types)
  return route_types_.Mutable(index);
}
inline void EnableZebraRequest::set_route_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.route_types)
  route_types_.Mutable(index)->assign(value);
}
inline void EnableZebraRequest::set_route_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.route_types)
  route_types_.Mutable(index)->assign(std::move(value));
}
inline void EnableZebraRequest::set_route_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  route_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableZebraRequest.route_types)
}
inline void EnableZebraRequest::set_route_types(int index, const char* value, size_t size) {
  route_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableZebraRequest.route_types)
}
inline std::string* EnableZebraRequest::_internal_add_route_types() {
  return route_types_.Add();
}
inline void EnableZebraRequest::add_route_types(const std::string& value) {
  route_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.EnableZebraRequest.route_types)
}
inline void EnableZebraRequest::add_route_types(std::string&& value) {
  route_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.EnableZebraRequest.route_types)
}
inline void EnableZebraRequest::add_route_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  route_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.EnableZebraRequest.route_types)
}
inline void EnableZebraRequest::add_route_types(const char* value, size_t size) {
  route_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.EnableZebraRequest.route_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EnableZebraRequest::route_types() const {
  // @@protoc_insertion_point(field_list:gobgpapi.EnableZebraRequest.route_types)
  return route_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EnableZebraRequest::mutable_route_types() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.EnableZebraRequest.route_types)
  return &route_types_;
}

// uint32 version = 3;
inline void EnableZebraRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableZebraRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableZebraRequest::version() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.version)
  return _internal_version();
}
inline void EnableZebraRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void EnableZebraRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.version)
}

// bool nexthop_trigger_enable = 4;
inline void EnableZebraRequest::clear_nexthop_trigger_enable() {
  nexthop_trigger_enable_ = false;
}
inline bool EnableZebraRequest::_internal_nexthop_trigger_enable() const {
  return nexthop_trigger_enable_;
}
inline bool EnableZebraRequest::nexthop_trigger_enable() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.nexthop_trigger_enable)
  return _internal_nexthop_trigger_enable();
}
inline void EnableZebraRequest::_internal_set_nexthop_trigger_enable(bool value) {
  
  nexthop_trigger_enable_ = value;
}
inline void EnableZebraRequest::set_nexthop_trigger_enable(bool value) {
  _internal_set_nexthop_trigger_enable(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.nexthop_trigger_enable)
}

// uint32 nexthop_trigger_delay = 5;
inline void EnableZebraRequest::clear_nexthop_trigger_delay() {
  nexthop_trigger_delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableZebraRequest::_internal_nexthop_trigger_delay() const {
  return nexthop_trigger_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableZebraRequest::nexthop_trigger_delay() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.nexthop_trigger_delay)
  return _internal_nexthop_trigger_delay();
}
inline void EnableZebraRequest::_internal_set_nexthop_trigger_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nexthop_trigger_delay_ = value;
}
inline void EnableZebraRequest::set_nexthop_trigger_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nexthop_trigger_delay(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.nexthop_trigger_delay)
}

// uint32 mpls_label_range_size = 6;
inline void EnableZebraRequest::clear_mpls_label_range_size() {
  mpls_label_range_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableZebraRequest::_internal_mpls_label_range_size() const {
  return mpls_label_range_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnableZebraRequest::mpls_label_range_size() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.mpls_label_range_size)
  return _internal_mpls_label_range_size();
}
inline void EnableZebraRequest::_internal_set_mpls_label_range_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mpls_label_range_size_ = value;
}
inline void EnableZebraRequest::set_mpls_label_range_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mpls_label_range_size(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.mpls_label_range_size)
}

// string software_name = 7;
inline void EnableZebraRequest::clear_software_name() {
  software_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnableZebraRequest::software_name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableZebraRequest.software_name)
  return _internal_software_name();
}
inline void EnableZebraRequest::set_software_name(const std::string& value) {
  _internal_set_software_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableZebraRequest.software_name)
}
inline std::string* EnableZebraRequest::mutable_software_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableZebraRequest.software_name)
  return _internal_mutable_software_name();
}
inline const std::string& EnableZebraRequest::_internal_software_name() const {
  return software_name_.GetNoArena();
}
inline void EnableZebraRequest::_internal_set_software_name(const std::string& value) {
  
  software_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnableZebraRequest::set_software_name(std::string&& value) {
  
  software_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableZebraRequest.software_name)
}
inline void EnableZebraRequest::set_software_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  software_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableZebraRequest.software_name)
}
inline void EnableZebraRequest::set_software_name(const char* value, size_t size) {
  
  software_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableZebraRequest.software_name)
}
inline std::string* EnableZebraRequest::_internal_mutable_software_name() {
  
  return software_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnableZebraRequest::release_software_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableZebraRequest.software_name)
  
  return software_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnableZebraRequest::set_allocated_software_name(std::string* software_name) {
  if (software_name != nullptr) {
    
  } else {
    
  }
  software_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), software_name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableZebraRequest.software_name)
}

// -------------------------------------------------------------------

// EnableMrtRequest

// int32 dump_type = 1;
inline void EnableMrtRequest::clear_dump_type() {
  dump_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableMrtRequest::_internal_dump_type() const {
  return dump_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnableMrtRequest::dump_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableMrtRequest.dump_type)
  return _internal_dump_type();
}
inline void EnableMrtRequest::_internal_set_dump_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dump_type_ = value;
}
inline void EnableMrtRequest::set_dump_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dump_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableMrtRequest.dump_type)
}

// string filename = 2;
inline void EnableMrtRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnableMrtRequest::filename() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableMrtRequest.filename)
  return _internal_filename();
}
inline void EnableMrtRequest::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableMrtRequest.filename)
}
inline std::string* EnableMrtRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EnableMrtRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& EnableMrtRequest::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void EnableMrtRequest::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnableMrtRequest::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EnableMrtRequest.filename)
}
inline void EnableMrtRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EnableMrtRequest.filename)
}
inline void EnableMrtRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EnableMrtRequest.filename)
}
inline std::string* EnableMrtRequest::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnableMrtRequest::release_filename() {
  // @@protoc_insertion_point(field_release:gobgpapi.EnableMrtRequest.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnableMrtRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EnableMrtRequest.filename)
}

// uint64 dump_interval = 3;
inline void EnableMrtRequest::clear_dump_interval() {
  dump_interval_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnableMrtRequest::_internal_dump_interval() const {
  return dump_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnableMrtRequest::dump_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableMrtRequest.dump_interval)
  return _internal_dump_interval();
}
inline void EnableMrtRequest::_internal_set_dump_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dump_interval_ = value;
}
inline void EnableMrtRequest::set_dump_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dump_interval(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableMrtRequest.dump_interval)
}

// uint64 rotation_interval = 4;
inline void EnableMrtRequest::clear_rotation_interval() {
  rotation_interval_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnableMrtRequest::_internal_rotation_interval() const {
  return rotation_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnableMrtRequest::rotation_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EnableMrtRequest.rotation_interval)
  return _internal_rotation_interval();
}
inline void EnableMrtRequest::_internal_set_rotation_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rotation_interval_ = value;
}
inline void EnableMrtRequest::set_rotation_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rotation_interval(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EnableMrtRequest.rotation_interval)
}

// -------------------------------------------------------------------

// DisableMrtRequest

// -------------------------------------------------------------------

// AddBmpRequest

// string address = 1;
inline void AddBmpRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddBmpRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.address)
  return _internal_address();
}
inline void AddBmpRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.address)
}
inline std::string* AddBmpRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddBmpRequest.address)
  return _internal_mutable_address();
}
inline const std::string& AddBmpRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void AddBmpRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddBmpRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddBmpRequest.address)
}
inline void AddBmpRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddBmpRequest.address)
}
inline void AddBmpRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddBmpRequest.address)
}
inline std::string* AddBmpRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddBmpRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddBmpRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddBmpRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddBmpRequest.address)
}

// uint32 port = 2;
inline void AddBmpRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddBmpRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddBmpRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.port)
  return _internal_port();
}
inline void AddBmpRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void AddBmpRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.port)
}

// .gobgpapi.AddBmpRequest.MonitoringPolicy policy = 3;
inline void AddBmpRequest::clear_policy() {
  policy_ = 0;
}
inline ::gobgpapi::AddBmpRequest_MonitoringPolicy AddBmpRequest::_internal_policy() const {
  return static_cast< ::gobgpapi::AddBmpRequest_MonitoringPolicy >(policy_);
}
inline ::gobgpapi::AddBmpRequest_MonitoringPolicy AddBmpRequest::policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.policy)
  return _internal_policy();
}
inline void AddBmpRequest::_internal_set_policy(::gobgpapi::AddBmpRequest_MonitoringPolicy value) {
  
  policy_ = value;
}
inline void AddBmpRequest::set_policy(::gobgpapi::AddBmpRequest_MonitoringPolicy value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.policy)
}

// int32 StatisticsTimeout = 4;
inline void AddBmpRequest::clear_statisticstimeout() {
  statisticstimeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddBmpRequest::_internal_statisticstimeout() const {
  return statisticstimeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddBmpRequest::statisticstimeout() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.StatisticsTimeout)
  return _internal_statisticstimeout();
}
inline void AddBmpRequest::_internal_set_statisticstimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  statisticstimeout_ = value;
}
inline void AddBmpRequest::set_statisticstimeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statisticstimeout(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.StatisticsTimeout)
}

// string SysName = 5;
inline void AddBmpRequest::clear_sysname() {
  sysname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddBmpRequest::sysname() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.SysName)
  return _internal_sysname();
}
inline void AddBmpRequest::set_sysname(const std::string& value) {
  _internal_set_sysname(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.SysName)
}
inline std::string* AddBmpRequest::mutable_sysname() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddBmpRequest.SysName)
  return _internal_mutable_sysname();
}
inline const std::string& AddBmpRequest::_internal_sysname() const {
  return sysname_.GetNoArena();
}
inline void AddBmpRequest::_internal_set_sysname(const std::string& value) {
  
  sysname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddBmpRequest::set_sysname(std::string&& value) {
  
  sysname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddBmpRequest.SysName)
}
inline void AddBmpRequest::set_sysname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sysname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddBmpRequest.SysName)
}
inline void AddBmpRequest::set_sysname(const char* value, size_t size) {
  
  sysname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddBmpRequest.SysName)
}
inline std::string* AddBmpRequest::_internal_mutable_sysname() {
  
  return sysname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddBmpRequest::release_sysname() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddBmpRequest.SysName)
  
  return sysname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddBmpRequest::set_allocated_sysname(std::string* sysname) {
  if (sysname != nullptr) {
    
  } else {
    
  }
  sysname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sysname);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddBmpRequest.SysName)
}

// string SysDescr = 6;
inline void AddBmpRequest::clear_sysdescr() {
  sysdescr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddBmpRequest::sysdescr() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddBmpRequest.SysDescr)
  return _internal_sysdescr();
}
inline void AddBmpRequest::set_sysdescr(const std::string& value) {
  _internal_set_sysdescr(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddBmpRequest.SysDescr)
}
inline std::string* AddBmpRequest::mutable_sysdescr() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddBmpRequest.SysDescr)
  return _internal_mutable_sysdescr();
}
inline const std::string& AddBmpRequest::_internal_sysdescr() const {
  return sysdescr_.GetNoArena();
}
inline void AddBmpRequest::_internal_set_sysdescr(const std::string& value) {
  
  sysdescr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddBmpRequest::set_sysdescr(std::string&& value) {
  
  sysdescr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AddBmpRequest.SysDescr)
}
inline void AddBmpRequest::set_sysdescr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sysdescr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AddBmpRequest.SysDescr)
}
inline void AddBmpRequest::set_sysdescr(const char* value, size_t size) {
  
  sysdescr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AddBmpRequest.SysDescr)
}
inline std::string* AddBmpRequest::_internal_mutable_sysdescr() {
  
  return sysdescr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddBmpRequest::release_sysdescr() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddBmpRequest.SysDescr)
  
  return sysdescr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddBmpRequest::set_allocated_sysdescr(std::string* sysdescr) {
  if (sysdescr != nullptr) {
    
  } else {
    
  }
  sysdescr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sysdescr);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddBmpRequest.SysDescr)
}

// -------------------------------------------------------------------

// DeleteBmpRequest

// string address = 1;
inline void DeleteBmpRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteBmpRequest::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteBmpRequest.address)
  return _internal_address();
}
inline void DeleteBmpRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteBmpRequest.address)
}
inline std::string* DeleteBmpRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DeleteBmpRequest.address)
  return _internal_mutable_address();
}
inline const std::string& DeleteBmpRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void DeleteBmpRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteBmpRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DeleteBmpRequest.address)
}
inline void DeleteBmpRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DeleteBmpRequest.address)
}
inline void DeleteBmpRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DeleteBmpRequest.address)
}
inline std::string* DeleteBmpRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteBmpRequest::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.DeleteBmpRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteBmpRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DeleteBmpRequest.address)
}

// uint32 port = 2;
inline void DeleteBmpRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteBmpRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteBmpRequest::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DeleteBmpRequest.port)
  return _internal_port();
}
inline void DeleteBmpRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void DeleteBmpRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DeleteBmpRequest.port)
}

// -------------------------------------------------------------------

// Family

// .gobgpapi.Family.Afi afi = 1;
inline void Family::clear_afi() {
  afi_ = 0;
}
inline ::gobgpapi::Family_Afi Family::_internal_afi() const {
  return static_cast< ::gobgpapi::Family_Afi >(afi_);
}
inline ::gobgpapi::Family_Afi Family::afi() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Family.afi)
  return _internal_afi();
}
inline void Family::_internal_set_afi(::gobgpapi::Family_Afi value) {
  
  afi_ = value;
}
inline void Family::set_afi(::gobgpapi::Family_Afi value) {
  _internal_set_afi(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Family.afi)
}

// .gobgpapi.Family.Safi safi = 2;
inline void Family::clear_safi() {
  safi_ = 0;
}
inline ::gobgpapi::Family_Safi Family::_internal_safi() const {
  return static_cast< ::gobgpapi::Family_Safi >(safi_);
}
inline ::gobgpapi::Family_Safi Family::safi() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Family.safi)
  return _internal_safi();
}
inline void Family::_internal_set_safi(::gobgpapi::Family_Safi value) {
  
  safi_ = value;
}
inline void Family::set_safi(::gobgpapi::Family_Safi value) {
  _internal_set_safi(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Family.safi)
}

// -------------------------------------------------------------------

// Validation

// .gobgpapi.Validation.State state = 1;
inline void Validation::clear_state() {
  state_ = 0;
}
inline ::gobgpapi::Validation_State Validation::_internal_state() const {
  return static_cast< ::gobgpapi::Validation_State >(state_);
}
inline ::gobgpapi::Validation_State Validation::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Validation.state)
  return _internal_state();
}
inline void Validation::_internal_set_state(::gobgpapi::Validation_State value) {
  
  state_ = value;
}
inline void Validation::set_state(::gobgpapi::Validation_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Validation.state)
}

// .gobgpapi.Validation.Reason reason = 2;
inline void Validation::clear_reason() {
  reason_ = 0;
}
inline ::gobgpapi::Validation_Reason Validation::_internal_reason() const {
  return static_cast< ::gobgpapi::Validation_Reason >(reason_);
}
inline ::gobgpapi::Validation_Reason Validation::reason() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Validation.reason)
  return _internal_reason();
}
inline void Validation::_internal_set_reason(::gobgpapi::Validation_Reason value) {
  
  reason_ = value;
}
inline void Validation::set_reason(::gobgpapi::Validation_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Validation.reason)
}

// repeated .gobgpapi.Roa matched = 3;
inline int Validation::_internal_matched_size() const {
  return matched_.size();
}
inline int Validation::matched_size() const {
  return _internal_matched_size();
}
inline void Validation::clear_matched() {
  matched_.Clear();
}
inline ::gobgpapi::Roa* Validation::mutable_matched(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Validation.matched)
  return matched_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >*
Validation::mutable_matched() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Validation.matched)
  return &matched_;
}
inline const ::gobgpapi::Roa& Validation::_internal_matched(int index) const {
  return matched_.Get(index);
}
inline const ::gobgpapi::Roa& Validation::matched(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Validation.matched)
  return _internal_matched(index);
}
inline ::gobgpapi::Roa* Validation::_internal_add_matched() {
  return matched_.Add();
}
inline ::gobgpapi::Roa* Validation::add_matched() {
  // @@protoc_insertion_point(field_add:gobgpapi.Validation.matched)
  return _internal_add_matched();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >&
Validation::matched() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Validation.matched)
  return matched_;
}

// repeated .gobgpapi.Roa unmatched_as = 4;
inline int Validation::_internal_unmatched_as_size() const {
  return unmatched_as_.size();
}
inline int Validation::unmatched_as_size() const {
  return _internal_unmatched_as_size();
}
inline void Validation::clear_unmatched_as() {
  unmatched_as_.Clear();
}
inline ::gobgpapi::Roa* Validation::mutable_unmatched_as(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Validation.unmatched_as)
  return unmatched_as_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >*
Validation::mutable_unmatched_as() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Validation.unmatched_as)
  return &unmatched_as_;
}
inline const ::gobgpapi::Roa& Validation::_internal_unmatched_as(int index) const {
  return unmatched_as_.Get(index);
}
inline const ::gobgpapi::Roa& Validation::unmatched_as(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Validation.unmatched_as)
  return _internal_unmatched_as(index);
}
inline ::gobgpapi::Roa* Validation::_internal_add_unmatched_as() {
  return unmatched_as_.Add();
}
inline ::gobgpapi::Roa* Validation::add_unmatched_as() {
  // @@protoc_insertion_point(field_add:gobgpapi.Validation.unmatched_as)
  return _internal_add_unmatched_as();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >&
Validation::unmatched_as() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Validation.unmatched_as)
  return unmatched_as_;
}

// repeated .gobgpapi.Roa unmatched_length = 5;
inline int Validation::_internal_unmatched_length_size() const {
  return unmatched_length_.size();
}
inline int Validation::unmatched_length_size() const {
  return _internal_unmatched_length_size();
}
inline void Validation::clear_unmatched_length() {
  unmatched_length_.Clear();
}
inline ::gobgpapi::Roa* Validation::mutable_unmatched_length(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Validation.unmatched_length)
  return unmatched_length_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >*
Validation::mutable_unmatched_length() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Validation.unmatched_length)
  return &unmatched_length_;
}
inline const ::gobgpapi::Roa& Validation::_internal_unmatched_length(int index) const {
  return unmatched_length_.Get(index);
}
inline const ::gobgpapi::Roa& Validation::unmatched_length(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Validation.unmatched_length)
  return _internal_unmatched_length(index);
}
inline ::gobgpapi::Roa* Validation::_internal_add_unmatched_length() {
  return unmatched_length_.Add();
}
inline ::gobgpapi::Roa* Validation::add_unmatched_length() {
  // @@protoc_insertion_point(field_add:gobgpapi.Validation.unmatched_length)
  return _internal_add_unmatched_length();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Roa >&
Validation::unmatched_length() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Validation.unmatched_length)
  return unmatched_length_;
}

// -------------------------------------------------------------------

// Path

// .google.protobuf.Any nlri = 1;
inline bool Path::_internal_has_nlri() const {
  return this != internal_default_instance() && nlri_ != nullptr;
}
inline bool Path::has_nlri() const {
  return _internal_has_nlri();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Path::_internal_nlri() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = nlri_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Path::nlri() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.nlri)
  return _internal_nlri();
}
inline PROTOBUF_NAMESPACE_ID::Any* Path::release_nlri() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.nlri)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = nlri_;
  nlri_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Path::_internal_mutable_nlri() {
  
  if (nlri_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    nlri_ = p;
  }
  return nlri_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Path::mutable_nlri() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.nlri)
  return _internal_mutable_nlri();
}
inline void Path::set_allocated_nlri(PROTOBUF_NAMESPACE_ID::Any* nlri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlri_);
  }
  if (nlri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nlri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nlri, submessage_arena);
    }
    
  } else {
    
  }
  nlri_ = nlri;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.nlri)
}

// repeated .google.protobuf.Any pattrs = 2;
inline int Path::_internal_pattrs_size() const {
  return pattrs_.size();
}
inline int Path::pattrs_size() const {
  return _internal_pattrs_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* Path::mutable_pattrs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.pattrs)
  return pattrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
Path::mutable_pattrs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Path.pattrs)
  return &pattrs_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& Path::_internal_pattrs(int index) const {
  return pattrs_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Path::pattrs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.pattrs)
  return _internal_pattrs(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* Path::_internal_add_pattrs() {
  return pattrs_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* Path::add_pattrs() {
  // @@protoc_insertion_point(field_add:gobgpapi.Path.pattrs)
  return _internal_add_pattrs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
Path::pattrs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Path.pattrs)
  return pattrs_;
}

// .google.protobuf.Timestamp age = 3;
inline bool Path::_internal_has_age() const {
  return this != internal_default_instance() && age_ != nullptr;
}
inline bool Path::has_age() const {
  return _internal_has_age();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Path::_internal_age() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = age_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Path::age() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.age)
  return _internal_age();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Path::release_age() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.age)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = age_;
  age_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Path::_internal_mutable_age() {
  
  if (age_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    age_ = p;
  }
  return age_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Path::mutable_age() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.age)
  return _internal_mutable_age();
}
inline void Path::set_allocated_age(PROTOBUF_NAMESPACE_ID::Timestamp* age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(age_);
  }
  if (age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(age)->GetArena();
    if (message_arena != submessage_arena) {
      age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, age, submessage_arena);
    }
    
  } else {
    
  }
  age_ = age;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.age)
}

// bool best = 4;
inline void Path::clear_best() {
  best_ = false;
}
inline bool Path::_internal_best() const {
  return best_;
}
inline bool Path::best() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.best)
  return _internal_best();
}
inline void Path::_internal_set_best(bool value) {
  
  best_ = value;
}
inline void Path::set_best(bool value) {
  _internal_set_best(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.best)
}

// bool is_withdraw = 5;
inline void Path::clear_is_withdraw() {
  is_withdraw_ = false;
}
inline bool Path::_internal_is_withdraw() const {
  return is_withdraw_;
}
inline bool Path::is_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_withdraw)
  return _internal_is_withdraw();
}
inline void Path::_internal_set_is_withdraw(bool value) {
  
  is_withdraw_ = value;
}
inline void Path::set_is_withdraw(bool value) {
  _internal_set_is_withdraw(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_withdraw)
}

// .gobgpapi.Validation validation = 7;
inline bool Path::_internal_has_validation() const {
  return this != internal_default_instance() && validation_ != nullptr;
}
inline bool Path::has_validation() const {
  return _internal_has_validation();
}
inline void Path::clear_validation() {
  if (GetArenaNoVirtual() == nullptr && validation_ != nullptr) {
    delete validation_;
  }
  validation_ = nullptr;
}
inline const ::gobgpapi::Validation& Path::_internal_validation() const {
  const ::gobgpapi::Validation* p = validation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Validation*>(
      &::gobgpapi::_Validation_default_instance_);
}
inline const ::gobgpapi::Validation& Path::validation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.validation)
  return _internal_validation();
}
inline ::gobgpapi::Validation* Path::release_validation() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.validation)
  
  ::gobgpapi::Validation* temp = validation_;
  validation_ = nullptr;
  return temp;
}
inline ::gobgpapi::Validation* Path::_internal_mutable_validation() {
  
  if (validation_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Validation>(GetArenaNoVirtual());
    validation_ = p;
  }
  return validation_;
}
inline ::gobgpapi::Validation* Path::mutable_validation() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.validation)
  return _internal_mutable_validation();
}
inline void Path::set_allocated_validation(::gobgpapi::Validation* validation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete validation_;
  }
  if (validation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      validation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validation, submessage_arena);
    }
    
  } else {
    
  }
  validation_ = validation;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.validation)
}

// bool no_implicit_withdraw = 8;
inline void Path::clear_no_implicit_withdraw() {
  no_implicit_withdraw_ = false;
}
inline bool Path::_internal_no_implicit_withdraw() const {
  return no_implicit_withdraw_;
}
inline bool Path::no_implicit_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.no_implicit_withdraw)
  return _internal_no_implicit_withdraw();
}
inline void Path::_internal_set_no_implicit_withdraw(bool value) {
  
  no_implicit_withdraw_ = value;
}
inline void Path::set_no_implicit_withdraw(bool value) {
  _internal_set_no_implicit_withdraw(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.no_implicit_withdraw)
}

// .gobgpapi.Family family = 9;
inline bool Path::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool Path::has_family() const {
  return _internal_has_family();
}
inline void Path::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& Path::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& Path::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.family)
  return _internal_family();
}
inline ::gobgpapi::Family* Path::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* Path::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* Path::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.family)
  return _internal_mutable_family();
}
inline void Path::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.family)
}

// uint32 source_asn = 10;
inline void Path::clear_source_asn() {
  source_asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::_internal_source_asn() const {
  return source_asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::source_asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_asn)
  return _internal_source_asn();
}
inline void Path::_internal_set_source_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  source_asn_ = value;
}
inline void Path::set_source_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source_asn(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_asn)
}

// string source_id = 11;
inline void Path::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Path::source_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_id)
  return _internal_source_id();
}
inline void Path::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_id)
}
inline std::string* Path::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& Path::_internal_source_id() const {
  return source_id_.GetNoArena();
}
inline void Path::_internal_set_source_id(const std::string& value) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Path::set_source_id(std::string&& value) {
  
  source_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.source_id)
}
inline void Path::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.source_id)
}
inline void Path::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.source_id)
}
inline std::string* Path::_internal_mutable_source_id() {
  
  return source_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Path::release_source_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.source_id)
  
  return source_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.source_id)
}

// bool filtered = 12;
inline void Path::clear_filtered() {
  filtered_ = false;
}
inline bool Path::_internal_filtered() const {
  return filtered_;
}
inline bool Path::filtered() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.filtered)
  return _internal_filtered();
}
inline void Path::_internal_set_filtered(bool value) {
  
  filtered_ = value;
}
inline void Path::set_filtered(bool value) {
  _internal_set_filtered(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.filtered)
}

// bool stale = 13;
inline void Path::clear_stale() {
  stale_ = false;
}
inline bool Path::_internal_stale() const {
  return stale_;
}
inline bool Path::stale() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.stale)
  return _internal_stale();
}
inline void Path::_internal_set_stale(bool value) {
  
  stale_ = value;
}
inline void Path::set_stale(bool value) {
  _internal_set_stale(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.stale)
}

// bool is_from_external = 14;
inline void Path::clear_is_from_external() {
  is_from_external_ = false;
}
inline bool Path::_internal_is_from_external() const {
  return is_from_external_;
}
inline bool Path::is_from_external() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_from_external)
  return _internal_is_from_external();
}
inline void Path::_internal_set_is_from_external(bool value) {
  
  is_from_external_ = value;
}
inline void Path::set_is_from_external(bool value) {
  _internal_set_is_from_external(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_from_external)
}

// string neighbor_ip = 15;
inline void Path::clear_neighbor_ip() {
  neighbor_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Path::neighbor_ip() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.neighbor_ip)
  return _internal_neighbor_ip();
}
inline void Path::set_neighbor_ip(const std::string& value) {
  _internal_set_neighbor_ip(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.neighbor_ip)
}
inline std::string* Path::mutable_neighbor_ip() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.neighbor_ip)
  return _internal_mutable_neighbor_ip();
}
inline const std::string& Path::_internal_neighbor_ip() const {
  return neighbor_ip_.GetNoArena();
}
inline void Path::_internal_set_neighbor_ip(const std::string& value) {
  
  neighbor_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Path::set_neighbor_ip(std::string&& value) {
  
  neighbor_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.neighbor_ip)
}
inline void Path::set_neighbor_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.neighbor_ip)
}
inline void Path::set_neighbor_ip(const char* value, size_t size) {
  
  neighbor_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.neighbor_ip)
}
inline std::string* Path::_internal_mutable_neighbor_ip() {
  
  return neighbor_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Path::release_neighbor_ip() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.neighbor_ip)
  
  return neighbor_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_neighbor_ip(std::string* neighbor_ip) {
  if (neighbor_ip != nullptr) {
    
  } else {
    
  }
  neighbor_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_ip);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.neighbor_ip)
}

// bytes uuid = 16;
inline void Path::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Path::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.uuid)
  return _internal_uuid();
}
inline void Path::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.uuid)
}
inline std::string* Path::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Path::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Path::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Path::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.uuid)
}
inline void Path::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.uuid)
}
inline void Path::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.uuid)
}
inline std::string* Path::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Path::release_uuid() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.uuid)
}

// bool is_nexthop_invalid = 17;
inline void Path::clear_is_nexthop_invalid() {
  is_nexthop_invalid_ = false;
}
inline bool Path::_internal_is_nexthop_invalid() const {
  return is_nexthop_invalid_;
}
inline bool Path::is_nexthop_invalid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_nexthop_invalid)
  return _internal_is_nexthop_invalid();
}
inline void Path::_internal_set_is_nexthop_invalid(bool value) {
  
  is_nexthop_invalid_ = value;
}
inline void Path::set_is_nexthop_invalid(bool value) {
  _internal_set_is_nexthop_invalid(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_nexthop_invalid)
}

// uint32 identifier = 18;
inline void Path::clear_identifier() {
  identifier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::_internal_identifier() const {
  return identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::identifier() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.identifier)
  return _internal_identifier();
}
inline void Path::_internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  identifier_ = value;
}
inline void Path::set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.identifier)
}

// uint32 local_identifier = 19;
inline void Path::clear_local_identifier() {
  local_identifier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::_internal_local_identifier() const {
  return local_identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Path::local_identifier() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.local_identifier)
  return _internal_local_identifier();
}
inline void Path::_internal_set_local_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_identifier_ = value;
}
inline void Path::set_local_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_identifier(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.local_identifier)
}

// bytes nlri_binary = 20;
inline void Path::clear_nlri_binary() {
  nlri_binary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Path::nlri_binary() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.nlri_binary)
  return _internal_nlri_binary();
}
inline void Path::set_nlri_binary(const std::string& value) {
  _internal_set_nlri_binary(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.nlri_binary)
}
inline std::string* Path::mutable_nlri_binary() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.nlri_binary)
  return _internal_mutable_nlri_binary();
}
inline const std::string& Path::_internal_nlri_binary() const {
  return nlri_binary_.GetNoArena();
}
inline void Path::_internal_set_nlri_binary(const std::string& value) {
  
  nlri_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Path::set_nlri_binary(std::string&& value) {
  
  nlri_binary_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Path.nlri_binary)
}
inline void Path::set_nlri_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nlri_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.nlri_binary)
}
inline void Path::set_nlri_binary(const void* value, size_t size) {
  
  nlri_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.nlri_binary)
}
inline std::string* Path::_internal_mutable_nlri_binary() {
  
  return nlri_binary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Path::release_nlri_binary() {
  // @@protoc_insertion_point(field_release:gobgpapi.Path.nlri_binary)
  
  return nlri_binary_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_nlri_binary(std::string* nlri_binary) {
  if (nlri_binary != nullptr) {
    
  } else {
    
  }
  nlri_binary_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nlri_binary);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.nlri_binary)
}

// repeated bytes pattrs_binary = 21;
inline int Path::_internal_pattrs_binary_size() const {
  return pattrs_binary_.size();
}
inline int Path::pattrs_binary_size() const {
  return _internal_pattrs_binary_size();
}
inline void Path::clear_pattrs_binary() {
  pattrs_binary_.Clear();
}
inline std::string* Path::add_pattrs_binary() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.Path.pattrs_binary)
  return _internal_add_pattrs_binary();
}
inline const std::string& Path::_internal_pattrs_binary(int index) const {
  return pattrs_binary_.Get(index);
}
inline const std::string& Path::pattrs_binary(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.pattrs_binary)
  return _internal_pattrs_binary(index);
}
inline std::string* Path::mutable_pattrs_binary(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.pattrs_binary)
  return pattrs_binary_.Mutable(index);
}
inline void Path::set_pattrs_binary(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Path.pattrs_binary)
  pattrs_binary_.Mutable(index)->assign(value);
}
inline void Path::set_pattrs_binary(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Path.pattrs_binary)
  pattrs_binary_.Mutable(index)->assign(std::move(value));
}
inline void Path::set_pattrs_binary(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pattrs_binary_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.pattrs_binary)
}
inline void Path::set_pattrs_binary(int index, const void* value, size_t size) {
  pattrs_binary_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.pattrs_binary)
}
inline std::string* Path::_internal_add_pattrs_binary() {
  return pattrs_binary_.Add();
}
inline void Path::add_pattrs_binary(const std::string& value) {
  pattrs_binary_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Path.pattrs_binary)
}
inline void Path::add_pattrs_binary(std::string&& value) {
  pattrs_binary_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.Path.pattrs_binary)
}
inline void Path::add_pattrs_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pattrs_binary_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Path.pattrs_binary)
}
inline void Path::add_pattrs_binary(const void* value, size_t size) {
  pattrs_binary_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Path.pattrs_binary)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Path::pattrs_binary() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Path.pattrs_binary)
  return pattrs_binary_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Path::mutable_pattrs_binary() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Path.pattrs_binary)
  return &pattrs_binary_;
}

// -------------------------------------------------------------------

// Destination

// string prefix = 1;
inline void Destination::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Destination::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.prefix)
  return _internal_prefix();
}
inline void Destination::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.prefix)
}
inline std::string* Destination::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& Destination::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void Destination::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Destination::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Destination.prefix)
}
inline void Destination::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Destination.prefix)
}
inline void Destination::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Destination.prefix)
}
inline std::string* Destination::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Destination::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.Destination.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Destination.prefix)
}

// repeated .gobgpapi.Path paths = 2;
inline int Destination::_internal_paths_size() const {
  return paths_.size();
}
inline int Destination::paths_size() const {
  return _internal_paths_size();
}
inline void Destination::clear_paths() {
  paths_.Clear();
}
inline ::gobgpapi::Path* Destination::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >*
Destination::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Destination.paths)
  return &paths_;
}
inline const ::gobgpapi::Path& Destination::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::gobgpapi::Path& Destination::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.paths)
  return _internal_paths(index);
}
inline ::gobgpapi::Path* Destination::_internal_add_paths() {
  return paths_.Add();
}
inline ::gobgpapi::Path* Destination::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.Destination.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Path >&
Destination::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Destination.paths)
  return paths_;
}

// -------------------------------------------------------------------

// TableLookupPrefix

// string prefix = 1;
inline void TableLookupPrefix::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TableLookupPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableLookupPrefix.prefix)
  return _internal_prefix();
}
inline void TableLookupPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TableLookupPrefix.prefix)
}
inline std::string* TableLookupPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.TableLookupPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& TableLookupPrefix::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void TableLookupPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TableLookupPrefix::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.TableLookupPrefix.prefix)
}
inline void TableLookupPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.TableLookupPrefix.prefix)
}
inline void TableLookupPrefix::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.TableLookupPrefix.prefix)
}
inline std::string* TableLookupPrefix::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TableLookupPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.TableLookupPrefix.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TableLookupPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.TableLookupPrefix.prefix)
}

// .gobgpapi.TableLookupOption lookup_option = 2;
inline void TableLookupPrefix::clear_lookup_option() {
  lookup_option_ = 0;
}
inline ::gobgpapi::TableLookupOption TableLookupPrefix::_internal_lookup_option() const {
  return static_cast< ::gobgpapi::TableLookupOption >(lookup_option_);
}
inline ::gobgpapi::TableLookupOption TableLookupPrefix::lookup_option() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TableLookupPrefix.lookup_option)
  return _internal_lookup_option();
}
inline void TableLookupPrefix::_internal_set_lookup_option(::gobgpapi::TableLookupOption value) {
  
  lookup_option_ = value;
}
inline void TableLookupPrefix::set_lookup_option(::gobgpapi::TableLookupOption value) {
  _internal_set_lookup_option(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TableLookupPrefix.lookup_option)
}

// -------------------------------------------------------------------

// Peer

// .gobgpapi.ApplyPolicy apply_policy = 1;
inline bool Peer::_internal_has_apply_policy() const {
  return this != internal_default_instance() && apply_policy_ != nullptr;
}
inline bool Peer::has_apply_policy() const {
  return _internal_has_apply_policy();
}
inline void Peer::clear_apply_policy() {
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
}
inline const ::gobgpapi::ApplyPolicy& Peer::_internal_apply_policy() const {
  const ::gobgpapi::ApplyPolicy* p = apply_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::ApplyPolicy*>(
      &::gobgpapi::_ApplyPolicy_default_instance_);
}
inline const ::gobgpapi::ApplyPolicy& Peer::apply_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.apply_policy)
  return _internal_apply_policy();
}
inline ::gobgpapi::ApplyPolicy* Peer::release_apply_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.apply_policy)
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::ApplyPolicy* Peer::_internal_mutable_apply_policy() {
  
  if (apply_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::ApplyPolicy>(GetArenaNoVirtual());
    apply_policy_ = p;
  }
  return apply_policy_;
}
inline ::gobgpapi::ApplyPolicy* Peer::mutable_apply_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.apply_policy)
  return _internal_mutable_apply_policy();
}
inline void Peer::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apply_policy_;
  }
  if (apply_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apply_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_policy, submessage_arena);
    }
    
  } else {
    
  }
  apply_policy_ = apply_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.apply_policy)
}

// .gobgpapi.PeerConf conf = 2;
inline bool Peer::_internal_has_conf() const {
  return this != internal_default_instance() && conf_ != nullptr;
}
inline bool Peer::has_conf() const {
  return _internal_has_conf();
}
inline void Peer::clear_conf() {
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
}
inline const ::gobgpapi::PeerConf& Peer::_internal_conf() const {
  const ::gobgpapi::PeerConf* p = conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PeerConf*>(
      &::gobgpapi::_PeerConf_default_instance_);
}
inline const ::gobgpapi::PeerConf& Peer::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.conf)
  return _internal_conf();
}
inline ::gobgpapi::PeerConf* Peer::release_conf() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.conf)
  
  ::gobgpapi::PeerConf* temp = conf_;
  conf_ = nullptr;
  return temp;
}
inline ::gobgpapi::PeerConf* Peer::_internal_mutable_conf() {
  
  if (conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PeerConf>(GetArenaNoVirtual());
    conf_ = p;
  }
  return conf_;
}
inline ::gobgpapi::PeerConf* Peer::mutable_conf() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.conf)
  return _internal_mutable_conf();
}
inline void Peer::set_allocated_conf(::gobgpapi::PeerConf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.conf)
}

// .gobgpapi.EbgpMultihop ebgp_multihop = 3;
inline bool Peer::_internal_has_ebgp_multihop() const {
  return this != internal_default_instance() && ebgp_multihop_ != nullptr;
}
inline bool Peer::has_ebgp_multihop() const {
  return _internal_has_ebgp_multihop();
}
inline void Peer::clear_ebgp_multihop() {
  if (GetArenaNoVirtual() == nullptr && ebgp_multihop_ != nullptr) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = nullptr;
}
inline const ::gobgpapi::EbgpMultihop& Peer::_internal_ebgp_multihop() const {
  const ::gobgpapi::EbgpMultihop* p = ebgp_multihop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EbgpMultihop*>(
      &::gobgpapi::_EbgpMultihop_default_instance_);
}
inline const ::gobgpapi::EbgpMultihop& Peer::ebgp_multihop() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.ebgp_multihop)
  return _internal_ebgp_multihop();
}
inline ::gobgpapi::EbgpMultihop* Peer::release_ebgp_multihop() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.ebgp_multihop)
  
  ::gobgpapi::EbgpMultihop* temp = ebgp_multihop_;
  ebgp_multihop_ = nullptr;
  return temp;
}
inline ::gobgpapi::EbgpMultihop* Peer::_internal_mutable_ebgp_multihop() {
  
  if (ebgp_multihop_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EbgpMultihop>(GetArenaNoVirtual());
    ebgp_multihop_ = p;
  }
  return ebgp_multihop_;
}
inline ::gobgpapi::EbgpMultihop* Peer::mutable_ebgp_multihop() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.ebgp_multihop)
  return _internal_mutable_ebgp_multihop();
}
inline void Peer::set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ebgp_multihop_;
  }
  if (ebgp_multihop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ebgp_multihop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ebgp_multihop, submessage_arena);
    }
    
  } else {
    
  }
  ebgp_multihop_ = ebgp_multihop;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.ebgp_multihop)
}

// .gobgpapi.RouteReflector route_reflector = 4;
inline bool Peer::_internal_has_route_reflector() const {
  return this != internal_default_instance() && route_reflector_ != nullptr;
}
inline bool Peer::has_route_reflector() const {
  return _internal_has_route_reflector();
}
inline void Peer::clear_route_reflector() {
  if (GetArenaNoVirtual() == nullptr && route_reflector_ != nullptr) {
    delete route_reflector_;
  }
  route_reflector_ = nullptr;
}
inline const ::gobgpapi::RouteReflector& Peer::_internal_route_reflector() const {
  const ::gobgpapi::RouteReflector* p = route_reflector_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteReflector*>(
      &::gobgpapi::_RouteReflector_default_instance_);
}
inline const ::gobgpapi::RouteReflector& Peer::route_reflector() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_reflector)
  return _internal_route_reflector();
}
inline ::gobgpapi::RouteReflector* Peer::release_route_reflector() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.route_reflector)
  
  ::gobgpapi::RouteReflector* temp = route_reflector_;
  route_reflector_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteReflector* Peer::_internal_mutable_route_reflector() {
  
  if (route_reflector_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteReflector>(GetArenaNoVirtual());
    route_reflector_ = p;
  }
  return route_reflector_;
}
inline ::gobgpapi::RouteReflector* Peer::mutable_route_reflector() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_reflector)
  return _internal_mutable_route_reflector();
}
inline void Peer::set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_reflector_;
  }
  if (route_reflector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_reflector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_reflector, submessage_arena);
    }
    
  } else {
    
  }
  route_reflector_ = route_reflector;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_reflector)
}

// .gobgpapi.PeerState state = 5;
inline bool Peer::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Peer::has_state() const {
  return _internal_has_state();
}
inline void Peer::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::PeerState& Peer::_internal_state() const {
  const ::gobgpapi::PeerState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PeerState*>(
      &::gobgpapi::_PeerState_default_instance_);
}
inline const ::gobgpapi::PeerState& Peer::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.state)
  return _internal_state();
}
inline ::gobgpapi::PeerState* Peer::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.state)
  
  ::gobgpapi::PeerState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::PeerState* Peer::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PeerState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::PeerState* Peer::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.state)
  return _internal_mutable_state();
}
inline void Peer::set_allocated_state(::gobgpapi::PeerState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.state)
}

// .gobgpapi.Timers timers = 6;
inline bool Peer::_internal_has_timers() const {
  return this != internal_default_instance() && timers_ != nullptr;
}
inline bool Peer::has_timers() const {
  return _internal_has_timers();
}
inline void Peer::clear_timers() {
  if (GetArenaNoVirtual() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
}
inline const ::gobgpapi::Timers& Peer::_internal_timers() const {
  const ::gobgpapi::Timers* p = timers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Timers*>(
      &::gobgpapi::_Timers_default_instance_);
}
inline const ::gobgpapi::Timers& Peer::timers() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.timers)
  return _internal_timers();
}
inline ::gobgpapi::Timers* Peer::release_timers() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.timers)
  
  ::gobgpapi::Timers* temp = timers_;
  timers_ = nullptr;
  return temp;
}
inline ::gobgpapi::Timers* Peer::_internal_mutable_timers() {
  
  if (timers_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Timers>(GetArenaNoVirtual());
    timers_ = p;
  }
  return timers_;
}
inline ::gobgpapi::Timers* Peer::mutable_timers() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.timers)
  return _internal_mutable_timers();
}
inline void Peer::set_allocated_timers(::gobgpapi::Timers* timers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timers_;
  }
  if (timers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timers, submessage_arena);
    }
    
  } else {
    
  }
  timers_ = timers;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.timers)
}

// .gobgpapi.Transport transport = 7;
inline bool Peer::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool Peer::has_transport() const {
  return _internal_has_transport();
}
inline void Peer::clear_transport() {
  if (GetArenaNoVirtual() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
inline const ::gobgpapi::Transport& Peer::_internal_transport() const {
  const ::gobgpapi::Transport* p = transport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Transport*>(
      &::gobgpapi::_Transport_default_instance_);
}
inline const ::gobgpapi::Transport& Peer::transport() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.transport)
  return _internal_transport();
}
inline ::gobgpapi::Transport* Peer::release_transport() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.transport)
  
  ::gobgpapi::Transport* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::gobgpapi::Transport* Peer::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Transport>(GetArenaNoVirtual());
    transport_ = p;
  }
  return transport_;
}
inline ::gobgpapi::Transport* Peer::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.transport)
  return _internal_mutable_transport();
}
inline void Peer::set_allocated_transport(::gobgpapi::Transport* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.transport)
}

// .gobgpapi.RouteServer route_server = 8;
inline bool Peer::_internal_has_route_server() const {
  return this != internal_default_instance() && route_server_ != nullptr;
}
inline bool Peer::has_route_server() const {
  return _internal_has_route_server();
}
inline void Peer::clear_route_server() {
  if (GetArenaNoVirtual() == nullptr && route_server_ != nullptr) {
    delete route_server_;
  }
  route_server_ = nullptr;
}
inline const ::gobgpapi::RouteServer& Peer::_internal_route_server() const {
  const ::gobgpapi::RouteServer* p = route_server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteServer*>(
      &::gobgpapi::_RouteServer_default_instance_);
}
inline const ::gobgpapi::RouteServer& Peer::route_server() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_server)
  return _internal_route_server();
}
inline ::gobgpapi::RouteServer* Peer::release_route_server() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.route_server)
  
  ::gobgpapi::RouteServer* temp = route_server_;
  route_server_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteServer* Peer::_internal_mutable_route_server() {
  
  if (route_server_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteServer>(GetArenaNoVirtual());
    route_server_ = p;
  }
  return route_server_;
}
inline ::gobgpapi::RouteServer* Peer::mutable_route_server() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_server)
  return _internal_mutable_route_server();
}
inline void Peer::set_allocated_route_server(::gobgpapi::RouteServer* route_server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_server_;
  }
  if (route_server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_server, submessage_arena);
    }
    
  } else {
    
  }
  route_server_ = route_server;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_server)
}

// .gobgpapi.GracefulRestart graceful_restart = 9;
inline bool Peer::_internal_has_graceful_restart() const {
  return this != internal_default_instance() && graceful_restart_ != nullptr;
}
inline bool Peer::has_graceful_restart() const {
  return _internal_has_graceful_restart();
}
inline void Peer::clear_graceful_restart() {
  if (GetArenaNoVirtual() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
}
inline const ::gobgpapi::GracefulRestart& Peer::_internal_graceful_restart() const {
  const ::gobgpapi::GracefulRestart* p = graceful_restart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::GracefulRestart*>(
      &::gobgpapi::_GracefulRestart_default_instance_);
}
inline const ::gobgpapi::GracefulRestart& Peer::graceful_restart() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.graceful_restart)
  return _internal_graceful_restart();
}
inline ::gobgpapi::GracefulRestart* Peer::release_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.Peer.graceful_restart)
  
  ::gobgpapi::GracefulRestart* temp = graceful_restart_;
  graceful_restart_ = nullptr;
  return temp;
}
inline ::gobgpapi::GracefulRestart* Peer::_internal_mutable_graceful_restart() {
  
  if (graceful_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::GracefulRestart>(GetArenaNoVirtual());
    graceful_restart_ = p;
  }
  return graceful_restart_;
}
inline ::gobgpapi::GracefulRestart* Peer::mutable_graceful_restart() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.graceful_restart)
  return _internal_mutable_graceful_restart();
}
inline void Peer::set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete graceful_restart_;
  }
  if (graceful_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graceful_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  graceful_restart_ = graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.graceful_restart)
}

// repeated .gobgpapi.AfiSafi afi_safis = 10;
inline int Peer::_internal_afi_safis_size() const {
  return afi_safis_.size();
}
inline int Peer::afi_safis_size() const {
  return _internal_afi_safis_size();
}
inline void Peer::clear_afi_safis() {
  afi_safis_.Clear();
}
inline ::gobgpapi::AfiSafi* Peer::mutable_afi_safis(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.afi_safis)
  return afi_safis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >*
Peer::mutable_afi_safis() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Peer.afi_safis)
  return &afi_safis_;
}
inline const ::gobgpapi::AfiSafi& Peer::_internal_afi_safis(int index) const {
  return afi_safis_.Get(index);
}
inline const ::gobgpapi::AfiSafi& Peer::afi_safis(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.afi_safis)
  return _internal_afi_safis(index);
}
inline ::gobgpapi::AfiSafi* Peer::_internal_add_afi_safis() {
  return afi_safis_.Add();
}
inline ::gobgpapi::AfiSafi* Peer::add_afi_safis() {
  // @@protoc_insertion_point(field_add:gobgpapi.Peer.afi_safis)
  return _internal_add_afi_safis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >&
Peer::afi_safis() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Peer.afi_safis)
  return afi_safis_;
}

// -------------------------------------------------------------------

// PeerGroup

// .gobgpapi.ApplyPolicy apply_policy = 1;
inline bool PeerGroup::_internal_has_apply_policy() const {
  return this != internal_default_instance() && apply_policy_ != nullptr;
}
inline bool PeerGroup::has_apply_policy() const {
  return _internal_has_apply_policy();
}
inline void PeerGroup::clear_apply_policy() {
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
}
inline const ::gobgpapi::ApplyPolicy& PeerGroup::_internal_apply_policy() const {
  const ::gobgpapi::ApplyPolicy* p = apply_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::ApplyPolicy*>(
      &::gobgpapi::_ApplyPolicy_default_instance_);
}
inline const ::gobgpapi::ApplyPolicy& PeerGroup::apply_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.apply_policy)
  return _internal_apply_policy();
}
inline ::gobgpapi::ApplyPolicy* PeerGroup::release_apply_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.apply_policy)
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::ApplyPolicy* PeerGroup::_internal_mutable_apply_policy() {
  
  if (apply_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::ApplyPolicy>(GetArenaNoVirtual());
    apply_policy_ = p;
  }
  return apply_policy_;
}
inline ::gobgpapi::ApplyPolicy* PeerGroup::mutable_apply_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.apply_policy)
  return _internal_mutable_apply_policy();
}
inline void PeerGroup::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apply_policy_;
  }
  if (apply_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apply_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_policy, submessage_arena);
    }
    
  } else {
    
  }
  apply_policy_ = apply_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.apply_policy)
}

// .gobgpapi.PeerGroupConf conf = 2;
inline bool PeerGroup::_internal_has_conf() const {
  return this != internal_default_instance() && conf_ != nullptr;
}
inline bool PeerGroup::has_conf() const {
  return _internal_has_conf();
}
inline void PeerGroup::clear_conf() {
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
}
inline const ::gobgpapi::PeerGroupConf& PeerGroup::_internal_conf() const {
  const ::gobgpapi::PeerGroupConf* p = conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PeerGroupConf*>(
      &::gobgpapi::_PeerGroupConf_default_instance_);
}
inline const ::gobgpapi::PeerGroupConf& PeerGroup::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.conf)
  return _internal_conf();
}
inline ::gobgpapi::PeerGroupConf* PeerGroup::release_conf() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.conf)
  
  ::gobgpapi::PeerGroupConf* temp = conf_;
  conf_ = nullptr;
  return temp;
}
inline ::gobgpapi::PeerGroupConf* PeerGroup::_internal_mutable_conf() {
  
  if (conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PeerGroupConf>(GetArenaNoVirtual());
    conf_ = p;
  }
  return conf_;
}
inline ::gobgpapi::PeerGroupConf* PeerGroup::mutable_conf() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.conf)
  return _internal_mutable_conf();
}
inline void PeerGroup::set_allocated_conf(::gobgpapi::PeerGroupConf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.conf)
}

// .gobgpapi.EbgpMultihop ebgp_multihop = 3;
inline bool PeerGroup::_internal_has_ebgp_multihop() const {
  return this != internal_default_instance() && ebgp_multihop_ != nullptr;
}
inline bool PeerGroup::has_ebgp_multihop() const {
  return _internal_has_ebgp_multihop();
}
inline void PeerGroup::clear_ebgp_multihop() {
  if (GetArenaNoVirtual() == nullptr && ebgp_multihop_ != nullptr) {
    delete ebgp_multihop_;
  }
  ebgp_multihop_ = nullptr;
}
inline const ::gobgpapi::EbgpMultihop& PeerGroup::_internal_ebgp_multihop() const {
  const ::gobgpapi::EbgpMultihop* p = ebgp_multihop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EbgpMultihop*>(
      &::gobgpapi::_EbgpMultihop_default_instance_);
}
inline const ::gobgpapi::EbgpMultihop& PeerGroup::ebgp_multihop() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.ebgp_multihop)
  return _internal_ebgp_multihop();
}
inline ::gobgpapi::EbgpMultihop* PeerGroup::release_ebgp_multihop() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.ebgp_multihop)
  
  ::gobgpapi::EbgpMultihop* temp = ebgp_multihop_;
  ebgp_multihop_ = nullptr;
  return temp;
}
inline ::gobgpapi::EbgpMultihop* PeerGroup::_internal_mutable_ebgp_multihop() {
  
  if (ebgp_multihop_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EbgpMultihop>(GetArenaNoVirtual());
    ebgp_multihop_ = p;
  }
  return ebgp_multihop_;
}
inline ::gobgpapi::EbgpMultihop* PeerGroup::mutable_ebgp_multihop() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.ebgp_multihop)
  return _internal_mutable_ebgp_multihop();
}
inline void PeerGroup::set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ebgp_multihop_;
  }
  if (ebgp_multihop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ebgp_multihop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ebgp_multihop, submessage_arena);
    }
    
  } else {
    
  }
  ebgp_multihop_ = ebgp_multihop;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.ebgp_multihop)
}

// .gobgpapi.RouteReflector route_reflector = 4;
inline bool PeerGroup::_internal_has_route_reflector() const {
  return this != internal_default_instance() && route_reflector_ != nullptr;
}
inline bool PeerGroup::has_route_reflector() const {
  return _internal_has_route_reflector();
}
inline void PeerGroup::clear_route_reflector() {
  if (GetArenaNoVirtual() == nullptr && route_reflector_ != nullptr) {
    delete route_reflector_;
  }
  route_reflector_ = nullptr;
}
inline const ::gobgpapi::RouteReflector& PeerGroup::_internal_route_reflector() const {
  const ::gobgpapi::RouteReflector* p = route_reflector_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteReflector*>(
      &::gobgpapi::_RouteReflector_default_instance_);
}
inline const ::gobgpapi::RouteReflector& PeerGroup::route_reflector() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.route_reflector)
  return _internal_route_reflector();
}
inline ::gobgpapi::RouteReflector* PeerGroup::release_route_reflector() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.route_reflector)
  
  ::gobgpapi::RouteReflector* temp = route_reflector_;
  route_reflector_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteReflector* PeerGroup::_internal_mutable_route_reflector() {
  
  if (route_reflector_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteReflector>(GetArenaNoVirtual());
    route_reflector_ = p;
  }
  return route_reflector_;
}
inline ::gobgpapi::RouteReflector* PeerGroup::mutable_route_reflector() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.route_reflector)
  return _internal_mutable_route_reflector();
}
inline void PeerGroup::set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_reflector_;
  }
  if (route_reflector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_reflector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_reflector, submessage_arena);
    }
    
  } else {
    
  }
  route_reflector_ = route_reflector;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.route_reflector)
}

// .gobgpapi.PeerGroupState info = 5;
inline bool PeerGroup::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool PeerGroup::has_info() const {
  return _internal_has_info();
}
inline void PeerGroup::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::gobgpapi::PeerGroupState& PeerGroup::_internal_info() const {
  const ::gobgpapi::PeerGroupState* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PeerGroupState*>(
      &::gobgpapi::_PeerGroupState_default_instance_);
}
inline const ::gobgpapi::PeerGroupState& PeerGroup::info() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.info)
  return _internal_info();
}
inline ::gobgpapi::PeerGroupState* PeerGroup::release_info() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.info)
  
  ::gobgpapi::PeerGroupState* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::gobgpapi::PeerGroupState* PeerGroup::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PeerGroupState>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::gobgpapi::PeerGroupState* PeerGroup::mutable_info() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.info)
  return _internal_mutable_info();
}
inline void PeerGroup::set_allocated_info(::gobgpapi::PeerGroupState* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.info)
}

// .gobgpapi.Timers timers = 6;
inline bool PeerGroup::_internal_has_timers() const {
  return this != internal_default_instance() && timers_ != nullptr;
}
inline bool PeerGroup::has_timers() const {
  return _internal_has_timers();
}
inline void PeerGroup::clear_timers() {
  if (GetArenaNoVirtual() == nullptr && timers_ != nullptr) {
    delete timers_;
  }
  timers_ = nullptr;
}
inline const ::gobgpapi::Timers& PeerGroup::_internal_timers() const {
  const ::gobgpapi::Timers* p = timers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Timers*>(
      &::gobgpapi::_Timers_default_instance_);
}
inline const ::gobgpapi::Timers& PeerGroup::timers() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.timers)
  return _internal_timers();
}
inline ::gobgpapi::Timers* PeerGroup::release_timers() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.timers)
  
  ::gobgpapi::Timers* temp = timers_;
  timers_ = nullptr;
  return temp;
}
inline ::gobgpapi::Timers* PeerGroup::_internal_mutable_timers() {
  
  if (timers_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Timers>(GetArenaNoVirtual());
    timers_ = p;
  }
  return timers_;
}
inline ::gobgpapi::Timers* PeerGroup::mutable_timers() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.timers)
  return _internal_mutable_timers();
}
inline void PeerGroup::set_allocated_timers(::gobgpapi::Timers* timers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timers_;
  }
  if (timers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timers, submessage_arena);
    }
    
  } else {
    
  }
  timers_ = timers;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.timers)
}

// .gobgpapi.Transport transport = 7;
inline bool PeerGroup::_internal_has_transport() const {
  return this != internal_default_instance() && transport_ != nullptr;
}
inline bool PeerGroup::has_transport() const {
  return _internal_has_transport();
}
inline void PeerGroup::clear_transport() {
  if (GetArenaNoVirtual() == nullptr && transport_ != nullptr) {
    delete transport_;
  }
  transport_ = nullptr;
}
inline const ::gobgpapi::Transport& PeerGroup::_internal_transport() const {
  const ::gobgpapi::Transport* p = transport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Transport*>(
      &::gobgpapi::_Transport_default_instance_);
}
inline const ::gobgpapi::Transport& PeerGroup::transport() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.transport)
  return _internal_transport();
}
inline ::gobgpapi::Transport* PeerGroup::release_transport() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.transport)
  
  ::gobgpapi::Transport* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::gobgpapi::Transport* PeerGroup::_internal_mutable_transport() {
  
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Transport>(GetArenaNoVirtual());
    transport_ = p;
  }
  return transport_;
}
inline ::gobgpapi::Transport* PeerGroup::mutable_transport() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.transport)
  return _internal_mutable_transport();
}
inline void PeerGroup::set_allocated_transport(::gobgpapi::Transport* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transport_;
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    
  } else {
    
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.transport)
}

// .gobgpapi.RouteServer route_server = 8;
inline bool PeerGroup::_internal_has_route_server() const {
  return this != internal_default_instance() && route_server_ != nullptr;
}
inline bool PeerGroup::has_route_server() const {
  return _internal_has_route_server();
}
inline void PeerGroup::clear_route_server() {
  if (GetArenaNoVirtual() == nullptr && route_server_ != nullptr) {
    delete route_server_;
  }
  route_server_ = nullptr;
}
inline const ::gobgpapi::RouteServer& PeerGroup::_internal_route_server() const {
  const ::gobgpapi::RouteServer* p = route_server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteServer*>(
      &::gobgpapi::_RouteServer_default_instance_);
}
inline const ::gobgpapi::RouteServer& PeerGroup::route_server() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.route_server)
  return _internal_route_server();
}
inline ::gobgpapi::RouteServer* PeerGroup::release_route_server() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.route_server)
  
  ::gobgpapi::RouteServer* temp = route_server_;
  route_server_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteServer* PeerGroup::_internal_mutable_route_server() {
  
  if (route_server_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteServer>(GetArenaNoVirtual());
    route_server_ = p;
  }
  return route_server_;
}
inline ::gobgpapi::RouteServer* PeerGroup::mutable_route_server() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.route_server)
  return _internal_mutable_route_server();
}
inline void PeerGroup::set_allocated_route_server(::gobgpapi::RouteServer* route_server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_server_;
  }
  if (route_server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_server, submessage_arena);
    }
    
  } else {
    
  }
  route_server_ = route_server;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.route_server)
}

// .gobgpapi.GracefulRestart graceful_restart = 9;
inline bool PeerGroup::_internal_has_graceful_restart() const {
  return this != internal_default_instance() && graceful_restart_ != nullptr;
}
inline bool PeerGroup::has_graceful_restart() const {
  return _internal_has_graceful_restart();
}
inline void PeerGroup::clear_graceful_restart() {
  if (GetArenaNoVirtual() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
}
inline const ::gobgpapi::GracefulRestart& PeerGroup::_internal_graceful_restart() const {
  const ::gobgpapi::GracefulRestart* p = graceful_restart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::GracefulRestart*>(
      &::gobgpapi::_GracefulRestart_default_instance_);
}
inline const ::gobgpapi::GracefulRestart& PeerGroup::graceful_restart() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.graceful_restart)
  return _internal_graceful_restart();
}
inline ::gobgpapi::GracefulRestart* PeerGroup::release_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroup.graceful_restart)
  
  ::gobgpapi::GracefulRestart* temp = graceful_restart_;
  graceful_restart_ = nullptr;
  return temp;
}
inline ::gobgpapi::GracefulRestart* PeerGroup::_internal_mutable_graceful_restart() {
  
  if (graceful_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::GracefulRestart>(GetArenaNoVirtual());
    graceful_restart_ = p;
  }
  return graceful_restart_;
}
inline ::gobgpapi::GracefulRestart* PeerGroup::mutable_graceful_restart() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.graceful_restart)
  return _internal_mutable_graceful_restart();
}
inline void PeerGroup::set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete graceful_restart_;
  }
  if (graceful_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graceful_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  graceful_restart_ = graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroup.graceful_restart)
}

// repeated .gobgpapi.AfiSafi afi_safis = 10;
inline int PeerGroup::_internal_afi_safis_size() const {
  return afi_safis_.size();
}
inline int PeerGroup::afi_safis_size() const {
  return _internal_afi_safis_size();
}
inline void PeerGroup::clear_afi_safis() {
  afi_safis_.Clear();
}
inline ::gobgpapi::AfiSafi* PeerGroup::mutable_afi_safis(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroup.afi_safis)
  return afi_safis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >*
PeerGroup::mutable_afi_safis() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerGroup.afi_safis)
  return &afi_safis_;
}
inline const ::gobgpapi::AfiSafi& PeerGroup::_internal_afi_safis(int index) const {
  return afi_safis_.Get(index);
}
inline const ::gobgpapi::AfiSafi& PeerGroup::afi_safis(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroup.afi_safis)
  return _internal_afi_safis(index);
}
inline ::gobgpapi::AfiSafi* PeerGroup::_internal_add_afi_safis() {
  return afi_safis_.Add();
}
inline ::gobgpapi::AfiSafi* PeerGroup::add_afi_safis() {
  // @@protoc_insertion_point(field_add:gobgpapi.PeerGroup.afi_safis)
  return _internal_add_afi_safis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AfiSafi >&
PeerGroup::afi_safis() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerGroup.afi_safis)
  return afi_safis_;
}

// -------------------------------------------------------------------

// DynamicNeighbor

// string prefix = 1;
inline void DynamicNeighbor::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DynamicNeighbor::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DynamicNeighbor.prefix)
  return _internal_prefix();
}
inline void DynamicNeighbor::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DynamicNeighbor.prefix)
}
inline std::string* DynamicNeighbor::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DynamicNeighbor.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& DynamicNeighbor::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void DynamicNeighbor::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DynamicNeighbor::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DynamicNeighbor.prefix)
}
inline void DynamicNeighbor::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DynamicNeighbor.prefix)
}
inline void DynamicNeighbor::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DynamicNeighbor.prefix)
}
inline std::string* DynamicNeighbor::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DynamicNeighbor::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.DynamicNeighbor.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicNeighbor::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DynamicNeighbor.prefix)
}

// string peer_group = 2;
inline void DynamicNeighbor::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DynamicNeighbor::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DynamicNeighbor.peer_group)
  return _internal_peer_group();
}
inline void DynamicNeighbor::set_peer_group(const std::string& value) {
  _internal_set_peer_group(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DynamicNeighbor.peer_group)
}
inline std::string* DynamicNeighbor::mutable_peer_group() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DynamicNeighbor.peer_group)
  return _internal_mutable_peer_group();
}
inline const std::string& DynamicNeighbor::_internal_peer_group() const {
  return peer_group_.GetNoArena();
}
inline void DynamicNeighbor::_internal_set_peer_group(const std::string& value) {
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DynamicNeighbor::set_peer_group(std::string&& value) {
  
  peer_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DynamicNeighbor.peer_group)
}
inline void DynamicNeighbor::set_peer_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DynamicNeighbor.peer_group)
}
inline void DynamicNeighbor::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DynamicNeighbor.peer_group)
}
inline std::string* DynamicNeighbor::_internal_mutable_peer_group() {
  
  return peer_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DynamicNeighbor::release_peer_group() {
  // @@protoc_insertion_point(field_release:gobgpapi.DynamicNeighbor.peer_group)
  
  return peer_group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicNeighbor::set_allocated_peer_group(std::string* peer_group) {
  if (peer_group != nullptr) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DynamicNeighbor.peer_group)
}

// -------------------------------------------------------------------

// ApplyPolicy

// .gobgpapi.PolicyAssignment in_policy = 1;
inline bool ApplyPolicy::_internal_has_in_policy() const {
  return this != internal_default_instance() && in_policy_ != nullptr;
}
inline bool ApplyPolicy::has_in_policy() const {
  return _internal_has_in_policy();
}
inline void ApplyPolicy::clear_in_policy() {
  if (GetArenaNoVirtual() == nullptr && in_policy_ != nullptr) {
    delete in_policy_;
  }
  in_policy_ = nullptr;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::_internal_in_policy() const {
  const ::gobgpapi::PolicyAssignment* p = in_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::in_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.in_policy)
  return _internal_in_policy();
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_in_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ApplyPolicy.in_policy)
  
  ::gobgpapi::PolicyAssignment* temp = in_policy_;
  in_policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::_internal_mutable_in_policy() {
  
  if (in_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PolicyAssignment>(GetArenaNoVirtual());
    in_policy_ = p;
  }
  return in_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_in_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.in_policy)
  return _internal_mutable_in_policy();
}
inline void ApplyPolicy::set_allocated_in_policy(::gobgpapi::PolicyAssignment* in_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete in_policy_;
  }
  if (in_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      in_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_policy, submessage_arena);
    }
    
  } else {
    
  }
  in_policy_ = in_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.in_policy)
}

// .gobgpapi.PolicyAssignment export_policy = 2;
inline bool ApplyPolicy::_internal_has_export_policy() const {
  return this != internal_default_instance() && export_policy_ != nullptr;
}
inline bool ApplyPolicy::has_export_policy() const {
  return _internal_has_export_policy();
}
inline void ApplyPolicy::clear_export_policy() {
  if (GetArenaNoVirtual() == nullptr && export_policy_ != nullptr) {
    delete export_policy_;
  }
  export_policy_ = nullptr;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::_internal_export_policy() const {
  const ::gobgpapi::PolicyAssignment* p = export_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::export_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.export_policy)
  return _internal_export_policy();
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_export_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ApplyPolicy.export_policy)
  
  ::gobgpapi::PolicyAssignment* temp = export_policy_;
  export_policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::_internal_mutable_export_policy() {
  
  if (export_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PolicyAssignment>(GetArenaNoVirtual());
    export_policy_ = p;
  }
  return export_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_export_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.export_policy)
  return _internal_mutable_export_policy();
}
inline void ApplyPolicy::set_allocated_export_policy(::gobgpapi::PolicyAssignment* export_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete export_policy_;
  }
  if (export_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      export_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, export_policy, submessage_arena);
    }
    
  } else {
    
  }
  export_policy_ = export_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.export_policy)
}

// .gobgpapi.PolicyAssignment import_policy = 3;
inline bool ApplyPolicy::_internal_has_import_policy() const {
  return this != internal_default_instance() && import_policy_ != nullptr;
}
inline bool ApplyPolicy::has_import_policy() const {
  return _internal_has_import_policy();
}
inline void ApplyPolicy::clear_import_policy() {
  if (GetArenaNoVirtual() == nullptr && import_policy_ != nullptr) {
    delete import_policy_;
  }
  import_policy_ = nullptr;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::_internal_import_policy() const {
  const ::gobgpapi::PolicyAssignment* p = import_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PolicyAssignment*>(
      &::gobgpapi::_PolicyAssignment_default_instance_);
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::import_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.import_policy)
  return _internal_import_policy();
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_import_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.ApplyPolicy.import_policy)
  
  ::gobgpapi::PolicyAssignment* temp = import_policy_;
  import_policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::_internal_mutable_import_policy() {
  
  if (import_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PolicyAssignment>(GetArenaNoVirtual());
    import_policy_ = p;
  }
  return import_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_import_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.import_policy)
  return _internal_mutable_import_policy();
}
inline void ApplyPolicy::set_allocated_import_policy(::gobgpapi::PolicyAssignment* import_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete import_policy_;
  }
  if (import_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      import_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, import_policy, submessage_arena);
    }
    
  } else {
    
  }
  import_policy_ = import_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.import_policy)
}

// -------------------------------------------------------------------

// PrefixLimit

// .gobgpapi.Family family = 1;
inline bool PrefixLimit::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool PrefixLimit::has_family() const {
  return _internal_has_family();
}
inline void PrefixLimit::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& PrefixLimit::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& PrefixLimit::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PrefixLimit.family)
  return _internal_family();
}
inline ::gobgpapi::Family* PrefixLimit::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.PrefixLimit.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* PrefixLimit::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* PrefixLimit::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PrefixLimit.family)
  return _internal_mutable_family();
}
inline void PrefixLimit::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PrefixLimit.family)
}

// uint32 max_prefixes = 2;
inline void PrefixLimit::clear_max_prefixes() {
  max_prefixes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrefixLimit::_internal_max_prefixes() const {
  return max_prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrefixLimit::max_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PrefixLimit.max_prefixes)
  return _internal_max_prefixes();
}
inline void PrefixLimit::_internal_set_max_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_prefixes_ = value;
}
inline void PrefixLimit::set_max_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_prefixes(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PrefixLimit.max_prefixes)
}

// uint32 shutdown_threshold_pct = 3;
inline void PrefixLimit::clear_shutdown_threshold_pct() {
  shutdown_threshold_pct_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrefixLimit::_internal_shutdown_threshold_pct() const {
  return shutdown_threshold_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrefixLimit::shutdown_threshold_pct() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PrefixLimit.shutdown_threshold_pct)
  return _internal_shutdown_threshold_pct();
}
inline void PrefixLimit::_internal_set_shutdown_threshold_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shutdown_threshold_pct_ = value;
}
inline void PrefixLimit::set_shutdown_threshold_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shutdown_threshold_pct(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PrefixLimit.shutdown_threshold_pct)
}

// -------------------------------------------------------------------

// PeerConf

// string auth_password = 1;
inline void PeerConf::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerConf::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.auth_password)
  return _internal_auth_password();
}
inline void PeerConf::set_auth_password(const std::string& value) {
  _internal_set_auth_password(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.auth_password)
}
inline std::string* PeerConf::mutable_auth_password() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.auth_password)
  return _internal_mutable_auth_password();
}
inline const std::string& PeerConf::_internal_auth_password() const {
  return auth_password_.GetNoArena();
}
inline void PeerConf::_internal_set_auth_password(const std::string& value) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerConf::set_auth_password(std::string&& value) {
  
  auth_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.auth_password)
}
inline void PeerConf::set_auth_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.auth_password)
}
inline void PeerConf::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.auth_password)
}
inline std::string* PeerConf::_internal_mutable_auth_password() {
  
  return auth_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerConf::release_auth_password() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.auth_password)
  
  return auth_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_auth_password(std::string* auth_password) {
  if (auth_password != nullptr) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.auth_password)
}

// string description = 2;
inline void PeerConf::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerConf::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.description)
  return _internal_description();
}
inline void PeerConf::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.description)
}
inline std::string* PeerConf::mutable_description() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.description)
  return _internal_mutable_description();
}
inline const std::string& PeerConf::_internal_description() const {
  return description_.GetNoArena();
}
inline void PeerConf::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerConf::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.description)
}
inline void PeerConf::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.description)
}
inline void PeerConf::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.description)
}
inline std::string* PeerConf::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerConf::release_description() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.description)
}

// uint32 local_as = 3;
inline void PeerConf::clear_local_as() {
  local_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::_internal_local_as() const {
  return local_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_as)
  return _internal_local_as();
}
inline void PeerConf::_internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_as_ = value;
}
inline void PeerConf::set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_as)
}

// string neighbor_address = 4;
inline void PeerConf::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerConf::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.neighbor_address)
  return _internal_neighbor_address();
}
inline void PeerConf::set_neighbor_address(const std::string& value) {
  _internal_set_neighbor_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.neighbor_address)
}
inline std::string* PeerConf::mutable_neighbor_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.neighbor_address)
  return _internal_mutable_neighbor_address();
}
inline const std::string& PeerConf::_internal_neighbor_address() const {
  return neighbor_address_.GetNoArena();
}
inline void PeerConf::_internal_set_neighbor_address(const std::string& value) {
  
  neighbor_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerConf::set_neighbor_address(std::string&& value) {
  
  neighbor_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.neighbor_address)
}
inline void PeerConf::set_neighbor_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.neighbor_address)
}
inline void PeerConf::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.neighbor_address)
}
inline std::string* PeerConf::_internal_mutable_neighbor_address() {
  
  return neighbor_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerConf::release_neighbor_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.neighbor_address)
  
  return neighbor_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_neighbor_address(std::string* neighbor_address) {
  if (neighbor_address != nullptr) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.neighbor_address)
}

// uint32 peer_as = 5;
inline void PeerConf::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::_internal_peer_as() const {
  return peer_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_as)
  return _internal_peer_as();
}
inline void PeerConf::_internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_as_ = value;
}
inline void PeerConf::set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_as)
}

// string peer_group = 6;
inline void PeerConf::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerConf::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_group)
  return _internal_peer_group();
}
inline void PeerConf::set_peer_group(const std::string& value) {
  _internal_set_peer_group(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_group)
}
inline std::string* PeerConf::mutable_peer_group() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.peer_group)
  return _internal_mutable_peer_group();
}
inline const std::string& PeerConf::_internal_peer_group() const {
  return peer_group_.GetNoArena();
}
inline void PeerConf::_internal_set_peer_group(const std::string& value) {
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerConf::set_peer_group(std::string&& value) {
  
  peer_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.peer_group)
}
inline void PeerConf::set_peer_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.peer_group)
}
inline void PeerConf::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.peer_group)
}
inline std::string* PeerConf::_internal_mutable_peer_group() {
  
  return peer_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerConf::release_peer_group() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.peer_group)
  
  return peer_group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_peer_group(std::string* peer_group) {
  if (peer_group != nullptr) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.peer_group)
}

// uint32 peer_type = 7;
inline void PeerConf::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::_internal_peer_type() const {
  return peer_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_type)
  return _internal_peer_type();
}
inline void PeerConf::_internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_type_ = value;
}
inline void PeerConf::set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_type)
}

// .gobgpapi.PeerConf.RemovePrivateAs remove_private_as = 8;
inline void PeerConf::clear_remove_private_as() {
  remove_private_as_ = 0;
}
inline ::gobgpapi::PeerConf_RemovePrivateAs PeerConf::_internal_remove_private_as() const {
  return static_cast< ::gobgpapi::PeerConf_RemovePrivateAs >(remove_private_as_);
}
inline ::gobgpapi::PeerConf_RemovePrivateAs PeerConf::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.remove_private_as)
  return _internal_remove_private_as();
}
inline void PeerConf::_internal_set_remove_private_as(::gobgpapi::PeerConf_RemovePrivateAs value) {
  
  remove_private_as_ = value;
}
inline void PeerConf::set_remove_private_as(::gobgpapi::PeerConf_RemovePrivateAs value) {
  _internal_set_remove_private_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remove_private_as)
}

// bool route_flap_damping = 9;
inline void PeerConf::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerConf::_internal_route_flap_damping() const {
  return route_flap_damping_;
}
inline bool PeerConf::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.route_flap_damping)
  return _internal_route_flap_damping();
}
inline void PeerConf::_internal_set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
}
inline void PeerConf::set_route_flap_damping(bool value) {
  _internal_set_route_flap_damping(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.route_flap_damping)
}

// uint32 send_community = 10;
inline void PeerConf::clear_send_community() {
  send_community_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::_internal_send_community() const {
  return send_community_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.send_community)
  return _internal_send_community();
}
inline void PeerConf::_internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_community_ = value;
}
inline void PeerConf::set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_community(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.send_community)
}

// string neighbor_interface = 11;
inline void PeerConf::clear_neighbor_interface() {
  neighbor_interface_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerConf::neighbor_interface() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.neighbor_interface)
  return _internal_neighbor_interface();
}
inline void PeerConf::set_neighbor_interface(const std::string& value) {
  _internal_set_neighbor_interface(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.neighbor_interface)
}
inline std::string* PeerConf::mutable_neighbor_interface() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.neighbor_interface)
  return _internal_mutable_neighbor_interface();
}
inline const std::string& PeerConf::_internal_neighbor_interface() const {
  return neighbor_interface_.GetNoArena();
}
inline void PeerConf::_internal_set_neighbor_interface(const std::string& value) {
  
  neighbor_interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerConf::set_neighbor_interface(std::string&& value) {
  
  neighbor_interface_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.neighbor_interface)
}
inline void PeerConf::set_neighbor_interface(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.neighbor_interface)
}
inline void PeerConf::set_neighbor_interface(const char* value, size_t size) {
  
  neighbor_interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.neighbor_interface)
}
inline std::string* PeerConf::_internal_mutable_neighbor_interface() {
  
  return neighbor_interface_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerConf::release_neighbor_interface() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.neighbor_interface)
  
  return neighbor_interface_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_neighbor_interface(std::string* neighbor_interface) {
  if (neighbor_interface != nullptr) {
    
  } else {
    
  }
  neighbor_interface_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_interface);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.neighbor_interface)
}

// string vrf = 12;
inline void PeerConf::clear_vrf() {
  vrf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerConf::vrf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.vrf)
  return _internal_vrf();
}
inline void PeerConf::set_vrf(const std::string& value) {
  _internal_set_vrf(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.vrf)
}
inline std::string* PeerConf::mutable_vrf() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.vrf)
  return _internal_mutable_vrf();
}
inline const std::string& PeerConf::_internal_vrf() const {
  return vrf_.GetNoArena();
}
inline void PeerConf::_internal_set_vrf(const std::string& value) {
  
  vrf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerConf::set_vrf(std::string&& value) {
  
  vrf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerConf.vrf)
}
inline void PeerConf::set_vrf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vrf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.vrf)
}
inline void PeerConf::set_vrf(const char* value, size_t size) {
  
  vrf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.vrf)
}
inline std::string* PeerConf::_internal_mutable_vrf() {
  
  return vrf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerConf::release_vrf() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerConf.vrf)
  
  return vrf_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_vrf(std::string* vrf) {
  if (vrf != nullptr) {
    
  } else {
    
  }
  vrf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.vrf)
}

// uint32 allow_own_as = 13;
inline void PeerConf::clear_allow_own_as() {
  allow_own_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::_internal_allow_own_as() const {
  return allow_own_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerConf::allow_own_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.allow_own_as)
  return _internal_allow_own_as();
}
inline void PeerConf::_internal_set_allow_own_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  allow_own_as_ = value;
}
inline void PeerConf::set_allow_own_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_allow_own_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.allow_own_as)
}

// bool replace_peer_as = 14;
inline void PeerConf::clear_replace_peer_as() {
  replace_peer_as_ = false;
}
inline bool PeerConf::_internal_replace_peer_as() const {
  return replace_peer_as_;
}
inline bool PeerConf::replace_peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.replace_peer_as)
  return _internal_replace_peer_as();
}
inline void PeerConf::_internal_set_replace_peer_as(bool value) {
  
  replace_peer_as_ = value;
}
inline void PeerConf::set_replace_peer_as(bool value) {
  _internal_set_replace_peer_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.replace_peer_as)
}

// bool admin_down = 15;
inline void PeerConf::clear_admin_down() {
  admin_down_ = false;
}
inline bool PeerConf::_internal_admin_down() const {
  return admin_down_;
}
inline bool PeerConf::admin_down() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.admin_down)
  return _internal_admin_down();
}
inline void PeerConf::_internal_set_admin_down(bool value) {
  
  admin_down_ = value;
}
inline void PeerConf::set_admin_down(bool value) {
  _internal_set_admin_down(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.admin_down)
}

// -------------------------------------------------------------------

// PeerGroupConf

// string auth_password = 1;
inline void PeerGroupConf::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerGroupConf::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.auth_password)
  return _internal_auth_password();
}
inline void PeerGroupConf::set_auth_password(const std::string& value) {
  _internal_set_auth_password(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.auth_password)
}
inline std::string* PeerGroupConf::mutable_auth_password() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroupConf.auth_password)
  return _internal_mutable_auth_password();
}
inline const std::string& PeerGroupConf::_internal_auth_password() const {
  return auth_password_.GetNoArena();
}
inline void PeerGroupConf::_internal_set_auth_password(const std::string& value) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerGroupConf::set_auth_password(std::string&& value) {
  
  auth_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerGroupConf.auth_password)
}
inline void PeerGroupConf::set_auth_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerGroupConf.auth_password)
}
inline void PeerGroupConf::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerGroupConf.auth_password)
}
inline std::string* PeerGroupConf::_internal_mutable_auth_password() {
  
  return auth_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerGroupConf::release_auth_password() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroupConf.auth_password)
  
  return auth_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerGroupConf::set_allocated_auth_password(std::string* auth_password) {
  if (auth_password != nullptr) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroupConf.auth_password)
}

// string description = 2;
inline void PeerGroupConf::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerGroupConf::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.description)
  return _internal_description();
}
inline void PeerGroupConf::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.description)
}
inline std::string* PeerGroupConf::mutable_description() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroupConf.description)
  return _internal_mutable_description();
}
inline const std::string& PeerGroupConf::_internal_description() const {
  return description_.GetNoArena();
}
inline void PeerGroupConf::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerGroupConf::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerGroupConf.description)
}
inline void PeerGroupConf::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerGroupConf.description)
}
inline void PeerGroupConf::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerGroupConf.description)
}
inline std::string* PeerGroupConf::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerGroupConf::release_description() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroupConf.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerGroupConf::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroupConf.description)
}

// uint32 local_as = 3;
inline void PeerGroupConf::clear_local_as() {
  local_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::_internal_local_as() const {
  return local_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.local_as)
  return _internal_local_as();
}
inline void PeerGroupConf::_internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_as_ = value;
}
inline void PeerGroupConf::set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.local_as)
}

// uint32 peer_as = 4;
inline void PeerGroupConf::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::_internal_peer_as() const {
  return peer_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.peer_as)
  return _internal_peer_as();
}
inline void PeerGroupConf::_internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_as_ = value;
}
inline void PeerGroupConf::set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.peer_as)
}

// string peer_group_name = 5;
inline void PeerGroupConf::clear_peer_group_name() {
  peer_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerGroupConf::peer_group_name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.peer_group_name)
  return _internal_peer_group_name();
}
inline void PeerGroupConf::set_peer_group_name(const std::string& value) {
  _internal_set_peer_group_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.peer_group_name)
}
inline std::string* PeerGroupConf::mutable_peer_group_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroupConf.peer_group_name)
  return _internal_mutable_peer_group_name();
}
inline const std::string& PeerGroupConf::_internal_peer_group_name() const {
  return peer_group_name_.GetNoArena();
}
inline void PeerGroupConf::_internal_set_peer_group_name(const std::string& value) {
  
  peer_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerGroupConf::set_peer_group_name(std::string&& value) {
  
  peer_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerGroupConf.peer_group_name)
}
inline void PeerGroupConf::set_peer_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerGroupConf.peer_group_name)
}
inline void PeerGroupConf::set_peer_group_name(const char* value, size_t size) {
  
  peer_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerGroupConf.peer_group_name)
}
inline std::string* PeerGroupConf::_internal_mutable_peer_group_name() {
  
  return peer_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerGroupConf::release_peer_group_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroupConf.peer_group_name)
  
  return peer_group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerGroupConf::set_allocated_peer_group_name(std::string* peer_group_name) {
  if (peer_group_name != nullptr) {
    
  } else {
    
  }
  peer_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_group_name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroupConf.peer_group_name)
}

// uint32 peer_type = 6;
inline void PeerGroupConf::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::_internal_peer_type() const {
  return peer_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.peer_type)
  return _internal_peer_type();
}
inline void PeerGroupConf::_internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_type_ = value;
}
inline void PeerGroupConf::set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.peer_type)
}

// .gobgpapi.PeerGroupConf.RemovePrivateAs remove_private_as = 7;
inline void PeerGroupConf::clear_remove_private_as() {
  remove_private_as_ = 0;
}
inline ::gobgpapi::PeerGroupConf_RemovePrivateAs PeerGroupConf::_internal_remove_private_as() const {
  return static_cast< ::gobgpapi::PeerGroupConf_RemovePrivateAs >(remove_private_as_);
}
inline ::gobgpapi::PeerGroupConf_RemovePrivateAs PeerGroupConf::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.remove_private_as)
  return _internal_remove_private_as();
}
inline void PeerGroupConf::_internal_set_remove_private_as(::gobgpapi::PeerGroupConf_RemovePrivateAs value) {
  
  remove_private_as_ = value;
}
inline void PeerGroupConf::set_remove_private_as(::gobgpapi::PeerGroupConf_RemovePrivateAs value) {
  _internal_set_remove_private_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.remove_private_as)
}

// bool route_flap_damping = 8;
inline void PeerGroupConf::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerGroupConf::_internal_route_flap_damping() const {
  return route_flap_damping_;
}
inline bool PeerGroupConf::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.route_flap_damping)
  return _internal_route_flap_damping();
}
inline void PeerGroupConf::_internal_set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
}
inline void PeerGroupConf::set_route_flap_damping(bool value) {
  _internal_set_route_flap_damping(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.route_flap_damping)
}

// uint32 send_community = 9;
inline void PeerGroupConf::clear_send_community() {
  send_community_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::_internal_send_community() const {
  return send_community_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupConf::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupConf.send_community)
  return _internal_send_community();
}
inline void PeerGroupConf::_internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_community_ = value;
}
inline void PeerGroupConf::set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_community(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupConf.send_community)
}

// -------------------------------------------------------------------

// PeerGroupState

// string auth_password = 1;
inline void PeerGroupState::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerGroupState::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.auth_password)
  return _internal_auth_password();
}
inline void PeerGroupState::set_auth_password(const std::string& value) {
  _internal_set_auth_password(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.auth_password)
}
inline std::string* PeerGroupState::mutable_auth_password() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroupState.auth_password)
  return _internal_mutable_auth_password();
}
inline const std::string& PeerGroupState::_internal_auth_password() const {
  return auth_password_.GetNoArena();
}
inline void PeerGroupState::_internal_set_auth_password(const std::string& value) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerGroupState::set_auth_password(std::string&& value) {
  
  auth_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerGroupState.auth_password)
}
inline void PeerGroupState::set_auth_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerGroupState.auth_password)
}
inline void PeerGroupState::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerGroupState.auth_password)
}
inline std::string* PeerGroupState::_internal_mutable_auth_password() {
  
  return auth_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerGroupState::release_auth_password() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroupState.auth_password)
  
  return auth_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerGroupState::set_allocated_auth_password(std::string* auth_password) {
  if (auth_password != nullptr) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroupState.auth_password)
}

// string description = 2;
inline void PeerGroupState::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerGroupState::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.description)
  return _internal_description();
}
inline void PeerGroupState::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.description)
}
inline std::string* PeerGroupState::mutable_description() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroupState.description)
  return _internal_mutable_description();
}
inline const std::string& PeerGroupState::_internal_description() const {
  return description_.GetNoArena();
}
inline void PeerGroupState::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerGroupState::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerGroupState.description)
}
inline void PeerGroupState::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerGroupState.description)
}
inline void PeerGroupState::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerGroupState.description)
}
inline std::string* PeerGroupState::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerGroupState::release_description() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroupState.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerGroupState::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroupState.description)
}

// uint32 local_as = 3;
inline void PeerGroupState::clear_local_as() {
  local_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::_internal_local_as() const {
  return local_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.local_as)
  return _internal_local_as();
}
inline void PeerGroupState::_internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_as_ = value;
}
inline void PeerGroupState::set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.local_as)
}

// uint32 peer_as = 4;
inline void PeerGroupState::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::_internal_peer_as() const {
  return peer_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.peer_as)
  return _internal_peer_as();
}
inline void PeerGroupState::_internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_as_ = value;
}
inline void PeerGroupState::set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.peer_as)
}

// string peer_group_name = 5;
inline void PeerGroupState::clear_peer_group_name() {
  peer_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerGroupState::peer_group_name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.peer_group_name)
  return _internal_peer_group_name();
}
inline void PeerGroupState::set_peer_group_name(const std::string& value) {
  _internal_set_peer_group_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.peer_group_name)
}
inline std::string* PeerGroupState::mutable_peer_group_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerGroupState.peer_group_name)
  return _internal_mutable_peer_group_name();
}
inline const std::string& PeerGroupState::_internal_peer_group_name() const {
  return peer_group_name_.GetNoArena();
}
inline void PeerGroupState::_internal_set_peer_group_name(const std::string& value) {
  
  peer_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerGroupState::set_peer_group_name(std::string&& value) {
  
  peer_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerGroupState.peer_group_name)
}
inline void PeerGroupState::set_peer_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerGroupState.peer_group_name)
}
inline void PeerGroupState::set_peer_group_name(const char* value, size_t size) {
  
  peer_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerGroupState.peer_group_name)
}
inline std::string* PeerGroupState::_internal_mutable_peer_group_name() {
  
  return peer_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerGroupState::release_peer_group_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerGroupState.peer_group_name)
  
  return peer_group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerGroupState::set_allocated_peer_group_name(std::string* peer_group_name) {
  if (peer_group_name != nullptr) {
    
  } else {
    
  }
  peer_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_group_name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerGroupState.peer_group_name)
}

// uint32 peer_type = 6;
inline void PeerGroupState::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::_internal_peer_type() const {
  return peer_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.peer_type)
  return _internal_peer_type();
}
inline void PeerGroupState::_internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_type_ = value;
}
inline void PeerGroupState::set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.peer_type)
}

// .gobgpapi.PeerGroupState.RemovePrivateAs remove_private_as = 7;
inline void PeerGroupState::clear_remove_private_as() {
  remove_private_as_ = 0;
}
inline ::gobgpapi::PeerGroupState_RemovePrivateAs PeerGroupState::_internal_remove_private_as() const {
  return static_cast< ::gobgpapi::PeerGroupState_RemovePrivateAs >(remove_private_as_);
}
inline ::gobgpapi::PeerGroupState_RemovePrivateAs PeerGroupState::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.remove_private_as)
  return _internal_remove_private_as();
}
inline void PeerGroupState::_internal_set_remove_private_as(::gobgpapi::PeerGroupState_RemovePrivateAs value) {
  
  remove_private_as_ = value;
}
inline void PeerGroupState::set_remove_private_as(::gobgpapi::PeerGroupState_RemovePrivateAs value) {
  _internal_set_remove_private_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.remove_private_as)
}

// bool route_flap_damping = 8;
inline void PeerGroupState::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerGroupState::_internal_route_flap_damping() const {
  return route_flap_damping_;
}
inline bool PeerGroupState::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.route_flap_damping)
  return _internal_route_flap_damping();
}
inline void PeerGroupState::_internal_set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
}
inline void PeerGroupState::set_route_flap_damping(bool value) {
  _internal_set_route_flap_damping(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.route_flap_damping)
}

// uint32 send_community = 9;
inline void PeerGroupState::clear_send_community() {
  send_community_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::_internal_send_community() const {
  return send_community_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.send_community)
  return _internal_send_community();
}
inline void PeerGroupState::_internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_community_ = value;
}
inline void PeerGroupState::set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_community(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.send_community)
}

// uint32 total_paths = 10;
inline void PeerGroupState::clear_total_paths() {
  total_paths_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::_internal_total_paths() const {
  return total_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::total_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.total_paths)
  return _internal_total_paths();
}
inline void PeerGroupState::_internal_set_total_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_paths_ = value;
}
inline void PeerGroupState::set_total_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_paths(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.total_paths)
}

// uint32 total_prefixes = 11;
inline void PeerGroupState::clear_total_prefixes() {
  total_prefixes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::_internal_total_prefixes() const {
  return total_prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerGroupState::total_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerGroupState.total_prefixes)
  return _internal_total_prefixes();
}
inline void PeerGroupState::_internal_set_total_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_prefixes_ = value;
}
inline void PeerGroupState::set_total_prefixes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_prefixes(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerGroupState.total_prefixes)
}

// -------------------------------------------------------------------

// EbgpMultihop

// bool enabled = 1;
inline void EbgpMultihop::clear_enabled() {
  enabled_ = false;
}
inline bool EbgpMultihop::_internal_enabled() const {
  return enabled_;
}
inline bool EbgpMultihop::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.enabled)
  return _internal_enabled();
}
inline void EbgpMultihop::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void EbgpMultihop::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.enabled)
}

// uint32 multihop_ttl = 2;
inline void EbgpMultihop::clear_multihop_ttl() {
  multihop_ttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EbgpMultihop::_internal_multihop_ttl() const {
  return multihop_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EbgpMultihop::multihop_ttl() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.multihop_ttl)
  return _internal_multihop_ttl();
}
inline void EbgpMultihop::_internal_set_multihop_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  multihop_ttl_ = value;
}
inline void EbgpMultihop::set_multihop_ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multihop_ttl(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.multihop_ttl)
}

// -------------------------------------------------------------------

// RouteReflector

// bool route_reflector_client = 1;
inline void RouteReflector::clear_route_reflector_client() {
  route_reflector_client_ = false;
}
inline bool RouteReflector::_internal_route_reflector_client() const {
  return route_reflector_client_;
}
inline bool RouteReflector::route_reflector_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_client)
  return _internal_route_reflector_client();
}
inline void RouteReflector::_internal_set_route_reflector_client(bool value) {
  
  route_reflector_client_ = value;
}
inline void RouteReflector::set_route_reflector_client(bool value) {
  _internal_set_route_reflector_client(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_client)
}

// string route_reflector_cluster_id = 2;
inline void RouteReflector::clear_route_reflector_cluster_id() {
  route_reflector_cluster_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteReflector::route_reflector_cluster_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_cluster_id)
  return _internal_route_reflector_cluster_id();
}
inline void RouteReflector::set_route_reflector_cluster_id(const std::string& value) {
  _internal_set_route_reflector_cluster_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
inline std::string* RouteReflector::mutable_route_reflector_cluster_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteReflector.route_reflector_cluster_id)
  return _internal_mutable_route_reflector_cluster_id();
}
inline const std::string& RouteReflector::_internal_route_reflector_cluster_id() const {
  return route_reflector_cluster_id_.GetNoArena();
}
inline void RouteReflector::_internal_set_route_reflector_cluster_id(const std::string& value) {
  
  route_reflector_cluster_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteReflector::set_route_reflector_cluster_id(std::string&& value) {
  
  route_reflector_cluster_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
inline void RouteReflector::set_route_reflector_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_reflector_cluster_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
inline void RouteReflector::set_route_reflector_cluster_id(const char* value, size_t size) {
  
  route_reflector_cluster_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RouteReflector.route_reflector_cluster_id)
}
inline std::string* RouteReflector::_internal_mutable_route_reflector_cluster_id() {
  
  return route_reflector_cluster_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteReflector::release_route_reflector_cluster_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteReflector.route_reflector_cluster_id)
  
  return route_reflector_cluster_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteReflector::set_allocated_route_reflector_cluster_id(std::string* route_reflector_cluster_id) {
  if (route_reflector_cluster_id != nullptr) {
    
  } else {
    
  }
  route_reflector_cluster_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_reflector_cluster_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteReflector.route_reflector_cluster_id)
}

// -------------------------------------------------------------------

// PeerState

// string auth_password = 1;
inline void PeerState::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerState::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.auth_password)
  return _internal_auth_password();
}
inline void PeerState::set_auth_password(const std::string& value) {
  _internal_set_auth_password(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.auth_password)
}
inline std::string* PeerState::mutable_auth_password() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.auth_password)
  return _internal_mutable_auth_password();
}
inline const std::string& PeerState::_internal_auth_password() const {
  return auth_password_.GetNoArena();
}
inline void PeerState::_internal_set_auth_password(const std::string& value) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerState::set_auth_password(std::string&& value) {
  
  auth_password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.auth_password)
}
inline void PeerState::set_auth_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.auth_password)
}
inline void PeerState::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.auth_password)
}
inline std::string* PeerState::_internal_mutable_auth_password() {
  
  return auth_password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerState::release_auth_password() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.auth_password)
  
  return auth_password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_auth_password(std::string* auth_password) {
  if (auth_password != nullptr) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.auth_password)
}

// string description = 2;
inline void PeerState::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerState::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.description)
  return _internal_description();
}
inline void PeerState::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.description)
}
inline std::string* PeerState::mutable_description() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.description)
  return _internal_mutable_description();
}
inline const std::string& PeerState::_internal_description() const {
  return description_.GetNoArena();
}
inline void PeerState::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerState::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.description)
}
inline void PeerState::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.description)
}
inline void PeerState::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.description)
}
inline std::string* PeerState::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerState::release_description() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.description)
}

// uint32 local_as = 3;
inline void PeerState::clear_local_as() {
  local_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::_internal_local_as() const {
  return local_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.local_as)
  return _internal_local_as();
}
inline void PeerState::_internal_set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_as_ = value;
}
inline void PeerState::set_local_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.local_as)
}

// .gobgpapi.Messages messages = 4;
inline bool PeerState::_internal_has_messages() const {
  return this != internal_default_instance() && messages_ != nullptr;
}
inline bool PeerState::has_messages() const {
  return _internal_has_messages();
}
inline void PeerState::clear_messages() {
  if (GetArenaNoVirtual() == nullptr && messages_ != nullptr) {
    delete messages_;
  }
  messages_ = nullptr;
}
inline const ::gobgpapi::Messages& PeerState::_internal_messages() const {
  const ::gobgpapi::Messages* p = messages_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Messages*>(
      &::gobgpapi::_Messages_default_instance_);
}
inline const ::gobgpapi::Messages& PeerState::messages() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.messages)
  return _internal_messages();
}
inline ::gobgpapi::Messages* PeerState::release_messages() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.messages)
  
  ::gobgpapi::Messages* temp = messages_;
  messages_ = nullptr;
  return temp;
}
inline ::gobgpapi::Messages* PeerState::_internal_mutable_messages() {
  
  if (messages_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Messages>(GetArenaNoVirtual());
    messages_ = p;
  }
  return messages_;
}
inline ::gobgpapi::Messages* PeerState::mutable_messages() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.messages)
  return _internal_mutable_messages();
}
inline void PeerState::set_allocated_messages(::gobgpapi::Messages* messages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete messages_;
  }
  if (messages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      messages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messages, submessage_arena);
    }
    
  } else {
    
  }
  messages_ = messages;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.messages)
}

// string neighbor_address = 5;
inline void PeerState::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerState::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.neighbor_address)
  return _internal_neighbor_address();
}
inline void PeerState::set_neighbor_address(const std::string& value) {
  _internal_set_neighbor_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.neighbor_address)
}
inline std::string* PeerState::mutable_neighbor_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.neighbor_address)
  return _internal_mutable_neighbor_address();
}
inline const std::string& PeerState::_internal_neighbor_address() const {
  return neighbor_address_.GetNoArena();
}
inline void PeerState::_internal_set_neighbor_address(const std::string& value) {
  
  neighbor_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerState::set_neighbor_address(std::string&& value) {
  
  neighbor_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.neighbor_address)
}
inline void PeerState::set_neighbor_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.neighbor_address)
}
inline void PeerState::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.neighbor_address)
}
inline std::string* PeerState::_internal_mutable_neighbor_address() {
  
  return neighbor_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerState::release_neighbor_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.neighbor_address)
  
  return neighbor_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_neighbor_address(std::string* neighbor_address) {
  if (neighbor_address != nullptr) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.neighbor_address)
}

// uint32 peer_as = 6;
inline void PeerState::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::_internal_peer_as() const {
  return peer_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_as)
  return _internal_peer_as();
}
inline void PeerState::_internal_set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_as_ = value;
}
inline void PeerState::set_peer_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_as)
}

// string peer_group = 7;
inline void PeerState::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerState::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_group)
  return _internal_peer_group();
}
inline void PeerState::set_peer_group(const std::string& value) {
  _internal_set_peer_group(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_group)
}
inline std::string* PeerState::mutable_peer_group() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.peer_group)
  return _internal_mutable_peer_group();
}
inline const std::string& PeerState::_internal_peer_group() const {
  return peer_group_.GetNoArena();
}
inline void PeerState::_internal_set_peer_group(const std::string& value) {
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerState::set_peer_group(std::string&& value) {
  
  peer_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.peer_group)
}
inline void PeerState::set_peer_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.peer_group)
}
inline void PeerState::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.peer_group)
}
inline std::string* PeerState::_internal_mutable_peer_group() {
  
  return peer_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerState::release_peer_group() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.peer_group)
  
  return peer_group_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_peer_group(std::string* peer_group) {
  if (peer_group != nullptr) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.peer_group)
}

// uint32 peer_type = 8;
inline void PeerState::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::_internal_peer_type() const {
  return peer_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_type)
  return _internal_peer_type();
}
inline void PeerState::_internal_set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_type_ = value;
}
inline void PeerState::set_peer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_type)
}

// .gobgpapi.Queues queues = 9;
inline bool PeerState::_internal_has_queues() const {
  return this != internal_default_instance() && queues_ != nullptr;
}
inline bool PeerState::has_queues() const {
  return _internal_has_queues();
}
inline void PeerState::clear_queues() {
  if (GetArenaNoVirtual() == nullptr && queues_ != nullptr) {
    delete queues_;
  }
  queues_ = nullptr;
}
inline const ::gobgpapi::Queues& PeerState::_internal_queues() const {
  const ::gobgpapi::Queues* p = queues_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Queues*>(
      &::gobgpapi::_Queues_default_instance_);
}
inline const ::gobgpapi::Queues& PeerState::queues() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.queues)
  return _internal_queues();
}
inline ::gobgpapi::Queues* PeerState::release_queues() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.queues)
  
  ::gobgpapi::Queues* temp = queues_;
  queues_ = nullptr;
  return temp;
}
inline ::gobgpapi::Queues* PeerState::_internal_mutable_queues() {
  
  if (queues_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Queues>(GetArenaNoVirtual());
    queues_ = p;
  }
  return queues_;
}
inline ::gobgpapi::Queues* PeerState::mutable_queues() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.queues)
  return _internal_mutable_queues();
}
inline void PeerState::set_allocated_queues(::gobgpapi::Queues* queues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete queues_;
  }
  if (queues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      queues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queues, submessage_arena);
    }
    
  } else {
    
  }
  queues_ = queues;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.queues)
}

// uint32 remove_private_as = 10;
inline void PeerState::clear_remove_private_as() {
  remove_private_as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::_internal_remove_private_as() const {
  return remove_private_as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.remove_private_as)
  return _internal_remove_private_as();
}
inline void PeerState::_internal_set_remove_private_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remove_private_as_ = value;
}
inline void PeerState::set_remove_private_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remove_private_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.remove_private_as)
}

// bool route_flap_damping = 11;
inline void PeerState::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerState::_internal_route_flap_damping() const {
  return route_flap_damping_;
}
inline bool PeerState::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.route_flap_damping)
  return _internal_route_flap_damping();
}
inline void PeerState::_internal_set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
}
inline void PeerState::set_route_flap_damping(bool value) {
  _internal_set_route_flap_damping(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.route_flap_damping)
}

// uint32 send_community = 12;
inline void PeerState::clear_send_community() {
  send_community_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::_internal_send_community() const {
  return send_community_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.send_community)
  return _internal_send_community();
}
inline void PeerState::_internal_set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_community_ = value;
}
inline void PeerState::set_send_community(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_community(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.send_community)
}

// .gobgpapi.PeerState.SessionState session_state = 13;
inline void PeerState::clear_session_state() {
  session_state_ = 0;
}
inline ::gobgpapi::PeerState_SessionState PeerState::_internal_session_state() const {
  return static_cast< ::gobgpapi::PeerState_SessionState >(session_state_);
}
inline ::gobgpapi::PeerState_SessionState PeerState::session_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.session_state)
  return _internal_session_state();
}
inline void PeerState::_internal_set_session_state(::gobgpapi::PeerState_SessionState value) {
  
  session_state_ = value;
}
inline void PeerState::set_session_state(::gobgpapi::PeerState_SessionState value) {
  _internal_set_session_state(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.session_state)
}

// .gobgpapi.PeerState.AdminState admin_state = 15;
inline void PeerState::clear_admin_state() {
  admin_state_ = 0;
}
inline ::gobgpapi::PeerState_AdminState PeerState::_internal_admin_state() const {
  return static_cast< ::gobgpapi::PeerState_AdminState >(admin_state_);
}
inline ::gobgpapi::PeerState_AdminState PeerState::admin_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.admin_state)
  return _internal_admin_state();
}
inline void PeerState::_internal_set_admin_state(::gobgpapi::PeerState_AdminState value) {
  
  admin_state_ = value;
}
inline void PeerState::set_admin_state(::gobgpapi::PeerState_AdminState value) {
  _internal_set_admin_state(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.admin_state)
}

// uint32 out_q = 16;
inline void PeerState::clear_out_q() {
  out_q_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::_internal_out_q() const {
  return out_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::out_q() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.out_q)
  return _internal_out_q();
}
inline void PeerState::_internal_set_out_q(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  out_q_ = value;
}
inline void PeerState::set_out_q(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_out_q(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.out_q)
}

// uint32 flops = 17;
inline void PeerState::clear_flops() {
  flops_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::_internal_flops() const {
  return flops_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerState::flops() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.flops)
  return _internal_flops();
}
inline void PeerState::_internal_set_flops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flops_ = value;
}
inline void PeerState::set_flops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flops(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.flops)
}

// repeated .google.protobuf.Any remote_cap = 18;
inline int PeerState::_internal_remote_cap_size() const {
  return remote_cap_.size();
}
inline int PeerState::remote_cap_size() const {
  return _internal_remote_cap_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* PeerState::mutable_remote_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.remote_cap)
  return remote_cap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
PeerState::mutable_remote_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerState.remote_cap)
  return &remote_cap_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& PeerState::_internal_remote_cap(int index) const {
  return remote_cap_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& PeerState::remote_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.remote_cap)
  return _internal_remote_cap(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* PeerState::_internal_add_remote_cap() {
  return remote_cap_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* PeerState::add_remote_cap() {
  // @@protoc_insertion_point(field_add:gobgpapi.PeerState.remote_cap)
  return _internal_add_remote_cap();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
PeerState::remote_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerState.remote_cap)
  return remote_cap_;
}

// repeated .google.protobuf.Any local_cap = 19;
inline int PeerState::_internal_local_cap_size() const {
  return local_cap_.size();
}
inline int PeerState::local_cap_size() const {
  return _internal_local_cap_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* PeerState::mutable_local_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.local_cap)
  return local_cap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
PeerState::mutable_local_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerState.local_cap)
  return &local_cap_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& PeerState::_internal_local_cap(int index) const {
  return local_cap_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& PeerState::local_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.local_cap)
  return _internal_local_cap(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* PeerState::_internal_add_local_cap() {
  return local_cap_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* PeerState::add_local_cap() {
  // @@protoc_insertion_point(field_add:gobgpapi.PeerState.local_cap)
  return _internal_add_local_cap();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
PeerState::local_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerState.local_cap)
  return local_cap_;
}

// string router_id = 20;
inline void PeerState::clear_router_id() {
  router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerState::router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.router_id)
  return _internal_router_id();
}
inline void PeerState::set_router_id(const std::string& value) {
  _internal_set_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.router_id)
}
inline std::string* PeerState::mutable_router_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.router_id)
  return _internal_mutable_router_id();
}
inline const std::string& PeerState::_internal_router_id() const {
  return router_id_.GetNoArena();
}
inline void PeerState::_internal_set_router_id(const std::string& value) {
  
  router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerState::set_router_id(std::string&& value) {
  
  router_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PeerState.router_id)
}
inline void PeerState::set_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.router_id)
}
inline void PeerState::set_router_id(const char* value, size_t size) {
  
  router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.router_id)
}
inline std::string* PeerState::_internal_mutable_router_id() {
  
  return router_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerState::release_router_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.PeerState.router_id)
  
  return router_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_router_id(std::string* router_id) {
  if (router_id != nullptr) {
    
  } else {
    
  }
  router_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.router_id)
}

// -------------------------------------------------------------------

// Messages

// .gobgpapi.Message received = 1;
inline bool Messages::_internal_has_received() const {
  return this != internal_default_instance() && received_ != nullptr;
}
inline bool Messages::has_received() const {
  return _internal_has_received();
}
inline void Messages::clear_received() {
  if (GetArenaNoVirtual() == nullptr && received_ != nullptr) {
    delete received_;
  }
  received_ = nullptr;
}
inline const ::gobgpapi::Message& Messages::_internal_received() const {
  const ::gobgpapi::Message* p = received_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Message*>(
      &::gobgpapi::_Message_default_instance_);
}
inline const ::gobgpapi::Message& Messages::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.received)
  return _internal_received();
}
inline ::gobgpapi::Message* Messages::release_received() {
  // @@protoc_insertion_point(field_release:gobgpapi.Messages.received)
  
  ::gobgpapi::Message* temp = received_;
  received_ = nullptr;
  return temp;
}
inline ::gobgpapi::Message* Messages::_internal_mutable_received() {
  
  if (received_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Message>(GetArenaNoVirtual());
    received_ = p;
  }
  return received_;
}
inline ::gobgpapi::Message* Messages::mutable_received() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.received)
  return _internal_mutable_received();
}
inline void Messages::set_allocated_received(::gobgpapi::Message* received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete received_;
  }
  if (received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received, submessage_arena);
    }
    
  } else {
    
  }
  received_ = received;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.received)
}

// .gobgpapi.Message sent = 2;
inline bool Messages::_internal_has_sent() const {
  return this != internal_default_instance() && sent_ != nullptr;
}
inline bool Messages::has_sent() const {
  return _internal_has_sent();
}
inline void Messages::clear_sent() {
  if (GetArenaNoVirtual() == nullptr && sent_ != nullptr) {
    delete sent_;
  }
  sent_ = nullptr;
}
inline const ::gobgpapi::Message& Messages::_internal_sent() const {
  const ::gobgpapi::Message* p = sent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Message*>(
      &::gobgpapi::_Message_default_instance_);
}
inline const ::gobgpapi::Message& Messages::sent() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.sent)
  return _internal_sent();
}
inline ::gobgpapi::Message* Messages::release_sent() {
  // @@protoc_insertion_point(field_release:gobgpapi.Messages.sent)
  
  ::gobgpapi::Message* temp = sent_;
  sent_ = nullptr;
  return temp;
}
inline ::gobgpapi::Message* Messages::_internal_mutable_sent() {
  
  if (sent_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Message>(GetArenaNoVirtual());
    sent_ = p;
  }
  return sent_;
}
inline ::gobgpapi::Message* Messages::mutable_sent() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.sent)
  return _internal_mutable_sent();
}
inline void Messages::set_allocated_sent(::gobgpapi::Message* sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sent_;
  }
  if (sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent, submessage_arena);
    }
    
  } else {
    
  }
  sent_ = sent;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.sent)
}

// -------------------------------------------------------------------

// Message

// uint64 notification = 1;
inline void Message::clear_notification() {
  notification_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_notification() const {
  return notification_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::notification() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.notification)
  return _internal_notification();
}
inline void Message::_internal_set_notification(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  notification_ = value;
}
inline void Message::set_notification(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_notification(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.notification)
}

// uint64 update = 2;
inline void Message::clear_update() {
  update_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_update() const {
  return update_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::update() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.update)
  return _internal_update();
}
inline void Message::_internal_set_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  update_ = value;
}
inline void Message::set_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_update(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.update)
}

// uint64 open = 3;
inline void Message::clear_open() {
  open_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::open() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.open)
  return _internal_open();
}
inline void Message::_internal_set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  open_ = value;
}
inline void Message::set_open(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.open)
}

// uint64 keepalive = 4;
inline void Message::clear_keepalive() {
  keepalive_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_keepalive() const {
  return keepalive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::keepalive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.keepalive)
  return _internal_keepalive();
}
inline void Message::_internal_set_keepalive(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  keepalive_ = value;
}
inline void Message::set_keepalive(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_keepalive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.keepalive)
}

// uint64 refresh = 5;
inline void Message::clear_refresh() {
  refresh_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_refresh() const {
  return refresh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::refresh() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.refresh)
  return _internal_refresh();
}
inline void Message::_internal_set_refresh(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  refresh_ = value;
}
inline void Message::set_refresh(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_refresh(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.refresh)
}

// uint64 discarded = 6;
inline void Message::clear_discarded() {
  discarded_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_discarded() const {
  return discarded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::discarded() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.discarded)
  return _internal_discarded();
}
inline void Message::_internal_set_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  discarded_ = value;
}
inline void Message::set_discarded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_discarded(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.discarded)
}

// uint64 total = 7;
inline void Message::clear_total() {
  total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::total() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.total)
  return _internal_total();
}
inline void Message::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_ = value;
}
inline void Message::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.total)
}

// uint64 withdraw_update = 8;
inline void Message::clear_withdraw_update() {
  withdraw_update_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_withdraw_update() const {
  return withdraw_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::withdraw_update() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.withdraw_update)
  return _internal_withdraw_update();
}
inline void Message::_internal_set_withdraw_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  withdraw_update_ = value;
}
inline void Message::set_withdraw_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_withdraw_update(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.withdraw_update)
}

// uint64 withdraw_prefix = 9;
inline void Message::clear_withdraw_prefix() {
  withdraw_prefix_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_withdraw_prefix() const {
  return withdraw_prefix_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::withdraw_prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.withdraw_prefix)
  return _internal_withdraw_prefix();
}
inline void Message::_internal_set_withdraw_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  withdraw_prefix_ = value;
}
inline void Message::set_withdraw_prefix(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_withdraw_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Message.withdraw_prefix)
}

// -------------------------------------------------------------------

// Queues

// uint32 input = 1;
inline void Queues::clear_input() {
  input_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Queues::_internal_input() const {
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Queues::input() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.input)
  return _internal_input();
}
inline void Queues::_internal_set_input(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  input_ = value;
}
inline void Queues::set_input(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.input)
}

// uint32 output = 2;
inline void Queues::clear_output() {
  output_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Queues::_internal_output() const {
  return output_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Queues::output() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.output)
  return _internal_output();
}
inline void Queues::_internal_set_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_ = value;
}
inline void Queues::set_output(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.output)
}

// -------------------------------------------------------------------

// Timers

// .gobgpapi.TimersConfig config = 1;
inline bool Timers::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Timers::has_config() const {
  return _internal_has_config();
}
inline void Timers::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::TimersConfig& Timers::_internal_config() const {
  const ::gobgpapi::TimersConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::TimersConfig*>(
      &::gobgpapi::_TimersConfig_default_instance_);
}
inline const ::gobgpapi::TimersConfig& Timers::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.config)
  return _internal_config();
}
inline ::gobgpapi::TimersConfig* Timers::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.Timers.config)
  
  ::gobgpapi::TimersConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::TimersConfig* Timers::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::TimersConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::TimersConfig* Timers::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.config)
  return _internal_mutable_config();
}
inline void Timers::set_allocated_config(::gobgpapi::TimersConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.config)
}

// .gobgpapi.TimersState state = 2;
inline bool Timers::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Timers::has_state() const {
  return _internal_has_state();
}
inline void Timers::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::TimersState& Timers::_internal_state() const {
  const ::gobgpapi::TimersState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::TimersState*>(
      &::gobgpapi::_TimersState_default_instance_);
}
inline const ::gobgpapi::TimersState& Timers::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.state)
  return _internal_state();
}
inline ::gobgpapi::TimersState* Timers::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Timers.state)
  
  ::gobgpapi::TimersState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::TimersState* Timers::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::TimersState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::TimersState* Timers::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.state)
  return _internal_mutable_state();
}
inline void Timers::set_allocated_state(::gobgpapi::TimersState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.state)
}

// -------------------------------------------------------------------

// TimersConfig

// uint64 connect_retry = 1;
inline void TimersConfig::clear_connect_retry() {
  connect_retry_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::_internal_connect_retry() const {
  return connect_retry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.connect_retry)
  return _internal_connect_retry();
}
inline void TimersConfig::_internal_set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  connect_retry_ = value;
}
inline void TimersConfig::set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_connect_retry(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.connect_retry)
}

// uint64 hold_time = 2;
inline void TimersConfig::clear_hold_time() {
  hold_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::_internal_hold_time() const {
  return hold_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.hold_time)
  return _internal_hold_time();
}
inline void TimersConfig::_internal_set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hold_time_ = value;
}
inline void TimersConfig::set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hold_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.hold_time)
}

// uint64 keepalive_interval = 3;
inline void TimersConfig::clear_keepalive_interval() {
  keepalive_interval_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::_internal_keepalive_interval() const {
  return keepalive_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.keepalive_interval)
  return _internal_keepalive_interval();
}
inline void TimersConfig::_internal_set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  keepalive_interval_ = value;
}
inline void TimersConfig::set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_keepalive_interval(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.keepalive_interval)
}

// uint64 minimum_advertisement_interval = 4;
inline void TimersConfig::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::_internal_minimum_advertisement_interval() const {
  return minimum_advertisement_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.minimum_advertisement_interval)
  return _internal_minimum_advertisement_interval();
}
inline void TimersConfig::_internal_set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minimum_advertisement_interval_ = value;
}
inline void TimersConfig::set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minimum_advertisement_interval(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.minimum_advertisement_interval)
}

// uint64 idle_hold_time_after_reset = 5;
inline void TimersConfig::clear_idle_hold_time_after_reset() {
  idle_hold_time_after_reset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::_internal_idle_hold_time_after_reset() const {
  return idle_hold_time_after_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersConfig::idle_hold_time_after_reset() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.idle_hold_time_after_reset)
  return _internal_idle_hold_time_after_reset();
}
inline void TimersConfig::_internal_set_idle_hold_time_after_reset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  idle_hold_time_after_reset_ = value;
}
inline void TimersConfig::set_idle_hold_time_after_reset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_idle_hold_time_after_reset(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.idle_hold_time_after_reset)
}

// -------------------------------------------------------------------

// TimersState

// uint64 connect_retry = 1;
inline void TimersState::clear_connect_retry() {
  connect_retry_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::_internal_connect_retry() const {
  return connect_retry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.connect_retry)
  return _internal_connect_retry();
}
inline void TimersState::_internal_set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  connect_retry_ = value;
}
inline void TimersState::set_connect_retry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_connect_retry(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.connect_retry)
}

// uint64 hold_time = 2;
inline void TimersState::clear_hold_time() {
  hold_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::_internal_hold_time() const {
  return hold_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.hold_time)
  return _internal_hold_time();
}
inline void TimersState::_internal_set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hold_time_ = value;
}
inline void TimersState::set_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hold_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.hold_time)
}

// uint64 keepalive_interval = 3;
inline void TimersState::clear_keepalive_interval() {
  keepalive_interval_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::_internal_keepalive_interval() const {
  return keepalive_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.keepalive_interval)
  return _internal_keepalive_interval();
}
inline void TimersState::_internal_set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  keepalive_interval_ = value;
}
inline void TimersState::set_keepalive_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_keepalive_interval(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.keepalive_interval)
}

// uint64 minimum_advertisement_interval = 4;
inline void TimersState::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::_internal_minimum_advertisement_interval() const {
  return minimum_advertisement_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.minimum_advertisement_interval)
  return _internal_minimum_advertisement_interval();
}
inline void TimersState::_internal_set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  minimum_advertisement_interval_ = value;
}
inline void TimersState::set_minimum_advertisement_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_minimum_advertisement_interval(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.minimum_advertisement_interval)
}

// uint64 negotiated_hold_time = 5;
inline void TimersState::clear_negotiated_hold_time() {
  negotiated_hold_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::_internal_negotiated_hold_time() const {
  return negotiated_hold_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimersState::negotiated_hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.negotiated_hold_time)
  return _internal_negotiated_hold_time();
}
inline void TimersState::_internal_set_negotiated_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  negotiated_hold_time_ = value;
}
inline void TimersState::set_negotiated_hold_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_negotiated_hold_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.negotiated_hold_time)
}

// .google.protobuf.Timestamp uptime = 6;
inline bool TimersState::_internal_has_uptime() const {
  return this != internal_default_instance() && uptime_ != nullptr;
}
inline bool TimersState::has_uptime() const {
  return _internal_has_uptime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimersState::_internal_uptime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = uptime_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimersState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.uptime)
  return _internal_uptime();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimersState::release_uptime() {
  // @@protoc_insertion_point(field_release:gobgpapi.TimersState.uptime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = uptime_;
  uptime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimersState::_internal_mutable_uptime() {
  
  if (uptime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    uptime_ = p;
  }
  return uptime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimersState::mutable_uptime() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.TimersState.uptime)
  return _internal_mutable_uptime();
}
inline void TimersState::set_allocated_uptime(PROTOBUF_NAMESPACE_ID::Timestamp* uptime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_);
  }
  if (uptime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime)->GetArena();
    if (message_arena != submessage_arena) {
      uptime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uptime, submessage_arena);
    }
    
  } else {
    
  }
  uptime_ = uptime;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.TimersState.uptime)
}

// .google.protobuf.Timestamp downtime = 7;
inline bool TimersState::_internal_has_downtime() const {
  return this != internal_default_instance() && downtime_ != nullptr;
}
inline bool TimersState::has_downtime() const {
  return _internal_has_downtime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimersState::_internal_downtime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = downtime_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimersState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.downtime)
  return _internal_downtime();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimersState::release_downtime() {
  // @@protoc_insertion_point(field_release:gobgpapi.TimersState.downtime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = downtime_;
  downtime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimersState::_internal_mutable_downtime() {
  
  if (downtime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    downtime_ = p;
  }
  return downtime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimersState::mutable_downtime() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.TimersState.downtime)
  return _internal_mutable_downtime();
}
inline void TimersState::set_allocated_downtime(PROTOBUF_NAMESPACE_ID::Timestamp* downtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(downtime_);
  }
  if (downtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(downtime)->GetArena();
    if (message_arena != submessage_arena) {
      downtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, downtime, submessage_arena);
    }
    
  } else {
    
  }
  downtime_ = downtime;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.TimersState.downtime)
}

// -------------------------------------------------------------------

// Transport

// string local_address = 1;
inline void Transport::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transport::local_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_address)
  return _internal_local_address();
}
inline void Transport::set_local_address(const std::string& value) {
  _internal_set_local_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_address)
}
inline std::string* Transport::mutable_local_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.local_address)
  return _internal_mutable_local_address();
}
inline const std::string& Transport::_internal_local_address() const {
  return local_address_.GetNoArena();
}
inline void Transport::_internal_set_local_address(const std::string& value) {
  
  local_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transport::set_local_address(std::string&& value) {
  
  local_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Transport.local_address)
}
inline void Transport::set_local_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.local_address)
}
inline void Transport::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.local_address)
}
inline std::string* Transport::_internal_mutable_local_address() {
  
  return local_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transport::release_local_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.Transport.local_address)
  
  return local_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_allocated_local_address(std::string* local_address) {
  if (local_address != nullptr) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.local_address)
}

// uint32 local_port = 2;
inline void Transport::clear_local_port() {
  local_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transport::_internal_local_port() const {
  return local_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transport::local_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_port)
  return _internal_local_port();
}
inline void Transport::_internal_set_local_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_port_ = value;
}
inline void Transport::set_local_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_port)
}

// bool mtu_discovery = 3;
inline void Transport::clear_mtu_discovery() {
  mtu_discovery_ = false;
}
inline bool Transport::_internal_mtu_discovery() const {
  return mtu_discovery_;
}
inline bool Transport::mtu_discovery() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.mtu_discovery)
  return _internal_mtu_discovery();
}
inline void Transport::_internal_set_mtu_discovery(bool value) {
  
  mtu_discovery_ = value;
}
inline void Transport::set_mtu_discovery(bool value) {
  _internal_set_mtu_discovery(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.mtu_discovery)
}

// bool passive_mode = 4;
inline void Transport::clear_passive_mode() {
  passive_mode_ = false;
}
inline bool Transport::_internal_passive_mode() const {
  return passive_mode_;
}
inline bool Transport::passive_mode() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.passive_mode)
  return _internal_passive_mode();
}
inline void Transport::_internal_set_passive_mode(bool value) {
  
  passive_mode_ = value;
}
inline void Transport::set_passive_mode(bool value) {
  _internal_set_passive_mode(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.passive_mode)
}

// string remote_address = 5;
inline void Transport::clear_remote_address() {
  remote_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transport::remote_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_address)
  return _internal_remote_address();
}
inline void Transport::set_remote_address(const std::string& value) {
  _internal_set_remote_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_address)
}
inline std::string* Transport::mutable_remote_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.remote_address)
  return _internal_mutable_remote_address();
}
inline const std::string& Transport::_internal_remote_address() const {
  return remote_address_.GetNoArena();
}
inline void Transport::_internal_set_remote_address(const std::string& value) {
  
  remote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transport::set_remote_address(std::string&& value) {
  
  remote_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Transport.remote_address)
}
inline void Transport::set_remote_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.remote_address)
}
inline void Transport::set_remote_address(const char* value, size_t size) {
  
  remote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.remote_address)
}
inline std::string* Transport::_internal_mutable_remote_address() {
  
  return remote_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transport::release_remote_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.Transport.remote_address)
  
  return remote_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_allocated_remote_address(std::string* remote_address) {
  if (remote_address != nullptr) {
    
  } else {
    
  }
  remote_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.remote_address)
}

// uint32 remote_port = 6;
inline void Transport::clear_remote_port() {
  remote_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transport::_internal_remote_port() const {
  return remote_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transport::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_port)
  return _internal_remote_port();
}
inline void Transport::_internal_set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_port_ = value;
}
inline void Transport::set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_port)
}

// uint32 tcp_mss = 7;
inline void Transport::clear_tcp_mss() {
  tcp_mss_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transport::_internal_tcp_mss() const {
  return tcp_mss_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Transport::tcp_mss() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.tcp_mss)
  return _internal_tcp_mss();
}
inline void Transport::_internal_set_tcp_mss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcp_mss_ = value;
}
inline void Transport::set_tcp_mss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcp_mss(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.tcp_mss)
}

// string bind_interface = 8;
inline void Transport::clear_bind_interface() {
  bind_interface_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transport::bind_interface() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.bind_interface)
  return _internal_bind_interface();
}
inline void Transport::set_bind_interface(const std::string& value) {
  _internal_set_bind_interface(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.bind_interface)
}
inline std::string* Transport::mutable_bind_interface() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.bind_interface)
  return _internal_mutable_bind_interface();
}
inline const std::string& Transport::_internal_bind_interface() const {
  return bind_interface_.GetNoArena();
}
inline void Transport::_internal_set_bind_interface(const std::string& value) {
  
  bind_interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transport::set_bind_interface(std::string&& value) {
  
  bind_interface_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Transport.bind_interface)
}
inline void Transport::set_bind_interface(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bind_interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.bind_interface)
}
inline void Transport::set_bind_interface(const char* value, size_t size) {
  
  bind_interface_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.bind_interface)
}
inline std::string* Transport::_internal_mutable_bind_interface() {
  
  return bind_interface_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transport::release_bind_interface() {
  // @@protoc_insertion_point(field_release:gobgpapi.Transport.bind_interface)
  
  return bind_interface_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_allocated_bind_interface(std::string* bind_interface) {
  if (bind_interface != nullptr) {
    
  } else {
    
  }
  bind_interface_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bind_interface);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.bind_interface)
}

// -------------------------------------------------------------------

// RouteServer

// bool route_server_client = 1;
inline void RouteServer::clear_route_server_client() {
  route_server_client_ = false;
}
inline bool RouteServer::_internal_route_server_client() const {
  return route_server_client_;
}
inline bool RouteServer::route_server_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteServer.route_server_client)
  return _internal_route_server_client();
}
inline void RouteServer::_internal_set_route_server_client(bool value) {
  
  route_server_client_ = value;
}
inline void RouteServer::set_route_server_client(bool value) {
  _internal_set_route_server_client(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteServer.route_server_client)
}

// bool secondary_route = 2;
inline void RouteServer::clear_secondary_route() {
  secondary_route_ = false;
}
inline bool RouteServer::_internal_secondary_route() const {
  return secondary_route_;
}
inline bool RouteServer::secondary_route() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteServer.secondary_route)
  return _internal_secondary_route();
}
inline void RouteServer::_internal_set_secondary_route(bool value) {
  
  secondary_route_ = value;
}
inline void RouteServer::set_secondary_route(bool value) {
  _internal_set_secondary_route(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteServer.secondary_route)
}

// -------------------------------------------------------------------

// GracefulRestart

// bool enabled = 1;
inline void GracefulRestart::clear_enabled() {
  enabled_ = false;
}
inline bool GracefulRestart::_internal_enabled() const {
  return enabled_;
}
inline bool GracefulRestart::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.enabled)
  return _internal_enabled();
}
inline void GracefulRestart::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void GracefulRestart::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.enabled)
}

// uint32 restart_time = 2;
inline void GracefulRestart::clear_restart_time() {
  restart_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::_internal_restart_time() const {
  return restart_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::restart_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.restart_time)
  return _internal_restart_time();
}
inline void GracefulRestart::_internal_set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  restart_time_ = value;
}
inline void GracefulRestart::set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_restart_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.restart_time)
}

// bool helper_only = 3;
inline void GracefulRestart::clear_helper_only() {
  helper_only_ = false;
}
inline bool GracefulRestart::_internal_helper_only() const {
  return helper_only_;
}
inline bool GracefulRestart::helper_only() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.helper_only)
  return _internal_helper_only();
}
inline void GracefulRestart::_internal_set_helper_only(bool value) {
  
  helper_only_ = value;
}
inline void GracefulRestart::set_helper_only(bool value) {
  _internal_set_helper_only(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.helper_only)
}

// uint32 deferral_time = 4;
inline void GracefulRestart::clear_deferral_time() {
  deferral_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::_internal_deferral_time() const {
  return deferral_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::deferral_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.deferral_time)
  return _internal_deferral_time();
}
inline void GracefulRestart::_internal_set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  deferral_time_ = value;
}
inline void GracefulRestart::set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deferral_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.deferral_time)
}

// bool notification_enabled = 5;
inline void GracefulRestart::clear_notification_enabled() {
  notification_enabled_ = false;
}
inline bool GracefulRestart::_internal_notification_enabled() const {
  return notification_enabled_;
}
inline bool GracefulRestart::notification_enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.notification_enabled)
  return _internal_notification_enabled();
}
inline void GracefulRestart::_internal_set_notification_enabled(bool value) {
  
  notification_enabled_ = value;
}
inline void GracefulRestart::set_notification_enabled(bool value) {
  _internal_set_notification_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.notification_enabled)
}

// bool longlived_enabled = 6;
inline void GracefulRestart::clear_longlived_enabled() {
  longlived_enabled_ = false;
}
inline bool GracefulRestart::_internal_longlived_enabled() const {
  return longlived_enabled_;
}
inline bool GracefulRestart::longlived_enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.longlived_enabled)
  return _internal_longlived_enabled();
}
inline void GracefulRestart::_internal_set_longlived_enabled(bool value) {
  
  longlived_enabled_ = value;
}
inline void GracefulRestart::set_longlived_enabled(bool value) {
  _internal_set_longlived_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.longlived_enabled)
}

// uint32 stale_routes_time = 7;
inline void GracefulRestart::clear_stale_routes_time() {
  stale_routes_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::_internal_stale_routes_time() const {
  return stale_routes_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::stale_routes_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.stale_routes_time)
  return _internal_stale_routes_time();
}
inline void GracefulRestart::_internal_set_stale_routes_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stale_routes_time_ = value;
}
inline void GracefulRestart::set_stale_routes_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stale_routes_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.stale_routes_time)
}

// uint32 peer_restart_time = 8;
inline void GracefulRestart::clear_peer_restart_time() {
  peer_restart_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::_internal_peer_restart_time() const {
  return peer_restart_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GracefulRestart::peer_restart_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.peer_restart_time)
  return _internal_peer_restart_time();
}
inline void GracefulRestart::_internal_set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_restart_time_ = value;
}
inline void GracefulRestart::set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_restart_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.peer_restart_time)
}

// bool peer_restarting = 9;
inline void GracefulRestart::clear_peer_restarting() {
  peer_restarting_ = false;
}
inline bool GracefulRestart::_internal_peer_restarting() const {
  return peer_restarting_;
}
inline bool GracefulRestart::peer_restarting() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.peer_restarting)
  return _internal_peer_restarting();
}
inline void GracefulRestart::_internal_set_peer_restarting(bool value) {
  
  peer_restarting_ = value;
}
inline void GracefulRestart::set_peer_restarting(bool value) {
  _internal_set_peer_restarting(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.peer_restarting)
}

// bool local_restarting = 10;
inline void GracefulRestart::clear_local_restarting() {
  local_restarting_ = false;
}
inline bool GracefulRestart::_internal_local_restarting() const {
  return local_restarting_;
}
inline bool GracefulRestart::local_restarting() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.local_restarting)
  return _internal_local_restarting();
}
inline void GracefulRestart::_internal_set_local_restarting(bool value) {
  
  local_restarting_ = value;
}
inline void GracefulRestart::set_local_restarting(bool value) {
  _internal_set_local_restarting(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.local_restarting)
}

// string mode = 11;
inline void GracefulRestart::clear_mode() {
  mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GracefulRestart::mode() const {
  // @@protoc_insertion_point(field_get:gobgpapi.GracefulRestart.mode)
  return _internal_mode();
}
inline void GracefulRestart::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:gobgpapi.GracefulRestart.mode)
}
inline std::string* GracefulRestart::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.GracefulRestart.mode)
  return _internal_mutable_mode();
}
inline const std::string& GracefulRestart::_internal_mode() const {
  return mode_.GetNoArena();
}
inline void GracefulRestart::_internal_set_mode(const std::string& value) {
  
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GracefulRestart::set_mode(std::string&& value) {
  
  mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.GracefulRestart.mode)
}
inline void GracefulRestart::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.GracefulRestart.mode)
}
inline void GracefulRestart::set_mode(const char* value, size_t size) {
  
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.GracefulRestart.mode)
}
inline std::string* GracefulRestart::_internal_mutable_mode() {
  
  return mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GracefulRestart::release_mode() {
  // @@protoc_insertion_point(field_release:gobgpapi.GracefulRestart.mode)
  
  return mode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GracefulRestart::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.GracefulRestart.mode)
}

// -------------------------------------------------------------------

// MpGracefulRestartConfig

// bool enabled = 1;
inline void MpGracefulRestartConfig::clear_enabled() {
  enabled_ = false;
}
inline bool MpGracefulRestartConfig::_internal_enabled() const {
  return enabled_;
}
inline bool MpGracefulRestartConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartConfig.enabled)
  return _internal_enabled();
}
inline void MpGracefulRestartConfig::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void MpGracefulRestartConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartConfig.enabled)
}

// -------------------------------------------------------------------

// MpGracefulRestartState

// bool enabled = 1;
inline void MpGracefulRestartState::clear_enabled() {
  enabled_ = false;
}
inline bool MpGracefulRestartState::_internal_enabled() const {
  return enabled_;
}
inline bool MpGracefulRestartState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.enabled)
  return _internal_enabled();
}
inline void MpGracefulRestartState::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void MpGracefulRestartState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.enabled)
}

// bool received = 2;
inline void MpGracefulRestartState::clear_received() {
  received_ = false;
}
inline bool MpGracefulRestartState::_internal_received() const {
  return received_;
}
inline bool MpGracefulRestartState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.received)
  return _internal_received();
}
inline void MpGracefulRestartState::_internal_set_received(bool value) {
  
  received_ = value;
}
inline void MpGracefulRestartState::set_received(bool value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.received)
}

// bool advertised = 3;
inline void MpGracefulRestartState::clear_advertised() {
  advertised_ = false;
}
inline bool MpGracefulRestartState::_internal_advertised() const {
  return advertised_;
}
inline bool MpGracefulRestartState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.advertised)
  return _internal_advertised();
}
inline void MpGracefulRestartState::_internal_set_advertised(bool value) {
  
  advertised_ = value;
}
inline void MpGracefulRestartState::set_advertised(bool value) {
  _internal_set_advertised(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.advertised)
}

// bool end_of_rib_received = 4;
inline void MpGracefulRestartState::clear_end_of_rib_received() {
  end_of_rib_received_ = false;
}
inline bool MpGracefulRestartState::_internal_end_of_rib_received() const {
  return end_of_rib_received_;
}
inline bool MpGracefulRestartState::end_of_rib_received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.end_of_rib_received)
  return _internal_end_of_rib_received();
}
inline void MpGracefulRestartState::_internal_set_end_of_rib_received(bool value) {
  
  end_of_rib_received_ = value;
}
inline void MpGracefulRestartState::set_end_of_rib_received(bool value) {
  _internal_set_end_of_rib_received(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.end_of_rib_received)
}

// bool end_of_rib_sent = 5;
inline void MpGracefulRestartState::clear_end_of_rib_sent() {
  end_of_rib_sent_ = false;
}
inline bool MpGracefulRestartState::_internal_end_of_rib_sent() const {
  return end_of_rib_sent_;
}
inline bool MpGracefulRestartState::end_of_rib_sent() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestartState.end_of_rib_sent)
  return _internal_end_of_rib_sent();
}
inline void MpGracefulRestartState::_internal_set_end_of_rib_sent(bool value) {
  
  end_of_rib_sent_ = value;
}
inline void MpGracefulRestartState::set_end_of_rib_sent(bool value) {
  _internal_set_end_of_rib_sent(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MpGracefulRestartState.end_of_rib_sent)
}

// -------------------------------------------------------------------

// MpGracefulRestart

// .gobgpapi.MpGracefulRestartConfig config = 1;
inline bool MpGracefulRestart::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool MpGracefulRestart::has_config() const {
  return _internal_has_config();
}
inline void MpGracefulRestart::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::MpGracefulRestartConfig& MpGracefulRestart::_internal_config() const {
  const ::gobgpapi::MpGracefulRestartConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MpGracefulRestartConfig*>(
      &::gobgpapi::_MpGracefulRestartConfig_default_instance_);
}
inline const ::gobgpapi::MpGracefulRestartConfig& MpGracefulRestart::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestart.config)
  return _internal_config();
}
inline ::gobgpapi::MpGracefulRestartConfig* MpGracefulRestart::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.MpGracefulRestart.config)
  
  ::gobgpapi::MpGracefulRestartConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::MpGracefulRestartConfig* MpGracefulRestart::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MpGracefulRestartConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::MpGracefulRestartConfig* MpGracefulRestart::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpGracefulRestart.config)
  return _internal_mutable_config();
}
inline void MpGracefulRestart::set_allocated_config(::gobgpapi::MpGracefulRestartConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MpGracefulRestart.config)
}

// .gobgpapi.MpGracefulRestartState state = 2;
inline bool MpGracefulRestart::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool MpGracefulRestart::has_state() const {
  return _internal_has_state();
}
inline void MpGracefulRestart::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::MpGracefulRestartState& MpGracefulRestart::_internal_state() const {
  const ::gobgpapi::MpGracefulRestartState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MpGracefulRestartState*>(
      &::gobgpapi::_MpGracefulRestartState_default_instance_);
}
inline const ::gobgpapi::MpGracefulRestartState& MpGracefulRestart::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpGracefulRestart.state)
  return _internal_state();
}
inline ::gobgpapi::MpGracefulRestartState* MpGracefulRestart::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.MpGracefulRestart.state)
  
  ::gobgpapi::MpGracefulRestartState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::MpGracefulRestartState* MpGracefulRestart::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MpGracefulRestartState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::MpGracefulRestartState* MpGracefulRestart::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpGracefulRestart.state)
  return _internal_mutable_state();
}
inline void MpGracefulRestart::set_allocated_state(::gobgpapi::MpGracefulRestartState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MpGracefulRestart.state)
}

// -------------------------------------------------------------------

// AfiSafiConfig

// .gobgpapi.Family family = 1;
inline bool AfiSafiConfig::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool AfiSafiConfig::has_family() const {
  return _internal_has_family();
}
inline void AfiSafiConfig::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& AfiSafiConfig::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& AfiSafiConfig::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiConfig.family)
  return _internal_family();
}
inline ::gobgpapi::Family* AfiSafiConfig::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafiConfig.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* AfiSafiConfig::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* AfiSafiConfig::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafiConfig.family)
  return _internal_mutable_family();
}
inline void AfiSafiConfig::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafiConfig.family)
}

// bool enabled = 2;
inline void AfiSafiConfig::clear_enabled() {
  enabled_ = false;
}
inline bool AfiSafiConfig::_internal_enabled() const {
  return enabled_;
}
inline bool AfiSafiConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiConfig.enabled)
  return _internal_enabled();
}
inline void AfiSafiConfig::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void AfiSafiConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiConfig.enabled)
}

// -------------------------------------------------------------------

// AfiSafiState

// .gobgpapi.Family family = 1;
inline bool AfiSafiState::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool AfiSafiState::has_family() const {
  return _internal_has_family();
}
inline void AfiSafiState::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
inline const ::gobgpapi::Family& AfiSafiState::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& AfiSafiState::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.family)
  return _internal_family();
}
inline ::gobgpapi::Family* AfiSafiState::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafiState.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* AfiSafiState::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* AfiSafiState::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafiState.family)
  return _internal_mutable_family();
}
inline void AfiSafiState::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete family_;
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafiState.family)
}

// bool enabled = 2;
inline void AfiSafiState::clear_enabled() {
  enabled_ = false;
}
inline bool AfiSafiState::_internal_enabled() const {
  return enabled_;
}
inline bool AfiSafiState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.enabled)
  return _internal_enabled();
}
inline void AfiSafiState::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void AfiSafiState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.enabled)
}

// uint64 received = 3;
inline void AfiSafiState::clear_received() {
  received_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AfiSafiState::_internal_received() const {
  return received_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AfiSafiState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.received)
  return _internal_received();
}
inline void AfiSafiState::_internal_set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  received_ = value;
}
inline void AfiSafiState::set_received(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.received)
}

// uint64 accepted = 4;
inline void AfiSafiState::clear_accepted() {
  accepted_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AfiSafiState::_internal_accepted() const {
  return accepted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AfiSafiState::accepted() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.accepted)
  return _internal_accepted();
}
inline void AfiSafiState::_internal_set_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accepted_ = value;
}
inline void AfiSafiState::set_accepted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accepted(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.accepted)
}

// uint64 advertised = 5;
inline void AfiSafiState::clear_advertised() {
  advertised_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AfiSafiState::_internal_advertised() const {
  return advertised_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AfiSafiState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafiState.advertised)
  return _internal_advertised();
}
inline void AfiSafiState::_internal_set_advertised(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  advertised_ = value;
}
inline void AfiSafiState::set_advertised(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_advertised(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AfiSafiState.advertised)
}

// -------------------------------------------------------------------

// RouteSelectionOptionsConfig

// bool always_compare_med = 1;
inline void RouteSelectionOptionsConfig::clear_always_compare_med() {
  always_compare_med_ = false;
}
inline bool RouteSelectionOptionsConfig::_internal_always_compare_med() const {
  return always_compare_med_;
}
inline bool RouteSelectionOptionsConfig::always_compare_med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.always_compare_med)
  return _internal_always_compare_med();
}
inline void RouteSelectionOptionsConfig::_internal_set_always_compare_med(bool value) {
  
  always_compare_med_ = value;
}
inline void RouteSelectionOptionsConfig::set_always_compare_med(bool value) {
  _internal_set_always_compare_med(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.always_compare_med)
}

// bool ignore_as_path_length = 2;
inline void RouteSelectionOptionsConfig::clear_ignore_as_path_length() {
  ignore_as_path_length_ = false;
}
inline bool RouteSelectionOptionsConfig::_internal_ignore_as_path_length() const {
  return ignore_as_path_length_;
}
inline bool RouteSelectionOptionsConfig::ignore_as_path_length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.ignore_as_path_length)
  return _internal_ignore_as_path_length();
}
inline void RouteSelectionOptionsConfig::_internal_set_ignore_as_path_length(bool value) {
  
  ignore_as_path_length_ = value;
}
inline void RouteSelectionOptionsConfig::set_ignore_as_path_length(bool value) {
  _internal_set_ignore_as_path_length(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.ignore_as_path_length)
}

// bool external_compare_router_id = 3;
inline void RouteSelectionOptionsConfig::clear_external_compare_router_id() {
  external_compare_router_id_ = false;
}
inline bool RouteSelectionOptionsConfig::_internal_external_compare_router_id() const {
  return external_compare_router_id_;
}
inline bool RouteSelectionOptionsConfig::external_compare_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.external_compare_router_id)
  return _internal_external_compare_router_id();
}
inline void RouteSelectionOptionsConfig::_internal_set_external_compare_router_id(bool value) {
  
  external_compare_router_id_ = value;
}
inline void RouteSelectionOptionsConfig::set_external_compare_router_id(bool value) {
  _internal_set_external_compare_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.external_compare_router_id)
}

// bool advertise_inactive_routes = 4;
inline void RouteSelectionOptionsConfig::clear_advertise_inactive_routes() {
  advertise_inactive_routes_ = false;
}
inline bool RouteSelectionOptionsConfig::_internal_advertise_inactive_routes() const {
  return advertise_inactive_routes_;
}
inline bool RouteSelectionOptionsConfig::advertise_inactive_routes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.advertise_inactive_routes)
  return _internal_advertise_inactive_routes();
}
inline void RouteSelectionOptionsConfig::_internal_set_advertise_inactive_routes(bool value) {
  
  advertise_inactive_routes_ = value;
}
inline void RouteSelectionOptionsConfig::set_advertise_inactive_routes(bool value) {
  _internal_set_advertise_inactive_routes(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.advertise_inactive_routes)
}

// bool enable_aigp = 5;
inline void RouteSelectionOptionsConfig::clear_enable_aigp() {
  enable_aigp_ = false;
}
inline bool RouteSelectionOptionsConfig::_internal_enable_aigp() const {
  return enable_aigp_;
}
inline bool RouteSelectionOptionsConfig::enable_aigp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.enable_aigp)
  return _internal_enable_aigp();
}
inline void RouteSelectionOptionsConfig::_internal_set_enable_aigp(bool value) {
  
  enable_aigp_ = value;
}
inline void RouteSelectionOptionsConfig::set_enable_aigp(bool value) {
  _internal_set_enable_aigp(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.enable_aigp)
}

// bool ignore_next_hop_igp_metric = 6;
inline void RouteSelectionOptionsConfig::clear_ignore_next_hop_igp_metric() {
  ignore_next_hop_igp_metric_ = false;
}
inline bool RouteSelectionOptionsConfig::_internal_ignore_next_hop_igp_metric() const {
  return ignore_next_hop_igp_metric_;
}
inline bool RouteSelectionOptionsConfig::ignore_next_hop_igp_metric() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.ignore_next_hop_igp_metric)
  return _internal_ignore_next_hop_igp_metric();
}
inline void RouteSelectionOptionsConfig::_internal_set_ignore_next_hop_igp_metric(bool value) {
  
  ignore_next_hop_igp_metric_ = value;
}
inline void RouteSelectionOptionsConfig::set_ignore_next_hop_igp_metric(bool value) {
  _internal_set_ignore_next_hop_igp_metric(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.ignore_next_hop_igp_metric)
}

// bool disable_best_path_selection = 7;
inline void RouteSelectionOptionsConfig::clear_disable_best_path_selection() {
  disable_best_path_selection_ = false;
}
inline bool RouteSelectionOptionsConfig::_internal_disable_best_path_selection() const {
  return disable_best_path_selection_;
}
inline bool RouteSelectionOptionsConfig::disable_best_path_selection() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsConfig.disable_best_path_selection)
  return _internal_disable_best_path_selection();
}
inline void RouteSelectionOptionsConfig::_internal_set_disable_best_path_selection(bool value) {
  
  disable_best_path_selection_ = value;
}
inline void RouteSelectionOptionsConfig::set_disable_best_path_selection(bool value) {
  _internal_set_disable_best_path_selection(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsConfig.disable_best_path_selection)
}

// -------------------------------------------------------------------

// RouteSelectionOptionsState

// bool always_compare_med = 1;
inline void RouteSelectionOptionsState::clear_always_compare_med() {
  always_compare_med_ = false;
}
inline bool RouteSelectionOptionsState::_internal_always_compare_med() const {
  return always_compare_med_;
}
inline bool RouteSelectionOptionsState::always_compare_med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.always_compare_med)
  return _internal_always_compare_med();
}
inline void RouteSelectionOptionsState::_internal_set_always_compare_med(bool value) {
  
  always_compare_med_ = value;
}
inline void RouteSelectionOptionsState::set_always_compare_med(bool value) {
  _internal_set_always_compare_med(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.always_compare_med)
}

// bool ignore_as_path_length = 2;
inline void RouteSelectionOptionsState::clear_ignore_as_path_length() {
  ignore_as_path_length_ = false;
}
inline bool RouteSelectionOptionsState::_internal_ignore_as_path_length() const {
  return ignore_as_path_length_;
}
inline bool RouteSelectionOptionsState::ignore_as_path_length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.ignore_as_path_length)
  return _internal_ignore_as_path_length();
}
inline void RouteSelectionOptionsState::_internal_set_ignore_as_path_length(bool value) {
  
  ignore_as_path_length_ = value;
}
inline void RouteSelectionOptionsState::set_ignore_as_path_length(bool value) {
  _internal_set_ignore_as_path_length(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.ignore_as_path_length)
}

// bool external_compare_router_id = 3;
inline void RouteSelectionOptionsState::clear_external_compare_router_id() {
  external_compare_router_id_ = false;
}
inline bool RouteSelectionOptionsState::_internal_external_compare_router_id() const {
  return external_compare_router_id_;
}
inline bool RouteSelectionOptionsState::external_compare_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.external_compare_router_id)
  return _internal_external_compare_router_id();
}
inline void RouteSelectionOptionsState::_internal_set_external_compare_router_id(bool value) {
  
  external_compare_router_id_ = value;
}
inline void RouteSelectionOptionsState::set_external_compare_router_id(bool value) {
  _internal_set_external_compare_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.external_compare_router_id)
}

// bool advertise_inactive_routes = 4;
inline void RouteSelectionOptionsState::clear_advertise_inactive_routes() {
  advertise_inactive_routes_ = false;
}
inline bool RouteSelectionOptionsState::_internal_advertise_inactive_routes() const {
  return advertise_inactive_routes_;
}
inline bool RouteSelectionOptionsState::advertise_inactive_routes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.advertise_inactive_routes)
  return _internal_advertise_inactive_routes();
}
inline void RouteSelectionOptionsState::_internal_set_advertise_inactive_routes(bool value) {
  
  advertise_inactive_routes_ = value;
}
inline void RouteSelectionOptionsState::set_advertise_inactive_routes(bool value) {
  _internal_set_advertise_inactive_routes(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.advertise_inactive_routes)
}

// bool enable_aigp = 5;
inline void RouteSelectionOptionsState::clear_enable_aigp() {
  enable_aigp_ = false;
}
inline bool RouteSelectionOptionsState::_internal_enable_aigp() const {
  return enable_aigp_;
}
inline bool RouteSelectionOptionsState::enable_aigp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.enable_aigp)
  return _internal_enable_aigp();
}
inline void RouteSelectionOptionsState::_internal_set_enable_aigp(bool value) {
  
  enable_aigp_ = value;
}
inline void RouteSelectionOptionsState::set_enable_aigp(bool value) {
  _internal_set_enable_aigp(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.enable_aigp)
}

// bool ignore_next_hop_igp_metric = 6;
inline void RouteSelectionOptionsState::clear_ignore_next_hop_igp_metric() {
  ignore_next_hop_igp_metric_ = false;
}
inline bool RouteSelectionOptionsState::_internal_ignore_next_hop_igp_metric() const {
  return ignore_next_hop_igp_metric_;
}
inline bool RouteSelectionOptionsState::ignore_next_hop_igp_metric() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.ignore_next_hop_igp_metric)
  return _internal_ignore_next_hop_igp_metric();
}
inline void RouteSelectionOptionsState::_internal_set_ignore_next_hop_igp_metric(bool value) {
  
  ignore_next_hop_igp_metric_ = value;
}
inline void RouteSelectionOptionsState::set_ignore_next_hop_igp_metric(bool value) {
  _internal_set_ignore_next_hop_igp_metric(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.ignore_next_hop_igp_metric)
}

// bool disable_best_path_selection = 7;
inline void RouteSelectionOptionsState::clear_disable_best_path_selection() {
  disable_best_path_selection_ = false;
}
inline bool RouteSelectionOptionsState::_internal_disable_best_path_selection() const {
  return disable_best_path_selection_;
}
inline bool RouteSelectionOptionsState::disable_best_path_selection() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptionsState.disable_best_path_selection)
  return _internal_disable_best_path_selection();
}
inline void RouteSelectionOptionsState::_internal_set_disable_best_path_selection(bool value) {
  
  disable_best_path_selection_ = value;
}
inline void RouteSelectionOptionsState::set_disable_best_path_selection(bool value) {
  _internal_set_disable_best_path_selection(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteSelectionOptionsState.disable_best_path_selection)
}

// -------------------------------------------------------------------

// RouteSelectionOptions

// .gobgpapi.RouteSelectionOptionsConfig config = 1;
inline bool RouteSelectionOptions::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool RouteSelectionOptions::has_config() const {
  return _internal_has_config();
}
inline void RouteSelectionOptions::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::RouteSelectionOptionsConfig& RouteSelectionOptions::_internal_config() const {
  const ::gobgpapi::RouteSelectionOptionsConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteSelectionOptionsConfig*>(
      &::gobgpapi::_RouteSelectionOptionsConfig_default_instance_);
}
inline const ::gobgpapi::RouteSelectionOptionsConfig& RouteSelectionOptions::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptions.config)
  return _internal_config();
}
inline ::gobgpapi::RouteSelectionOptionsConfig* RouteSelectionOptions::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteSelectionOptions.config)
  
  ::gobgpapi::RouteSelectionOptionsConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteSelectionOptionsConfig* RouteSelectionOptions::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteSelectionOptionsConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::RouteSelectionOptionsConfig* RouteSelectionOptions::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteSelectionOptions.config)
  return _internal_mutable_config();
}
inline void RouteSelectionOptions::set_allocated_config(::gobgpapi::RouteSelectionOptionsConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteSelectionOptions.config)
}

// .gobgpapi.RouteSelectionOptionsState state = 2;
inline bool RouteSelectionOptions::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool RouteSelectionOptions::has_state() const {
  return _internal_has_state();
}
inline void RouteSelectionOptions::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::RouteSelectionOptionsState& RouteSelectionOptions::_internal_state() const {
  const ::gobgpapi::RouteSelectionOptionsState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteSelectionOptionsState*>(
      &::gobgpapi::_RouteSelectionOptionsState_default_instance_);
}
inline const ::gobgpapi::RouteSelectionOptionsState& RouteSelectionOptions::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteSelectionOptions.state)
  return _internal_state();
}
inline ::gobgpapi::RouteSelectionOptionsState* RouteSelectionOptions::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteSelectionOptions.state)
  
  ::gobgpapi::RouteSelectionOptionsState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteSelectionOptionsState* RouteSelectionOptions::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteSelectionOptionsState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::RouteSelectionOptionsState* RouteSelectionOptions::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteSelectionOptions.state)
  return _internal_mutable_state();
}
inline void RouteSelectionOptions::set_allocated_state(::gobgpapi::RouteSelectionOptionsState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteSelectionOptions.state)
}

// -------------------------------------------------------------------

// UseMultiplePathsConfig

// bool enabled = 1;
inline void UseMultiplePathsConfig::clear_enabled() {
  enabled_ = false;
}
inline bool UseMultiplePathsConfig::_internal_enabled() const {
  return enabled_;
}
inline bool UseMultiplePathsConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePathsConfig.enabled)
  return _internal_enabled();
}
inline void UseMultiplePathsConfig::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void UseMultiplePathsConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UseMultiplePathsConfig.enabled)
}

// -------------------------------------------------------------------

// UseMultiplePathsState

// bool enabled = 1;
inline void UseMultiplePathsState::clear_enabled() {
  enabled_ = false;
}
inline bool UseMultiplePathsState::_internal_enabled() const {
  return enabled_;
}
inline bool UseMultiplePathsState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePathsState.enabled)
  return _internal_enabled();
}
inline void UseMultiplePathsState::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void UseMultiplePathsState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UseMultiplePathsState.enabled)
}

// -------------------------------------------------------------------

// EbgpConfig

// bool allow_multiple_as = 1;
inline void EbgpConfig::clear_allow_multiple_as() {
  allow_multiple_as_ = false;
}
inline bool EbgpConfig::_internal_allow_multiple_as() const {
  return allow_multiple_as_;
}
inline bool EbgpConfig::allow_multiple_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpConfig.allow_multiple_as)
  return _internal_allow_multiple_as();
}
inline void EbgpConfig::_internal_set_allow_multiple_as(bool value) {
  
  allow_multiple_as_ = value;
}
inline void EbgpConfig::set_allow_multiple_as(bool value) {
  _internal_set_allow_multiple_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpConfig.allow_multiple_as)
}

// uint32 maximum_paths = 2;
inline void EbgpConfig::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EbgpConfig::_internal_maximum_paths() const {
  return maximum_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EbgpConfig::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpConfig.maximum_paths)
  return _internal_maximum_paths();
}
inline void EbgpConfig::_internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maximum_paths_ = value;
}
inline void EbgpConfig::set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maximum_paths(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpConfig.maximum_paths)
}

// -------------------------------------------------------------------

// EbgpState

// bool allow_multiple_as = 1;
inline void EbgpState::clear_allow_multiple_as() {
  allow_multiple_as_ = false;
}
inline bool EbgpState::_internal_allow_multiple_as() const {
  return allow_multiple_as_;
}
inline bool EbgpState::allow_multiple_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpState.allow_multiple_as)
  return _internal_allow_multiple_as();
}
inline void EbgpState::_internal_set_allow_multiple_as(bool value) {
  
  allow_multiple_as_ = value;
}
inline void EbgpState::set_allow_multiple_as(bool value) {
  _internal_set_allow_multiple_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpState.allow_multiple_as)
}

// uint32 maximum_paths = 2;
inline void EbgpState::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EbgpState::_internal_maximum_paths() const {
  return maximum_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EbgpState::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpState.maximum_paths)
  return _internal_maximum_paths();
}
inline void EbgpState::_internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maximum_paths_ = value;
}
inline void EbgpState::set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maximum_paths(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpState.maximum_paths)
}

// -------------------------------------------------------------------

// Ebgp

// .gobgpapi.EbgpConfig config = 1;
inline bool Ebgp::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Ebgp::has_config() const {
  return _internal_has_config();
}
inline void Ebgp::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::EbgpConfig& Ebgp::_internal_config() const {
  const ::gobgpapi::EbgpConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EbgpConfig*>(
      &::gobgpapi::_EbgpConfig_default_instance_);
}
inline const ::gobgpapi::EbgpConfig& Ebgp::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Ebgp.config)
  return _internal_config();
}
inline ::gobgpapi::EbgpConfig* Ebgp::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ebgp.config)
  
  ::gobgpapi::EbgpConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::EbgpConfig* Ebgp::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EbgpConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::EbgpConfig* Ebgp::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ebgp.config)
  return _internal_mutable_config();
}
inline void Ebgp::set_allocated_config(::gobgpapi::EbgpConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ebgp.config)
}

// .gobgpapi.EbgpState state = 2;
inline bool Ebgp::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Ebgp::has_state() const {
  return _internal_has_state();
}
inline void Ebgp::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::EbgpState& Ebgp::_internal_state() const {
  const ::gobgpapi::EbgpState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EbgpState*>(
      &::gobgpapi::_EbgpState_default_instance_);
}
inline const ::gobgpapi::EbgpState& Ebgp::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Ebgp.state)
  return _internal_state();
}
inline ::gobgpapi::EbgpState* Ebgp::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ebgp.state)
  
  ::gobgpapi::EbgpState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::EbgpState* Ebgp::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EbgpState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::EbgpState* Ebgp::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ebgp.state)
  return _internal_mutable_state();
}
inline void Ebgp::set_allocated_state(::gobgpapi::EbgpState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ebgp.state)
}

// -------------------------------------------------------------------

// IbgpConfig

// uint32 maximum_paths = 1;
inline void IbgpConfig::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IbgpConfig::_internal_maximum_paths() const {
  return maximum_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IbgpConfig::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IbgpConfig.maximum_paths)
  return _internal_maximum_paths();
}
inline void IbgpConfig::_internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maximum_paths_ = value;
}
inline void IbgpConfig::set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maximum_paths(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IbgpConfig.maximum_paths)
}

// -------------------------------------------------------------------

// IbgpState

// uint32 maximum_paths = 1;
inline void IbgpState::clear_maximum_paths() {
  maximum_paths_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IbgpState::_internal_maximum_paths() const {
  return maximum_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IbgpState::maximum_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IbgpState.maximum_paths)
  return _internal_maximum_paths();
}
inline void IbgpState::_internal_set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maximum_paths_ = value;
}
inline void IbgpState::set_maximum_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maximum_paths(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IbgpState.maximum_paths)
}

// -------------------------------------------------------------------

// Ibgp

// .gobgpapi.IbgpConfig config = 1;
inline bool Ibgp::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool Ibgp::has_config() const {
  return _internal_has_config();
}
inline void Ibgp::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::IbgpConfig& Ibgp::_internal_config() const {
  const ::gobgpapi::IbgpConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::IbgpConfig*>(
      &::gobgpapi::_IbgpConfig_default_instance_);
}
inline const ::gobgpapi::IbgpConfig& Ibgp::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Ibgp.config)
  return _internal_config();
}
inline ::gobgpapi::IbgpConfig* Ibgp::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ibgp.config)
  
  ::gobgpapi::IbgpConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::IbgpConfig* Ibgp::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::IbgpConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::IbgpConfig* Ibgp::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ibgp.config)
  return _internal_mutable_config();
}
inline void Ibgp::set_allocated_config(::gobgpapi::IbgpConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ibgp.config)
}

// .gobgpapi.IbgpState state = 2;
inline bool Ibgp::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Ibgp::has_state() const {
  return _internal_has_state();
}
inline void Ibgp::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::IbgpState& Ibgp::_internal_state() const {
  const ::gobgpapi::IbgpState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::IbgpState*>(
      &::gobgpapi::_IbgpState_default_instance_);
}
inline const ::gobgpapi::IbgpState& Ibgp::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Ibgp.state)
  return _internal_state();
}
inline ::gobgpapi::IbgpState* Ibgp::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Ibgp.state)
  
  ::gobgpapi::IbgpState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::IbgpState* Ibgp::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::IbgpState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::IbgpState* Ibgp::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Ibgp.state)
  return _internal_mutable_state();
}
inline void Ibgp::set_allocated_state(::gobgpapi::IbgpState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Ibgp.state)
}

// -------------------------------------------------------------------

// UseMultiplePaths

// .gobgpapi.UseMultiplePathsConfig config = 1;
inline bool UseMultiplePaths::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool UseMultiplePaths::has_config() const {
  return _internal_has_config();
}
inline void UseMultiplePaths::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::UseMultiplePathsConfig& UseMultiplePaths::_internal_config() const {
  const ::gobgpapi::UseMultiplePathsConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::UseMultiplePathsConfig*>(
      &::gobgpapi::_UseMultiplePathsConfig_default_instance_);
}
inline const ::gobgpapi::UseMultiplePathsConfig& UseMultiplePaths::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.config)
  return _internal_config();
}
inline ::gobgpapi::UseMultiplePathsConfig* UseMultiplePaths::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.config)
  
  ::gobgpapi::UseMultiplePathsConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::UseMultiplePathsConfig* UseMultiplePaths::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::UseMultiplePathsConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::UseMultiplePathsConfig* UseMultiplePaths::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.config)
  return _internal_mutable_config();
}
inline void UseMultiplePaths::set_allocated_config(::gobgpapi::UseMultiplePathsConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.config)
}

// .gobgpapi.UseMultiplePathsState state = 2;
inline bool UseMultiplePaths::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool UseMultiplePaths::has_state() const {
  return _internal_has_state();
}
inline void UseMultiplePaths::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::UseMultiplePathsState& UseMultiplePaths::_internal_state() const {
  const ::gobgpapi::UseMultiplePathsState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::UseMultiplePathsState*>(
      &::gobgpapi::_UseMultiplePathsState_default_instance_);
}
inline const ::gobgpapi::UseMultiplePathsState& UseMultiplePaths::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.state)
  return _internal_state();
}
inline ::gobgpapi::UseMultiplePathsState* UseMultiplePaths::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.state)
  
  ::gobgpapi::UseMultiplePathsState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::UseMultiplePathsState* UseMultiplePaths::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::UseMultiplePathsState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::UseMultiplePathsState* UseMultiplePaths::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.state)
  return _internal_mutable_state();
}
inline void UseMultiplePaths::set_allocated_state(::gobgpapi::UseMultiplePathsState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.state)
}

// .gobgpapi.Ebgp ebgp = 3;
inline bool UseMultiplePaths::_internal_has_ebgp() const {
  return this != internal_default_instance() && ebgp_ != nullptr;
}
inline bool UseMultiplePaths::has_ebgp() const {
  return _internal_has_ebgp();
}
inline void UseMultiplePaths::clear_ebgp() {
  if (GetArenaNoVirtual() == nullptr && ebgp_ != nullptr) {
    delete ebgp_;
  }
  ebgp_ = nullptr;
}
inline const ::gobgpapi::Ebgp& UseMultiplePaths::_internal_ebgp() const {
  const ::gobgpapi::Ebgp* p = ebgp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Ebgp*>(
      &::gobgpapi::_Ebgp_default_instance_);
}
inline const ::gobgpapi::Ebgp& UseMultiplePaths::ebgp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.ebgp)
  return _internal_ebgp();
}
inline ::gobgpapi::Ebgp* UseMultiplePaths::release_ebgp() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.ebgp)
  
  ::gobgpapi::Ebgp* temp = ebgp_;
  ebgp_ = nullptr;
  return temp;
}
inline ::gobgpapi::Ebgp* UseMultiplePaths::_internal_mutable_ebgp() {
  
  if (ebgp_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Ebgp>(GetArenaNoVirtual());
    ebgp_ = p;
  }
  return ebgp_;
}
inline ::gobgpapi::Ebgp* UseMultiplePaths::mutable_ebgp() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.ebgp)
  return _internal_mutable_ebgp();
}
inline void UseMultiplePaths::set_allocated_ebgp(::gobgpapi::Ebgp* ebgp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ebgp_;
  }
  if (ebgp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ebgp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ebgp, submessage_arena);
    }
    
  } else {
    
  }
  ebgp_ = ebgp;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.ebgp)
}

// .gobgpapi.Ibgp ibgp = 4;
inline bool UseMultiplePaths::_internal_has_ibgp() const {
  return this != internal_default_instance() && ibgp_ != nullptr;
}
inline bool UseMultiplePaths::has_ibgp() const {
  return _internal_has_ibgp();
}
inline void UseMultiplePaths::clear_ibgp() {
  if (GetArenaNoVirtual() == nullptr && ibgp_ != nullptr) {
    delete ibgp_;
  }
  ibgp_ = nullptr;
}
inline const ::gobgpapi::Ibgp& UseMultiplePaths::_internal_ibgp() const {
  const ::gobgpapi::Ibgp* p = ibgp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Ibgp*>(
      &::gobgpapi::_Ibgp_default_instance_);
}
inline const ::gobgpapi::Ibgp& UseMultiplePaths::ibgp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UseMultiplePaths.ibgp)
  return _internal_ibgp();
}
inline ::gobgpapi::Ibgp* UseMultiplePaths::release_ibgp() {
  // @@protoc_insertion_point(field_release:gobgpapi.UseMultiplePaths.ibgp)
  
  ::gobgpapi::Ibgp* temp = ibgp_;
  ibgp_ = nullptr;
  return temp;
}
inline ::gobgpapi::Ibgp* UseMultiplePaths::_internal_mutable_ibgp() {
  
  if (ibgp_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Ibgp>(GetArenaNoVirtual());
    ibgp_ = p;
  }
  return ibgp_;
}
inline ::gobgpapi::Ibgp* UseMultiplePaths::mutable_ibgp() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UseMultiplePaths.ibgp)
  return _internal_mutable_ibgp();
}
inline void UseMultiplePaths::set_allocated_ibgp(::gobgpapi::Ibgp* ibgp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ibgp_;
  }
  if (ibgp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ibgp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ibgp, submessage_arena);
    }
    
  } else {
    
  }
  ibgp_ = ibgp;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UseMultiplePaths.ibgp)
}

// -------------------------------------------------------------------

// RouteTargetMembershipConfig

// uint32 deferral_time = 1;
inline void RouteTargetMembershipConfig::clear_deferral_time() {
  deferral_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipConfig::_internal_deferral_time() const {
  return deferral_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipConfig::deferral_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembershipConfig.deferral_time)
  return _internal_deferral_time();
}
inline void RouteTargetMembershipConfig::_internal_set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  deferral_time_ = value;
}
inline void RouteTargetMembershipConfig::set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deferral_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteTargetMembershipConfig.deferral_time)
}

// -------------------------------------------------------------------

// RouteTargetMembershipState

// uint32 deferral_time = 1;
inline void RouteTargetMembershipState::clear_deferral_time() {
  deferral_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipState::_internal_deferral_time() const {
  return deferral_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipState::deferral_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembershipState.deferral_time)
  return _internal_deferral_time();
}
inline void RouteTargetMembershipState::_internal_set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  deferral_time_ = value;
}
inline void RouteTargetMembershipState::set_deferral_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deferral_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteTargetMembershipState.deferral_time)
}

// -------------------------------------------------------------------

// RouteTargetMembership

// .gobgpapi.RouteTargetMembershipConfig config = 1;
inline bool RouteTargetMembership::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool RouteTargetMembership::has_config() const {
  return _internal_has_config();
}
inline void RouteTargetMembership::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::RouteTargetMembershipConfig& RouteTargetMembership::_internal_config() const {
  const ::gobgpapi::RouteTargetMembershipConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteTargetMembershipConfig*>(
      &::gobgpapi::_RouteTargetMembershipConfig_default_instance_);
}
inline const ::gobgpapi::RouteTargetMembershipConfig& RouteTargetMembership::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembership.config)
  return _internal_config();
}
inline ::gobgpapi::RouteTargetMembershipConfig* RouteTargetMembership::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteTargetMembership.config)
  
  ::gobgpapi::RouteTargetMembershipConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteTargetMembershipConfig* RouteTargetMembership::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteTargetMembershipConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::RouteTargetMembershipConfig* RouteTargetMembership::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteTargetMembership.config)
  return _internal_mutable_config();
}
inline void RouteTargetMembership::set_allocated_config(::gobgpapi::RouteTargetMembershipConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteTargetMembership.config)
}

// .gobgpapi.RouteTargetMembershipState state = 2;
inline bool RouteTargetMembership::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool RouteTargetMembership::has_state() const {
  return _internal_has_state();
}
inline void RouteTargetMembership::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::RouteTargetMembershipState& RouteTargetMembership::_internal_state() const {
  const ::gobgpapi::RouteTargetMembershipState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteTargetMembershipState*>(
      &::gobgpapi::_RouteTargetMembershipState_default_instance_);
}
inline const ::gobgpapi::RouteTargetMembershipState& RouteTargetMembership::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembership.state)
  return _internal_state();
}
inline ::gobgpapi::RouteTargetMembershipState* RouteTargetMembership::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteTargetMembership.state)
  
  ::gobgpapi::RouteTargetMembershipState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteTargetMembershipState* RouteTargetMembership::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteTargetMembershipState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::RouteTargetMembershipState* RouteTargetMembership::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteTargetMembership.state)
  return _internal_mutable_state();
}
inline void RouteTargetMembership::set_allocated_state(::gobgpapi::RouteTargetMembershipState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteTargetMembership.state)
}

// -------------------------------------------------------------------

// LongLivedGracefulRestartConfig

// bool enabled = 1;
inline void LongLivedGracefulRestartConfig::clear_enabled() {
  enabled_ = false;
}
inline bool LongLivedGracefulRestartConfig::_internal_enabled() const {
  return enabled_;
}
inline bool LongLivedGracefulRestartConfig::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartConfig.enabled)
  return _internal_enabled();
}
inline void LongLivedGracefulRestartConfig::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void LongLivedGracefulRestartConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartConfig.enabled)
}

// uint32 restart_time = 2;
inline void LongLivedGracefulRestartConfig::clear_restart_time() {
  restart_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LongLivedGracefulRestartConfig::_internal_restart_time() const {
  return restart_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LongLivedGracefulRestartConfig::restart_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartConfig.restart_time)
  return _internal_restart_time();
}
inline void LongLivedGracefulRestartConfig::_internal_set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  restart_time_ = value;
}
inline void LongLivedGracefulRestartConfig::set_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_restart_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartConfig.restart_time)
}

// -------------------------------------------------------------------

// LongLivedGracefulRestartState

// bool enabled = 1;
inline void LongLivedGracefulRestartState::clear_enabled() {
  enabled_ = false;
}
inline bool LongLivedGracefulRestartState::_internal_enabled() const {
  return enabled_;
}
inline bool LongLivedGracefulRestartState::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.enabled)
  return _internal_enabled();
}
inline void LongLivedGracefulRestartState::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void LongLivedGracefulRestartState::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.enabled)
}

// bool received = 2;
inline void LongLivedGracefulRestartState::clear_received() {
  received_ = false;
}
inline bool LongLivedGracefulRestartState::_internal_received() const {
  return received_;
}
inline bool LongLivedGracefulRestartState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.received)
  return _internal_received();
}
inline void LongLivedGracefulRestartState::_internal_set_received(bool value) {
  
  received_ = value;
}
inline void LongLivedGracefulRestartState::set_received(bool value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.received)
}

// bool advertised = 3;
inline void LongLivedGracefulRestartState::clear_advertised() {
  advertised_ = false;
}
inline bool LongLivedGracefulRestartState::_internal_advertised() const {
  return advertised_;
}
inline bool LongLivedGracefulRestartState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.advertised)
  return _internal_advertised();
}
inline void LongLivedGracefulRestartState::_internal_set_advertised(bool value) {
  
  advertised_ = value;
}
inline void LongLivedGracefulRestartState::set_advertised(bool value) {
  _internal_set_advertised(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.advertised)
}

// uint32 peer_restart_time = 4;
inline void LongLivedGracefulRestartState::clear_peer_restart_time() {
  peer_restart_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LongLivedGracefulRestartState::_internal_peer_restart_time() const {
  return peer_restart_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LongLivedGracefulRestartState::peer_restart_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.peer_restart_time)
  return _internal_peer_restart_time();
}
inline void LongLivedGracefulRestartState::_internal_set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  peer_restart_time_ = value;
}
inline void LongLivedGracefulRestartState::set_peer_restart_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peer_restart_time(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.peer_restart_time)
}

// bool peer_restart_timer_expired = 5;
inline void LongLivedGracefulRestartState::clear_peer_restart_timer_expired() {
  peer_restart_timer_expired_ = false;
}
inline bool LongLivedGracefulRestartState::_internal_peer_restart_timer_expired() const {
  return peer_restart_timer_expired_;
}
inline bool LongLivedGracefulRestartState::peer_restart_timer_expired() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestartState.peer_restart_timer_expired)
  return _internal_peer_restart_timer_expired();
}
inline void LongLivedGracefulRestartState::_internal_set_peer_restart_timer_expired(bool value) {
  
  peer_restart_timer_expired_ = value;
}
inline void LongLivedGracefulRestartState::set_peer_restart_timer_expired(bool value) {
  _internal_set_peer_restart_timer_expired(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LongLivedGracefulRestartState.peer_restart_timer_expired)
}

// -------------------------------------------------------------------

// LongLivedGracefulRestart

// .gobgpapi.LongLivedGracefulRestartConfig config = 1;
inline bool LongLivedGracefulRestart::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool LongLivedGracefulRestart::has_config() const {
  return _internal_has_config();
}
inline void LongLivedGracefulRestart::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::LongLivedGracefulRestartConfig& LongLivedGracefulRestart::_internal_config() const {
  const ::gobgpapi::LongLivedGracefulRestartConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LongLivedGracefulRestartConfig*>(
      &::gobgpapi::_LongLivedGracefulRestartConfig_default_instance_);
}
inline const ::gobgpapi::LongLivedGracefulRestartConfig& LongLivedGracefulRestart::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestart.config)
  return _internal_config();
}
inline ::gobgpapi::LongLivedGracefulRestartConfig* LongLivedGracefulRestart::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.LongLivedGracefulRestart.config)
  
  ::gobgpapi::LongLivedGracefulRestartConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::LongLivedGracefulRestartConfig* LongLivedGracefulRestart::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LongLivedGracefulRestartConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::LongLivedGracefulRestartConfig* LongLivedGracefulRestart::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LongLivedGracefulRestart.config)
  return _internal_mutable_config();
}
inline void LongLivedGracefulRestart::set_allocated_config(::gobgpapi::LongLivedGracefulRestartConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LongLivedGracefulRestart.config)
}

// .gobgpapi.LongLivedGracefulRestartState state = 2;
inline bool LongLivedGracefulRestart::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool LongLivedGracefulRestart::has_state() const {
  return _internal_has_state();
}
inline void LongLivedGracefulRestart::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::LongLivedGracefulRestartState& LongLivedGracefulRestart::_internal_state() const {
  const ::gobgpapi::LongLivedGracefulRestartState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LongLivedGracefulRestartState*>(
      &::gobgpapi::_LongLivedGracefulRestartState_default_instance_);
}
inline const ::gobgpapi::LongLivedGracefulRestartState& LongLivedGracefulRestart::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LongLivedGracefulRestart.state)
  return _internal_state();
}
inline ::gobgpapi::LongLivedGracefulRestartState* LongLivedGracefulRestart::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.LongLivedGracefulRestart.state)
  
  ::gobgpapi::LongLivedGracefulRestartState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::LongLivedGracefulRestartState* LongLivedGracefulRestart::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LongLivedGracefulRestartState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::LongLivedGracefulRestartState* LongLivedGracefulRestart::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LongLivedGracefulRestart.state)
  return _internal_mutable_state();
}
inline void LongLivedGracefulRestart::set_allocated_state(::gobgpapi::LongLivedGracefulRestartState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LongLivedGracefulRestart.state)
}

// -------------------------------------------------------------------

// AfiSafi

// .gobgpapi.MpGracefulRestart mp_graceful_restart = 1;
inline bool AfiSafi::_internal_has_mp_graceful_restart() const {
  return this != internal_default_instance() && mp_graceful_restart_ != nullptr;
}
inline bool AfiSafi::has_mp_graceful_restart() const {
  return _internal_has_mp_graceful_restart();
}
inline void AfiSafi::clear_mp_graceful_restart() {
  if (GetArenaNoVirtual() == nullptr && mp_graceful_restart_ != nullptr) {
    delete mp_graceful_restart_;
  }
  mp_graceful_restart_ = nullptr;
}
inline const ::gobgpapi::MpGracefulRestart& AfiSafi::_internal_mp_graceful_restart() const {
  const ::gobgpapi::MpGracefulRestart* p = mp_graceful_restart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MpGracefulRestart*>(
      &::gobgpapi::_MpGracefulRestart_default_instance_);
}
inline const ::gobgpapi::MpGracefulRestart& AfiSafi::mp_graceful_restart() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.mp_graceful_restart)
  return _internal_mp_graceful_restart();
}
inline ::gobgpapi::MpGracefulRestart* AfiSafi::release_mp_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.mp_graceful_restart)
  
  ::gobgpapi::MpGracefulRestart* temp = mp_graceful_restart_;
  mp_graceful_restart_ = nullptr;
  return temp;
}
inline ::gobgpapi::MpGracefulRestart* AfiSafi::_internal_mutable_mp_graceful_restart() {
  
  if (mp_graceful_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MpGracefulRestart>(GetArenaNoVirtual());
    mp_graceful_restart_ = p;
  }
  return mp_graceful_restart_;
}
inline ::gobgpapi::MpGracefulRestart* AfiSafi::mutable_mp_graceful_restart() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.mp_graceful_restart)
  return _internal_mutable_mp_graceful_restart();
}
inline void AfiSafi::set_allocated_mp_graceful_restart(::gobgpapi::MpGracefulRestart* mp_graceful_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mp_graceful_restart_;
  }
  if (mp_graceful_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mp_graceful_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mp_graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  mp_graceful_restart_ = mp_graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.mp_graceful_restart)
}

// .gobgpapi.AfiSafiConfig config = 2;
inline bool AfiSafi::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool AfiSafi::has_config() const {
  return _internal_has_config();
}
inline void AfiSafi::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::AfiSafiConfig& AfiSafi::_internal_config() const {
  const ::gobgpapi::AfiSafiConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::AfiSafiConfig*>(
      &::gobgpapi::_AfiSafiConfig_default_instance_);
}
inline const ::gobgpapi::AfiSafiConfig& AfiSafi::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.config)
  return _internal_config();
}
inline ::gobgpapi::AfiSafiConfig* AfiSafi::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.config)
  
  ::gobgpapi::AfiSafiConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::AfiSafiConfig* AfiSafi::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::AfiSafiConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::AfiSafiConfig* AfiSafi::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.config)
  return _internal_mutable_config();
}
inline void AfiSafi::set_allocated_config(::gobgpapi::AfiSafiConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.config)
}

// .gobgpapi.AfiSafiState state = 3;
inline bool AfiSafi::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool AfiSafi::has_state() const {
  return _internal_has_state();
}
inline void AfiSafi::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::AfiSafiState& AfiSafi::_internal_state() const {
  const ::gobgpapi::AfiSafiState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::AfiSafiState*>(
      &::gobgpapi::_AfiSafiState_default_instance_);
}
inline const ::gobgpapi::AfiSafiState& AfiSafi::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.state)
  return _internal_state();
}
inline ::gobgpapi::AfiSafiState* AfiSafi::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.state)
  
  ::gobgpapi::AfiSafiState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::AfiSafiState* AfiSafi::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::AfiSafiState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::AfiSafiState* AfiSafi::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.state)
  return _internal_mutable_state();
}
inline void AfiSafi::set_allocated_state(::gobgpapi::AfiSafiState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.state)
}

// .gobgpapi.ApplyPolicy apply_policy = 4;
inline bool AfiSafi::_internal_has_apply_policy() const {
  return this != internal_default_instance() && apply_policy_ != nullptr;
}
inline bool AfiSafi::has_apply_policy() const {
  return _internal_has_apply_policy();
}
inline void AfiSafi::clear_apply_policy() {
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
}
inline const ::gobgpapi::ApplyPolicy& AfiSafi::_internal_apply_policy() const {
  const ::gobgpapi::ApplyPolicy* p = apply_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::ApplyPolicy*>(
      &::gobgpapi::_ApplyPolicy_default_instance_);
}
inline const ::gobgpapi::ApplyPolicy& AfiSafi::apply_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.apply_policy)
  return _internal_apply_policy();
}
inline ::gobgpapi::ApplyPolicy* AfiSafi::release_apply_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.apply_policy)
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::ApplyPolicy* AfiSafi::_internal_mutable_apply_policy() {
  
  if (apply_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::ApplyPolicy>(GetArenaNoVirtual());
    apply_policy_ = p;
  }
  return apply_policy_;
}
inline ::gobgpapi::ApplyPolicy* AfiSafi::mutable_apply_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.apply_policy)
  return _internal_mutable_apply_policy();
}
inline void AfiSafi::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apply_policy_;
  }
  if (apply_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apply_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_policy, submessage_arena);
    }
    
  } else {
    
  }
  apply_policy_ = apply_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.apply_policy)
}

// .gobgpapi.RouteSelectionOptions route_selection_options = 5;
inline bool AfiSafi::_internal_has_route_selection_options() const {
  return this != internal_default_instance() && route_selection_options_ != nullptr;
}
inline bool AfiSafi::has_route_selection_options() const {
  return _internal_has_route_selection_options();
}
inline void AfiSafi::clear_route_selection_options() {
  if (GetArenaNoVirtual() == nullptr && route_selection_options_ != nullptr) {
    delete route_selection_options_;
  }
  route_selection_options_ = nullptr;
}
inline const ::gobgpapi::RouteSelectionOptions& AfiSafi::_internal_route_selection_options() const {
  const ::gobgpapi::RouteSelectionOptions* p = route_selection_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteSelectionOptions*>(
      &::gobgpapi::_RouteSelectionOptions_default_instance_);
}
inline const ::gobgpapi::RouteSelectionOptions& AfiSafi::route_selection_options() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.route_selection_options)
  return _internal_route_selection_options();
}
inline ::gobgpapi::RouteSelectionOptions* AfiSafi::release_route_selection_options() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.route_selection_options)
  
  ::gobgpapi::RouteSelectionOptions* temp = route_selection_options_;
  route_selection_options_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteSelectionOptions* AfiSafi::_internal_mutable_route_selection_options() {
  
  if (route_selection_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteSelectionOptions>(GetArenaNoVirtual());
    route_selection_options_ = p;
  }
  return route_selection_options_;
}
inline ::gobgpapi::RouteSelectionOptions* AfiSafi::mutable_route_selection_options() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.route_selection_options)
  return _internal_mutable_route_selection_options();
}
inline void AfiSafi::set_allocated_route_selection_options(::gobgpapi::RouteSelectionOptions* route_selection_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_selection_options_;
  }
  if (route_selection_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_selection_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_selection_options, submessage_arena);
    }
    
  } else {
    
  }
  route_selection_options_ = route_selection_options;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.route_selection_options)
}

// .gobgpapi.UseMultiplePaths use_multiple_paths = 6;
inline bool AfiSafi::_internal_has_use_multiple_paths() const {
  return this != internal_default_instance() && use_multiple_paths_ != nullptr;
}
inline bool AfiSafi::has_use_multiple_paths() const {
  return _internal_has_use_multiple_paths();
}
inline void AfiSafi::clear_use_multiple_paths() {
  if (GetArenaNoVirtual() == nullptr && use_multiple_paths_ != nullptr) {
    delete use_multiple_paths_;
  }
  use_multiple_paths_ = nullptr;
}
inline const ::gobgpapi::UseMultiplePaths& AfiSafi::_internal_use_multiple_paths() const {
  const ::gobgpapi::UseMultiplePaths* p = use_multiple_paths_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::UseMultiplePaths*>(
      &::gobgpapi::_UseMultiplePaths_default_instance_);
}
inline const ::gobgpapi::UseMultiplePaths& AfiSafi::use_multiple_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.use_multiple_paths)
  return _internal_use_multiple_paths();
}
inline ::gobgpapi::UseMultiplePaths* AfiSafi::release_use_multiple_paths() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.use_multiple_paths)
  
  ::gobgpapi::UseMultiplePaths* temp = use_multiple_paths_;
  use_multiple_paths_ = nullptr;
  return temp;
}
inline ::gobgpapi::UseMultiplePaths* AfiSafi::_internal_mutable_use_multiple_paths() {
  
  if (use_multiple_paths_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::UseMultiplePaths>(GetArenaNoVirtual());
    use_multiple_paths_ = p;
  }
  return use_multiple_paths_;
}
inline ::gobgpapi::UseMultiplePaths* AfiSafi::mutable_use_multiple_paths() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.use_multiple_paths)
  return _internal_mutable_use_multiple_paths();
}
inline void AfiSafi::set_allocated_use_multiple_paths(::gobgpapi::UseMultiplePaths* use_multiple_paths) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete use_multiple_paths_;
  }
  if (use_multiple_paths) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      use_multiple_paths = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_multiple_paths, submessage_arena);
    }
    
  } else {
    
  }
  use_multiple_paths_ = use_multiple_paths;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.use_multiple_paths)
}

// .gobgpapi.PrefixLimit prefix_limits = 7;
inline bool AfiSafi::_internal_has_prefix_limits() const {
  return this != internal_default_instance() && prefix_limits_ != nullptr;
}
inline bool AfiSafi::has_prefix_limits() const {
  return _internal_has_prefix_limits();
}
inline void AfiSafi::clear_prefix_limits() {
  if (GetArenaNoVirtual() == nullptr && prefix_limits_ != nullptr) {
    delete prefix_limits_;
  }
  prefix_limits_ = nullptr;
}
inline const ::gobgpapi::PrefixLimit& AfiSafi::_internal_prefix_limits() const {
  const ::gobgpapi::PrefixLimit* p = prefix_limits_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::PrefixLimit*>(
      &::gobgpapi::_PrefixLimit_default_instance_);
}
inline const ::gobgpapi::PrefixLimit& AfiSafi::prefix_limits() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.prefix_limits)
  return _internal_prefix_limits();
}
inline ::gobgpapi::PrefixLimit* AfiSafi::release_prefix_limits() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.prefix_limits)
  
  ::gobgpapi::PrefixLimit* temp = prefix_limits_;
  prefix_limits_ = nullptr;
  return temp;
}
inline ::gobgpapi::PrefixLimit* AfiSafi::_internal_mutable_prefix_limits() {
  
  if (prefix_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::PrefixLimit>(GetArenaNoVirtual());
    prefix_limits_ = p;
  }
  return prefix_limits_;
}
inline ::gobgpapi::PrefixLimit* AfiSafi::mutable_prefix_limits() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.prefix_limits)
  return _internal_mutable_prefix_limits();
}
inline void AfiSafi::set_allocated_prefix_limits(::gobgpapi::PrefixLimit* prefix_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prefix_limits_;
  }
  if (prefix_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefix_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix_limits, submessage_arena);
    }
    
  } else {
    
  }
  prefix_limits_ = prefix_limits;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.prefix_limits)
}

// .gobgpapi.RouteTargetMembership route_target_membership = 8;
inline bool AfiSafi::_internal_has_route_target_membership() const {
  return this != internal_default_instance() && route_target_membership_ != nullptr;
}
inline bool AfiSafi::has_route_target_membership() const {
  return _internal_has_route_target_membership();
}
inline void AfiSafi::clear_route_target_membership() {
  if (GetArenaNoVirtual() == nullptr && route_target_membership_ != nullptr) {
    delete route_target_membership_;
  }
  route_target_membership_ = nullptr;
}
inline const ::gobgpapi::RouteTargetMembership& AfiSafi::_internal_route_target_membership() const {
  const ::gobgpapi::RouteTargetMembership* p = route_target_membership_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteTargetMembership*>(
      &::gobgpapi::_RouteTargetMembership_default_instance_);
}
inline const ::gobgpapi::RouteTargetMembership& AfiSafi::route_target_membership() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.route_target_membership)
  return _internal_route_target_membership();
}
inline ::gobgpapi::RouteTargetMembership* AfiSafi::release_route_target_membership() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.route_target_membership)
  
  ::gobgpapi::RouteTargetMembership* temp = route_target_membership_;
  route_target_membership_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteTargetMembership* AfiSafi::_internal_mutable_route_target_membership() {
  
  if (route_target_membership_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteTargetMembership>(GetArenaNoVirtual());
    route_target_membership_ = p;
  }
  return route_target_membership_;
}
inline ::gobgpapi::RouteTargetMembership* AfiSafi::mutable_route_target_membership() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.route_target_membership)
  return _internal_mutable_route_target_membership();
}
inline void AfiSafi::set_allocated_route_target_membership(::gobgpapi::RouteTargetMembership* route_target_membership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_target_membership_;
  }
  if (route_target_membership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_target_membership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_target_membership, submessage_arena);
    }
    
  } else {
    
  }
  route_target_membership_ = route_target_membership;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.route_target_membership)
}

// .gobgpapi.LongLivedGracefulRestart long_lived_graceful_restart = 9;
inline bool AfiSafi::_internal_has_long_lived_graceful_restart() const {
  return this != internal_default_instance() && long_lived_graceful_restart_ != nullptr;
}
inline bool AfiSafi::has_long_lived_graceful_restart() const {
  return _internal_has_long_lived_graceful_restart();
}
inline void AfiSafi::clear_long_lived_graceful_restart() {
  if (GetArenaNoVirtual() == nullptr && long_lived_graceful_restart_ != nullptr) {
    delete long_lived_graceful_restart_;
  }
  long_lived_graceful_restart_ = nullptr;
}
inline const ::gobgpapi::LongLivedGracefulRestart& AfiSafi::_internal_long_lived_graceful_restart() const {
  const ::gobgpapi::LongLivedGracefulRestart* p = long_lived_graceful_restart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LongLivedGracefulRestart*>(
      &::gobgpapi::_LongLivedGracefulRestart_default_instance_);
}
inline const ::gobgpapi::LongLivedGracefulRestart& AfiSafi::long_lived_graceful_restart() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.long_lived_graceful_restart)
  return _internal_long_lived_graceful_restart();
}
inline ::gobgpapi::LongLivedGracefulRestart* AfiSafi::release_long_lived_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.long_lived_graceful_restart)
  
  ::gobgpapi::LongLivedGracefulRestart* temp = long_lived_graceful_restart_;
  long_lived_graceful_restart_ = nullptr;
  return temp;
}
inline ::gobgpapi::LongLivedGracefulRestart* AfiSafi::_internal_mutable_long_lived_graceful_restart() {
  
  if (long_lived_graceful_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LongLivedGracefulRestart>(GetArenaNoVirtual());
    long_lived_graceful_restart_ = p;
  }
  return long_lived_graceful_restart_;
}
inline ::gobgpapi::LongLivedGracefulRestart* AfiSafi::mutable_long_lived_graceful_restart() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.long_lived_graceful_restart)
  return _internal_mutable_long_lived_graceful_restart();
}
inline void AfiSafi::set_allocated_long_lived_graceful_restart(::gobgpapi::LongLivedGracefulRestart* long_lived_graceful_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete long_lived_graceful_restart_;
  }
  if (long_lived_graceful_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      long_lived_graceful_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_lived_graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  long_lived_graceful_restart_ = long_lived_graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.long_lived_graceful_restart)
}

// .gobgpapi.AddPaths add_paths = 10;
inline bool AfiSafi::_internal_has_add_paths() const {
  return this != internal_default_instance() && add_paths_ != nullptr;
}
inline bool AfiSafi::has_add_paths() const {
  return _internal_has_add_paths();
}
inline void AfiSafi::clear_add_paths() {
  if (GetArenaNoVirtual() == nullptr && add_paths_ != nullptr) {
    delete add_paths_;
  }
  add_paths_ = nullptr;
}
inline const ::gobgpapi::AddPaths& AfiSafi::_internal_add_paths() const {
  const ::gobgpapi::AddPaths* p = add_paths_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::AddPaths*>(
      &::gobgpapi::_AddPaths_default_instance_);
}
inline const ::gobgpapi::AddPaths& AfiSafi::add_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AfiSafi.add_paths)
  return _internal_add_paths();
}
inline ::gobgpapi::AddPaths* AfiSafi::release_add_paths() {
  // @@protoc_insertion_point(field_release:gobgpapi.AfiSafi.add_paths)
  
  ::gobgpapi::AddPaths* temp = add_paths_;
  add_paths_ = nullptr;
  return temp;
}
inline ::gobgpapi::AddPaths* AfiSafi::_internal_mutable_add_paths() {
  
  if (add_paths_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::AddPaths>(GetArenaNoVirtual());
    add_paths_ = p;
  }
  return add_paths_;
}
inline ::gobgpapi::AddPaths* AfiSafi::mutable_add_paths() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AfiSafi.add_paths)
  return _internal_mutable_add_paths();
}
inline void AfiSafi::set_allocated_add_paths(::gobgpapi::AddPaths* add_paths) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete add_paths_;
  }
  if (add_paths) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      add_paths = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_paths, submessage_arena);
    }
    
  } else {
    
  }
  add_paths_ = add_paths;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AfiSafi.add_paths)
}

// -------------------------------------------------------------------

// AddPathsConfig

// bool receive = 1;
inline void AddPathsConfig::clear_receive() {
  receive_ = false;
}
inline bool AddPathsConfig::_internal_receive() const {
  return receive_;
}
inline bool AddPathsConfig::receive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsConfig.receive)
  return _internal_receive();
}
inline void AddPathsConfig::_internal_set_receive(bool value) {
  
  receive_ = value;
}
inline void AddPathsConfig::set_receive(bool value) {
  _internal_set_receive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsConfig.receive)
}

// uint32 send_max = 2;
inline void AddPathsConfig::clear_send_max() {
  send_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPathsConfig::_internal_send_max() const {
  return send_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPathsConfig::send_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsConfig.send_max)
  return _internal_send_max();
}
inline void AddPathsConfig::_internal_set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_max_ = value;
}
inline void AddPathsConfig::set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_max(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsConfig.send_max)
}

// -------------------------------------------------------------------

// AddPathsState

// bool receive = 1;
inline void AddPathsState::clear_receive() {
  receive_ = false;
}
inline bool AddPathsState::_internal_receive() const {
  return receive_;
}
inline bool AddPathsState::receive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsState.receive)
  return _internal_receive();
}
inline void AddPathsState::_internal_set_receive(bool value) {
  
  receive_ = value;
}
inline void AddPathsState::set_receive(bool value) {
  _internal_set_receive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsState.receive)
}

// uint32 send_max = 2;
inline void AddPathsState::clear_send_max() {
  send_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPathsState::_internal_send_max() const {
  return send_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AddPathsState::send_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPathsState.send_max)
  return _internal_send_max();
}
inline void AddPathsState::_internal_set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  send_max_ = value;
}
inline void AddPathsState::set_send_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_max(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AddPathsState.send_max)
}

// -------------------------------------------------------------------

// AddPaths

// .gobgpapi.AddPathsConfig config = 1;
inline bool AddPaths::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool AddPaths::has_config() const {
  return _internal_has_config();
}
inline void AddPaths::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::gobgpapi::AddPathsConfig& AddPaths::_internal_config() const {
  const ::gobgpapi::AddPathsConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::AddPathsConfig*>(
      &::gobgpapi::_AddPathsConfig_default_instance_);
}
inline const ::gobgpapi::AddPathsConfig& AddPaths::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPaths.config)
  return _internal_config();
}
inline ::gobgpapi::AddPathsConfig* AddPaths::release_config() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPaths.config)
  
  ::gobgpapi::AddPathsConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::gobgpapi::AddPathsConfig* AddPaths::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::AddPathsConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  return config_;
}
inline ::gobgpapi::AddPathsConfig* AddPaths::mutable_config() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPaths.config)
  return _internal_mutable_config();
}
inline void AddPaths::set_allocated_config(::gobgpapi::AddPathsConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPaths.config)
}

// .gobgpapi.AddPathsState state = 2;
inline bool AddPaths::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool AddPaths::has_state() const {
  return _internal_has_state();
}
inline void AddPaths::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::AddPathsState& AddPaths::_internal_state() const {
  const ::gobgpapi::AddPathsState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::AddPathsState*>(
      &::gobgpapi::_AddPathsState_default_instance_);
}
inline const ::gobgpapi::AddPathsState& AddPaths::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AddPaths.state)
  return _internal_state();
}
inline ::gobgpapi::AddPathsState* AddPaths::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.AddPaths.state)
  
  ::gobgpapi::AddPathsState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::AddPathsState* AddPaths::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::AddPathsState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::AddPathsState* AddPaths::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AddPaths.state)
  return _internal_mutable_state();
}
inline void AddPaths::set_allocated_state(::gobgpapi::AddPathsState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AddPaths.state)
}

// -------------------------------------------------------------------

// Prefix

// string ip_prefix = 1;
inline void Prefix::clear_ip_prefix() {
  ip_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Prefix::ip_prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.ip_prefix)
  return _internal_ip_prefix();
}
inline void Prefix::set_ip_prefix(const std::string& value) {
  _internal_set_ip_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.ip_prefix)
}
inline std::string* Prefix::mutable_ip_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Prefix.ip_prefix)
  return _internal_mutable_ip_prefix();
}
inline const std::string& Prefix::_internal_ip_prefix() const {
  return ip_prefix_.GetNoArena();
}
inline void Prefix::_internal_set_ip_prefix(const std::string& value) {
  
  ip_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Prefix::set_ip_prefix(std::string&& value) {
  
  ip_prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Prefix.ip_prefix)
}
inline void Prefix::set_ip_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Prefix.ip_prefix)
}
inline void Prefix::set_ip_prefix(const char* value, size_t size) {
  
  ip_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Prefix.ip_prefix)
}
inline std::string* Prefix::_internal_mutable_ip_prefix() {
  
  return ip_prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Prefix::release_ip_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.Prefix.ip_prefix)
  
  return ip_prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Prefix::set_allocated_ip_prefix(std::string* ip_prefix) {
  if (ip_prefix != nullptr) {
    
  } else {
    
  }
  ip_prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Prefix.ip_prefix)
}

// uint32 mask_length_min = 2;
inline void Prefix::clear_mask_length_min() {
  mask_length_min_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prefix::_internal_mask_length_min() const {
  return mask_length_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prefix::mask_length_min() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_min)
  return _internal_mask_length_min();
}
inline void Prefix::_internal_set_mask_length_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mask_length_min_ = value;
}
inline void Prefix::set_mask_length_min(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mask_length_min(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_min)
}

// uint32 mask_length_max = 3;
inline void Prefix::clear_mask_length_max() {
  mask_length_max_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prefix::_internal_mask_length_max() const {
  return mask_length_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Prefix::mask_length_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_max)
  return _internal_mask_length_max();
}
inline void Prefix::_internal_set_mask_length_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mask_length_max_ = value;
}
inline void Prefix::set_mask_length_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mask_length_max(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_max)
}

// -------------------------------------------------------------------

// DefinedSet

// .gobgpapi.DefinedType defined_type = 1;
inline void DefinedSet::clear_defined_type() {
  defined_type_ = 0;
}
inline ::gobgpapi::DefinedType DefinedSet::_internal_defined_type() const {
  return static_cast< ::gobgpapi::DefinedType >(defined_type_);
}
inline ::gobgpapi::DefinedType DefinedSet::defined_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.defined_type)
  return _internal_defined_type();
}
inline void DefinedSet::_internal_set_defined_type(::gobgpapi::DefinedType value) {
  
  defined_type_ = value;
}
inline void DefinedSet::set_defined_type(::gobgpapi::DefinedType value) {
  _internal_set_defined_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.defined_type)
}

// string name = 2;
inline void DefinedSet::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DefinedSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.name)
  return _internal_name();
}
inline void DefinedSet::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.name)
}
inline std::string* DefinedSet::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.name)
  return _internal_mutable_name();
}
inline const std::string& DefinedSet::_internal_name() const {
  return name_.GetNoArena();
}
inline void DefinedSet::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DefinedSet::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.DefinedSet.name)
}
inline void DefinedSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.name)
}
inline void DefinedSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.name)
}
inline std::string* DefinedSet::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DefinedSet::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.DefinedSet.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DefinedSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DefinedSet.name)
}

// repeated string list = 3;
inline int DefinedSet::_internal_list_size() const {
  return list_.size();
}
inline int DefinedSet::list_size() const {
  return _internal_list_size();
}
inline void DefinedSet::clear_list() {
  list_.Clear();
}
inline std::string* DefinedSet::add_list() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.DefinedSet.list)
  return _internal_add_list();
}
inline const std::string& DefinedSet::_internal_list(int index) const {
  return list_.Get(index);
}
inline const std::string& DefinedSet::list(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.list)
  return _internal_list(index);
}
inline std::string* DefinedSet::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.list)
  return list_.Mutable(index);
}
inline void DefinedSet::set_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.list)
  list_.Mutable(index)->assign(value);
}
inline void DefinedSet::set_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.list)
  list_.Mutable(index)->assign(std::move(value));
}
inline void DefinedSet::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.list)
}
inline std::string* DefinedSet::_internal_add_list() {
  return list_.Add();
}
inline void DefinedSet::add_list(const std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::add_list(std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.DefinedSet.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DefinedSet::list() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.list)
  return list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DefinedSet::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.list)
  return &list_;
}

// repeated .gobgpapi.Prefix prefixes = 4;
inline int DefinedSet::_internal_prefixes_size() const {
  return prefixes_.size();
}
inline int DefinedSet::prefixes_size() const {
  return _internal_prefixes_size();
}
inline void DefinedSet::clear_prefixes() {
  prefixes_.Clear();
}
inline ::gobgpapi::Prefix* DefinedSet::mutable_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Prefix >*
DefinedSet::mutable_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.prefixes)
  return &prefixes_;
}
inline const ::gobgpapi::Prefix& DefinedSet::_internal_prefixes(int index) const {
  return prefixes_.Get(index);
}
inline const ::gobgpapi::Prefix& DefinedSet::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.prefixes)
  return _internal_prefixes(index);
}
inline ::gobgpapi::Prefix* DefinedSet::_internal_add_prefixes() {
  return prefixes_.Add();
}
inline ::gobgpapi::Prefix* DefinedSet::add_prefixes() {
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.prefixes)
  return _internal_add_prefixes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Prefix >&
DefinedSet::prefixes() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.prefixes)
  return prefixes_;
}

// -------------------------------------------------------------------

// MatchSet

// .gobgpapi.MatchType match_type = 1;
inline void MatchSet::clear_match_type() {
  match_type_ = 0;
}
inline ::gobgpapi::MatchType MatchSet::_internal_match_type() const {
  return static_cast< ::gobgpapi::MatchType >(match_type_);
}
inline ::gobgpapi::MatchType MatchSet::match_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.match_type)
  return _internal_match_type();
}
inline void MatchSet::_internal_set_match_type(::gobgpapi::MatchType value) {
  
  match_type_ = value;
}
inline void MatchSet::set_match_type(::gobgpapi::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.match_type)
}

// string name = 2;
inline void MatchSet::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.name)
  return _internal_name();
}
inline void MatchSet::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.name)
}
inline std::string* MatchSet::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MatchSet.name)
  return _internal_mutable_name();
}
inline const std::string& MatchSet::_internal_name() const {
  return name_.GetNoArena();
}
inline void MatchSet::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MatchSet::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.MatchSet.name)
}
inline void MatchSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MatchSet.name)
}
inline void MatchSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MatchSet.name)
}
inline std::string* MatchSet::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchSet::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.MatchSet.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MatchSet.name)
}

// -------------------------------------------------------------------

// AsPathLength

// .gobgpapi.AsPathLengthType length_type = 1;
inline void AsPathLength::clear_length_type() {
  length_type_ = 0;
}
inline ::gobgpapi::AsPathLengthType AsPathLength::_internal_length_type() const {
  return static_cast< ::gobgpapi::AsPathLengthType >(length_type_);
}
inline ::gobgpapi::AsPathLengthType AsPathLength::length_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.length_type)
  return _internal_length_type();
}
inline void AsPathLength::_internal_set_length_type(::gobgpapi::AsPathLengthType value) {
  
  length_type_ = value;
}
inline void AsPathLength::set_length_type(::gobgpapi::AsPathLengthType value) {
  _internal_set_length_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.length_type)
}

// uint32 length = 2;
inline void AsPathLength::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsPathLength::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsPathLength::length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.length)
  return _internal_length();
}
inline void AsPathLength::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void AsPathLength::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.length)
}

// -------------------------------------------------------------------

// Conditions

// .gobgpapi.MatchSet prefix_set = 1;
inline bool Conditions::_internal_has_prefix_set() const {
  return this != internal_default_instance() && prefix_set_ != nullptr;
}
inline bool Conditions::has_prefix_set() const {
  return _internal_has_prefix_set();
}
inline void Conditions::clear_prefix_set() {
  if (GetArenaNoVirtual() == nullptr && prefix_set_ != nullptr) {
    delete prefix_set_;
  }
  prefix_set_ = nullptr;
}
inline const ::gobgpapi::MatchSet& Conditions::_internal_prefix_set() const {
  const ::gobgpapi::MatchSet* p = prefix_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline const ::gobgpapi::MatchSet& Conditions::prefix_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.prefix_set)
  return _internal_prefix_set();
}
inline ::gobgpapi::MatchSet* Conditions::release_prefix_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.prefix_set)
  
  ::gobgpapi::MatchSet* temp = prefix_set_;
  prefix_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::_internal_mutable_prefix_set() {
  
  if (prefix_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MatchSet>(GetArenaNoVirtual());
    prefix_set_ = p;
  }
  return prefix_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_prefix_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.prefix_set)
  return _internal_mutable_prefix_set();
}
inline void Conditions::set_allocated_prefix_set(::gobgpapi::MatchSet* prefix_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prefix_set_;
  }
  if (prefix_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefix_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix_set, submessage_arena);
    }
    
  } else {
    
  }
  prefix_set_ = prefix_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.prefix_set)
}

// .gobgpapi.MatchSet neighbor_set = 2;
inline bool Conditions::_internal_has_neighbor_set() const {
  return this != internal_default_instance() && neighbor_set_ != nullptr;
}
inline bool Conditions::has_neighbor_set() const {
  return _internal_has_neighbor_set();
}
inline void Conditions::clear_neighbor_set() {
  if (GetArenaNoVirtual() == nullptr && neighbor_set_ != nullptr) {
    delete neighbor_set_;
  }
  neighbor_set_ = nullptr;
}
inline const ::gobgpapi::MatchSet& Conditions::_internal_neighbor_set() const {
  const ::gobgpapi::MatchSet* p = neighbor_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline const ::gobgpapi::MatchSet& Conditions::neighbor_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.neighbor_set)
  return _internal_neighbor_set();
}
inline ::gobgpapi::MatchSet* Conditions::release_neighbor_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.neighbor_set)
  
  ::gobgpapi::MatchSet* temp = neighbor_set_;
  neighbor_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::_internal_mutable_neighbor_set() {
  
  if (neighbor_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MatchSet>(GetArenaNoVirtual());
    neighbor_set_ = p;
  }
  return neighbor_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_neighbor_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.neighbor_set)
  return _internal_mutable_neighbor_set();
}
inline void Conditions::set_allocated_neighbor_set(::gobgpapi::MatchSet* neighbor_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete neighbor_set_;
  }
  if (neighbor_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      neighbor_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbor_set, submessage_arena);
    }
    
  } else {
    
  }
  neighbor_set_ = neighbor_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.neighbor_set)
}

// .gobgpapi.AsPathLength as_path_length = 3;
inline bool Conditions::_internal_has_as_path_length() const {
  return this != internal_default_instance() && as_path_length_ != nullptr;
}
inline bool Conditions::has_as_path_length() const {
  return _internal_has_as_path_length();
}
inline void Conditions::clear_as_path_length() {
  if (GetArenaNoVirtual() == nullptr && as_path_length_ != nullptr) {
    delete as_path_length_;
  }
  as_path_length_ = nullptr;
}
inline const ::gobgpapi::AsPathLength& Conditions::_internal_as_path_length() const {
  const ::gobgpapi::AsPathLength* p = as_path_length_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::AsPathLength*>(
      &::gobgpapi::_AsPathLength_default_instance_);
}
inline const ::gobgpapi::AsPathLength& Conditions::as_path_length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_length)
  return _internal_as_path_length();
}
inline ::gobgpapi::AsPathLength* Conditions::release_as_path_length() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.as_path_length)
  
  ::gobgpapi::AsPathLength* temp = as_path_length_;
  as_path_length_ = nullptr;
  return temp;
}
inline ::gobgpapi::AsPathLength* Conditions::_internal_mutable_as_path_length() {
  
  if (as_path_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::AsPathLength>(GetArenaNoVirtual());
    as_path_length_ = p;
  }
  return as_path_length_;
}
inline ::gobgpapi::AsPathLength* Conditions::mutable_as_path_length() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_length)
  return _internal_mutable_as_path_length();
}
inline void Conditions::set_allocated_as_path_length(::gobgpapi::AsPathLength* as_path_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete as_path_length_;
  }
  if (as_path_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      as_path_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_path_length, submessage_arena);
    }
    
  } else {
    
  }
  as_path_length_ = as_path_length;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_length)
}

// .gobgpapi.MatchSet as_path_set = 4;
inline bool Conditions::_internal_has_as_path_set() const {
  return this != internal_default_instance() && as_path_set_ != nullptr;
}
inline bool Conditions::has_as_path_set() const {
  return _internal_has_as_path_set();
}
inline void Conditions::clear_as_path_set() {
  if (GetArenaNoVirtual() == nullptr && as_path_set_ != nullptr) {
    delete as_path_set_;
  }
  as_path_set_ = nullptr;
}
inline const ::gobgpapi::MatchSet& Conditions::_internal_as_path_set() const {
  const ::gobgpapi::MatchSet* p = as_path_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline const ::gobgpapi::MatchSet& Conditions::as_path_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_set)
  return _internal_as_path_set();
}
inline ::gobgpapi::MatchSet* Conditions::release_as_path_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.as_path_set)
  
  ::gobgpapi::MatchSet* temp = as_path_set_;
  as_path_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::_internal_mutable_as_path_set() {
  
  if (as_path_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MatchSet>(GetArenaNoVirtual());
    as_path_set_ = p;
  }
  return as_path_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_as_path_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_set)
  return _internal_mutable_as_path_set();
}
inline void Conditions::set_allocated_as_path_set(::gobgpapi::MatchSet* as_path_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete as_path_set_;
  }
  if (as_path_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      as_path_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_path_set, submessage_arena);
    }
    
  } else {
    
  }
  as_path_set_ = as_path_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_set)
}

// .gobgpapi.MatchSet community_set = 5;
inline bool Conditions::_internal_has_community_set() const {
  return this != internal_default_instance() && community_set_ != nullptr;
}
inline bool Conditions::has_community_set() const {
  return _internal_has_community_set();
}
inline void Conditions::clear_community_set() {
  if (GetArenaNoVirtual() == nullptr && community_set_ != nullptr) {
    delete community_set_;
  }
  community_set_ = nullptr;
}
inline const ::gobgpapi::MatchSet& Conditions::_internal_community_set() const {
  const ::gobgpapi::MatchSet* p = community_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline const ::gobgpapi::MatchSet& Conditions::community_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.community_set)
  return _internal_community_set();
}
inline ::gobgpapi::MatchSet* Conditions::release_community_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.community_set)
  
  ::gobgpapi::MatchSet* temp = community_set_;
  community_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::_internal_mutable_community_set() {
  
  if (community_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MatchSet>(GetArenaNoVirtual());
    community_set_ = p;
  }
  return community_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_community_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.community_set)
  return _internal_mutable_community_set();
}
inline void Conditions::set_allocated_community_set(::gobgpapi::MatchSet* community_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete community_set_;
  }
  if (community_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      community_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, community_set, submessage_arena);
    }
    
  } else {
    
  }
  community_set_ = community_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.community_set)
}

// .gobgpapi.MatchSet ext_community_set = 6;
inline bool Conditions::_internal_has_ext_community_set() const {
  return this != internal_default_instance() && ext_community_set_ != nullptr;
}
inline bool Conditions::has_ext_community_set() const {
  return _internal_has_ext_community_set();
}
inline void Conditions::clear_ext_community_set() {
  if (GetArenaNoVirtual() == nullptr && ext_community_set_ != nullptr) {
    delete ext_community_set_;
  }
  ext_community_set_ = nullptr;
}
inline const ::gobgpapi::MatchSet& Conditions::_internal_ext_community_set() const {
  const ::gobgpapi::MatchSet* p = ext_community_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline const ::gobgpapi::MatchSet& Conditions::ext_community_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.ext_community_set)
  return _internal_ext_community_set();
}
inline ::gobgpapi::MatchSet* Conditions::release_ext_community_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.ext_community_set)
  
  ::gobgpapi::MatchSet* temp = ext_community_set_;
  ext_community_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::_internal_mutable_ext_community_set() {
  
  if (ext_community_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MatchSet>(GetArenaNoVirtual());
    ext_community_set_ = p;
  }
  return ext_community_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_ext_community_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.ext_community_set)
  return _internal_mutable_ext_community_set();
}
inline void Conditions::set_allocated_ext_community_set(::gobgpapi::MatchSet* ext_community_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ext_community_set_;
  }
  if (ext_community_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext_community_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_community_set, submessage_arena);
    }
    
  } else {
    
  }
  ext_community_set_ = ext_community_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.ext_community_set)
}

// int32 rpki_result = 7;
inline void Conditions::clear_rpki_result() {
  rpki_result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conditions::_internal_rpki_result() const {
  return rpki_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conditions::rpki_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.rpki_result)
  return _internal_rpki_result();
}
inline void Conditions::_internal_set_rpki_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rpki_result_ = value;
}
inline void Conditions::set_rpki_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rpki_result(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.rpki_result)
}

// .gobgpapi.Conditions.RouteType route_type = 8;
inline void Conditions::clear_route_type() {
  route_type_ = 0;
}
inline ::gobgpapi::Conditions_RouteType Conditions::_internal_route_type() const {
  return static_cast< ::gobgpapi::Conditions_RouteType >(route_type_);
}
inline ::gobgpapi::Conditions_RouteType Conditions::route_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.route_type)
  return _internal_route_type();
}
inline void Conditions::_internal_set_route_type(::gobgpapi::Conditions_RouteType value) {
  
  route_type_ = value;
}
inline void Conditions::set_route_type(::gobgpapi::Conditions_RouteType value) {
  _internal_set_route_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.route_type)
}

// .gobgpapi.MatchSet large_community_set = 9;
inline bool Conditions::_internal_has_large_community_set() const {
  return this != internal_default_instance() && large_community_set_ != nullptr;
}
inline bool Conditions::has_large_community_set() const {
  return _internal_has_large_community_set();
}
inline void Conditions::clear_large_community_set() {
  if (GetArenaNoVirtual() == nullptr && large_community_set_ != nullptr) {
    delete large_community_set_;
  }
  large_community_set_ = nullptr;
}
inline const ::gobgpapi::MatchSet& Conditions::_internal_large_community_set() const {
  const ::gobgpapi::MatchSet* p = large_community_set_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MatchSet*>(
      &::gobgpapi::_MatchSet_default_instance_);
}
inline const ::gobgpapi::MatchSet& Conditions::large_community_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.large_community_set)
  return _internal_large_community_set();
}
inline ::gobgpapi::MatchSet* Conditions::release_large_community_set() {
  // @@protoc_insertion_point(field_release:gobgpapi.Conditions.large_community_set)
  
  ::gobgpapi::MatchSet* temp = large_community_set_;
  large_community_set_ = nullptr;
  return temp;
}
inline ::gobgpapi::MatchSet* Conditions::_internal_mutable_large_community_set() {
  
  if (large_community_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MatchSet>(GetArenaNoVirtual());
    large_community_set_ = p;
  }
  return large_community_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_large_community_set() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.large_community_set)
  return _internal_mutable_large_community_set();
}
inline void Conditions::set_allocated_large_community_set(::gobgpapi::MatchSet* large_community_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete large_community_set_;
  }
  if (large_community_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      large_community_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_community_set, submessage_arena);
    }
    
  } else {
    
  }
  large_community_set_ = large_community_set;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.large_community_set)
}

// repeated string next_hop_in_list = 10;
inline int Conditions::_internal_next_hop_in_list_size() const {
  return next_hop_in_list_.size();
}
inline int Conditions::next_hop_in_list_size() const {
  return _internal_next_hop_in_list_size();
}
inline void Conditions::clear_next_hop_in_list() {
  next_hop_in_list_.Clear();
}
inline std::string* Conditions::add_next_hop_in_list() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.Conditions.next_hop_in_list)
  return _internal_add_next_hop_in_list();
}
inline const std::string& Conditions::_internal_next_hop_in_list(int index) const {
  return next_hop_in_list_.Get(index);
}
inline const std::string& Conditions::next_hop_in_list(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.next_hop_in_list)
  return _internal_next_hop_in_list(index);
}
inline std::string* Conditions::mutable_next_hop_in_list(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.next_hop_in_list)
  return next_hop_in_list_.Mutable(index);
}
inline void Conditions::set_next_hop_in_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.next_hop_in_list)
  next_hop_in_list_.Mutable(index)->assign(value);
}
inline void Conditions::set_next_hop_in_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.next_hop_in_list)
  next_hop_in_list_.Mutable(index)->assign(std::move(value));
}
inline void Conditions::set_next_hop_in_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  next_hop_in_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Conditions.next_hop_in_list)
}
inline void Conditions::set_next_hop_in_list(int index, const char* value, size_t size) {
  next_hop_in_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Conditions.next_hop_in_list)
}
inline std::string* Conditions::_internal_add_next_hop_in_list() {
  return next_hop_in_list_.Add();
}
inline void Conditions::add_next_hop_in_list(const std::string& value) {
  next_hop_in_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Conditions.next_hop_in_list)
}
inline void Conditions::add_next_hop_in_list(std::string&& value) {
  next_hop_in_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.Conditions.next_hop_in_list)
}
inline void Conditions::add_next_hop_in_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  next_hop_in_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Conditions.next_hop_in_list)
}
inline void Conditions::add_next_hop_in_list(const char* value, size_t size) {
  next_hop_in_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Conditions.next_hop_in_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Conditions::next_hop_in_list() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Conditions.next_hop_in_list)
  return next_hop_in_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Conditions::mutable_next_hop_in_list() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Conditions.next_hop_in_list)
  return &next_hop_in_list_;
}

// repeated .gobgpapi.Family afi_safi_in = 11;
inline int Conditions::_internal_afi_safi_in_size() const {
  return afi_safi_in_.size();
}
inline int Conditions::afi_safi_in_size() const {
  return _internal_afi_safi_in_size();
}
inline void Conditions::clear_afi_safi_in() {
  afi_safi_in_.Clear();
}
inline ::gobgpapi::Family* Conditions::mutable_afi_safi_in(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.afi_safi_in)
  return afi_safi_in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Family >*
Conditions::mutable_afi_safi_in() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Conditions.afi_safi_in)
  return &afi_safi_in_;
}
inline const ::gobgpapi::Family& Conditions::_internal_afi_safi_in(int index) const {
  return afi_safi_in_.Get(index);
}
inline const ::gobgpapi::Family& Conditions::afi_safi_in(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.afi_safi_in)
  return _internal_afi_safi_in(index);
}
inline ::gobgpapi::Family* Conditions::_internal_add_afi_safi_in() {
  return afi_safi_in_.Add();
}
inline ::gobgpapi::Family* Conditions::add_afi_safi_in() {
  // @@protoc_insertion_point(field_add:gobgpapi.Conditions.afi_safi_in)
  return _internal_add_afi_safi_in();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Family >&
Conditions::afi_safi_in() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Conditions.afi_safi_in)
  return afi_safi_in_;
}

// -------------------------------------------------------------------

// CommunityAction

// .gobgpapi.CommunityActionType action_type = 1;
inline void CommunityAction::clear_action_type() {
  action_type_ = 0;
}
inline ::gobgpapi::CommunityActionType CommunityAction::_internal_action_type() const {
  return static_cast< ::gobgpapi::CommunityActionType >(action_type_);
}
inline ::gobgpapi::CommunityActionType CommunityAction::action_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.action_type)
  return _internal_action_type();
}
inline void CommunityAction::_internal_set_action_type(::gobgpapi::CommunityActionType value) {
  
  action_type_ = value;
}
inline void CommunityAction::set_action_type(::gobgpapi::CommunityActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.action_type)
}

// repeated string communities = 2;
inline int CommunityAction::_internal_communities_size() const {
  return communities_.size();
}
inline int CommunityAction::communities_size() const {
  return _internal_communities_size();
}
inline void CommunityAction::clear_communities() {
  communities_.Clear();
}
inline std::string* CommunityAction::add_communities() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.CommunityAction.communities)
  return _internal_add_communities();
}
inline const std::string& CommunityAction::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline const std::string& CommunityAction::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.communities)
  return _internal_communities(index);
}
inline std::string* CommunityAction::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.CommunityAction.communities)
  return communities_.Mutable(index);
}
inline void CommunityAction::set_communities(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.communities)
  communities_.Mutable(index)->assign(value);
}
inline void CommunityAction::set_communities(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.communities)
  communities_.Mutable(index)->assign(std::move(value));
}
inline void CommunityAction::set_communities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  communities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::set_communities(int index, const char* value, size_t size) {
  communities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.CommunityAction.communities)
}
inline std::string* CommunityAction::_internal_add_communities() {
  return communities_.Add();
}
inline void CommunityAction::add_communities(const std::string& value) {
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::add_communities(std::string&& value) {
  communities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::add_communities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::add_communities(const char* value, size_t size) {
  communities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.CommunityAction.communities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommunityAction::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.CommunityAction.communities)
  return communities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommunityAction::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.CommunityAction.communities)
  return &communities_;
}

// -------------------------------------------------------------------

// MedAction

// .gobgpapi.MedActionType action_type = 1;
inline void MedAction::clear_action_type() {
  action_type_ = 0;
}
inline ::gobgpapi::MedActionType MedAction::_internal_action_type() const {
  return static_cast< ::gobgpapi::MedActionType >(action_type_);
}
inline ::gobgpapi::MedActionType MedAction::action_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.action_type)
  return _internal_action_type();
}
inline void MedAction::_internal_set_action_type(::gobgpapi::MedActionType value) {
  
  action_type_ = value;
}
inline void MedAction::set_action_type(::gobgpapi::MedActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.action_type)
}

// int64 value = 2;
inline void MedAction::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MedAction::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MedAction::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.value)
  return _internal_value();
}
inline void MedAction::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void MedAction::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.value)
}

// -------------------------------------------------------------------

// AsPrependAction

// uint32 asn = 1;
inline void AsPrependAction::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsPrependAction::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsPrependAction::asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.asn)
  return _internal_asn();
}
inline void AsPrependAction::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void AsPrependAction::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.asn)
}

// uint32 repeat = 2;
inline void AsPrependAction::clear_repeat() {
  repeat_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsPrependAction::_internal_repeat() const {
  return repeat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsPrependAction::repeat() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.repeat)
  return _internal_repeat();
}
inline void AsPrependAction::_internal_set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  repeat_ = value;
}
inline void AsPrependAction::set_repeat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeat(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.repeat)
}

// bool use_left_most = 3;
inline void AsPrependAction::clear_use_left_most() {
  use_left_most_ = false;
}
inline bool AsPrependAction::_internal_use_left_most() const {
  return use_left_most_;
}
inline bool AsPrependAction::use_left_most() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.use_left_most)
  return _internal_use_left_most();
}
inline void AsPrependAction::_internal_set_use_left_most(bool value) {
  
  use_left_most_ = value;
}
inline void AsPrependAction::set_use_left_most(bool value) {
  _internal_set_use_left_most(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.use_left_most)
}

// -------------------------------------------------------------------

// NexthopAction

// string address = 1;
inline void NexthopAction::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NexthopAction::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.NexthopAction.address)
  return _internal_address();
}
inline void NexthopAction::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.NexthopAction.address)
}
inline std::string* NexthopAction::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.NexthopAction.address)
  return _internal_mutable_address();
}
inline const std::string& NexthopAction::_internal_address() const {
  return address_.GetNoArena();
}
inline void NexthopAction::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NexthopAction::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.NexthopAction.address)
}
inline void NexthopAction::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.NexthopAction.address)
}
inline void NexthopAction::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.NexthopAction.address)
}
inline std::string* NexthopAction::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NexthopAction::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.NexthopAction.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NexthopAction::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.NexthopAction.address)
}

// bool self = 2;
inline void NexthopAction::clear_self() {
  self_ = false;
}
inline bool NexthopAction::_internal_self() const {
  return self_;
}
inline bool NexthopAction::self() const {
  // @@protoc_insertion_point(field_get:gobgpapi.NexthopAction.self)
  return _internal_self();
}
inline void NexthopAction::_internal_set_self(bool value) {
  
  self_ = value;
}
inline void NexthopAction::set_self(bool value) {
  _internal_set_self(value);
  // @@protoc_insertion_point(field_set:gobgpapi.NexthopAction.self)
}

// -------------------------------------------------------------------

// LocalPrefAction

// uint32 value = 1;
inline void LocalPrefAction::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalPrefAction::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalPrefAction::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LocalPrefAction.value)
  return _internal_value();
}
inline void LocalPrefAction::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void LocalPrefAction::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LocalPrefAction.value)
}

// -------------------------------------------------------------------

// Actions

// .gobgpapi.RouteAction route_action = 1;
inline void Actions::clear_route_action() {
  route_action_ = 0;
}
inline ::gobgpapi::RouteAction Actions::_internal_route_action() const {
  return static_cast< ::gobgpapi::RouteAction >(route_action_);
}
inline ::gobgpapi::RouteAction Actions::route_action() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.route_action)
  return _internal_route_action();
}
inline void Actions::_internal_set_route_action(::gobgpapi::RouteAction value) {
  
  route_action_ = value;
}
inline void Actions::set_route_action(::gobgpapi::RouteAction value) {
  _internal_set_route_action(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Actions.route_action)
}

// .gobgpapi.CommunityAction community = 2;
inline bool Actions::_internal_has_community() const {
  return this != internal_default_instance() && community_ != nullptr;
}
inline bool Actions::has_community() const {
  return _internal_has_community();
}
inline void Actions::clear_community() {
  if (GetArenaNoVirtual() == nullptr && community_ != nullptr) {
    delete community_;
  }
  community_ = nullptr;
}
inline const ::gobgpapi::CommunityAction& Actions::_internal_community() const {
  const ::gobgpapi::CommunityAction* p = community_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::CommunityAction*>(
      &::gobgpapi::_CommunityAction_default_instance_);
}
inline const ::gobgpapi::CommunityAction& Actions::community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.community)
  return _internal_community();
}
inline ::gobgpapi::CommunityAction* Actions::release_community() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.community)
  
  ::gobgpapi::CommunityAction* temp = community_;
  community_ = nullptr;
  return temp;
}
inline ::gobgpapi::CommunityAction* Actions::_internal_mutable_community() {
  
  if (community_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::CommunityAction>(GetArenaNoVirtual());
    community_ = p;
  }
  return community_;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_community() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.community)
  return _internal_mutable_community();
}
inline void Actions::set_allocated_community(::gobgpapi::CommunityAction* community) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete community_;
  }
  if (community) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      community = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, community, submessage_arena);
    }
    
  } else {
    
  }
  community_ = community;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.community)
}

// .gobgpapi.MedAction med = 3;
inline bool Actions::_internal_has_med() const {
  return this != internal_default_instance() && med_ != nullptr;
}
inline bool Actions::has_med() const {
  return _internal_has_med();
}
inline void Actions::clear_med() {
  if (GetArenaNoVirtual() == nullptr && med_ != nullptr) {
    delete med_;
  }
  med_ = nullptr;
}
inline const ::gobgpapi::MedAction& Actions::_internal_med() const {
  const ::gobgpapi::MedAction* p = med_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::MedAction*>(
      &::gobgpapi::_MedAction_default_instance_);
}
inline const ::gobgpapi::MedAction& Actions::med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.med)
  return _internal_med();
}
inline ::gobgpapi::MedAction* Actions::release_med() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.med)
  
  ::gobgpapi::MedAction* temp = med_;
  med_ = nullptr;
  return temp;
}
inline ::gobgpapi::MedAction* Actions::_internal_mutable_med() {
  
  if (med_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::MedAction>(GetArenaNoVirtual());
    med_ = p;
  }
  return med_;
}
inline ::gobgpapi::MedAction* Actions::mutable_med() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.med)
  return _internal_mutable_med();
}
inline void Actions::set_allocated_med(::gobgpapi::MedAction* med) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete med_;
  }
  if (med) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      med = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, med, submessage_arena);
    }
    
  } else {
    
  }
  med_ = med;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.med)
}

// .gobgpapi.AsPrependAction as_prepend = 4;
inline bool Actions::_internal_has_as_prepend() const {
  return this != internal_default_instance() && as_prepend_ != nullptr;
}
inline bool Actions::has_as_prepend() const {
  return _internal_has_as_prepend();
}
inline void Actions::clear_as_prepend() {
  if (GetArenaNoVirtual() == nullptr && as_prepend_ != nullptr) {
    delete as_prepend_;
  }
  as_prepend_ = nullptr;
}
inline const ::gobgpapi::AsPrependAction& Actions::_internal_as_prepend() const {
  const ::gobgpapi::AsPrependAction* p = as_prepend_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::AsPrependAction*>(
      &::gobgpapi::_AsPrependAction_default_instance_);
}
inline const ::gobgpapi::AsPrependAction& Actions::as_prepend() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.as_prepend)
  return _internal_as_prepend();
}
inline ::gobgpapi::AsPrependAction* Actions::release_as_prepend() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.as_prepend)
  
  ::gobgpapi::AsPrependAction* temp = as_prepend_;
  as_prepend_ = nullptr;
  return temp;
}
inline ::gobgpapi::AsPrependAction* Actions::_internal_mutable_as_prepend() {
  
  if (as_prepend_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::AsPrependAction>(GetArenaNoVirtual());
    as_prepend_ = p;
  }
  return as_prepend_;
}
inline ::gobgpapi::AsPrependAction* Actions::mutable_as_prepend() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.as_prepend)
  return _internal_mutable_as_prepend();
}
inline void Actions::set_allocated_as_prepend(::gobgpapi::AsPrependAction* as_prepend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete as_prepend_;
  }
  if (as_prepend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      as_prepend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, as_prepend, submessage_arena);
    }
    
  } else {
    
  }
  as_prepend_ = as_prepend;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.as_prepend)
}

// .gobgpapi.CommunityAction ext_community = 5;
inline bool Actions::_internal_has_ext_community() const {
  return this != internal_default_instance() && ext_community_ != nullptr;
}
inline bool Actions::has_ext_community() const {
  return _internal_has_ext_community();
}
inline void Actions::clear_ext_community() {
  if (GetArenaNoVirtual() == nullptr && ext_community_ != nullptr) {
    delete ext_community_;
  }
  ext_community_ = nullptr;
}
inline const ::gobgpapi::CommunityAction& Actions::_internal_ext_community() const {
  const ::gobgpapi::CommunityAction* p = ext_community_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::CommunityAction*>(
      &::gobgpapi::_CommunityAction_default_instance_);
}
inline const ::gobgpapi::CommunityAction& Actions::ext_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.ext_community)
  return _internal_ext_community();
}
inline ::gobgpapi::CommunityAction* Actions::release_ext_community() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.ext_community)
  
  ::gobgpapi::CommunityAction* temp = ext_community_;
  ext_community_ = nullptr;
  return temp;
}
inline ::gobgpapi::CommunityAction* Actions::_internal_mutable_ext_community() {
  
  if (ext_community_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::CommunityAction>(GetArenaNoVirtual());
    ext_community_ = p;
  }
  return ext_community_;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_ext_community() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.ext_community)
  return _internal_mutable_ext_community();
}
inline void Actions::set_allocated_ext_community(::gobgpapi::CommunityAction* ext_community) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ext_community_;
  }
  if (ext_community) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ext_community = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_community, submessage_arena);
    }
    
  } else {
    
  }
  ext_community_ = ext_community;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.ext_community)
}

// .gobgpapi.NexthopAction nexthop = 6;
inline bool Actions::_internal_has_nexthop() const {
  return this != internal_default_instance() && nexthop_ != nullptr;
}
inline bool Actions::has_nexthop() const {
  return _internal_has_nexthop();
}
inline void Actions::clear_nexthop() {
  if (GetArenaNoVirtual() == nullptr && nexthop_ != nullptr) {
    delete nexthop_;
  }
  nexthop_ = nullptr;
}
inline const ::gobgpapi::NexthopAction& Actions::_internal_nexthop() const {
  const ::gobgpapi::NexthopAction* p = nexthop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::NexthopAction*>(
      &::gobgpapi::_NexthopAction_default_instance_);
}
inline const ::gobgpapi::NexthopAction& Actions::nexthop() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.nexthop)
  return _internal_nexthop();
}
inline ::gobgpapi::NexthopAction* Actions::release_nexthop() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.nexthop)
  
  ::gobgpapi::NexthopAction* temp = nexthop_;
  nexthop_ = nullptr;
  return temp;
}
inline ::gobgpapi::NexthopAction* Actions::_internal_mutable_nexthop() {
  
  if (nexthop_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::NexthopAction>(GetArenaNoVirtual());
    nexthop_ = p;
  }
  return nexthop_;
}
inline ::gobgpapi::NexthopAction* Actions::mutable_nexthop() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.nexthop)
  return _internal_mutable_nexthop();
}
inline void Actions::set_allocated_nexthop(::gobgpapi::NexthopAction* nexthop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nexthop_;
  }
  if (nexthop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nexthop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nexthop, submessage_arena);
    }
    
  } else {
    
  }
  nexthop_ = nexthop;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.nexthop)
}

// .gobgpapi.LocalPrefAction local_pref = 7;
inline bool Actions::_internal_has_local_pref() const {
  return this != internal_default_instance() && local_pref_ != nullptr;
}
inline bool Actions::has_local_pref() const {
  return _internal_has_local_pref();
}
inline void Actions::clear_local_pref() {
  if (GetArenaNoVirtual() == nullptr && local_pref_ != nullptr) {
    delete local_pref_;
  }
  local_pref_ = nullptr;
}
inline const ::gobgpapi::LocalPrefAction& Actions::_internal_local_pref() const {
  const ::gobgpapi::LocalPrefAction* p = local_pref_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LocalPrefAction*>(
      &::gobgpapi::_LocalPrefAction_default_instance_);
}
inline const ::gobgpapi::LocalPrefAction& Actions::local_pref() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.local_pref)
  return _internal_local_pref();
}
inline ::gobgpapi::LocalPrefAction* Actions::release_local_pref() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.local_pref)
  
  ::gobgpapi::LocalPrefAction* temp = local_pref_;
  local_pref_ = nullptr;
  return temp;
}
inline ::gobgpapi::LocalPrefAction* Actions::_internal_mutable_local_pref() {
  
  if (local_pref_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LocalPrefAction>(GetArenaNoVirtual());
    local_pref_ = p;
  }
  return local_pref_;
}
inline ::gobgpapi::LocalPrefAction* Actions::mutable_local_pref() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.local_pref)
  return _internal_mutable_local_pref();
}
inline void Actions::set_allocated_local_pref(::gobgpapi::LocalPrefAction* local_pref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_pref_;
  }
  if (local_pref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_pref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_pref, submessage_arena);
    }
    
  } else {
    
  }
  local_pref_ = local_pref;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.local_pref)
}

// .gobgpapi.CommunityAction large_community = 8;
inline bool Actions::_internal_has_large_community() const {
  return this != internal_default_instance() && large_community_ != nullptr;
}
inline bool Actions::has_large_community() const {
  return _internal_has_large_community();
}
inline void Actions::clear_large_community() {
  if (GetArenaNoVirtual() == nullptr && large_community_ != nullptr) {
    delete large_community_;
  }
  large_community_ = nullptr;
}
inline const ::gobgpapi::CommunityAction& Actions::_internal_large_community() const {
  const ::gobgpapi::CommunityAction* p = large_community_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::CommunityAction*>(
      &::gobgpapi::_CommunityAction_default_instance_);
}
inline const ::gobgpapi::CommunityAction& Actions::large_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.large_community)
  return _internal_large_community();
}
inline ::gobgpapi::CommunityAction* Actions::release_large_community() {
  // @@protoc_insertion_point(field_release:gobgpapi.Actions.large_community)
  
  ::gobgpapi::CommunityAction* temp = large_community_;
  large_community_ = nullptr;
  return temp;
}
inline ::gobgpapi::CommunityAction* Actions::_internal_mutable_large_community() {
  
  if (large_community_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::CommunityAction>(GetArenaNoVirtual());
    large_community_ = p;
  }
  return large_community_;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_large_community() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.large_community)
  return _internal_mutable_large_community();
}
inline void Actions::set_allocated_large_community(::gobgpapi::CommunityAction* large_community) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete large_community_;
  }
  if (large_community) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      large_community = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_community, submessage_arena);
    }
    
  } else {
    
  }
  large_community_ = large_community;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.large_community)
}

// -------------------------------------------------------------------

// Statement

// string name = 1;
inline void Statement::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Statement::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.name)
  return _internal_name();
}
inline void Statement::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Statement.name)
}
inline std::string* Statement::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.name)
  return _internal_mutable_name();
}
inline const std::string& Statement::_internal_name() const {
  return name_.GetNoArena();
}
inline void Statement::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Statement::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Statement.name)
}
inline void Statement::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Statement.name)
}
inline void Statement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Statement.name)
}
inline std::string* Statement::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Statement::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Statement.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Statement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.name)
}

// .gobgpapi.Conditions conditions = 2;
inline bool Statement::_internal_has_conditions() const {
  return this != internal_default_instance() && conditions_ != nullptr;
}
inline bool Statement::has_conditions() const {
  return _internal_has_conditions();
}
inline void Statement::clear_conditions() {
  if (GetArenaNoVirtual() == nullptr && conditions_ != nullptr) {
    delete conditions_;
  }
  conditions_ = nullptr;
}
inline const ::gobgpapi::Conditions& Statement::_internal_conditions() const {
  const ::gobgpapi::Conditions* p = conditions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Conditions*>(
      &::gobgpapi::_Conditions_default_instance_);
}
inline const ::gobgpapi::Conditions& Statement::conditions() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.conditions)
  return _internal_conditions();
}
inline ::gobgpapi::Conditions* Statement::release_conditions() {
  // @@protoc_insertion_point(field_release:gobgpapi.Statement.conditions)
  
  ::gobgpapi::Conditions* temp = conditions_;
  conditions_ = nullptr;
  return temp;
}
inline ::gobgpapi::Conditions* Statement::_internal_mutable_conditions() {
  
  if (conditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Conditions>(GetArenaNoVirtual());
    conditions_ = p;
  }
  return conditions_;
}
inline ::gobgpapi::Conditions* Statement::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.conditions)
  return _internal_mutable_conditions();
}
inline void Statement::set_allocated_conditions(::gobgpapi::Conditions* conditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conditions_;
  }
  if (conditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditions, submessage_arena);
    }
    
  } else {
    
  }
  conditions_ = conditions;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.conditions)
}

// .gobgpapi.Actions actions = 3;
inline bool Statement::_internal_has_actions() const {
  return this != internal_default_instance() && actions_ != nullptr;
}
inline bool Statement::has_actions() const {
  return _internal_has_actions();
}
inline void Statement::clear_actions() {
  if (GetArenaNoVirtual() == nullptr && actions_ != nullptr) {
    delete actions_;
  }
  actions_ = nullptr;
}
inline const ::gobgpapi::Actions& Statement::_internal_actions() const {
  const ::gobgpapi::Actions* p = actions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Actions*>(
      &::gobgpapi::_Actions_default_instance_);
}
inline const ::gobgpapi::Actions& Statement::actions() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.actions)
  return _internal_actions();
}
inline ::gobgpapi::Actions* Statement::release_actions() {
  // @@protoc_insertion_point(field_release:gobgpapi.Statement.actions)
  
  ::gobgpapi::Actions* temp = actions_;
  actions_ = nullptr;
  return temp;
}
inline ::gobgpapi::Actions* Statement::_internal_mutable_actions() {
  
  if (actions_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Actions>(GetArenaNoVirtual());
    actions_ = p;
  }
  return actions_;
}
inline ::gobgpapi::Actions* Statement::mutable_actions() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.actions)
  return _internal_mutable_actions();
}
inline void Statement::set_allocated_actions(::gobgpapi::Actions* actions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete actions_;
  }
  if (actions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actions, submessage_arena);
    }
    
  } else {
    
  }
  actions_ = actions;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.actions)
}

// -------------------------------------------------------------------

// Policy

// string name = 1;
inline void Policy::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Policy::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.name)
  return _internal_name();
}
inline void Policy::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Policy.name)
}
inline std::string* Policy::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.name)
  return _internal_mutable_name();
}
inline const std::string& Policy::_internal_name() const {
  return name_.GetNoArena();
}
inline void Policy::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Policy::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Policy.name)
}
inline void Policy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Policy.name)
}
inline void Policy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Policy.name)
}
inline std::string* Policy::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Policy::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Policy.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Policy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Policy.name)
}

// repeated .gobgpapi.Statement statements = 2;
inline int Policy::_internal_statements_size() const {
  return statements_.size();
}
inline int Policy::statements_size() const {
  return _internal_statements_size();
}
inline void Policy::clear_statements() {
  statements_.Clear();
}
inline ::gobgpapi::Statement* Policy::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.statements)
  return statements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Statement >*
Policy::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Policy.statements)
  return &statements_;
}
inline const ::gobgpapi::Statement& Policy::_internal_statements(int index) const {
  return statements_.Get(index);
}
inline const ::gobgpapi::Statement& Policy::statements(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.statements)
  return _internal_statements(index);
}
inline ::gobgpapi::Statement* Policy::_internal_add_statements() {
  return statements_.Add();
}
inline ::gobgpapi::Statement* Policy::add_statements() {
  // @@protoc_insertion_point(field_add:gobgpapi.Policy.statements)
  return _internal_add_statements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Statement >&
Policy::statements() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Policy.statements)
  return statements_;
}

// -------------------------------------------------------------------

// PolicyAssignment

// string name = 1;
inline void PolicyAssignment::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PolicyAssignment::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.name)
  return _internal_name();
}
inline void PolicyAssignment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.name)
}
inline std::string* PolicyAssignment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.name)
  return _internal_mutable_name();
}
inline const std::string& PolicyAssignment::_internal_name() const {
  return name_.GetNoArena();
}
inline void PolicyAssignment::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PolicyAssignment::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PolicyAssignment.name)
}
inline void PolicyAssignment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PolicyAssignment.name)
}
inline void PolicyAssignment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PolicyAssignment.name)
}
inline std::string* PolicyAssignment::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PolicyAssignment::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.PolicyAssignment.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyAssignment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PolicyAssignment.name)
}

// .gobgpapi.PolicyDirection direction = 2;
inline void PolicyAssignment::clear_direction() {
  direction_ = 0;
}
inline ::gobgpapi::PolicyDirection PolicyAssignment::_internal_direction() const {
  return static_cast< ::gobgpapi::PolicyDirection >(direction_);
}
inline ::gobgpapi::PolicyDirection PolicyAssignment::direction() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.direction)
  return _internal_direction();
}
inline void PolicyAssignment::_internal_set_direction(::gobgpapi::PolicyDirection value) {
  
  direction_ = value;
}
inline void PolicyAssignment::set_direction(::gobgpapi::PolicyDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.direction)
}

// repeated .gobgpapi.Policy policies = 4;
inline int PolicyAssignment::_internal_policies_size() const {
  return policies_.size();
}
inline int PolicyAssignment::policies_size() const {
  return _internal_policies_size();
}
inline void PolicyAssignment::clear_policies() {
  policies_.Clear();
}
inline ::gobgpapi::Policy* PolicyAssignment::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.policies)
  return policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >*
PolicyAssignment::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PolicyAssignment.policies)
  return &policies_;
}
inline const ::gobgpapi::Policy& PolicyAssignment::_internal_policies(int index) const {
  return policies_.Get(index);
}
inline const ::gobgpapi::Policy& PolicyAssignment::policies(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.policies)
  return _internal_policies(index);
}
inline ::gobgpapi::Policy* PolicyAssignment::_internal_add_policies() {
  return policies_.Add();
}
inline ::gobgpapi::Policy* PolicyAssignment::add_policies() {
  // @@protoc_insertion_point(field_add:gobgpapi.PolicyAssignment.policies)
  return _internal_add_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >&
PolicyAssignment::policies() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PolicyAssignment.policies)
  return policies_;
}

// .gobgpapi.RouteAction default_action = 5;
inline void PolicyAssignment::clear_default_action() {
  default_action_ = 0;
}
inline ::gobgpapi::RouteAction PolicyAssignment::_internal_default_action() const {
  return static_cast< ::gobgpapi::RouteAction >(default_action_);
}
inline ::gobgpapi::RouteAction PolicyAssignment::default_action() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.default_action)
  return _internal_default_action();
}
inline void PolicyAssignment::_internal_set_default_action(::gobgpapi::RouteAction value) {
  
  default_action_ = value;
}
inline void PolicyAssignment::set_default_action(::gobgpapi::RouteAction value) {
  _internal_set_default_action(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.default_action)
}

// -------------------------------------------------------------------

// RoutingPolicy

// repeated .gobgpapi.DefinedSet defined_sets = 1;
inline int RoutingPolicy::_internal_defined_sets_size() const {
  return defined_sets_.size();
}
inline int RoutingPolicy::defined_sets_size() const {
  return _internal_defined_sets_size();
}
inline void RoutingPolicy::clear_defined_sets() {
  defined_sets_.Clear();
}
inline ::gobgpapi::DefinedSet* RoutingPolicy::mutable_defined_sets(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RoutingPolicy.defined_sets)
  return defined_sets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >*
RoutingPolicy::mutable_defined_sets() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.RoutingPolicy.defined_sets)
  return &defined_sets_;
}
inline const ::gobgpapi::DefinedSet& RoutingPolicy::_internal_defined_sets(int index) const {
  return defined_sets_.Get(index);
}
inline const ::gobgpapi::DefinedSet& RoutingPolicy::defined_sets(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.RoutingPolicy.defined_sets)
  return _internal_defined_sets(index);
}
inline ::gobgpapi::DefinedSet* RoutingPolicy::_internal_add_defined_sets() {
  return defined_sets_.Add();
}
inline ::gobgpapi::DefinedSet* RoutingPolicy::add_defined_sets() {
  // @@protoc_insertion_point(field_add:gobgpapi.RoutingPolicy.defined_sets)
  return _internal_add_defined_sets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::DefinedSet >&
RoutingPolicy::defined_sets() const {
  // @@protoc_insertion_point(field_list:gobgpapi.RoutingPolicy.defined_sets)
  return defined_sets_;
}

// repeated .gobgpapi.Policy policies = 2;
inline int RoutingPolicy::_internal_policies_size() const {
  return policies_.size();
}
inline int RoutingPolicy::policies_size() const {
  return _internal_policies_size();
}
inline void RoutingPolicy::clear_policies() {
  policies_.Clear();
}
inline ::gobgpapi::Policy* RoutingPolicy::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RoutingPolicy.policies)
  return policies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >*
RoutingPolicy::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.RoutingPolicy.policies)
  return &policies_;
}
inline const ::gobgpapi::Policy& RoutingPolicy::_internal_policies(int index) const {
  return policies_.Get(index);
}
inline const ::gobgpapi::Policy& RoutingPolicy::policies(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.RoutingPolicy.policies)
  return _internal_policies(index);
}
inline ::gobgpapi::Policy* RoutingPolicy::_internal_add_policies() {
  return policies_.Add();
}
inline ::gobgpapi::Policy* RoutingPolicy::add_policies() {
  // @@protoc_insertion_point(field_add:gobgpapi.RoutingPolicy.policies)
  return _internal_add_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::Policy >&
RoutingPolicy::policies() const {
  // @@protoc_insertion_point(field_list:gobgpapi.RoutingPolicy.policies)
  return policies_;
}

// -------------------------------------------------------------------

// Roa

// uint32 as = 1;
inline void Roa::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Roa::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Roa::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.as)
  return _internal_as();
}
inline void Roa::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void Roa::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.as)
}

// uint32 prefixlen = 2;
inline void Roa::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Roa::_internal_prefixlen() const {
  return prefixlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Roa::prefixlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.prefixlen)
  return _internal_prefixlen();
}
inline void Roa::_internal_set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefixlen_ = value;
}
inline void Roa::set_prefixlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefixlen(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.prefixlen)
}

// uint32 maxlen = 3;
inline void Roa::clear_maxlen() {
  maxlen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Roa::_internal_maxlen() const {
  return maxlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Roa::maxlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.maxlen)
  return _internal_maxlen();
}
inline void Roa::_internal_set_maxlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxlen_ = value;
}
inline void Roa::set_maxlen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxlen(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.maxlen)
}

// string prefix = 4;
inline void Roa::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Roa::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.prefix)
  return _internal_prefix();
}
inline void Roa::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Roa.prefix)
}
inline std::string* Roa::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Roa.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& Roa::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void Roa::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Roa::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Roa.prefix)
}
inline void Roa::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Roa.prefix)
}
inline void Roa::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Roa.prefix)
}
inline std::string* Roa::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Roa::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.Roa.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Roa::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Roa.prefix)
}

// .gobgpapi.RPKIConf conf = 5;
inline bool Roa::_internal_has_conf() const {
  return this != internal_default_instance() && conf_ != nullptr;
}
inline bool Roa::has_conf() const {
  return _internal_has_conf();
}
inline void Roa::clear_conf() {
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
}
inline const ::gobgpapi::RPKIConf& Roa::_internal_conf() const {
  const ::gobgpapi::RPKIConf* p = conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RPKIConf*>(
      &::gobgpapi::_RPKIConf_default_instance_);
}
inline const ::gobgpapi::RPKIConf& Roa::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Roa.conf)
  return _internal_conf();
}
inline ::gobgpapi::RPKIConf* Roa::release_conf() {
  // @@protoc_insertion_point(field_release:gobgpapi.Roa.conf)
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = nullptr;
  return temp;
}
inline ::gobgpapi::RPKIConf* Roa::_internal_mutable_conf() {
  
  if (conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RPKIConf>(GetArenaNoVirtual());
    conf_ = p;
  }
  return conf_;
}
inline ::gobgpapi::RPKIConf* Roa::mutable_conf() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Roa.conf)
  return _internal_mutable_conf();
}
inline void Roa::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Roa.conf)
}

// -------------------------------------------------------------------

// Vrf

// string name = 1;
inline void Vrf::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vrf::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.name)
  return _internal_name();
}
inline void Vrf::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.name)
}
inline std::string* Vrf::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.name)
  return _internal_mutable_name();
}
inline const std::string& Vrf::_internal_name() const {
  return name_.GetNoArena();
}
inline void Vrf::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Vrf::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Vrf.name)
}
inline void Vrf::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.name)
}
inline void Vrf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.name)
}
inline std::string* Vrf::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vrf::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.Vrf.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vrf::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.name)
}

// .google.protobuf.Any rd = 2;
inline bool Vrf::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool Vrf::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Vrf::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Vrf::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.Vrf.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.rd)
  return _internal_mutable_rd();
}
inline void Vrf::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.rd)
}

// repeated .google.protobuf.Any import_rt = 3;
inline int Vrf::_internal_import_rt_size() const {
  return import_rt_.size();
}
inline int Vrf::import_rt_size() const {
  return _internal_import_rt_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::mutable_import_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.import_rt)
  return import_rt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
Vrf::mutable_import_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.import_rt)
  return &import_rt_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& Vrf::_internal_import_rt(int index) const {
  return import_rt_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Vrf::import_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.import_rt)
  return _internal_import_rt(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::_internal_add_import_rt() {
  return import_rt_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::add_import_rt() {
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.import_rt)
  return _internal_add_import_rt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
Vrf::import_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.import_rt)
  return import_rt_;
}

// repeated .google.protobuf.Any export_rt = 4;
inline int Vrf::_internal_export_rt_size() const {
  return export_rt_.size();
}
inline int Vrf::export_rt_size() const {
  return _internal_export_rt_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::mutable_export_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.export_rt)
  return export_rt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
Vrf::mutable_export_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.export_rt)
  return &export_rt_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& Vrf::_internal_export_rt(int index) const {
  return export_rt_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Vrf::export_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.export_rt)
  return _internal_export_rt(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::_internal_add_export_rt() {
  return export_rt_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* Vrf::add_export_rt() {
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.export_rt)
  return _internal_add_export_rt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
Vrf::export_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.export_rt)
  return export_rt_;
}

// uint32 id = 5;
inline void Vrf::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vrf::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vrf::id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.id)
  return _internal_id();
}
inline void Vrf::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Vrf::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.id)
}

// -------------------------------------------------------------------

// DefaultRouteDistance

// uint32 external_route_distance = 1;
inline void DefaultRouteDistance::clear_external_route_distance() {
  external_route_distance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DefaultRouteDistance::_internal_external_route_distance() const {
  return external_route_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DefaultRouteDistance::external_route_distance() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefaultRouteDistance.external_route_distance)
  return _internal_external_route_distance();
}
inline void DefaultRouteDistance::_internal_set_external_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  external_route_distance_ = value;
}
inline void DefaultRouteDistance::set_external_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_external_route_distance(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DefaultRouteDistance.external_route_distance)
}

// uint32 internal_route_distance = 2;
inline void DefaultRouteDistance::clear_internal_route_distance() {
  internal_route_distance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DefaultRouteDistance::_internal_internal_route_distance() const {
  return internal_route_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DefaultRouteDistance::internal_route_distance() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefaultRouteDistance.internal_route_distance)
  return _internal_internal_route_distance();
}
inline void DefaultRouteDistance::_internal_set_internal_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  internal_route_distance_ = value;
}
inline void DefaultRouteDistance::set_internal_route_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_internal_route_distance(value);
  // @@protoc_insertion_point(field_set:gobgpapi.DefaultRouteDistance.internal_route_distance)
}

// -------------------------------------------------------------------

// Global

// uint32 as = 1;
inline void Global::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Global::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Global::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.as)
  return _internal_as();
}
inline void Global::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void Global::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.as)
}

// string router_id = 2;
inline void Global::clear_router_id() {
  router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Global::router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.router_id)
  return _internal_router_id();
}
inline void Global::set_router_id(const std::string& value) {
  _internal_set_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.router_id)
}
inline std::string* Global::mutable_router_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.router_id)
  return _internal_mutable_router_id();
}
inline const std::string& Global::_internal_router_id() const {
  return router_id_.GetNoArena();
}
inline void Global::_internal_set_router_id(const std::string& value) {
  
  router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Global::set_router_id(std::string&& value) {
  
  router_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.Global.router_id)
}
inline void Global::set_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.router_id)
}
inline void Global::set_router_id(const char* value, size_t size) {
  
  router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.router_id)
}
inline std::string* Global::_internal_mutable_router_id() {
  
  return router_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Global::release_router_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.Global.router_id)
  
  return router_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Global::set_allocated_router_id(std::string* router_id) {
  if (router_id != nullptr) {
    
  } else {
    
  }
  router_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.router_id)
}

// int32 listen_port = 3;
inline void Global::clear_listen_port() {
  listen_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Global::_internal_listen_port() const {
  return listen_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Global::listen_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_port)
  return _internal_listen_port();
}
inline void Global::_internal_set_listen_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listen_port_ = value;
}
inline void Global::set_listen_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listen_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_port)
}

// repeated string listen_addresses = 4;
inline int Global::_internal_listen_addresses_size() const {
  return listen_addresses_.size();
}
inline int Global::listen_addresses_size() const {
  return _internal_listen_addresses_size();
}
inline void Global::clear_listen_addresses() {
  listen_addresses_.Clear();
}
inline std::string* Global::add_listen_addresses() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.Global.listen_addresses)
  return _internal_add_listen_addresses();
}
inline const std::string& Global::_internal_listen_addresses(int index) const {
  return listen_addresses_.Get(index);
}
inline const std::string& Global::listen_addresses(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_addresses)
  return _internal_listen_addresses(index);
}
inline std::string* Global::mutable_listen_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Mutable(index);
}
inline void Global::set_listen_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_addresses)
  listen_addresses_.Mutable(index)->assign(value);
}
inline void Global::set_listen_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_addresses)
  listen_addresses_.Mutable(index)->assign(std::move(value));
}
inline void Global::set_listen_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listen_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.listen_addresses)
}
inline void Global::set_listen_addresses(int index, const char* value, size_t size) {
  listen_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.listen_addresses)
}
inline std::string* Global::_internal_add_listen_addresses() {
  return listen_addresses_.Add();
}
inline void Global::add_listen_addresses(const std::string& value) {
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.listen_addresses)
}
inline void Global::add_listen_addresses(std::string&& value) {
  listen_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.Global.listen_addresses)
}
inline void Global::add_listen_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Global.listen_addresses)
}
inline void Global::add_listen_addresses(const char* value, size_t size) {
  listen_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Global.listen_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Global::listen_addresses() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.listen_addresses)
  return listen_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Global::mutable_listen_addresses() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.listen_addresses)
  return &listen_addresses_;
}

// repeated uint32 families = 5;
inline int Global::_internal_families_size() const {
  return families_.size();
}
inline int Global::families_size() const {
  return _internal_families_size();
}
inline void Global::clear_families() {
  families_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Global::_internal_families(int index) const {
  return families_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Global::families(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.families)
  return _internal_families(index);
}
inline void Global::set_families(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  families_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.families)
}
inline void Global::_internal_add_families(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  families_.Add(value);
}
inline void Global::add_families(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_families(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.families)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Global::_internal_families() const {
  return families_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Global::families() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.families)
  return _internal_families();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Global::_internal_mutable_families() {
  return &families_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Global::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.families)
  return _internal_mutable_families();
}

// bool use_multiple_paths = 6;
inline void Global::clear_use_multiple_paths() {
  use_multiple_paths_ = false;
}
inline bool Global::_internal_use_multiple_paths() const {
  return use_multiple_paths_;
}
inline bool Global::use_multiple_paths() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.use_multiple_paths)
  return _internal_use_multiple_paths();
}
inline void Global::_internal_set_use_multiple_paths(bool value) {
  
  use_multiple_paths_ = value;
}
inline void Global::set_use_multiple_paths(bool value) {
  _internal_set_use_multiple_paths(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.use_multiple_paths)
}

// .gobgpapi.RouteSelectionOptionsConfig route_selection_options = 7;
inline bool Global::_internal_has_route_selection_options() const {
  return this != internal_default_instance() && route_selection_options_ != nullptr;
}
inline bool Global::has_route_selection_options() const {
  return _internal_has_route_selection_options();
}
inline void Global::clear_route_selection_options() {
  if (GetArenaNoVirtual() == nullptr && route_selection_options_ != nullptr) {
    delete route_selection_options_;
  }
  route_selection_options_ = nullptr;
}
inline const ::gobgpapi::RouteSelectionOptionsConfig& Global::_internal_route_selection_options() const {
  const ::gobgpapi::RouteSelectionOptionsConfig* p = route_selection_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RouteSelectionOptionsConfig*>(
      &::gobgpapi::_RouteSelectionOptionsConfig_default_instance_);
}
inline const ::gobgpapi::RouteSelectionOptionsConfig& Global::route_selection_options() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.route_selection_options)
  return _internal_route_selection_options();
}
inline ::gobgpapi::RouteSelectionOptionsConfig* Global::release_route_selection_options() {
  // @@protoc_insertion_point(field_release:gobgpapi.Global.route_selection_options)
  
  ::gobgpapi::RouteSelectionOptionsConfig* temp = route_selection_options_;
  route_selection_options_ = nullptr;
  return temp;
}
inline ::gobgpapi::RouteSelectionOptionsConfig* Global::_internal_mutable_route_selection_options() {
  
  if (route_selection_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RouteSelectionOptionsConfig>(GetArenaNoVirtual());
    route_selection_options_ = p;
  }
  return route_selection_options_;
}
inline ::gobgpapi::RouteSelectionOptionsConfig* Global::mutable_route_selection_options() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.route_selection_options)
  return _internal_mutable_route_selection_options();
}
inline void Global::set_allocated_route_selection_options(::gobgpapi::RouteSelectionOptionsConfig* route_selection_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_selection_options_;
  }
  if (route_selection_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route_selection_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_selection_options, submessage_arena);
    }
    
  } else {
    
  }
  route_selection_options_ = route_selection_options;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.route_selection_options)
}

// .gobgpapi.DefaultRouteDistance default_route_distance = 8;
inline bool Global::_internal_has_default_route_distance() const {
  return this != internal_default_instance() && default_route_distance_ != nullptr;
}
inline bool Global::has_default_route_distance() const {
  return _internal_has_default_route_distance();
}
inline void Global::clear_default_route_distance() {
  if (GetArenaNoVirtual() == nullptr && default_route_distance_ != nullptr) {
    delete default_route_distance_;
  }
  default_route_distance_ = nullptr;
}
inline const ::gobgpapi::DefaultRouteDistance& Global::_internal_default_route_distance() const {
  const ::gobgpapi::DefaultRouteDistance* p = default_route_distance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::DefaultRouteDistance*>(
      &::gobgpapi::_DefaultRouteDistance_default_instance_);
}
inline const ::gobgpapi::DefaultRouteDistance& Global::default_route_distance() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.default_route_distance)
  return _internal_default_route_distance();
}
inline ::gobgpapi::DefaultRouteDistance* Global::release_default_route_distance() {
  // @@protoc_insertion_point(field_release:gobgpapi.Global.default_route_distance)
  
  ::gobgpapi::DefaultRouteDistance* temp = default_route_distance_;
  default_route_distance_ = nullptr;
  return temp;
}
inline ::gobgpapi::DefaultRouteDistance* Global::_internal_mutable_default_route_distance() {
  
  if (default_route_distance_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::DefaultRouteDistance>(GetArenaNoVirtual());
    default_route_distance_ = p;
  }
  return default_route_distance_;
}
inline ::gobgpapi::DefaultRouteDistance* Global::mutable_default_route_distance() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.default_route_distance)
  return _internal_mutable_default_route_distance();
}
inline void Global::set_allocated_default_route_distance(::gobgpapi::DefaultRouteDistance* default_route_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_route_distance_;
  }
  if (default_route_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_route_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_route_distance, submessage_arena);
    }
    
  } else {
    
  }
  default_route_distance_ = default_route_distance;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.default_route_distance)
}

// .gobgpapi.Confederation confederation = 9;
inline bool Global::_internal_has_confederation() const {
  return this != internal_default_instance() && confederation_ != nullptr;
}
inline bool Global::has_confederation() const {
  return _internal_has_confederation();
}
inline void Global::clear_confederation() {
  if (GetArenaNoVirtual() == nullptr && confederation_ != nullptr) {
    delete confederation_;
  }
  confederation_ = nullptr;
}
inline const ::gobgpapi::Confederation& Global::_internal_confederation() const {
  const ::gobgpapi::Confederation* p = confederation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Confederation*>(
      &::gobgpapi::_Confederation_default_instance_);
}
inline const ::gobgpapi::Confederation& Global::confederation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.confederation)
  return _internal_confederation();
}
inline ::gobgpapi::Confederation* Global::release_confederation() {
  // @@protoc_insertion_point(field_release:gobgpapi.Global.confederation)
  
  ::gobgpapi::Confederation* temp = confederation_;
  confederation_ = nullptr;
  return temp;
}
inline ::gobgpapi::Confederation* Global::_internal_mutable_confederation() {
  
  if (confederation_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Confederation>(GetArenaNoVirtual());
    confederation_ = p;
  }
  return confederation_;
}
inline ::gobgpapi::Confederation* Global::mutable_confederation() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.confederation)
  return _internal_mutable_confederation();
}
inline void Global::set_allocated_confederation(::gobgpapi::Confederation* confederation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete confederation_;
  }
  if (confederation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      confederation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confederation, submessage_arena);
    }
    
  } else {
    
  }
  confederation_ = confederation;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.confederation)
}

// .gobgpapi.GracefulRestart graceful_restart = 10;
inline bool Global::_internal_has_graceful_restart() const {
  return this != internal_default_instance() && graceful_restart_ != nullptr;
}
inline bool Global::has_graceful_restart() const {
  return _internal_has_graceful_restart();
}
inline void Global::clear_graceful_restart() {
  if (GetArenaNoVirtual() == nullptr && graceful_restart_ != nullptr) {
    delete graceful_restart_;
  }
  graceful_restart_ = nullptr;
}
inline const ::gobgpapi::GracefulRestart& Global::_internal_graceful_restart() const {
  const ::gobgpapi::GracefulRestart* p = graceful_restart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::GracefulRestart*>(
      &::gobgpapi::_GracefulRestart_default_instance_);
}
inline const ::gobgpapi::GracefulRestart& Global::graceful_restart() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.graceful_restart)
  return _internal_graceful_restart();
}
inline ::gobgpapi::GracefulRestart* Global::release_graceful_restart() {
  // @@protoc_insertion_point(field_release:gobgpapi.Global.graceful_restart)
  
  ::gobgpapi::GracefulRestart* temp = graceful_restart_;
  graceful_restart_ = nullptr;
  return temp;
}
inline ::gobgpapi::GracefulRestart* Global::_internal_mutable_graceful_restart() {
  
  if (graceful_restart_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::GracefulRestart>(GetArenaNoVirtual());
    graceful_restart_ = p;
  }
  return graceful_restart_;
}
inline ::gobgpapi::GracefulRestart* Global::mutable_graceful_restart() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.graceful_restart)
  return _internal_mutable_graceful_restart();
}
inline void Global::set_allocated_graceful_restart(::gobgpapi::GracefulRestart* graceful_restart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete graceful_restart_;
  }
  if (graceful_restart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      graceful_restart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graceful_restart, submessage_arena);
    }
    
  } else {
    
  }
  graceful_restart_ = graceful_restart;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.graceful_restart)
}

// .gobgpapi.ApplyPolicy apply_policy = 11;
inline bool Global::_internal_has_apply_policy() const {
  return this != internal_default_instance() && apply_policy_ != nullptr;
}
inline bool Global::has_apply_policy() const {
  return _internal_has_apply_policy();
}
inline void Global::clear_apply_policy() {
  if (GetArenaNoVirtual() == nullptr && apply_policy_ != nullptr) {
    delete apply_policy_;
  }
  apply_policy_ = nullptr;
}
inline const ::gobgpapi::ApplyPolicy& Global::_internal_apply_policy() const {
  const ::gobgpapi::ApplyPolicy* p = apply_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::ApplyPolicy*>(
      &::gobgpapi::_ApplyPolicy_default_instance_);
}
inline const ::gobgpapi::ApplyPolicy& Global::apply_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.apply_policy)
  return _internal_apply_policy();
}
inline ::gobgpapi::ApplyPolicy* Global::release_apply_policy() {
  // @@protoc_insertion_point(field_release:gobgpapi.Global.apply_policy)
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = nullptr;
  return temp;
}
inline ::gobgpapi::ApplyPolicy* Global::_internal_mutable_apply_policy() {
  
  if (apply_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::ApplyPolicy>(GetArenaNoVirtual());
    apply_policy_ = p;
  }
  return apply_policy_;
}
inline ::gobgpapi::ApplyPolicy* Global::mutable_apply_policy() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.apply_policy)
  return _internal_mutable_apply_policy();
}
inline void Global::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apply_policy_;
  }
  if (apply_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apply_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_policy, submessage_arena);
    }
    
  } else {
    
  }
  apply_policy_ = apply_policy;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.apply_policy)
}

// -------------------------------------------------------------------

// Confederation

// bool enabled = 1;
inline void Confederation::clear_enabled() {
  enabled_ = false;
}
inline bool Confederation::_internal_enabled() const {
  return enabled_;
}
inline bool Confederation::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Confederation.enabled)
  return _internal_enabled();
}
inline void Confederation::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Confederation::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Confederation.enabled)
}

// uint32 identifier = 2;
inline void Confederation::clear_identifier() {
  identifier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Confederation::_internal_identifier() const {
  return identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Confederation::identifier() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Confederation.identifier)
  return _internal_identifier();
}
inline void Confederation::_internal_set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  identifier_ = value;
}
inline void Confederation::set_identifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:gobgpapi.Confederation.identifier)
}

// repeated uint32 member_as_list = 3;
inline int Confederation::_internal_member_as_list_size() const {
  return member_as_list_.size();
}
inline int Confederation::member_as_list_size() const {
  return _internal_member_as_list_size();
}
inline void Confederation::clear_member_as_list() {
  member_as_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Confederation::_internal_member_as_list(int index) const {
  return member_as_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Confederation::member_as_list(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Confederation.member_as_list)
  return _internal_member_as_list(index);
}
inline void Confederation::set_member_as_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_as_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Confederation.member_as_list)
}
inline void Confederation::_internal_add_member_as_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_as_list_.Add(value);
}
inline void Confederation::add_member_as_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_member_as_list(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Confederation.member_as_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Confederation::_internal_member_as_list() const {
  return member_as_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Confederation::member_as_list() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Confederation.member_as_list)
  return _internal_member_as_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Confederation::_internal_mutable_member_as_list() {
  return &member_as_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Confederation::mutable_member_as_list() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Confederation.member_as_list)
  return _internal_mutable_member_as_list();
}

// -------------------------------------------------------------------

// RPKIConf

// string address = 1;
inline void RPKIConf::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPKIConf::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.address)
  return _internal_address();
}
inline void RPKIConf::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.address)
}
inline std::string* RPKIConf::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIConf.address)
  return _internal_mutable_address();
}
inline const std::string& RPKIConf::_internal_address() const {
  return address_.GetNoArena();
}
inline void RPKIConf::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPKIConf::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RPKIConf.address)
}
inline void RPKIConf::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RPKIConf.address)
}
inline void RPKIConf::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RPKIConf.address)
}
inline std::string* RPKIConf::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPKIConf::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.RPKIConf.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPKIConf::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIConf.address)
}

// uint32 remote_port = 2;
inline void RPKIConf::clear_remote_port() {
  remote_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIConf::_internal_remote_port() const {
  return remote_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIConf::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.remote_port)
  return _internal_remote_port();
}
inline void RPKIConf::_internal_set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_port_ = value;
}
inline void RPKIConf::set_remote_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.remote_port)
}

// -------------------------------------------------------------------

// RPKIState

// .google.protobuf.Timestamp uptime = 1;
inline bool RPKIState::_internal_has_uptime() const {
  return this != internal_default_instance() && uptime_ != nullptr;
}
inline bool RPKIState::has_uptime() const {
  return _internal_has_uptime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RPKIState::_internal_uptime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = uptime_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RPKIState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.uptime)
  return _internal_uptime();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RPKIState::release_uptime() {
  // @@protoc_insertion_point(field_release:gobgpapi.RPKIState.uptime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = uptime_;
  uptime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RPKIState::_internal_mutable_uptime() {
  
  if (uptime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    uptime_ = p;
  }
  return uptime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RPKIState::mutable_uptime() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIState.uptime)
  return _internal_mutable_uptime();
}
inline void RPKIState::set_allocated_uptime(PROTOBUF_NAMESPACE_ID::Timestamp* uptime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime_);
  }
  if (uptime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uptime)->GetArena();
    if (message_arena != submessage_arena) {
      uptime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uptime, submessage_arena);
    }
    
  } else {
    
  }
  uptime_ = uptime;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIState.uptime)
}

// .google.protobuf.Timestamp downtime = 2;
inline bool RPKIState::_internal_has_downtime() const {
  return this != internal_default_instance() && downtime_ != nullptr;
}
inline bool RPKIState::has_downtime() const {
  return _internal_has_downtime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RPKIState::_internal_downtime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = downtime_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RPKIState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.downtime)
  return _internal_downtime();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RPKIState::release_downtime() {
  // @@protoc_insertion_point(field_release:gobgpapi.RPKIState.downtime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = downtime_;
  downtime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RPKIState::_internal_mutable_downtime() {
  
  if (downtime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    downtime_ = p;
  }
  return downtime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RPKIState::mutable_downtime() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIState.downtime)
  return _internal_mutable_downtime();
}
inline void RPKIState::set_allocated_downtime(PROTOBUF_NAMESPACE_ID::Timestamp* downtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(downtime_);
  }
  if (downtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(downtime)->GetArena();
    if (message_arena != submessage_arena) {
      downtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, downtime, submessage_arena);
    }
    
  } else {
    
  }
  downtime_ = downtime;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIState.downtime)
}

// bool up = 3;
inline void RPKIState::clear_up() {
  up_ = false;
}
inline bool RPKIState::_internal_up() const {
  return up_;
}
inline bool RPKIState::up() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.up)
  return _internal_up();
}
inline void RPKIState::_internal_set_up(bool value) {
  
  up_ = value;
}
inline void RPKIState::set_up(bool value) {
  _internal_set_up(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.up)
}

// uint32 record_ipv4 = 4;
inline void RPKIState::clear_record_ipv4() {
  record_ipv4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::_internal_record_ipv4() const {
  return record_ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::record_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv4)
  return _internal_record_ipv4();
}
inline void RPKIState::_internal_set_record_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_ipv4_ = value;
}
inline void RPKIState::set_record_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_ipv4(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv4)
}

// uint32 record_ipv6 = 5;
inline void RPKIState::clear_record_ipv6() {
  record_ipv6_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::_internal_record_ipv6() const {
  return record_ipv6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::record_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv6)
  return _internal_record_ipv6();
}
inline void RPKIState::_internal_set_record_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  record_ipv6_ = value;
}
inline void RPKIState::set_record_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record_ipv6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv6)
}

// uint32 prefix_ipv4 = 6;
inline void RPKIState::clear_prefix_ipv4() {
  prefix_ipv4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::_internal_prefix_ipv4() const {
  return prefix_ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::prefix_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv4)
  return _internal_prefix_ipv4();
}
inline void RPKIState::_internal_set_prefix_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_ipv4_ = value;
}
inline void RPKIState::set_prefix_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_ipv4(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv4)
}

// uint32 prefix_ipv6 = 7;
inline void RPKIState::clear_prefix_ipv6() {
  prefix_ipv6_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::_internal_prefix_ipv6() const {
  return prefix_ipv6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::prefix_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv6)
  return _internal_prefix_ipv6();
}
inline void RPKIState::_internal_set_prefix_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_ipv6_ = value;
}
inline void RPKIState::set_prefix_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_ipv6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv6)
}

// uint32 serial = 8;
inline void RPKIState::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPKIState::serial() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial)
  return _internal_serial();
}
inline void RPKIState::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void RPKIState::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial)
}

// int64 received_ipv4 = 9;
inline void RPKIState::clear_received_ipv4() {
  received_ipv4_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_received_ipv4() const {
  return received_ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::received_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv4)
  return _internal_received_ipv4();
}
inline void RPKIState::_internal_set_received_ipv4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  received_ipv4_ = value;
}
inline void RPKIState::set_received_ipv4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_received_ipv4(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv4)
}

// int64 received_ipv6 = 10;
inline void RPKIState::clear_received_ipv6() {
  received_ipv6_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_received_ipv6() const {
  return received_ipv6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::received_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv6)
  return _internal_received_ipv6();
}
inline void RPKIState::_internal_set_received_ipv6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  received_ipv6_ = value;
}
inline void RPKIState::set_received_ipv6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_received_ipv6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv6)
}

// int64 serial_notify = 11;
inline void RPKIState::clear_serial_notify() {
  serial_notify_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_serial_notify() const {
  return serial_notify_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::serial_notify() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_notify)
  return _internal_serial_notify();
}
inline void RPKIState::_internal_set_serial_notify(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serial_notify_ = value;
}
inline void RPKIState::set_serial_notify(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serial_notify(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_notify)
}

// int64 cache_reset = 12;
inline void RPKIState::clear_cache_reset() {
  cache_reset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_cache_reset() const {
  return cache_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::cache_reset() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_reset)
  return _internal_cache_reset();
}
inline void RPKIState::_internal_set_cache_reset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cache_reset_ = value;
}
inline void RPKIState::set_cache_reset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cache_reset(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_reset)
}

// int64 cache_response = 13;
inline void RPKIState::clear_cache_response() {
  cache_response_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_cache_response() const {
  return cache_response_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::cache_response() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_response)
  return _internal_cache_response();
}
inline void RPKIState::_internal_set_cache_response(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cache_response_ = value;
}
inline void RPKIState::set_cache_response(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cache_response(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_response)
}

// int64 end_of_data = 14;
inline void RPKIState::clear_end_of_data() {
  end_of_data_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_end_of_data() const {
  return end_of_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::end_of_data() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.end_of_data)
  return _internal_end_of_data();
}
inline void RPKIState::_internal_set_end_of_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_of_data_ = value;
}
inline void RPKIState::set_end_of_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_of_data(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.end_of_data)
}

// int64 error = 15;
inline void RPKIState::clear_error() {
  error_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::error() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.error)
  return _internal_error();
}
inline void RPKIState::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  error_ = value;
}
inline void RPKIState::set_error(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.error)
}

// int64 serial_query = 16;
inline void RPKIState::clear_serial_query() {
  serial_query_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_serial_query() const {
  return serial_query_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::serial_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_query)
  return _internal_serial_query();
}
inline void RPKIState::_internal_set_serial_query(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serial_query_ = value;
}
inline void RPKIState::set_serial_query(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serial_query(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_query)
}

// int64 reset_query = 17;
inline void RPKIState::clear_reset_query() {
  reset_query_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::_internal_reset_query() const {
  return reset_query_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RPKIState::reset_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.reset_query)
  return _internal_reset_query();
}
inline void RPKIState::_internal_set_reset_query(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reset_query_ = value;
}
inline void RPKIState::set_reset_query(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reset_query(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.reset_query)
}

// -------------------------------------------------------------------

// Rpki

// .gobgpapi.RPKIConf conf = 1;
inline bool Rpki::_internal_has_conf() const {
  return this != internal_default_instance() && conf_ != nullptr;
}
inline bool Rpki::has_conf() const {
  return _internal_has_conf();
}
inline void Rpki::clear_conf() {
  if (GetArenaNoVirtual() == nullptr && conf_ != nullptr) {
    delete conf_;
  }
  conf_ = nullptr;
}
inline const ::gobgpapi::RPKIConf& Rpki::_internal_conf() const {
  const ::gobgpapi::RPKIConf* p = conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RPKIConf*>(
      &::gobgpapi::_RPKIConf_default_instance_);
}
inline const ::gobgpapi::RPKIConf& Rpki::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Rpki.conf)
  return _internal_conf();
}
inline ::gobgpapi::RPKIConf* Rpki::release_conf() {
  // @@protoc_insertion_point(field_release:gobgpapi.Rpki.conf)
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = nullptr;
  return temp;
}
inline ::gobgpapi::RPKIConf* Rpki::_internal_mutable_conf() {
  
  if (conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RPKIConf>(GetArenaNoVirtual());
    conf_ = p;
  }
  return conf_;
}
inline ::gobgpapi::RPKIConf* Rpki::mutable_conf() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Rpki.conf)
  return _internal_mutable_conf();
}
inline void Rpki::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_;
  }
  if (conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    
  } else {
    
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Rpki.conf)
}

// .gobgpapi.RPKIState state = 2;
inline bool Rpki::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Rpki::has_state() const {
  return _internal_has_state();
}
inline void Rpki::clear_state() {
  if (GetArenaNoVirtual() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::gobgpapi::RPKIState& Rpki::_internal_state() const {
  const ::gobgpapi::RPKIState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::RPKIState*>(
      &::gobgpapi::_RPKIState_default_instance_);
}
inline const ::gobgpapi::RPKIState& Rpki::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Rpki.state)
  return _internal_state();
}
inline ::gobgpapi::RPKIState* Rpki::release_state() {
  // @@protoc_insertion_point(field_release:gobgpapi.Rpki.state)
  
  ::gobgpapi::RPKIState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::gobgpapi::RPKIState* Rpki::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::RPKIState>(GetArenaNoVirtual());
    state_ = p;
  }
  return state_;
}
inline ::gobgpapi::RPKIState* Rpki::mutable_state() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Rpki.state)
  return _internal_mutable_state();
}
inline void Rpki::set_allocated_state(::gobgpapi::RPKIState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Rpki.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gobgpapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gobgpapi::ResetPeerRequest_SoftResetDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::ResetPeerRequest_SoftResetDirection>() {
  return ::gobgpapi::ResetPeerRequest_SoftResetDirection_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::ListPathRequest_SortType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::ListPathRequest_SortType>() {
  return ::gobgpapi::ListPathRequest_SortType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::AddBmpRequest_MonitoringPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::AddBmpRequest_MonitoringPolicy>() {
  return ::gobgpapi::AddBmpRequest_MonitoringPolicy_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Family_Afi> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Family_Afi>() {
  return ::gobgpapi::Family_Afi_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Family_Safi> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Family_Safi>() {
  return ::gobgpapi::Family_Safi_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Validation_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Validation_State>() {
  return ::gobgpapi::Validation_State_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Validation_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Validation_Reason>() {
  return ::gobgpapi::Validation_Reason_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PeerConf_RemovePrivateAs> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PeerConf_RemovePrivateAs>() {
  return ::gobgpapi::PeerConf_RemovePrivateAs_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PeerGroupConf_RemovePrivateAs> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PeerGroupConf_RemovePrivateAs>() {
  return ::gobgpapi::PeerGroupConf_RemovePrivateAs_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PeerGroupState_RemovePrivateAs> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PeerGroupState_RemovePrivateAs>() {
  return ::gobgpapi::PeerGroupState_RemovePrivateAs_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PeerState_SessionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PeerState_SessionState>() {
  return ::gobgpapi::PeerState_SessionState_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PeerState_AdminState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PeerState_AdminState>() {
  return ::gobgpapi::PeerState_AdminState_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Conditions_RouteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Conditions_RouteType>() {
  return ::gobgpapi::Conditions_RouteType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::TableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::TableType>() {
  return ::gobgpapi::TableType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::TableLookupOption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::TableLookupOption>() {
  return ::gobgpapi::TableLookupOption_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::DefinedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::DefinedType>() {
  return ::gobgpapi::DefinedType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::MatchType>() {
  return ::gobgpapi::MatchType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::AsPathLengthType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::AsPathLengthType>() {
  return ::gobgpapi::AsPathLengthType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::RouteAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::RouteAction>() {
  return ::gobgpapi::RouteAction_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::CommunityActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::CommunityActionType>() {
  return ::gobgpapi::CommunityActionType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::MedActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::MedActionType>() {
  return ::gobgpapi::MedActionType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PolicyDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PolicyDirection>() {
  return ::gobgpapi::PolicyDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gobgp_2eproto
