// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribute.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_attribute_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_attribute_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "gobgp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_attribute_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_attribute_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[90]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_attribute_2eproto;
namespace gobgpapi {
class AggregatorAttribute;
class AggregatorAttributeDefaultTypeInternal;
extern AggregatorAttributeDefaultTypeInternal _AggregatorAttribute_default_instance_;
class AigpAttribute;
class AigpAttributeDefaultTypeInternal;
extern AigpAttributeDefaultTypeInternal _AigpAttribute_default_instance_;
class AigpTLVIGPMetric;
class AigpTLVIGPMetricDefaultTypeInternal;
extern AigpTLVIGPMetricDefaultTypeInternal _AigpTLVIGPMetric_default_instance_;
class AigpTLVUnknown;
class AigpTLVUnknownDefaultTypeInternal;
extern AigpTLVUnknownDefaultTypeInternal _AigpTLVUnknown_default_instance_;
class As4AggregatorAttribute;
class As4AggregatorAttributeDefaultTypeInternal;
extern As4AggregatorAttributeDefaultTypeInternal _As4AggregatorAttribute_default_instance_;
class As4PathAttribute;
class As4PathAttributeDefaultTypeInternal;
extern As4PathAttributeDefaultTypeInternal _As4PathAttribute_default_instance_;
class AsPathAttribute;
class AsPathAttributeDefaultTypeInternal;
extern AsPathAttributeDefaultTypeInternal _AsPathAttribute_default_instance_;
class AsSegment;
class AsSegmentDefaultTypeInternal;
extern AsSegmentDefaultTypeInternal _AsSegment_default_instance_;
class AtomicAggregateAttribute;
class AtomicAggregateAttributeDefaultTypeInternal;
extern AtomicAggregateAttributeDefaultTypeInternal _AtomicAggregateAttribute_default_instance_;
class ClusterListAttribute;
class ClusterListAttributeDefaultTypeInternal;
extern ClusterListAttributeDefaultTypeInternal _ClusterListAttribute_default_instance_;
class ColorExtended;
class ColorExtendedDefaultTypeInternal;
extern ColorExtendedDefaultTypeInternal _ColorExtended_default_instance_;
class CommunitiesAttribute;
class CommunitiesAttributeDefaultTypeInternal;
extern CommunitiesAttributeDefaultTypeInternal _CommunitiesAttribute_default_instance_;
class DefaultGatewayExtended;
class DefaultGatewayExtendedDefaultTypeInternal;
extern DefaultGatewayExtendedDefaultTypeInternal _DefaultGatewayExtended_default_instance_;
class ESILabelExtended;
class ESILabelExtendedDefaultTypeInternal;
extern ESILabelExtendedDefaultTypeInternal _ESILabelExtended_default_instance_;
class ESImportRouteTarget;
class ESImportRouteTargetDefaultTypeInternal;
extern ESImportRouteTargetDefaultTypeInternal _ESImportRouteTarget_default_instance_;
class EVPNEthernetAutoDiscoveryRoute;
class EVPNEthernetAutoDiscoveryRouteDefaultTypeInternal;
extern EVPNEthernetAutoDiscoveryRouteDefaultTypeInternal _EVPNEthernetAutoDiscoveryRoute_default_instance_;
class EVPNEthernetSegmentRoute;
class EVPNEthernetSegmentRouteDefaultTypeInternal;
extern EVPNEthernetSegmentRouteDefaultTypeInternal _EVPNEthernetSegmentRoute_default_instance_;
class EVPNIPMSIRoute;
class EVPNIPMSIRouteDefaultTypeInternal;
extern EVPNIPMSIRouteDefaultTypeInternal _EVPNIPMSIRoute_default_instance_;
class EVPNIPPrefixRoute;
class EVPNIPPrefixRouteDefaultTypeInternal;
extern EVPNIPPrefixRouteDefaultTypeInternal _EVPNIPPrefixRoute_default_instance_;
class EVPNInclusiveMulticastEthernetTagRoute;
class EVPNInclusiveMulticastEthernetTagRouteDefaultTypeInternal;
extern EVPNInclusiveMulticastEthernetTagRouteDefaultTypeInternal _EVPNInclusiveMulticastEthernetTagRoute_default_instance_;
class EVPNMACIPAdvertisementRoute;
class EVPNMACIPAdvertisementRouteDefaultTypeInternal;
extern EVPNMACIPAdvertisementRouteDefaultTypeInternal _EVPNMACIPAdvertisementRoute_default_instance_;
class EncapExtended;
class EncapExtendedDefaultTypeInternal;
extern EncapExtendedDefaultTypeInternal _EncapExtended_default_instance_;
class EncapsulationNLRI;
class EncapsulationNLRIDefaultTypeInternal;
extern EncapsulationNLRIDefaultTypeInternal _EncapsulationNLRI_default_instance_;
class EthernetSegmentIdentifier;
class EthernetSegmentIdentifierDefaultTypeInternal;
extern EthernetSegmentIdentifierDefaultTypeInternal _EthernetSegmentIdentifier_default_instance_;
class ExtendedCommunitiesAttribute;
class ExtendedCommunitiesAttributeDefaultTypeInternal;
extern ExtendedCommunitiesAttributeDefaultTypeInternal _ExtendedCommunitiesAttribute_default_instance_;
class FlowSpecComponent;
class FlowSpecComponentDefaultTypeInternal;
extern FlowSpecComponentDefaultTypeInternal _FlowSpecComponent_default_instance_;
class FlowSpecComponentItem;
class FlowSpecComponentItemDefaultTypeInternal;
extern FlowSpecComponentItemDefaultTypeInternal _FlowSpecComponentItem_default_instance_;
class FlowSpecIPPrefix;
class FlowSpecIPPrefixDefaultTypeInternal;
extern FlowSpecIPPrefixDefaultTypeInternal _FlowSpecIPPrefix_default_instance_;
class FlowSpecMAC;
class FlowSpecMACDefaultTypeInternal;
extern FlowSpecMACDefaultTypeInternal _FlowSpecMAC_default_instance_;
class FlowSpecNLRI;
class FlowSpecNLRIDefaultTypeInternal;
extern FlowSpecNLRIDefaultTypeInternal _FlowSpecNLRI_default_instance_;
class FourOctetAsSpecificExtended;
class FourOctetAsSpecificExtendedDefaultTypeInternal;
extern FourOctetAsSpecificExtendedDefaultTypeInternal _FourOctetAsSpecificExtended_default_instance_;
class IP6ExtendedCommunitiesAttribute;
class IP6ExtendedCommunitiesAttributeDefaultTypeInternal;
extern IP6ExtendedCommunitiesAttributeDefaultTypeInternal _IP6ExtendedCommunitiesAttribute_default_instance_;
class IPAddressPrefix;
class IPAddressPrefixDefaultTypeInternal;
extern IPAddressPrefixDefaultTypeInternal _IPAddressPrefix_default_instance_;
class IPv4AddressSpecificExtended;
class IPv4AddressSpecificExtendedDefaultTypeInternal;
extern IPv4AddressSpecificExtendedDefaultTypeInternal _IPv4AddressSpecificExtended_default_instance_;
class IPv6AddressSpecificExtended;
class IPv6AddressSpecificExtendedDefaultTypeInternal;
extern IPv6AddressSpecificExtendedDefaultTypeInternal _IPv6AddressSpecificExtended_default_instance_;
class LabeledIPAddressPrefix;
class LabeledIPAddressPrefixDefaultTypeInternal;
extern LabeledIPAddressPrefixDefaultTypeInternal _LabeledIPAddressPrefix_default_instance_;
class LabeledVPNIPAddressPrefix;
class LabeledVPNIPAddressPrefixDefaultTypeInternal;
extern LabeledVPNIPAddressPrefixDefaultTypeInternal _LabeledVPNIPAddressPrefix_default_instance_;
class LargeCommunitiesAttribute;
class LargeCommunitiesAttributeDefaultTypeInternal;
extern LargeCommunitiesAttributeDefaultTypeInternal _LargeCommunitiesAttribute_default_instance_;
class LargeCommunity;
class LargeCommunityDefaultTypeInternal;
extern LargeCommunityDefaultTypeInternal _LargeCommunity_default_instance_;
class LocalPrefAttribute;
class LocalPrefAttributeDefaultTypeInternal;
extern LocalPrefAttributeDefaultTypeInternal _LocalPrefAttribute_default_instance_;
class LsAddrPrefix;
class LsAddrPrefixDefaultTypeInternal;
extern LsAddrPrefixDefaultTypeInternal _LsAddrPrefix_default_instance_;
class LsAttribute;
class LsAttributeDefaultTypeInternal;
extern LsAttributeDefaultTypeInternal _LsAttribute_default_instance_;
class LsAttributeLink;
class LsAttributeLinkDefaultTypeInternal;
extern LsAttributeLinkDefaultTypeInternal _LsAttributeLink_default_instance_;
class LsAttributeNode;
class LsAttributeNodeDefaultTypeInternal;
extern LsAttributeNodeDefaultTypeInternal _LsAttributeNode_default_instance_;
class LsAttributePrefix;
class LsAttributePrefixDefaultTypeInternal;
extern LsAttributePrefixDefaultTypeInternal _LsAttributePrefix_default_instance_;
class LsIGPFlags;
class LsIGPFlagsDefaultTypeInternal;
extern LsIGPFlagsDefaultTypeInternal _LsIGPFlags_default_instance_;
class LsLinkDescriptor;
class LsLinkDescriptorDefaultTypeInternal;
extern LsLinkDescriptorDefaultTypeInternal _LsLinkDescriptor_default_instance_;
class LsLinkNLRI;
class LsLinkNLRIDefaultTypeInternal;
extern LsLinkNLRIDefaultTypeInternal _LsLinkNLRI_default_instance_;
class LsNodeDescriptor;
class LsNodeDescriptorDefaultTypeInternal;
extern LsNodeDescriptorDefaultTypeInternal _LsNodeDescriptor_default_instance_;
class LsNodeFlags;
class LsNodeFlagsDefaultTypeInternal;
extern LsNodeFlagsDefaultTypeInternal _LsNodeFlags_default_instance_;
class LsNodeNLRI;
class LsNodeNLRIDefaultTypeInternal;
extern LsNodeNLRIDefaultTypeInternal _LsNodeNLRI_default_instance_;
class LsPrefixDescriptor;
class LsPrefixDescriptorDefaultTypeInternal;
extern LsPrefixDescriptorDefaultTypeInternal _LsPrefixDescriptor_default_instance_;
class LsPrefixV4NLRI;
class LsPrefixV4NLRIDefaultTypeInternal;
extern LsPrefixV4NLRIDefaultTypeInternal _LsPrefixV4NLRI_default_instance_;
class LsPrefixV6NLRI;
class LsPrefixV6NLRIDefaultTypeInternal;
extern LsPrefixV6NLRIDefaultTypeInternal _LsPrefixV6NLRI_default_instance_;
class LsSrCapabilities;
class LsSrCapabilitiesDefaultTypeInternal;
extern LsSrCapabilitiesDefaultTypeInternal _LsSrCapabilities_default_instance_;
class LsSrLocalBlock;
class LsSrLocalBlockDefaultTypeInternal;
extern LsSrLocalBlockDefaultTypeInternal _LsSrLocalBlock_default_instance_;
class LsSrRange;
class LsSrRangeDefaultTypeInternal;
extern LsSrRangeDefaultTypeInternal _LsSrRange_default_instance_;
class MacMobilityExtended;
class MacMobilityExtendedDefaultTypeInternal;
extern MacMobilityExtendedDefaultTypeInternal _MacMobilityExtended_default_instance_;
class MpReachNLRIAttribute;
class MpReachNLRIAttributeDefaultTypeInternal;
extern MpReachNLRIAttributeDefaultTypeInternal _MpReachNLRIAttribute_default_instance_;
class MpUnreachNLRIAttribute;
class MpUnreachNLRIAttributeDefaultTypeInternal;
extern MpUnreachNLRIAttributeDefaultTypeInternal _MpUnreachNLRIAttribute_default_instance_;
class MultiExitDiscAttribute;
class MultiExitDiscAttributeDefaultTypeInternal;
extern MultiExitDiscAttributeDefaultTypeInternal _MultiExitDiscAttribute_default_instance_;
class NextHopAttribute;
class NextHopAttributeDefaultTypeInternal;
extern NextHopAttributeDefaultTypeInternal _NextHopAttribute_default_instance_;
class OpaqueExtended;
class OpaqueExtendedDefaultTypeInternal;
extern OpaqueExtendedDefaultTypeInternal _OpaqueExtended_default_instance_;
class OpaqueNLRI;
class OpaqueNLRIDefaultTypeInternal;
extern OpaqueNLRIDefaultTypeInternal _OpaqueNLRI_default_instance_;
class OriginAttribute;
class OriginAttributeDefaultTypeInternal;
extern OriginAttributeDefaultTypeInternal _OriginAttribute_default_instance_;
class OriginatorIdAttribute;
class OriginatorIdAttributeDefaultTypeInternal;
extern OriginatorIdAttributeDefaultTypeInternal _OriginatorIdAttribute_default_instance_;
class PmsiTunnelAttribute;
class PmsiTunnelAttributeDefaultTypeInternal;
extern PmsiTunnelAttributeDefaultTypeInternal _PmsiTunnelAttribute_default_instance_;
class RedirectFourOctetAsSpecificExtended;
class RedirectFourOctetAsSpecificExtendedDefaultTypeInternal;
extern RedirectFourOctetAsSpecificExtendedDefaultTypeInternal _RedirectFourOctetAsSpecificExtended_default_instance_;
class RedirectIPv4AddressSpecificExtended;
class RedirectIPv4AddressSpecificExtendedDefaultTypeInternal;
extern RedirectIPv4AddressSpecificExtendedDefaultTypeInternal _RedirectIPv4AddressSpecificExtended_default_instance_;
class RedirectIPv6AddressSpecificExtended;
class RedirectIPv6AddressSpecificExtendedDefaultTypeInternal;
extern RedirectIPv6AddressSpecificExtendedDefaultTypeInternal _RedirectIPv6AddressSpecificExtended_default_instance_;
class RedirectTwoOctetAsSpecificExtended;
class RedirectTwoOctetAsSpecificExtendedDefaultTypeInternal;
extern RedirectTwoOctetAsSpecificExtendedDefaultTypeInternal _RedirectTwoOctetAsSpecificExtended_default_instance_;
class RouteDistinguisherFourOctetAS;
class RouteDistinguisherFourOctetASDefaultTypeInternal;
extern RouteDistinguisherFourOctetASDefaultTypeInternal _RouteDistinguisherFourOctetAS_default_instance_;
class RouteDistinguisherIPAddress;
class RouteDistinguisherIPAddressDefaultTypeInternal;
extern RouteDistinguisherIPAddressDefaultTypeInternal _RouteDistinguisherIPAddress_default_instance_;
class RouteDistinguisherTwoOctetAS;
class RouteDistinguisherTwoOctetASDefaultTypeInternal;
extern RouteDistinguisherTwoOctetASDefaultTypeInternal _RouteDistinguisherTwoOctetAS_default_instance_;
class RouteTargetMembershipNLRI;
class RouteTargetMembershipNLRIDefaultTypeInternal;
extern RouteTargetMembershipNLRIDefaultTypeInternal _RouteTargetMembershipNLRI_default_instance_;
class RouterMacExtended;
class RouterMacExtendedDefaultTypeInternal;
extern RouterMacExtendedDefaultTypeInternal _RouterMacExtended_default_instance_;
class TrafficActionExtended;
class TrafficActionExtendedDefaultTypeInternal;
extern TrafficActionExtendedDefaultTypeInternal _TrafficActionExtended_default_instance_;
class TrafficRateExtended;
class TrafficRateExtendedDefaultTypeInternal;
extern TrafficRateExtendedDefaultTypeInternal _TrafficRateExtended_default_instance_;
class TrafficRemarkExtended;
class TrafficRemarkExtendedDefaultTypeInternal;
extern TrafficRemarkExtendedDefaultTypeInternal _TrafficRemarkExtended_default_instance_;
class TunnelEncapAttribute;
class TunnelEncapAttributeDefaultTypeInternal;
extern TunnelEncapAttributeDefaultTypeInternal _TunnelEncapAttribute_default_instance_;
class TunnelEncapSubTLVColor;
class TunnelEncapSubTLVColorDefaultTypeInternal;
extern TunnelEncapSubTLVColorDefaultTypeInternal _TunnelEncapSubTLVColor_default_instance_;
class TunnelEncapSubTLVEncapsulation;
class TunnelEncapSubTLVEncapsulationDefaultTypeInternal;
extern TunnelEncapSubTLVEncapsulationDefaultTypeInternal _TunnelEncapSubTLVEncapsulation_default_instance_;
class TunnelEncapSubTLVProtocol;
class TunnelEncapSubTLVProtocolDefaultTypeInternal;
extern TunnelEncapSubTLVProtocolDefaultTypeInternal _TunnelEncapSubTLVProtocol_default_instance_;
class TunnelEncapSubTLVUnknown;
class TunnelEncapSubTLVUnknownDefaultTypeInternal;
extern TunnelEncapSubTLVUnknownDefaultTypeInternal _TunnelEncapSubTLVUnknown_default_instance_;
class TunnelEncapTLV;
class TunnelEncapTLVDefaultTypeInternal;
extern TunnelEncapTLVDefaultTypeInternal _TunnelEncapTLV_default_instance_;
class TwoOctetAsSpecificExtended;
class TwoOctetAsSpecificExtendedDefaultTypeInternal;
extern TwoOctetAsSpecificExtendedDefaultTypeInternal _TwoOctetAsSpecificExtended_default_instance_;
class UnknownAttribute;
class UnknownAttributeDefaultTypeInternal;
extern UnknownAttributeDefaultTypeInternal _UnknownAttribute_default_instance_;
class UnknownExtended;
class UnknownExtendedDefaultTypeInternal;
extern UnknownExtendedDefaultTypeInternal _UnknownExtended_default_instance_;
class VPNFlowSpecNLRI;
class VPNFlowSpecNLRIDefaultTypeInternal;
extern VPNFlowSpecNLRIDefaultTypeInternal _VPNFlowSpecNLRI_default_instance_;
class ValidationExtended;
class ValidationExtendedDefaultTypeInternal;
extern ValidationExtendedDefaultTypeInternal _ValidationExtended_default_instance_;
}  // namespace gobgpapi
PROTOBUF_NAMESPACE_OPEN
template<> ::gobgpapi::AggregatorAttribute* Arena::CreateMaybeMessage<::gobgpapi::AggregatorAttribute>(Arena*);
template<> ::gobgpapi::AigpAttribute* Arena::CreateMaybeMessage<::gobgpapi::AigpAttribute>(Arena*);
template<> ::gobgpapi::AigpTLVIGPMetric* Arena::CreateMaybeMessage<::gobgpapi::AigpTLVIGPMetric>(Arena*);
template<> ::gobgpapi::AigpTLVUnknown* Arena::CreateMaybeMessage<::gobgpapi::AigpTLVUnknown>(Arena*);
template<> ::gobgpapi::As4AggregatorAttribute* Arena::CreateMaybeMessage<::gobgpapi::As4AggregatorAttribute>(Arena*);
template<> ::gobgpapi::As4PathAttribute* Arena::CreateMaybeMessage<::gobgpapi::As4PathAttribute>(Arena*);
template<> ::gobgpapi::AsPathAttribute* Arena::CreateMaybeMessage<::gobgpapi::AsPathAttribute>(Arena*);
template<> ::gobgpapi::AsSegment* Arena::CreateMaybeMessage<::gobgpapi::AsSegment>(Arena*);
template<> ::gobgpapi::AtomicAggregateAttribute* Arena::CreateMaybeMessage<::gobgpapi::AtomicAggregateAttribute>(Arena*);
template<> ::gobgpapi::ClusterListAttribute* Arena::CreateMaybeMessage<::gobgpapi::ClusterListAttribute>(Arena*);
template<> ::gobgpapi::ColorExtended* Arena::CreateMaybeMessage<::gobgpapi::ColorExtended>(Arena*);
template<> ::gobgpapi::CommunitiesAttribute* Arena::CreateMaybeMessage<::gobgpapi::CommunitiesAttribute>(Arena*);
template<> ::gobgpapi::DefaultGatewayExtended* Arena::CreateMaybeMessage<::gobgpapi::DefaultGatewayExtended>(Arena*);
template<> ::gobgpapi::ESILabelExtended* Arena::CreateMaybeMessage<::gobgpapi::ESILabelExtended>(Arena*);
template<> ::gobgpapi::ESImportRouteTarget* Arena::CreateMaybeMessage<::gobgpapi::ESImportRouteTarget>(Arena*);
template<> ::gobgpapi::EVPNEthernetAutoDiscoveryRoute* Arena::CreateMaybeMessage<::gobgpapi::EVPNEthernetAutoDiscoveryRoute>(Arena*);
template<> ::gobgpapi::EVPNEthernetSegmentRoute* Arena::CreateMaybeMessage<::gobgpapi::EVPNEthernetSegmentRoute>(Arena*);
template<> ::gobgpapi::EVPNIPMSIRoute* Arena::CreateMaybeMessage<::gobgpapi::EVPNIPMSIRoute>(Arena*);
template<> ::gobgpapi::EVPNIPPrefixRoute* Arena::CreateMaybeMessage<::gobgpapi::EVPNIPPrefixRoute>(Arena*);
template<> ::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute* Arena::CreateMaybeMessage<::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute>(Arena*);
template<> ::gobgpapi::EVPNMACIPAdvertisementRoute* Arena::CreateMaybeMessage<::gobgpapi::EVPNMACIPAdvertisementRoute>(Arena*);
template<> ::gobgpapi::EncapExtended* Arena::CreateMaybeMessage<::gobgpapi::EncapExtended>(Arena*);
template<> ::gobgpapi::EncapsulationNLRI* Arena::CreateMaybeMessage<::gobgpapi::EncapsulationNLRI>(Arena*);
template<> ::gobgpapi::EthernetSegmentIdentifier* Arena::CreateMaybeMessage<::gobgpapi::EthernetSegmentIdentifier>(Arena*);
template<> ::gobgpapi::ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage<::gobgpapi::ExtendedCommunitiesAttribute>(Arena*);
template<> ::gobgpapi::FlowSpecComponent* Arena::CreateMaybeMessage<::gobgpapi::FlowSpecComponent>(Arena*);
template<> ::gobgpapi::FlowSpecComponentItem* Arena::CreateMaybeMessage<::gobgpapi::FlowSpecComponentItem>(Arena*);
template<> ::gobgpapi::FlowSpecIPPrefix* Arena::CreateMaybeMessage<::gobgpapi::FlowSpecIPPrefix>(Arena*);
template<> ::gobgpapi::FlowSpecMAC* Arena::CreateMaybeMessage<::gobgpapi::FlowSpecMAC>(Arena*);
template<> ::gobgpapi::FlowSpecNLRI* Arena::CreateMaybeMessage<::gobgpapi::FlowSpecNLRI>(Arena*);
template<> ::gobgpapi::FourOctetAsSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::FourOctetAsSpecificExtended>(Arena*);
template<> ::gobgpapi::IP6ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage<::gobgpapi::IP6ExtendedCommunitiesAttribute>(Arena*);
template<> ::gobgpapi::IPAddressPrefix* Arena::CreateMaybeMessage<::gobgpapi::IPAddressPrefix>(Arena*);
template<> ::gobgpapi::IPv4AddressSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::IPv4AddressSpecificExtended>(Arena*);
template<> ::gobgpapi::IPv6AddressSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::IPv6AddressSpecificExtended>(Arena*);
template<> ::gobgpapi::LabeledIPAddressPrefix* Arena::CreateMaybeMessage<::gobgpapi::LabeledIPAddressPrefix>(Arena*);
template<> ::gobgpapi::LabeledVPNIPAddressPrefix* Arena::CreateMaybeMessage<::gobgpapi::LabeledVPNIPAddressPrefix>(Arena*);
template<> ::gobgpapi::LargeCommunitiesAttribute* Arena::CreateMaybeMessage<::gobgpapi::LargeCommunitiesAttribute>(Arena*);
template<> ::gobgpapi::LargeCommunity* Arena::CreateMaybeMessage<::gobgpapi::LargeCommunity>(Arena*);
template<> ::gobgpapi::LocalPrefAttribute* Arena::CreateMaybeMessage<::gobgpapi::LocalPrefAttribute>(Arena*);
template<> ::gobgpapi::LsAddrPrefix* Arena::CreateMaybeMessage<::gobgpapi::LsAddrPrefix>(Arena*);
template<> ::gobgpapi::LsAttribute* Arena::CreateMaybeMessage<::gobgpapi::LsAttribute>(Arena*);
template<> ::gobgpapi::LsAttributeLink* Arena::CreateMaybeMessage<::gobgpapi::LsAttributeLink>(Arena*);
template<> ::gobgpapi::LsAttributeNode* Arena::CreateMaybeMessage<::gobgpapi::LsAttributeNode>(Arena*);
template<> ::gobgpapi::LsAttributePrefix* Arena::CreateMaybeMessage<::gobgpapi::LsAttributePrefix>(Arena*);
template<> ::gobgpapi::LsIGPFlags* Arena::CreateMaybeMessage<::gobgpapi::LsIGPFlags>(Arena*);
template<> ::gobgpapi::LsLinkDescriptor* Arena::CreateMaybeMessage<::gobgpapi::LsLinkDescriptor>(Arena*);
template<> ::gobgpapi::LsLinkNLRI* Arena::CreateMaybeMessage<::gobgpapi::LsLinkNLRI>(Arena*);
template<> ::gobgpapi::LsNodeDescriptor* Arena::CreateMaybeMessage<::gobgpapi::LsNodeDescriptor>(Arena*);
template<> ::gobgpapi::LsNodeFlags* Arena::CreateMaybeMessage<::gobgpapi::LsNodeFlags>(Arena*);
template<> ::gobgpapi::LsNodeNLRI* Arena::CreateMaybeMessage<::gobgpapi::LsNodeNLRI>(Arena*);
template<> ::gobgpapi::LsPrefixDescriptor* Arena::CreateMaybeMessage<::gobgpapi::LsPrefixDescriptor>(Arena*);
template<> ::gobgpapi::LsPrefixV4NLRI* Arena::CreateMaybeMessage<::gobgpapi::LsPrefixV4NLRI>(Arena*);
template<> ::gobgpapi::LsPrefixV6NLRI* Arena::CreateMaybeMessage<::gobgpapi::LsPrefixV6NLRI>(Arena*);
template<> ::gobgpapi::LsSrCapabilities* Arena::CreateMaybeMessage<::gobgpapi::LsSrCapabilities>(Arena*);
template<> ::gobgpapi::LsSrLocalBlock* Arena::CreateMaybeMessage<::gobgpapi::LsSrLocalBlock>(Arena*);
template<> ::gobgpapi::LsSrRange* Arena::CreateMaybeMessage<::gobgpapi::LsSrRange>(Arena*);
template<> ::gobgpapi::MacMobilityExtended* Arena::CreateMaybeMessage<::gobgpapi::MacMobilityExtended>(Arena*);
template<> ::gobgpapi::MpReachNLRIAttribute* Arena::CreateMaybeMessage<::gobgpapi::MpReachNLRIAttribute>(Arena*);
template<> ::gobgpapi::MpUnreachNLRIAttribute* Arena::CreateMaybeMessage<::gobgpapi::MpUnreachNLRIAttribute>(Arena*);
template<> ::gobgpapi::MultiExitDiscAttribute* Arena::CreateMaybeMessage<::gobgpapi::MultiExitDiscAttribute>(Arena*);
template<> ::gobgpapi::NextHopAttribute* Arena::CreateMaybeMessage<::gobgpapi::NextHopAttribute>(Arena*);
template<> ::gobgpapi::OpaqueExtended* Arena::CreateMaybeMessage<::gobgpapi::OpaqueExtended>(Arena*);
template<> ::gobgpapi::OpaqueNLRI* Arena::CreateMaybeMessage<::gobgpapi::OpaqueNLRI>(Arena*);
template<> ::gobgpapi::OriginAttribute* Arena::CreateMaybeMessage<::gobgpapi::OriginAttribute>(Arena*);
template<> ::gobgpapi::OriginatorIdAttribute* Arena::CreateMaybeMessage<::gobgpapi::OriginatorIdAttribute>(Arena*);
template<> ::gobgpapi::PmsiTunnelAttribute* Arena::CreateMaybeMessage<::gobgpapi::PmsiTunnelAttribute>(Arena*);
template<> ::gobgpapi::RedirectFourOctetAsSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::RedirectFourOctetAsSpecificExtended>(Arena*);
template<> ::gobgpapi::RedirectIPv4AddressSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::RedirectIPv4AddressSpecificExtended>(Arena*);
template<> ::gobgpapi::RedirectIPv6AddressSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::RedirectIPv6AddressSpecificExtended>(Arena*);
template<> ::gobgpapi::RedirectTwoOctetAsSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::RedirectTwoOctetAsSpecificExtended>(Arena*);
template<> ::gobgpapi::RouteDistinguisherFourOctetAS* Arena::CreateMaybeMessage<::gobgpapi::RouteDistinguisherFourOctetAS>(Arena*);
template<> ::gobgpapi::RouteDistinguisherIPAddress* Arena::CreateMaybeMessage<::gobgpapi::RouteDistinguisherIPAddress>(Arena*);
template<> ::gobgpapi::RouteDistinguisherTwoOctetAS* Arena::CreateMaybeMessage<::gobgpapi::RouteDistinguisherTwoOctetAS>(Arena*);
template<> ::gobgpapi::RouteTargetMembershipNLRI* Arena::CreateMaybeMessage<::gobgpapi::RouteTargetMembershipNLRI>(Arena*);
template<> ::gobgpapi::RouterMacExtended* Arena::CreateMaybeMessage<::gobgpapi::RouterMacExtended>(Arena*);
template<> ::gobgpapi::TrafficActionExtended* Arena::CreateMaybeMessage<::gobgpapi::TrafficActionExtended>(Arena*);
template<> ::gobgpapi::TrafficRateExtended* Arena::CreateMaybeMessage<::gobgpapi::TrafficRateExtended>(Arena*);
template<> ::gobgpapi::TrafficRemarkExtended* Arena::CreateMaybeMessage<::gobgpapi::TrafficRemarkExtended>(Arena*);
template<> ::gobgpapi::TunnelEncapAttribute* Arena::CreateMaybeMessage<::gobgpapi::TunnelEncapAttribute>(Arena*);
template<> ::gobgpapi::TunnelEncapSubTLVColor* Arena::CreateMaybeMessage<::gobgpapi::TunnelEncapSubTLVColor>(Arena*);
template<> ::gobgpapi::TunnelEncapSubTLVEncapsulation* Arena::CreateMaybeMessage<::gobgpapi::TunnelEncapSubTLVEncapsulation>(Arena*);
template<> ::gobgpapi::TunnelEncapSubTLVProtocol* Arena::CreateMaybeMessage<::gobgpapi::TunnelEncapSubTLVProtocol>(Arena*);
template<> ::gobgpapi::TunnelEncapSubTLVUnknown* Arena::CreateMaybeMessage<::gobgpapi::TunnelEncapSubTLVUnknown>(Arena*);
template<> ::gobgpapi::TunnelEncapTLV* Arena::CreateMaybeMessage<::gobgpapi::TunnelEncapTLV>(Arena*);
template<> ::gobgpapi::TwoOctetAsSpecificExtended* Arena::CreateMaybeMessage<::gobgpapi::TwoOctetAsSpecificExtended>(Arena*);
template<> ::gobgpapi::UnknownAttribute* Arena::CreateMaybeMessage<::gobgpapi::UnknownAttribute>(Arena*);
template<> ::gobgpapi::UnknownExtended* Arena::CreateMaybeMessage<::gobgpapi::UnknownExtended>(Arena*);
template<> ::gobgpapi::VPNFlowSpecNLRI* Arena::CreateMaybeMessage<::gobgpapi::VPNFlowSpecNLRI>(Arena*);
template<> ::gobgpapi::ValidationExtended* Arena::CreateMaybeMessage<::gobgpapi::ValidationExtended>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gobgpapi {

enum LsNLRIType : int {
  LS_NLRI_UNKNOWN = 0,
  LS_NLRI_NODE = 1,
  LS_NLRI_LINK = 2,
  LS_NLRI_PREFIX_V4 = 3,
  LS_NLRI_PREFIX_V6 = 4,
  LsNLRIType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LsNLRIType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LsNLRIType_IsValid(int value);
constexpr LsNLRIType LsNLRIType_MIN = LS_NLRI_UNKNOWN;
constexpr LsNLRIType LsNLRIType_MAX = LS_NLRI_PREFIX_V6;
constexpr int LsNLRIType_ARRAYSIZE = LsNLRIType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsNLRIType_descriptor();
template<typename T>
inline const std::string& LsNLRIType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LsNLRIType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LsNLRIType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LsNLRIType_descriptor(), enum_t_value);
}
inline bool LsNLRIType_Parse(
    const std::string& name, LsNLRIType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LsNLRIType>(
    LsNLRIType_descriptor(), name, value);
}
// ===================================================================

class OriginAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.OriginAttribute) */ {
 public:
  OriginAttribute();
  virtual ~OriginAttribute();

  OriginAttribute(const OriginAttribute& from);
  OriginAttribute(OriginAttribute&& from) noexcept
    : OriginAttribute() {
    *this = ::std::move(from);
  }

  inline OriginAttribute& operator=(const OriginAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginAttribute& operator=(OriginAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginAttribute* internal_default_instance() {
    return reinterpret_cast<const OriginAttribute*>(
               &_OriginAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OriginAttribute& a, OriginAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginAttribute* New() const final {
    return CreateMaybeMessage<OriginAttribute>(nullptr);
  }

  OriginAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginAttribute& from);
  void MergeFrom(const OriginAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.OriginAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
  };
  // uint32 origin = 1;
  void clear_origin();
  ::PROTOBUF_NAMESPACE_ID::uint32 origin() const;
  void set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_origin() const;
  void _internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.OriginAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AsSegment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AsSegment) */ {
 public:
  AsSegment();
  virtual ~AsSegment();

  AsSegment(const AsSegment& from);
  AsSegment(AsSegment&& from) noexcept
    : AsSegment() {
    *this = ::std::move(from);
  }

  inline AsSegment& operator=(const AsSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsSegment& operator=(AsSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsSegment* internal_default_instance() {
    return reinterpret_cast<const AsSegment*>(
               &_AsSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AsSegment& a, AsSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(AsSegment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsSegment* New() const final {
    return CreateMaybeMessage<AsSegment>(nullptr);
  }

  AsSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsSegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsSegment& from);
  void MergeFrom(const AsSegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsSegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AsSegment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated uint32 numbers = 2;
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;
  public:
  void clear_numbers();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_numbers() const;
  void _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_numbers();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 numbers(int index) const;
  void set_numbers(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_numbers();

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AsSegment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > numbers_;
  mutable std::atomic<int> _numbers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AsPathAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AsPathAttribute) */ {
 public:
  AsPathAttribute();
  virtual ~AsPathAttribute();

  AsPathAttribute(const AsPathAttribute& from);
  AsPathAttribute(AsPathAttribute&& from) noexcept
    : AsPathAttribute() {
    *this = ::std::move(from);
  }

  inline AsPathAttribute& operator=(const AsPathAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsPathAttribute& operator=(AsPathAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsPathAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsPathAttribute* internal_default_instance() {
    return reinterpret_cast<const AsPathAttribute*>(
               &_AsPathAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AsPathAttribute& a, AsPathAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AsPathAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsPathAttribute* New() const final {
    return CreateMaybeMessage<AsPathAttribute>(nullptr);
  }

  AsPathAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsPathAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsPathAttribute& from);
  void MergeFrom(const AsPathAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsPathAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AsPathAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .gobgpapi.AsSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::gobgpapi::AsSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >*
      mutable_segments();
  private:
  const ::gobgpapi::AsSegment& _internal_segments(int index) const;
  ::gobgpapi::AsSegment* _internal_add_segments();
  public:
  const ::gobgpapi::AsSegment& segments(int index) const;
  ::gobgpapi::AsSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.AsPathAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment > segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class NextHopAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.NextHopAttribute) */ {
 public:
  NextHopAttribute();
  virtual ~NextHopAttribute();

  NextHopAttribute(const NextHopAttribute& from);
  NextHopAttribute(NextHopAttribute&& from) noexcept
    : NextHopAttribute() {
    *this = ::std::move(from);
  }

  inline NextHopAttribute& operator=(const NextHopAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextHopAttribute& operator=(NextHopAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NextHopAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NextHopAttribute* internal_default_instance() {
    return reinterpret_cast<const NextHopAttribute*>(
               &_NextHopAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NextHopAttribute& a, NextHopAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(NextHopAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NextHopAttribute* New() const final {
    return CreateMaybeMessage<NextHopAttribute>(nullptr);
  }

  NextHopAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NextHopAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NextHopAttribute& from);
  void MergeFrom(const NextHopAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextHopAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.NextHopAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextHopFieldNumber = 1,
  };
  // string next_hop = 1;
  void clear_next_hop();
  const std::string& next_hop() const;
  void set_next_hop(const std::string& value);
  void set_next_hop(std::string&& value);
  void set_next_hop(const char* value);
  void set_next_hop(const char* value, size_t size);
  std::string* mutable_next_hop();
  std::string* release_next_hop();
  void set_allocated_next_hop(std::string* next_hop);
  private:
  const std::string& _internal_next_hop() const;
  void _internal_set_next_hop(const std::string& value);
  std::string* _internal_mutable_next_hop();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.NextHopAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_hop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MultiExitDiscAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MultiExitDiscAttribute) */ {
 public:
  MultiExitDiscAttribute();
  virtual ~MultiExitDiscAttribute();

  MultiExitDiscAttribute(const MultiExitDiscAttribute& from);
  MultiExitDiscAttribute(MultiExitDiscAttribute&& from) noexcept
    : MultiExitDiscAttribute() {
    *this = ::std::move(from);
  }

  inline MultiExitDiscAttribute& operator=(const MultiExitDiscAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiExitDiscAttribute& operator=(MultiExitDiscAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiExitDiscAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiExitDiscAttribute* internal_default_instance() {
    return reinterpret_cast<const MultiExitDiscAttribute*>(
               &_MultiExitDiscAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiExitDiscAttribute& a, MultiExitDiscAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiExitDiscAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiExitDiscAttribute* New() const final {
    return CreateMaybeMessage<MultiExitDiscAttribute>(nullptr);
  }

  MultiExitDiscAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiExitDiscAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiExitDiscAttribute& from);
  void MergeFrom(const MultiExitDiscAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiExitDiscAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MultiExitDiscAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMedFieldNumber = 1,
  };
  // uint32 med = 1;
  void clear_med();
  ::PROTOBUF_NAMESPACE_ID::uint32 med() const;
  void set_med(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_med() const;
  void _internal_set_med(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MultiExitDiscAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 med_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LocalPrefAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LocalPrefAttribute) */ {
 public:
  LocalPrefAttribute();
  virtual ~LocalPrefAttribute();

  LocalPrefAttribute(const LocalPrefAttribute& from);
  LocalPrefAttribute(LocalPrefAttribute&& from) noexcept
    : LocalPrefAttribute() {
    *this = ::std::move(from);
  }

  inline LocalPrefAttribute& operator=(const LocalPrefAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPrefAttribute& operator=(LocalPrefAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalPrefAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPrefAttribute* internal_default_instance() {
    return reinterpret_cast<const LocalPrefAttribute*>(
               &_LocalPrefAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LocalPrefAttribute& a, LocalPrefAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPrefAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalPrefAttribute* New() const final {
    return CreateMaybeMessage<LocalPrefAttribute>(nullptr);
  }

  LocalPrefAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalPrefAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalPrefAttribute& from);
  void MergeFrom(const LocalPrefAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPrefAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LocalPrefAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPrefFieldNumber = 1,
  };
  // uint32 local_pref = 1;
  void clear_local_pref();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_pref() const;
  void set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_pref() const;
  void _internal_set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LocalPrefAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_pref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AtomicAggregateAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AtomicAggregateAttribute) */ {
 public:
  AtomicAggregateAttribute();
  virtual ~AtomicAggregateAttribute();

  AtomicAggregateAttribute(const AtomicAggregateAttribute& from);
  AtomicAggregateAttribute(AtomicAggregateAttribute&& from) noexcept
    : AtomicAggregateAttribute() {
    *this = ::std::move(from);
  }

  inline AtomicAggregateAttribute& operator=(const AtomicAggregateAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtomicAggregateAttribute& operator=(AtomicAggregateAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AtomicAggregateAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AtomicAggregateAttribute* internal_default_instance() {
    return reinterpret_cast<const AtomicAggregateAttribute*>(
               &_AtomicAggregateAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AtomicAggregateAttribute& a, AtomicAggregateAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AtomicAggregateAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AtomicAggregateAttribute* New() const final {
    return CreateMaybeMessage<AtomicAggregateAttribute>(nullptr);
  }

  AtomicAggregateAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AtomicAggregateAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AtomicAggregateAttribute& from);
  void MergeFrom(const AtomicAggregateAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AtomicAggregateAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AtomicAggregateAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.AtomicAggregateAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AggregatorAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AggregatorAttribute) */ {
 public:
  AggregatorAttribute();
  virtual ~AggregatorAttribute();

  AggregatorAttribute(const AggregatorAttribute& from);
  AggregatorAttribute(AggregatorAttribute&& from) noexcept
    : AggregatorAttribute() {
    *this = ::std::move(from);
  }

  inline AggregatorAttribute& operator=(const AggregatorAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatorAttribute& operator=(AggregatorAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregatorAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatorAttribute* internal_default_instance() {
    return reinterpret_cast<const AggregatorAttribute*>(
               &_AggregatorAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AggregatorAttribute& a, AggregatorAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatorAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatorAttribute* New() const final {
    return CreateMaybeMessage<AggregatorAttribute>(nullptr);
  }

  AggregatorAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatorAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregatorAttribute& from);
  void MergeFrom(const AggregatorAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregatorAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AggregatorAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kAsFieldNumber = 2,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 as = 2;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AggregatorAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class CommunitiesAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.CommunitiesAttribute) */ {
 public:
  CommunitiesAttribute();
  virtual ~CommunitiesAttribute();

  CommunitiesAttribute(const CommunitiesAttribute& from);
  CommunitiesAttribute(CommunitiesAttribute&& from) noexcept
    : CommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline CommunitiesAttribute& operator=(const CommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunitiesAttribute& operator=(CommunitiesAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const CommunitiesAttribute*>(
               &_CommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CommunitiesAttribute& a, CommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunitiesAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunitiesAttribute* New() const final {
    return CreateMaybeMessage<CommunitiesAttribute>(nullptr);
  }

  CommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunitiesAttribute& from);
  void MergeFrom(const CommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.CommunitiesAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated uint32 communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_communities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_communities() const;
  void _internal_add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_communities();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 communities(int index) const;
  void set_communities(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      communities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_communities();

  // @@protoc_insertion_point(class_scope:gobgpapi.CommunitiesAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > communities_;
  mutable std::atomic<int> _communities_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class OriginatorIdAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.OriginatorIdAttribute) */ {
 public:
  OriginatorIdAttribute();
  virtual ~OriginatorIdAttribute();

  OriginatorIdAttribute(const OriginatorIdAttribute& from);
  OriginatorIdAttribute(OriginatorIdAttribute&& from) noexcept
    : OriginatorIdAttribute() {
    *this = ::std::move(from);
  }

  inline OriginatorIdAttribute& operator=(const OriginatorIdAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginatorIdAttribute& operator=(OriginatorIdAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OriginatorIdAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginatorIdAttribute* internal_default_instance() {
    return reinterpret_cast<const OriginatorIdAttribute*>(
               &_OriginatorIdAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OriginatorIdAttribute& a, OriginatorIdAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginatorIdAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginatorIdAttribute* New() const final {
    return CreateMaybeMessage<OriginatorIdAttribute>(nullptr);
  }

  OriginatorIdAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginatorIdAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OriginatorIdAttribute& from);
  void MergeFrom(const OriginatorIdAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OriginatorIdAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.OriginatorIdAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.OriginatorIdAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ClusterListAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ClusterListAttribute) */ {
 public:
  ClusterListAttribute();
  virtual ~ClusterListAttribute();

  ClusterListAttribute(const ClusterListAttribute& from);
  ClusterListAttribute(ClusterListAttribute&& from) noexcept
    : ClusterListAttribute() {
    *this = ::std::move(from);
  }

  inline ClusterListAttribute& operator=(const ClusterListAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterListAttribute& operator=(ClusterListAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterListAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterListAttribute* internal_default_instance() {
    return reinterpret_cast<const ClusterListAttribute*>(
               &_ClusterListAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClusterListAttribute& a, ClusterListAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterListAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterListAttribute* New() const final {
    return CreateMaybeMessage<ClusterListAttribute>(nullptr);
  }

  ClusterListAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterListAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterListAttribute& from);
  void MergeFrom(const ClusterListAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterListAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ClusterListAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ClusterListAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IPAddressPrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IPAddressPrefix) */ {
 public:
  IPAddressPrefix();
  virtual ~IPAddressPrefix();

  IPAddressPrefix(const IPAddressPrefix& from);
  IPAddressPrefix(IPAddressPrefix&& from) noexcept
    : IPAddressPrefix() {
    *this = ::std::move(from);
  }

  inline IPAddressPrefix& operator=(const IPAddressPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPAddressPrefix& operator=(IPAddressPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPAddressPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPAddressPrefix* internal_default_instance() {
    return reinterpret_cast<const IPAddressPrefix*>(
               &_IPAddressPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IPAddressPrefix& a, IPAddressPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(IPAddressPrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPAddressPrefix* New() const final {
    return CreateMaybeMessage<IPAddressPrefix>(nullptr);
  }

  IPAddressPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPAddressPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPAddressPrefix& from);
  void MergeFrom(const IPAddressPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPAddressPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.IPAddressPrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 2,
    kPrefixLenFieldNumber = 1,
  };
  // string prefix = 2;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // uint32 prefix_len = 1;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.IPAddressPrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LabeledIPAddressPrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LabeledIPAddressPrefix) */ {
 public:
  LabeledIPAddressPrefix();
  virtual ~LabeledIPAddressPrefix();

  LabeledIPAddressPrefix(const LabeledIPAddressPrefix& from);
  LabeledIPAddressPrefix(LabeledIPAddressPrefix&& from) noexcept
    : LabeledIPAddressPrefix() {
    *this = ::std::move(from);
  }

  inline LabeledIPAddressPrefix& operator=(const LabeledIPAddressPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledIPAddressPrefix& operator=(LabeledIPAddressPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabeledIPAddressPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabeledIPAddressPrefix* internal_default_instance() {
    return reinterpret_cast<const LabeledIPAddressPrefix*>(
               &_LabeledIPAddressPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LabeledIPAddressPrefix& a, LabeledIPAddressPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledIPAddressPrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabeledIPAddressPrefix* New() const final {
    return CreateMaybeMessage<LabeledIPAddressPrefix>(nullptr);
  }

  LabeledIPAddressPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabeledIPAddressPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabeledIPAddressPrefix& from);
  void MergeFrom(const LabeledIPAddressPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledIPAddressPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LabeledIPAddressPrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kPrefixFieldNumber = 3,
    kPrefixLenFieldNumber = 2,
  };
  // repeated uint32 labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labels() const;
  void _internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labels(int index) const;
  void set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labels();

  // string prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // uint32 prefix_len = 2;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LabeledIPAddressPrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labels_;
  mutable std::atomic<int> _labels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EncapsulationNLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EncapsulationNLRI) */ {
 public:
  EncapsulationNLRI();
  virtual ~EncapsulationNLRI();

  EncapsulationNLRI(const EncapsulationNLRI& from);
  EncapsulationNLRI(EncapsulationNLRI&& from) noexcept
    : EncapsulationNLRI() {
    *this = ::std::move(from);
  }

  inline EncapsulationNLRI& operator=(const EncapsulationNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncapsulationNLRI& operator=(EncapsulationNLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncapsulationNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncapsulationNLRI* internal_default_instance() {
    return reinterpret_cast<const EncapsulationNLRI*>(
               &_EncapsulationNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EncapsulationNLRI& a, EncapsulationNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(EncapsulationNLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncapsulationNLRI* New() const final {
    return CreateMaybeMessage<EncapsulationNLRI>(nullptr);
  }

  EncapsulationNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncapsulationNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncapsulationNLRI& from);
  void MergeFrom(const EncapsulationNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncapsulationNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EncapsulationNLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EncapsulationNLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteDistinguisherTwoOctetAS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteDistinguisherTwoOctetAS) */ {
 public:
  RouteDistinguisherTwoOctetAS();
  virtual ~RouteDistinguisherTwoOctetAS();

  RouteDistinguisherTwoOctetAS(const RouteDistinguisherTwoOctetAS& from);
  RouteDistinguisherTwoOctetAS(RouteDistinguisherTwoOctetAS&& from) noexcept
    : RouteDistinguisherTwoOctetAS() {
    *this = ::std::move(from);
  }

  inline RouteDistinguisherTwoOctetAS& operator=(const RouteDistinguisherTwoOctetAS& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteDistinguisherTwoOctetAS& operator=(RouteDistinguisherTwoOctetAS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteDistinguisherTwoOctetAS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDistinguisherTwoOctetAS* internal_default_instance() {
    return reinterpret_cast<const RouteDistinguisherTwoOctetAS*>(
               &_RouteDistinguisherTwoOctetAS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RouteDistinguisherTwoOctetAS& a, RouteDistinguisherTwoOctetAS& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteDistinguisherTwoOctetAS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteDistinguisherTwoOctetAS* New() const final {
    return CreateMaybeMessage<RouteDistinguisherTwoOctetAS>(nullptr);
  }

  RouteDistinguisherTwoOctetAS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteDistinguisherTwoOctetAS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteDistinguisherTwoOctetAS& from);
  void MergeFrom(const RouteDistinguisherTwoOctetAS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDistinguisherTwoOctetAS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteDistinguisherTwoOctetAS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kAssignedFieldNumber = 2,
  };
  // uint32 admin = 1;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 assigned = 2;
  void clear_assigned();
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned() const;
  void set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assigned() const;
  void _internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteDistinguisherTwoOctetAS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteDistinguisherIPAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteDistinguisherIPAddress) */ {
 public:
  RouteDistinguisherIPAddress();
  virtual ~RouteDistinguisherIPAddress();

  RouteDistinguisherIPAddress(const RouteDistinguisherIPAddress& from);
  RouteDistinguisherIPAddress(RouteDistinguisherIPAddress&& from) noexcept
    : RouteDistinguisherIPAddress() {
    *this = ::std::move(from);
  }

  inline RouteDistinguisherIPAddress& operator=(const RouteDistinguisherIPAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteDistinguisherIPAddress& operator=(RouteDistinguisherIPAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteDistinguisherIPAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDistinguisherIPAddress* internal_default_instance() {
    return reinterpret_cast<const RouteDistinguisherIPAddress*>(
               &_RouteDistinguisherIPAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RouteDistinguisherIPAddress& a, RouteDistinguisherIPAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteDistinguisherIPAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteDistinguisherIPAddress* New() const final {
    return CreateMaybeMessage<RouteDistinguisherIPAddress>(nullptr);
  }

  RouteDistinguisherIPAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteDistinguisherIPAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteDistinguisherIPAddress& from);
  void MergeFrom(const RouteDistinguisherIPAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDistinguisherIPAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteDistinguisherIPAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kAssignedFieldNumber = 2,
  };
  // string admin = 1;
  void clear_admin();
  const std::string& admin() const;
  void set_admin(const std::string& value);
  void set_admin(std::string&& value);
  void set_admin(const char* value);
  void set_admin(const char* value, size_t size);
  std::string* mutable_admin();
  std::string* release_admin();
  void set_allocated_admin(std::string* admin);
  private:
  const std::string& _internal_admin() const;
  void _internal_set_admin(const std::string& value);
  std::string* _internal_mutable_admin();
  public:

  // uint32 assigned = 2;
  void clear_assigned();
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned() const;
  void set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assigned() const;
  void _internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteDistinguisherIPAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteDistinguisherFourOctetAS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteDistinguisherFourOctetAS) */ {
 public:
  RouteDistinguisherFourOctetAS();
  virtual ~RouteDistinguisherFourOctetAS();

  RouteDistinguisherFourOctetAS(const RouteDistinguisherFourOctetAS& from);
  RouteDistinguisherFourOctetAS(RouteDistinguisherFourOctetAS&& from) noexcept
    : RouteDistinguisherFourOctetAS() {
    *this = ::std::move(from);
  }

  inline RouteDistinguisherFourOctetAS& operator=(const RouteDistinguisherFourOctetAS& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteDistinguisherFourOctetAS& operator=(RouteDistinguisherFourOctetAS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteDistinguisherFourOctetAS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteDistinguisherFourOctetAS* internal_default_instance() {
    return reinterpret_cast<const RouteDistinguisherFourOctetAS*>(
               &_RouteDistinguisherFourOctetAS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RouteDistinguisherFourOctetAS& a, RouteDistinguisherFourOctetAS& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteDistinguisherFourOctetAS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteDistinguisherFourOctetAS* New() const final {
    return CreateMaybeMessage<RouteDistinguisherFourOctetAS>(nullptr);
  }

  RouteDistinguisherFourOctetAS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteDistinguisherFourOctetAS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteDistinguisherFourOctetAS& from);
  void MergeFrom(const RouteDistinguisherFourOctetAS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDistinguisherFourOctetAS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteDistinguisherFourOctetAS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kAssignedFieldNumber = 2,
  };
  // uint32 admin = 1;
  void clear_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin() const;
  void set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin() const;
  void _internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 assigned = 2;
  void clear_assigned();
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned() const;
  void set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assigned() const;
  void _internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteDistinguisherFourOctetAS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assigned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EthernetSegmentIdentifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EthernetSegmentIdentifier) */ {
 public:
  EthernetSegmentIdentifier();
  virtual ~EthernetSegmentIdentifier();

  EthernetSegmentIdentifier(const EthernetSegmentIdentifier& from);
  EthernetSegmentIdentifier(EthernetSegmentIdentifier&& from) noexcept
    : EthernetSegmentIdentifier() {
    *this = ::std::move(from);
  }

  inline EthernetSegmentIdentifier& operator=(const EthernetSegmentIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetSegmentIdentifier& operator=(EthernetSegmentIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthernetSegmentIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EthernetSegmentIdentifier* internal_default_instance() {
    return reinterpret_cast<const EthernetSegmentIdentifier*>(
               &_EthernetSegmentIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EthernetSegmentIdentifier& a, EthernetSegmentIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetSegmentIdentifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthernetSegmentIdentifier* New() const final {
    return CreateMaybeMessage<EthernetSegmentIdentifier>(nullptr);
  }

  EthernetSegmentIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthernetSegmentIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthernetSegmentIdentifier& from);
  void MergeFrom(const EthernetSegmentIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetSegmentIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EthernetSegmentIdentifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EthernetSegmentIdentifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNEthernetAutoDiscoveryRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EVPNEthernetAutoDiscoveryRoute) */ {
 public:
  EVPNEthernetAutoDiscoveryRoute();
  virtual ~EVPNEthernetAutoDiscoveryRoute();

  EVPNEthernetAutoDiscoveryRoute(const EVPNEthernetAutoDiscoveryRoute& from);
  EVPNEthernetAutoDiscoveryRoute(EVPNEthernetAutoDiscoveryRoute&& from) noexcept
    : EVPNEthernetAutoDiscoveryRoute() {
    *this = ::std::move(from);
  }

  inline EVPNEthernetAutoDiscoveryRoute& operator=(const EVPNEthernetAutoDiscoveryRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNEthernetAutoDiscoveryRoute& operator=(EVPNEthernetAutoDiscoveryRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNEthernetAutoDiscoveryRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNEthernetAutoDiscoveryRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNEthernetAutoDiscoveryRoute*>(
               &_EVPNEthernetAutoDiscoveryRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EVPNEthernetAutoDiscoveryRoute& a, EVPNEthernetAutoDiscoveryRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNEthernetAutoDiscoveryRoute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNEthernetAutoDiscoveryRoute* New() const final {
    return CreateMaybeMessage<EVPNEthernetAutoDiscoveryRoute>(nullptr);
  }

  EVPNEthernetAutoDiscoveryRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNEthernetAutoDiscoveryRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNEthernetAutoDiscoveryRoute& from);
  void MergeFrom(const EVPNEthernetAutoDiscoveryRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNEthernetAutoDiscoveryRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EVPNEthernetAutoDiscoveryRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
    kEthernetTagFieldNumber = 3,
    kLabelFieldNumber = 4,
  };
  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::gobgpapi::EthernetSegmentIdentifier& esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* release_esi();
  ::gobgpapi::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi);
  private:
  const ::gobgpapi::EthernetSegmentIdentifier& _internal_esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:

  // uint32 ethernet_tag = 3;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 4;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::gobgpapi::EthernetSegmentIdentifier* esi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNMACIPAdvertisementRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EVPNMACIPAdvertisementRoute) */ {
 public:
  EVPNMACIPAdvertisementRoute();
  virtual ~EVPNMACIPAdvertisementRoute();

  EVPNMACIPAdvertisementRoute(const EVPNMACIPAdvertisementRoute& from);
  EVPNMACIPAdvertisementRoute(EVPNMACIPAdvertisementRoute&& from) noexcept
    : EVPNMACIPAdvertisementRoute() {
    *this = ::std::move(from);
  }

  inline EVPNMACIPAdvertisementRoute& operator=(const EVPNMACIPAdvertisementRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNMACIPAdvertisementRoute& operator=(EVPNMACIPAdvertisementRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNMACIPAdvertisementRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNMACIPAdvertisementRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNMACIPAdvertisementRoute*>(
               &_EVPNMACIPAdvertisementRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(EVPNMACIPAdvertisementRoute& a, EVPNMACIPAdvertisementRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNMACIPAdvertisementRoute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNMACIPAdvertisementRoute* New() const final {
    return CreateMaybeMessage<EVPNMACIPAdvertisementRoute>(nullptr);
  }

  EVPNMACIPAdvertisementRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNMACIPAdvertisementRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNMACIPAdvertisementRoute& from);
  void MergeFrom(const EVPNMACIPAdvertisementRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNMACIPAdvertisementRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EVPNMACIPAdvertisementRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 6,
    kMacAddressFieldNumber = 4,
    kIpAddressFieldNumber = 5,
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
    kEthernetTagFieldNumber = 3,
  };
  // repeated uint32 labels = 6;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labels() const;
  void _internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labels(int index) const;
  void set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labels();

  // string mac_address = 4;
  void clear_mac_address();
  const std::string& mac_address() const;
  void set_mac_address(const std::string& value);
  void set_mac_address(std::string&& value);
  void set_mac_address(const char* value);
  void set_mac_address(const char* value, size_t size);
  std::string* mutable_mac_address();
  std::string* release_mac_address();
  void set_allocated_mac_address(std::string* mac_address);
  private:
  const std::string& _internal_mac_address() const;
  void _internal_set_mac_address(const std::string& value);
  std::string* _internal_mutable_mac_address();
  public:

  // string ip_address = 5;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::gobgpapi::EthernetSegmentIdentifier& esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* release_esi();
  ::gobgpapi::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi);
  private:
  const ::gobgpapi::EthernetSegmentIdentifier& _internal_esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:

  // uint32 ethernet_tag = 3;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EVPNMACIPAdvertisementRoute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labels_;
  mutable std::atomic<int> _labels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::gobgpapi::EthernetSegmentIdentifier* esi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNInclusiveMulticastEthernetTagRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute) */ {
 public:
  EVPNInclusiveMulticastEthernetTagRoute();
  virtual ~EVPNInclusiveMulticastEthernetTagRoute();

  EVPNInclusiveMulticastEthernetTagRoute(const EVPNInclusiveMulticastEthernetTagRoute& from);
  EVPNInclusiveMulticastEthernetTagRoute(EVPNInclusiveMulticastEthernetTagRoute&& from) noexcept
    : EVPNInclusiveMulticastEthernetTagRoute() {
    *this = ::std::move(from);
  }

  inline EVPNInclusiveMulticastEthernetTagRoute& operator=(const EVPNInclusiveMulticastEthernetTagRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNInclusiveMulticastEthernetTagRoute& operator=(EVPNInclusiveMulticastEthernetTagRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNInclusiveMulticastEthernetTagRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNInclusiveMulticastEthernetTagRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNInclusiveMulticastEthernetTagRoute*>(
               &_EVPNInclusiveMulticastEthernetTagRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(EVPNInclusiveMulticastEthernetTagRoute& a, EVPNInclusiveMulticastEthernetTagRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNInclusiveMulticastEthernetTagRoute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNInclusiveMulticastEthernetTagRoute* New() const final {
    return CreateMaybeMessage<EVPNInclusiveMulticastEthernetTagRoute>(nullptr);
  }

  EVPNInclusiveMulticastEthernetTagRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNInclusiveMulticastEthernetTagRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNInclusiveMulticastEthernetTagRoute& from);
  void MergeFrom(const EVPNInclusiveMulticastEthernetTagRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNInclusiveMulticastEthernetTagRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EVPNInclusiveMulticastEthernetTagRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 3,
    kRdFieldNumber = 1,
    kEthernetTagFieldNumber = 2,
  };
  // string ip_address = 3;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // uint32 ethernet_tag = 2;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNEthernetSegmentRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EVPNEthernetSegmentRoute) */ {
 public:
  EVPNEthernetSegmentRoute();
  virtual ~EVPNEthernetSegmentRoute();

  EVPNEthernetSegmentRoute(const EVPNEthernetSegmentRoute& from);
  EVPNEthernetSegmentRoute(EVPNEthernetSegmentRoute&& from) noexcept
    : EVPNEthernetSegmentRoute() {
    *this = ::std::move(from);
  }

  inline EVPNEthernetSegmentRoute& operator=(const EVPNEthernetSegmentRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNEthernetSegmentRoute& operator=(EVPNEthernetSegmentRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNEthernetSegmentRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNEthernetSegmentRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNEthernetSegmentRoute*>(
               &_EVPNEthernetSegmentRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(EVPNEthernetSegmentRoute& a, EVPNEthernetSegmentRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNEthernetSegmentRoute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNEthernetSegmentRoute* New() const final {
    return CreateMaybeMessage<EVPNEthernetSegmentRoute>(nullptr);
  }

  EVPNEthernetSegmentRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNEthernetSegmentRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNEthernetSegmentRoute& from);
  void MergeFrom(const EVPNEthernetSegmentRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNEthernetSegmentRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EVPNEthernetSegmentRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 3,
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
  };
  // string ip_address = 3;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::gobgpapi::EthernetSegmentIdentifier& esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* release_esi();
  ::gobgpapi::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi);
  private:
  const ::gobgpapi::EthernetSegmentIdentifier& _internal_esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EVPNEthernetSegmentRoute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::gobgpapi::EthernetSegmentIdentifier* esi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNIPPrefixRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EVPNIPPrefixRoute) */ {
 public:
  EVPNIPPrefixRoute();
  virtual ~EVPNIPPrefixRoute();

  EVPNIPPrefixRoute(const EVPNIPPrefixRoute& from);
  EVPNIPPrefixRoute(EVPNIPPrefixRoute&& from) noexcept
    : EVPNIPPrefixRoute() {
    *this = ::std::move(from);
  }

  inline EVPNIPPrefixRoute& operator=(const EVPNIPPrefixRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNIPPrefixRoute& operator=(EVPNIPPrefixRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNIPPrefixRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNIPPrefixRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNIPPrefixRoute*>(
               &_EVPNIPPrefixRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(EVPNIPPrefixRoute& a, EVPNIPPrefixRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNIPPrefixRoute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNIPPrefixRoute* New() const final {
    return CreateMaybeMessage<EVPNIPPrefixRoute>(nullptr);
  }

  EVPNIPPrefixRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNIPPrefixRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNIPPrefixRoute& from);
  void MergeFrom(const EVPNIPPrefixRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNIPPrefixRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EVPNIPPrefixRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpPrefixFieldNumber = 4,
    kGwAddressFieldNumber = 6,
    kRdFieldNumber = 1,
    kEsiFieldNumber = 2,
    kEthernetTagFieldNumber = 3,
    kIpPrefixLenFieldNumber = 5,
    kLabelFieldNumber = 7,
  };
  // string ip_prefix = 4;
  void clear_ip_prefix();
  const std::string& ip_prefix() const;
  void set_ip_prefix(const std::string& value);
  void set_ip_prefix(std::string&& value);
  void set_ip_prefix(const char* value);
  void set_ip_prefix(const char* value, size_t size);
  std::string* mutable_ip_prefix();
  std::string* release_ip_prefix();
  void set_allocated_ip_prefix(std::string* ip_prefix);
  private:
  const std::string& _internal_ip_prefix() const;
  void _internal_set_ip_prefix(const std::string& value);
  std::string* _internal_mutable_ip_prefix();
  public:

  // string gw_address = 6;
  void clear_gw_address();
  const std::string& gw_address() const;
  void set_gw_address(const std::string& value);
  void set_gw_address(std::string&& value);
  void set_gw_address(const char* value);
  void set_gw_address(const char* value, size_t size);
  std::string* mutable_gw_address();
  std::string* release_gw_address();
  void set_allocated_gw_address(std::string* gw_address);
  private:
  const std::string& _internal_gw_address() const;
  void _internal_set_gw_address(const std::string& value);
  std::string* _internal_mutable_gw_address();
  public:

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  bool has_esi() const;
  private:
  bool _internal_has_esi() const;
  public:
  void clear_esi();
  const ::gobgpapi::EthernetSegmentIdentifier& esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* release_esi();
  ::gobgpapi::EthernetSegmentIdentifier* mutable_esi();
  void set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi);
  private:
  const ::gobgpapi::EthernetSegmentIdentifier& _internal_esi() const;
  ::gobgpapi::EthernetSegmentIdentifier* _internal_mutable_esi();
  public:

  // uint32 ethernet_tag = 3;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ip_prefix_len = 5;
  void clear_ip_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_prefix_len() const;
  void set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip_prefix_len() const;
  void _internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 7;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EVPNIPPrefixRoute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gw_address_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::gobgpapi::EthernetSegmentIdentifier* esi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_prefix_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EVPNIPMSIRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EVPNIPMSIRoute) */ {
 public:
  EVPNIPMSIRoute();
  virtual ~EVPNIPMSIRoute();

  EVPNIPMSIRoute(const EVPNIPMSIRoute& from);
  EVPNIPMSIRoute(EVPNIPMSIRoute&& from) noexcept
    : EVPNIPMSIRoute() {
    *this = ::std::move(from);
  }

  inline EVPNIPMSIRoute& operator=(const EVPNIPMSIRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EVPNIPMSIRoute& operator=(EVPNIPMSIRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EVPNIPMSIRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EVPNIPMSIRoute* internal_default_instance() {
    return reinterpret_cast<const EVPNIPMSIRoute*>(
               &_EVPNIPMSIRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(EVPNIPMSIRoute& a, EVPNIPMSIRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(EVPNIPMSIRoute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EVPNIPMSIRoute* New() const final {
    return CreateMaybeMessage<EVPNIPMSIRoute>(nullptr);
  }

  EVPNIPMSIRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EVPNIPMSIRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EVPNIPMSIRoute& from);
  void MergeFrom(const EVPNIPMSIRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EVPNIPMSIRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EVPNIPMSIRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRdFieldNumber = 1,
    kRtFieldNumber = 3,
    kEthernetTagFieldNumber = 2,
  };
  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // .google.protobuf.Any rt = 3;
  bool has_rt() const;
  private:
  bool _internal_has_rt() const;
  public:
  void clear_rt();
  const PROTOBUF_NAMESPACE_ID::Any& rt() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rt();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rt();
  void set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rt() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rt();
  public:

  // uint32 ethernet_tag = 2;
  void clear_ethernet_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag() const;
  void set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ethernet_tag() const;
  void _internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EVPNIPMSIRoute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  PROTOBUF_NAMESPACE_ID::Any* rt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ethernet_tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LabeledVPNIPAddressPrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LabeledVPNIPAddressPrefix) */ {
 public:
  LabeledVPNIPAddressPrefix();
  virtual ~LabeledVPNIPAddressPrefix();

  LabeledVPNIPAddressPrefix(const LabeledVPNIPAddressPrefix& from);
  LabeledVPNIPAddressPrefix(LabeledVPNIPAddressPrefix&& from) noexcept
    : LabeledVPNIPAddressPrefix() {
    *this = ::std::move(from);
  }

  inline LabeledVPNIPAddressPrefix& operator=(const LabeledVPNIPAddressPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledVPNIPAddressPrefix& operator=(LabeledVPNIPAddressPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabeledVPNIPAddressPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabeledVPNIPAddressPrefix* internal_default_instance() {
    return reinterpret_cast<const LabeledVPNIPAddressPrefix*>(
               &_LabeledVPNIPAddressPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LabeledVPNIPAddressPrefix& a, LabeledVPNIPAddressPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledVPNIPAddressPrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabeledVPNIPAddressPrefix* New() const final {
    return CreateMaybeMessage<LabeledVPNIPAddressPrefix>(nullptr);
  }

  LabeledVPNIPAddressPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabeledVPNIPAddressPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabeledVPNIPAddressPrefix& from);
  void MergeFrom(const LabeledVPNIPAddressPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledVPNIPAddressPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LabeledVPNIPAddressPrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kPrefixFieldNumber = 4,
    kRdFieldNumber = 2,
    kPrefixLenFieldNumber = 3,
  };
  // repeated uint32 labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_labels() const;
  void _internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 labels(int index) const;
  void set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_labels();

  // string prefix = 4;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // .google.protobuf.Any rd = 2;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // uint32 prefix_len = 3;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LabeledVPNIPAddressPrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > labels_;
  mutable std::atomic<int> _labels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouteTargetMembershipNLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouteTargetMembershipNLRI) */ {
 public:
  RouteTargetMembershipNLRI();
  virtual ~RouteTargetMembershipNLRI();

  RouteTargetMembershipNLRI(const RouteTargetMembershipNLRI& from);
  RouteTargetMembershipNLRI(RouteTargetMembershipNLRI&& from) noexcept
    : RouteTargetMembershipNLRI() {
    *this = ::std::move(from);
  }

  inline RouteTargetMembershipNLRI& operator=(const RouteTargetMembershipNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteTargetMembershipNLRI& operator=(RouteTargetMembershipNLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteTargetMembershipNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteTargetMembershipNLRI* internal_default_instance() {
    return reinterpret_cast<const RouteTargetMembershipNLRI*>(
               &_RouteTargetMembershipNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RouteTargetMembershipNLRI& a, RouteTargetMembershipNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteTargetMembershipNLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteTargetMembershipNLRI* New() const final {
    return CreateMaybeMessage<RouteTargetMembershipNLRI>(nullptr);
  }

  RouteTargetMembershipNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteTargetMembershipNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteTargetMembershipNLRI& from);
  void MergeFrom(const RouteTargetMembershipNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteTargetMembershipNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouteTargetMembershipNLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtFieldNumber = 2,
    kAsFieldNumber = 1,
  };
  // .google.protobuf.Any rt = 2;
  bool has_rt() const;
  private:
  bool _internal_has_rt() const;
  public:
  void clear_rt();
  const PROTOBUF_NAMESPACE_ID::Any& rt() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rt();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rt();
  void set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rt() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rt();
  public:

  // uint32 as = 1;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteTargetMembershipNLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* rt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecIPPrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.FlowSpecIPPrefix) */ {
 public:
  FlowSpecIPPrefix();
  virtual ~FlowSpecIPPrefix();

  FlowSpecIPPrefix(const FlowSpecIPPrefix& from);
  FlowSpecIPPrefix(FlowSpecIPPrefix&& from) noexcept
    : FlowSpecIPPrefix() {
    *this = ::std::move(from);
  }

  inline FlowSpecIPPrefix& operator=(const FlowSpecIPPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecIPPrefix& operator=(FlowSpecIPPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecIPPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecIPPrefix* internal_default_instance() {
    return reinterpret_cast<const FlowSpecIPPrefix*>(
               &_FlowSpecIPPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FlowSpecIPPrefix& a, FlowSpecIPPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecIPPrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecIPPrefix* New() const final {
    return CreateMaybeMessage<FlowSpecIPPrefix>(nullptr);
  }

  FlowSpecIPPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecIPPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecIPPrefix& from);
  void MergeFrom(const FlowSpecIPPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecIPPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.FlowSpecIPPrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 3,
    kTypeFieldNumber = 1,
    kPrefixLenFieldNumber = 2,
    kOffsetFieldNumber = 4,
  };
  // string prefix = 3;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prefix_len = 2;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 offset = 4;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.FlowSpecIPPrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecMAC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.FlowSpecMAC) */ {
 public:
  FlowSpecMAC();
  virtual ~FlowSpecMAC();

  FlowSpecMAC(const FlowSpecMAC& from);
  FlowSpecMAC(FlowSpecMAC&& from) noexcept
    : FlowSpecMAC() {
    *this = ::std::move(from);
  }

  inline FlowSpecMAC& operator=(const FlowSpecMAC& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecMAC& operator=(FlowSpecMAC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecMAC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecMAC* internal_default_instance() {
    return reinterpret_cast<const FlowSpecMAC*>(
               &_FlowSpecMAC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FlowSpecMAC& a, FlowSpecMAC& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecMAC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecMAC* New() const final {
    return CreateMaybeMessage<FlowSpecMAC>(nullptr);
  }

  FlowSpecMAC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecMAC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecMAC& from);
  void MergeFrom(const FlowSpecMAC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecMAC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.FlowSpecMAC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.FlowSpecMAC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecComponentItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.FlowSpecComponentItem) */ {
 public:
  FlowSpecComponentItem();
  virtual ~FlowSpecComponentItem();

  FlowSpecComponentItem(const FlowSpecComponentItem& from);
  FlowSpecComponentItem(FlowSpecComponentItem&& from) noexcept
    : FlowSpecComponentItem() {
    *this = ::std::move(from);
  }

  inline FlowSpecComponentItem& operator=(const FlowSpecComponentItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecComponentItem& operator=(FlowSpecComponentItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecComponentItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecComponentItem* internal_default_instance() {
    return reinterpret_cast<const FlowSpecComponentItem*>(
               &_FlowSpecComponentItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FlowSpecComponentItem& a, FlowSpecComponentItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecComponentItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecComponentItem* New() const final {
    return CreateMaybeMessage<FlowSpecComponentItem>(nullptr);
  }

  FlowSpecComponentItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecComponentItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecComponentItem& from);
  void MergeFrom(const FlowSpecComponentItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecComponentItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.FlowSpecComponentItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 op = 1;
  void clear_op();
  ::PROTOBUF_NAMESPACE_ID::uint32 op() const;
  void set_op(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_op() const;
  void _internal_set_op(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.FlowSpecComponentItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.FlowSpecComponent) */ {
 public:
  FlowSpecComponent();
  virtual ~FlowSpecComponent();

  FlowSpecComponent(const FlowSpecComponent& from);
  FlowSpecComponent(FlowSpecComponent&& from) noexcept
    : FlowSpecComponent() {
    *this = ::std::move(from);
  }

  inline FlowSpecComponent& operator=(const FlowSpecComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecComponent& operator=(FlowSpecComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecComponent* internal_default_instance() {
    return reinterpret_cast<const FlowSpecComponent*>(
               &_FlowSpecComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FlowSpecComponent& a, FlowSpecComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecComponent* New() const final {
    return CreateMaybeMessage<FlowSpecComponent>(nullptr);
  }

  FlowSpecComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecComponent& from);
  void MergeFrom(const FlowSpecComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.FlowSpecComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .gobgpapi.FlowSpecComponentItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::gobgpapi::FlowSpecComponentItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::FlowSpecComponentItem >*
      mutable_items();
  private:
  const ::gobgpapi::FlowSpecComponentItem& _internal_items(int index) const;
  ::gobgpapi::FlowSpecComponentItem* _internal_add_items();
  public:
  const ::gobgpapi::FlowSpecComponentItem& items(int index) const;
  ::gobgpapi::FlowSpecComponentItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::FlowSpecComponentItem >&
      items() const;

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.FlowSpecComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::FlowSpecComponentItem > items_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FlowSpecNLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.FlowSpecNLRI) */ {
 public:
  FlowSpecNLRI();
  virtual ~FlowSpecNLRI();

  FlowSpecNLRI(const FlowSpecNLRI& from);
  FlowSpecNLRI(FlowSpecNLRI&& from) noexcept
    : FlowSpecNLRI() {
    *this = ::std::move(from);
  }

  inline FlowSpecNLRI& operator=(const FlowSpecNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowSpecNLRI& operator=(FlowSpecNLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowSpecNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowSpecNLRI* internal_default_instance() {
    return reinterpret_cast<const FlowSpecNLRI*>(
               &_FlowSpecNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FlowSpecNLRI& a, FlowSpecNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowSpecNLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowSpecNLRI* New() const final {
    return CreateMaybeMessage<FlowSpecNLRI>(nullptr);
  }

  FlowSpecNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowSpecNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowSpecNLRI& from);
  void MergeFrom(const FlowSpecNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowSpecNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.FlowSpecNLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any rules = 1;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_rules();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_rules();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      rules() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.FlowSpecNLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class VPNFlowSpecNLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.VPNFlowSpecNLRI) */ {
 public:
  VPNFlowSpecNLRI();
  virtual ~VPNFlowSpecNLRI();

  VPNFlowSpecNLRI(const VPNFlowSpecNLRI& from);
  VPNFlowSpecNLRI(VPNFlowSpecNLRI&& from) noexcept
    : VPNFlowSpecNLRI() {
    *this = ::std::move(from);
  }

  inline VPNFlowSpecNLRI& operator=(const VPNFlowSpecNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPNFlowSpecNLRI& operator=(VPNFlowSpecNLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VPNFlowSpecNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VPNFlowSpecNLRI* internal_default_instance() {
    return reinterpret_cast<const VPNFlowSpecNLRI*>(
               &_VPNFlowSpecNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(VPNFlowSpecNLRI& a, VPNFlowSpecNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(VPNFlowSpecNLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPNFlowSpecNLRI* New() const final {
    return CreateMaybeMessage<VPNFlowSpecNLRI>(nullptr);
  }

  VPNFlowSpecNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPNFlowSpecNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VPNFlowSpecNLRI& from);
  void MergeFrom(const VPNFlowSpecNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPNFlowSpecNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.VPNFlowSpecNLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRulesFieldNumber = 2,
    kRdFieldNumber = 1,
  };
  // repeated .google.protobuf.Any rules = 2;
  int rules_size() const;
  private:
  int _internal_rules_size() const;
  public:
  void clear_rules();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_rules();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_rules();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& rules(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      rules() const;

  // .google.protobuf.Any rd = 1;
  bool has_rd() const;
  private:
  bool _internal_has_rd() const;
  public:
  void clear_rd();
  const PROTOBUF_NAMESPACE_ID::Any& rd() const;
  PROTOBUF_NAMESPACE_ID::Any* release_rd();
  PROTOBUF_NAMESPACE_ID::Any* mutable_rd();
  void set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_rd() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_rd();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.VPNFlowSpecNLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > rules_;
  PROTOBUF_NAMESPACE_ID::Any* rd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class OpaqueNLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.OpaqueNLRI) */ {
 public:
  OpaqueNLRI();
  virtual ~OpaqueNLRI();

  OpaqueNLRI(const OpaqueNLRI& from);
  OpaqueNLRI(OpaqueNLRI&& from) noexcept
    : OpaqueNLRI() {
    *this = ::std::move(from);
  }

  inline OpaqueNLRI& operator=(const OpaqueNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpaqueNLRI& operator=(OpaqueNLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpaqueNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpaqueNLRI* internal_default_instance() {
    return reinterpret_cast<const OpaqueNLRI*>(
               &_OpaqueNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(OpaqueNLRI& a, OpaqueNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(OpaqueNLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpaqueNLRI* New() const final {
    return CreateMaybeMessage<OpaqueNLRI>(nullptr);
  }

  OpaqueNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpaqueNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpaqueNLRI& from);
  void MergeFrom(const OpaqueNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpaqueNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.OpaqueNLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.OpaqueNLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsNodeDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsNodeDescriptor) */ {
 public:
  LsNodeDescriptor();
  virtual ~LsNodeDescriptor();

  LsNodeDescriptor(const LsNodeDescriptor& from);
  LsNodeDescriptor(LsNodeDescriptor&& from) noexcept
    : LsNodeDescriptor() {
    *this = ::std::move(from);
  }

  inline LsNodeDescriptor& operator=(const LsNodeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsNodeDescriptor& operator=(LsNodeDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsNodeDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsNodeDescriptor* internal_default_instance() {
    return reinterpret_cast<const LsNodeDescriptor*>(
               &_LsNodeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LsNodeDescriptor& a, LsNodeDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(LsNodeDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsNodeDescriptor* New() const final {
    return CreateMaybeMessage<LsNodeDescriptor>(nullptr);
  }

  LsNodeDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsNodeDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsNodeDescriptor& from);
  void MergeFrom(const LsNodeDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsNodeDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsNodeDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgpRouterIdFieldNumber = 5,
    kAsnFieldNumber = 1,
    kBgpLsIdFieldNumber = 2,
    kOspfAreaIdFieldNumber = 3,
    kPseudonodeFieldNumber = 4,
  };
  // string igp_router_id = 5;
  void clear_igp_router_id();
  const std::string& igp_router_id() const;
  void set_igp_router_id(const std::string& value);
  void set_igp_router_id(std::string&& value);
  void set_igp_router_id(const char* value);
  void set_igp_router_id(const char* value, size_t size);
  std::string* mutable_igp_router_id();
  std::string* release_igp_router_id();
  void set_allocated_igp_router_id(std::string* igp_router_id);
  private:
  const std::string& _internal_igp_router_id() const;
  void _internal_set_igp_router_id(const std::string& value);
  std::string* _internal_mutable_igp_router_id();
  public:

  // uint32 asn = 1;
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bgp_ls_id = 2;
  void clear_bgp_ls_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 bgp_ls_id() const;
  void set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bgp_ls_id() const;
  void _internal_set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ospf_area_id = 3;
  void clear_ospf_area_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ospf_area_id() const;
  void set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ospf_area_id() const;
  void _internal_set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool pseudonode = 4;
  void clear_pseudonode();
  bool pseudonode() const;
  void set_pseudonode(bool value);
  private:
  bool _internal_pseudonode() const;
  void _internal_set_pseudonode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsNodeDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr igp_router_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bgp_ls_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ospf_area_id_;
  bool pseudonode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsLinkDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsLinkDescriptor) */ {
 public:
  LsLinkDescriptor();
  virtual ~LsLinkDescriptor();

  LsLinkDescriptor(const LsLinkDescriptor& from);
  LsLinkDescriptor(LsLinkDescriptor&& from) noexcept
    : LsLinkDescriptor() {
    *this = ::std::move(from);
  }

  inline LsLinkDescriptor& operator=(const LsLinkDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsLinkDescriptor& operator=(LsLinkDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsLinkDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsLinkDescriptor* internal_default_instance() {
    return reinterpret_cast<const LsLinkDescriptor*>(
               &_LsLinkDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LsLinkDescriptor& a, LsLinkDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(LsLinkDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsLinkDescriptor* New() const final {
    return CreateMaybeMessage<LsLinkDescriptor>(nullptr);
  }

  LsLinkDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsLinkDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsLinkDescriptor& from);
  void MergeFrom(const LsLinkDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsLinkDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsLinkDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceAddrIpv4FieldNumber = 3,
    kNeighborAddrIpv4FieldNumber = 4,
    kInterfaceAddrIpv6FieldNumber = 5,
    kNeighborAddrIpv6FieldNumber = 6,
    kLinkLocalIdFieldNumber = 1,
    kLinkRemoteIdFieldNumber = 2,
  };
  // string interface_addr_ipv4 = 3;
  void clear_interface_addr_ipv4();
  const std::string& interface_addr_ipv4() const;
  void set_interface_addr_ipv4(const std::string& value);
  void set_interface_addr_ipv4(std::string&& value);
  void set_interface_addr_ipv4(const char* value);
  void set_interface_addr_ipv4(const char* value, size_t size);
  std::string* mutable_interface_addr_ipv4();
  std::string* release_interface_addr_ipv4();
  void set_allocated_interface_addr_ipv4(std::string* interface_addr_ipv4);
  private:
  const std::string& _internal_interface_addr_ipv4() const;
  void _internal_set_interface_addr_ipv4(const std::string& value);
  std::string* _internal_mutable_interface_addr_ipv4();
  public:

  // string neighbor_addr_ipv4 = 4;
  void clear_neighbor_addr_ipv4();
  const std::string& neighbor_addr_ipv4() const;
  void set_neighbor_addr_ipv4(const std::string& value);
  void set_neighbor_addr_ipv4(std::string&& value);
  void set_neighbor_addr_ipv4(const char* value);
  void set_neighbor_addr_ipv4(const char* value, size_t size);
  std::string* mutable_neighbor_addr_ipv4();
  std::string* release_neighbor_addr_ipv4();
  void set_allocated_neighbor_addr_ipv4(std::string* neighbor_addr_ipv4);
  private:
  const std::string& _internal_neighbor_addr_ipv4() const;
  void _internal_set_neighbor_addr_ipv4(const std::string& value);
  std::string* _internal_mutable_neighbor_addr_ipv4();
  public:

  // string interface_addr_ipv6 = 5;
  void clear_interface_addr_ipv6();
  const std::string& interface_addr_ipv6() const;
  void set_interface_addr_ipv6(const std::string& value);
  void set_interface_addr_ipv6(std::string&& value);
  void set_interface_addr_ipv6(const char* value);
  void set_interface_addr_ipv6(const char* value, size_t size);
  std::string* mutable_interface_addr_ipv6();
  std::string* release_interface_addr_ipv6();
  void set_allocated_interface_addr_ipv6(std::string* interface_addr_ipv6);
  private:
  const std::string& _internal_interface_addr_ipv6() const;
  void _internal_set_interface_addr_ipv6(const std::string& value);
  std::string* _internal_mutable_interface_addr_ipv6();
  public:

  // string neighbor_addr_ipv6 = 6;
  void clear_neighbor_addr_ipv6();
  const std::string& neighbor_addr_ipv6() const;
  void set_neighbor_addr_ipv6(const std::string& value);
  void set_neighbor_addr_ipv6(std::string&& value);
  void set_neighbor_addr_ipv6(const char* value);
  void set_neighbor_addr_ipv6(const char* value, size_t size);
  std::string* mutable_neighbor_addr_ipv6();
  std::string* release_neighbor_addr_ipv6();
  void set_allocated_neighbor_addr_ipv6(std::string* neighbor_addr_ipv6);
  private:
  const std::string& _internal_neighbor_addr_ipv6() const;
  void _internal_set_neighbor_addr_ipv6(const std::string& value);
  std::string* _internal_mutable_neighbor_addr_ipv6();
  public:

  // uint32 link_local_id = 1;
  void clear_link_local_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_local_id() const;
  void set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_local_id() const;
  void _internal_set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 link_remote_id = 2;
  void clear_link_remote_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_remote_id() const;
  void set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_remote_id() const;
  void _internal_set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsLinkDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_addr_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_addr_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_addr_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbor_addr_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_local_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_remote_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsPrefixDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsPrefixDescriptor) */ {
 public:
  LsPrefixDescriptor();
  virtual ~LsPrefixDescriptor();

  LsPrefixDescriptor(const LsPrefixDescriptor& from);
  LsPrefixDescriptor(LsPrefixDescriptor&& from) noexcept
    : LsPrefixDescriptor() {
    *this = ::std::move(from);
  }

  inline LsPrefixDescriptor& operator=(const LsPrefixDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsPrefixDescriptor& operator=(LsPrefixDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsPrefixDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsPrefixDescriptor* internal_default_instance() {
    return reinterpret_cast<const LsPrefixDescriptor*>(
               &_LsPrefixDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LsPrefixDescriptor& a, LsPrefixDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(LsPrefixDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsPrefixDescriptor* New() const final {
    return CreateMaybeMessage<LsPrefixDescriptor>(nullptr);
  }

  LsPrefixDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsPrefixDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsPrefixDescriptor& from);
  void MergeFrom(const LsPrefixDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsPrefixDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsPrefixDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpReachabilityFieldNumber = 1,
    kOspfRouteTypeFieldNumber = 2,
  };
  // repeated string ip_reachability = 1;
  int ip_reachability_size() const;
  private:
  int _internal_ip_reachability_size() const;
  public:
  void clear_ip_reachability();
  const std::string& ip_reachability(int index) const;
  std::string* mutable_ip_reachability(int index);
  void set_ip_reachability(int index, const std::string& value);
  void set_ip_reachability(int index, std::string&& value);
  void set_ip_reachability(int index, const char* value);
  void set_ip_reachability(int index, const char* value, size_t size);
  std::string* add_ip_reachability();
  void add_ip_reachability(const std::string& value);
  void add_ip_reachability(std::string&& value);
  void add_ip_reachability(const char* value);
  void add_ip_reachability(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip_reachability() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip_reachability();
  private:
  const std::string& _internal_ip_reachability(int index) const;
  std::string* _internal_add_ip_reachability();
  public:

  // string ospf_route_type = 2;
  void clear_ospf_route_type();
  const std::string& ospf_route_type() const;
  void set_ospf_route_type(const std::string& value);
  void set_ospf_route_type(std::string&& value);
  void set_ospf_route_type(const char* value);
  void set_ospf_route_type(const char* value, size_t size);
  std::string* mutable_ospf_route_type();
  std::string* release_ospf_route_type();
  void set_allocated_ospf_route_type(std::string* ospf_route_type);
  private:
  const std::string& _internal_ospf_route_type() const;
  void _internal_set_ospf_route_type(const std::string& value);
  std::string* _internal_mutable_ospf_route_type();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsPrefixDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_reachability_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ospf_route_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsNodeNLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsNodeNLRI) */ {
 public:
  LsNodeNLRI();
  virtual ~LsNodeNLRI();

  LsNodeNLRI(const LsNodeNLRI& from);
  LsNodeNLRI(LsNodeNLRI&& from) noexcept
    : LsNodeNLRI() {
    *this = ::std::move(from);
  }

  inline LsNodeNLRI& operator=(const LsNodeNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsNodeNLRI& operator=(LsNodeNLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsNodeNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsNodeNLRI* internal_default_instance() {
    return reinterpret_cast<const LsNodeNLRI*>(
               &_LsNodeNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LsNodeNLRI& a, LsNodeNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsNodeNLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsNodeNLRI* New() const final {
    return CreateMaybeMessage<LsNodeNLRI>(nullptr);
  }

  LsNodeNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsNodeNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsNodeNLRI& from);
  void MergeFrom(const LsNodeNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsNodeNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsNodeNLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
  };
  // .gobgpapi.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::gobgpapi::LsNodeDescriptor& local_node() const;
  ::gobgpapi::LsNodeDescriptor* release_local_node();
  ::gobgpapi::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node);
  private:
  const ::gobgpapi::LsNodeDescriptor& _internal_local_node() const;
  ::gobgpapi::LsNodeDescriptor* _internal_mutable_local_node();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsNodeNLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::LsNodeDescriptor* local_node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsLinkNLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsLinkNLRI) */ {
 public:
  LsLinkNLRI();
  virtual ~LsLinkNLRI();

  LsLinkNLRI(const LsLinkNLRI& from);
  LsLinkNLRI(LsLinkNLRI&& from) noexcept
    : LsLinkNLRI() {
    *this = ::std::move(from);
  }

  inline LsLinkNLRI& operator=(const LsLinkNLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsLinkNLRI& operator=(LsLinkNLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsLinkNLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsLinkNLRI* internal_default_instance() {
    return reinterpret_cast<const LsLinkNLRI*>(
               &_LsLinkNLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(LsLinkNLRI& a, LsLinkNLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsLinkNLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsLinkNLRI* New() const final {
    return CreateMaybeMessage<LsLinkNLRI>(nullptr);
  }

  LsLinkNLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsLinkNLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsLinkNLRI& from);
  void MergeFrom(const LsLinkNLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsLinkNLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsLinkNLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
    kRemoteNodeFieldNumber = 2,
    kLinkDescriptorFieldNumber = 3,
  };
  // .gobgpapi.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::gobgpapi::LsNodeDescriptor& local_node() const;
  ::gobgpapi::LsNodeDescriptor* release_local_node();
  ::gobgpapi::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node);
  private:
  const ::gobgpapi::LsNodeDescriptor& _internal_local_node() const;
  ::gobgpapi::LsNodeDescriptor* _internal_mutable_local_node();
  public:

  // .gobgpapi.LsNodeDescriptor remote_node = 2;
  bool has_remote_node() const;
  private:
  bool _internal_has_remote_node() const;
  public:
  void clear_remote_node();
  const ::gobgpapi::LsNodeDescriptor& remote_node() const;
  ::gobgpapi::LsNodeDescriptor* release_remote_node();
  ::gobgpapi::LsNodeDescriptor* mutable_remote_node();
  void set_allocated_remote_node(::gobgpapi::LsNodeDescriptor* remote_node);
  private:
  const ::gobgpapi::LsNodeDescriptor& _internal_remote_node() const;
  ::gobgpapi::LsNodeDescriptor* _internal_mutable_remote_node();
  public:

  // .gobgpapi.LsLinkDescriptor link_descriptor = 3;
  bool has_link_descriptor() const;
  private:
  bool _internal_has_link_descriptor() const;
  public:
  void clear_link_descriptor();
  const ::gobgpapi::LsLinkDescriptor& link_descriptor() const;
  ::gobgpapi::LsLinkDescriptor* release_link_descriptor();
  ::gobgpapi::LsLinkDescriptor* mutable_link_descriptor();
  void set_allocated_link_descriptor(::gobgpapi::LsLinkDescriptor* link_descriptor);
  private:
  const ::gobgpapi::LsLinkDescriptor& _internal_link_descriptor() const;
  ::gobgpapi::LsLinkDescriptor* _internal_mutable_link_descriptor();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsLinkNLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::LsNodeDescriptor* local_node_;
  ::gobgpapi::LsNodeDescriptor* remote_node_;
  ::gobgpapi::LsLinkDescriptor* link_descriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsPrefixV4NLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsPrefixV4NLRI) */ {
 public:
  LsPrefixV4NLRI();
  virtual ~LsPrefixV4NLRI();

  LsPrefixV4NLRI(const LsPrefixV4NLRI& from);
  LsPrefixV4NLRI(LsPrefixV4NLRI&& from) noexcept
    : LsPrefixV4NLRI() {
    *this = ::std::move(from);
  }

  inline LsPrefixV4NLRI& operator=(const LsPrefixV4NLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsPrefixV4NLRI& operator=(LsPrefixV4NLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsPrefixV4NLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsPrefixV4NLRI* internal_default_instance() {
    return reinterpret_cast<const LsPrefixV4NLRI*>(
               &_LsPrefixV4NLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LsPrefixV4NLRI& a, LsPrefixV4NLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsPrefixV4NLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsPrefixV4NLRI* New() const final {
    return CreateMaybeMessage<LsPrefixV4NLRI>(nullptr);
  }

  LsPrefixV4NLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsPrefixV4NLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsPrefixV4NLRI& from);
  void MergeFrom(const LsPrefixV4NLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsPrefixV4NLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsPrefixV4NLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
    kPrefixDescriptorFieldNumber = 2,
  };
  // .gobgpapi.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::gobgpapi::LsNodeDescriptor& local_node() const;
  ::gobgpapi::LsNodeDescriptor* release_local_node();
  ::gobgpapi::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node);
  private:
  const ::gobgpapi::LsNodeDescriptor& _internal_local_node() const;
  ::gobgpapi::LsNodeDescriptor* _internal_mutable_local_node();
  public:

  // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
  bool has_prefix_descriptor() const;
  private:
  bool _internal_has_prefix_descriptor() const;
  public:
  void clear_prefix_descriptor();
  const ::gobgpapi::LsPrefixDescriptor& prefix_descriptor() const;
  ::gobgpapi::LsPrefixDescriptor* release_prefix_descriptor();
  ::gobgpapi::LsPrefixDescriptor* mutable_prefix_descriptor();
  void set_allocated_prefix_descriptor(::gobgpapi::LsPrefixDescriptor* prefix_descriptor);
  private:
  const ::gobgpapi::LsPrefixDescriptor& _internal_prefix_descriptor() const;
  ::gobgpapi::LsPrefixDescriptor* _internal_mutable_prefix_descriptor();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsPrefixV4NLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::LsNodeDescriptor* local_node_;
  ::gobgpapi::LsPrefixDescriptor* prefix_descriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsPrefixV6NLRI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsPrefixV6NLRI) */ {
 public:
  LsPrefixV6NLRI();
  virtual ~LsPrefixV6NLRI();

  LsPrefixV6NLRI(const LsPrefixV6NLRI& from);
  LsPrefixV6NLRI(LsPrefixV6NLRI&& from) noexcept
    : LsPrefixV6NLRI() {
    *this = ::std::move(from);
  }

  inline LsPrefixV6NLRI& operator=(const LsPrefixV6NLRI& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsPrefixV6NLRI& operator=(LsPrefixV6NLRI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsPrefixV6NLRI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsPrefixV6NLRI* internal_default_instance() {
    return reinterpret_cast<const LsPrefixV6NLRI*>(
               &_LsPrefixV6NLRI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LsPrefixV6NLRI& a, LsPrefixV6NLRI& b) {
    a.Swap(&b);
  }
  inline void Swap(LsPrefixV6NLRI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsPrefixV6NLRI* New() const final {
    return CreateMaybeMessage<LsPrefixV6NLRI>(nullptr);
  }

  LsPrefixV6NLRI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsPrefixV6NLRI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsPrefixV6NLRI& from);
  void MergeFrom(const LsPrefixV6NLRI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsPrefixV6NLRI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsPrefixV6NLRI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalNodeFieldNumber = 1,
    kPrefixDescriptorFieldNumber = 2,
  };
  // .gobgpapi.LsNodeDescriptor local_node = 1;
  bool has_local_node() const;
  private:
  bool _internal_has_local_node() const;
  public:
  void clear_local_node();
  const ::gobgpapi::LsNodeDescriptor& local_node() const;
  ::gobgpapi::LsNodeDescriptor* release_local_node();
  ::gobgpapi::LsNodeDescriptor* mutable_local_node();
  void set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node);
  private:
  const ::gobgpapi::LsNodeDescriptor& _internal_local_node() const;
  ::gobgpapi::LsNodeDescriptor* _internal_mutable_local_node();
  public:

  // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
  bool has_prefix_descriptor() const;
  private:
  bool _internal_has_prefix_descriptor() const;
  public:
  void clear_prefix_descriptor();
  const ::gobgpapi::LsPrefixDescriptor& prefix_descriptor() const;
  ::gobgpapi::LsPrefixDescriptor* release_prefix_descriptor();
  ::gobgpapi::LsPrefixDescriptor* mutable_prefix_descriptor();
  void set_allocated_prefix_descriptor(::gobgpapi::LsPrefixDescriptor* prefix_descriptor);
  private:
  const ::gobgpapi::LsPrefixDescriptor& _internal_prefix_descriptor() const;
  ::gobgpapi::LsPrefixDescriptor* _internal_mutable_prefix_descriptor();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsPrefixV6NLRI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::LsNodeDescriptor* local_node_;
  ::gobgpapi::LsPrefixDescriptor* prefix_descriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAddrPrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsAddrPrefix) */ {
 public:
  LsAddrPrefix();
  virtual ~LsAddrPrefix();

  LsAddrPrefix(const LsAddrPrefix& from);
  LsAddrPrefix(LsAddrPrefix&& from) noexcept
    : LsAddrPrefix() {
    *this = ::std::move(from);
  }

  inline LsAddrPrefix& operator=(const LsAddrPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAddrPrefix& operator=(LsAddrPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAddrPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAddrPrefix* internal_default_instance() {
    return reinterpret_cast<const LsAddrPrefix*>(
               &_LsAddrPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LsAddrPrefix& a, LsAddrPrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAddrPrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAddrPrefix* New() const final {
    return CreateMaybeMessage<LsAddrPrefix>(nullptr);
  }

  LsAddrPrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAddrPrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAddrPrefix& from);
  void MergeFrom(const LsAddrPrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAddrPrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsAddrPrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNlriFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .google.protobuf.Any nlri = 2;
  bool has_nlri() const;
  private:
  bool _internal_has_nlri() const;
  public:
  void clear_nlri();
  const PROTOBUF_NAMESPACE_ID::Any& nlri() const;
  PROTOBUF_NAMESPACE_ID::Any* release_nlri();
  PROTOBUF_NAMESPACE_ID::Any* mutable_nlri();
  void set_allocated_nlri(PROTOBUF_NAMESPACE_ID::Any* nlri);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_nlri() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_nlri();
  public:

  // .gobgpapi.LsNLRIType type = 1;
  void clear_type();
  ::gobgpapi::LsNLRIType type() const;
  void set_type(::gobgpapi::LsNLRIType value);
  private:
  ::gobgpapi::LsNLRIType _internal_type() const;
  void _internal_set_type(::gobgpapi::LsNLRIType value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsAddrPrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* nlri_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MpReachNLRIAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpReachNLRIAttribute) */ {
 public:
  MpReachNLRIAttribute();
  virtual ~MpReachNLRIAttribute();

  MpReachNLRIAttribute(const MpReachNLRIAttribute& from);
  MpReachNLRIAttribute(MpReachNLRIAttribute&& from) noexcept
    : MpReachNLRIAttribute() {
    *this = ::std::move(from);
  }

  inline MpReachNLRIAttribute& operator=(const MpReachNLRIAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpReachNLRIAttribute& operator=(MpReachNLRIAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpReachNLRIAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpReachNLRIAttribute* internal_default_instance() {
    return reinterpret_cast<const MpReachNLRIAttribute*>(
               &_MpReachNLRIAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(MpReachNLRIAttribute& a, MpReachNLRIAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MpReachNLRIAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpReachNLRIAttribute* New() const final {
    return CreateMaybeMessage<MpReachNLRIAttribute>(nullptr);
  }

  MpReachNLRIAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpReachNLRIAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpReachNLRIAttribute& from);
  void MergeFrom(const MpReachNLRIAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpReachNLRIAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MpReachNLRIAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextHopsFieldNumber = 2,
    kNlrisFieldNumber = 3,
    kFamilyFieldNumber = 1,
  };
  // repeated string next_hops = 2;
  int next_hops_size() const;
  private:
  int _internal_next_hops_size() const;
  public:
  void clear_next_hops();
  const std::string& next_hops(int index) const;
  std::string* mutable_next_hops(int index);
  void set_next_hops(int index, const std::string& value);
  void set_next_hops(int index, std::string&& value);
  void set_next_hops(int index, const char* value);
  void set_next_hops(int index, const char* value, size_t size);
  std::string* add_next_hops();
  void add_next_hops(const std::string& value);
  void add_next_hops(std::string&& value);
  void add_next_hops(const char* value);
  void add_next_hops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& next_hops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_next_hops();
  private:
  const std::string& _internal_next_hops(int index) const;
  std::string* _internal_add_next_hops();
  public:

  // repeated .google.protobuf.Any nlris = 3;
  int nlris_size() const;
  private:
  int _internal_nlris_size() const;
  public:
  void clear_nlris();
  PROTOBUF_NAMESPACE_ID::Any* mutable_nlris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_nlris();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_nlris();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_nlris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      nlris() const;

  // .gobgpapi.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MpReachNLRIAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> next_hops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > nlris_;
  ::gobgpapi::Family* family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MpUnreachNLRIAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MpUnreachNLRIAttribute) */ {
 public:
  MpUnreachNLRIAttribute();
  virtual ~MpUnreachNLRIAttribute();

  MpUnreachNLRIAttribute(const MpUnreachNLRIAttribute& from);
  MpUnreachNLRIAttribute(MpUnreachNLRIAttribute&& from) noexcept
    : MpUnreachNLRIAttribute() {
    *this = ::std::move(from);
  }

  inline MpUnreachNLRIAttribute& operator=(const MpUnreachNLRIAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MpUnreachNLRIAttribute& operator=(MpUnreachNLRIAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MpUnreachNLRIAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MpUnreachNLRIAttribute* internal_default_instance() {
    return reinterpret_cast<const MpUnreachNLRIAttribute*>(
               &_MpUnreachNLRIAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(MpUnreachNLRIAttribute& a, MpUnreachNLRIAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MpUnreachNLRIAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MpUnreachNLRIAttribute* New() const final {
    return CreateMaybeMessage<MpUnreachNLRIAttribute>(nullptr);
  }

  MpUnreachNLRIAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MpUnreachNLRIAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MpUnreachNLRIAttribute& from);
  void MergeFrom(const MpUnreachNLRIAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MpUnreachNLRIAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MpUnreachNLRIAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNlrisFieldNumber = 3,
    kFamilyFieldNumber = 1,
  };
  // repeated .google.protobuf.Any nlris = 3;
  int nlris_size() const;
  private:
  int _internal_nlris_size() const;
  public:
  void clear_nlris();
  PROTOBUF_NAMESPACE_ID::Any* mutable_nlris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_nlris();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_nlris();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& nlris(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_nlris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      nlris() const;

  // .gobgpapi.Family family = 1;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const ::gobgpapi::Family& family() const;
  ::gobgpapi::Family* release_family();
  ::gobgpapi::Family* mutable_family();
  void set_allocated_family(::gobgpapi::Family* family);
  private:
  const ::gobgpapi::Family& _internal_family() const;
  ::gobgpapi::Family* _internal_mutable_family();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MpUnreachNLRIAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > nlris_;
  ::gobgpapi::Family* family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TwoOctetAsSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TwoOctetAsSpecificExtended) */ {
 public:
  TwoOctetAsSpecificExtended();
  virtual ~TwoOctetAsSpecificExtended();

  TwoOctetAsSpecificExtended(const TwoOctetAsSpecificExtended& from);
  TwoOctetAsSpecificExtended(TwoOctetAsSpecificExtended&& from) noexcept
    : TwoOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline TwoOctetAsSpecificExtended& operator=(const TwoOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoOctetAsSpecificExtended& operator=(TwoOctetAsSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwoOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwoOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const TwoOctetAsSpecificExtended*>(
               &_TwoOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TwoOctetAsSpecificExtended& a, TwoOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TwoOctetAsSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwoOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<TwoOctetAsSpecificExtended>(nullptr);
  }

  TwoOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwoOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwoOctetAsSpecificExtended& from);
  void MergeFrom(const TwoOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TwoOctetAsSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kAsFieldNumber = 3,
    kLocalAdminFieldNumber = 4,
  };
  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 as = 3;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TwoOctetAsSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IPv4AddressSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IPv4AddressSpecificExtended) */ {
 public:
  IPv4AddressSpecificExtended();
  virtual ~IPv4AddressSpecificExtended();

  IPv4AddressSpecificExtended(const IPv4AddressSpecificExtended& from);
  IPv4AddressSpecificExtended(IPv4AddressSpecificExtended&& from) noexcept
    : IPv4AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline IPv4AddressSpecificExtended& operator=(const IPv4AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPv4AddressSpecificExtended& operator=(IPv4AddressSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPv4AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPv4AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const IPv4AddressSpecificExtended*>(
               &_IPv4AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(IPv4AddressSpecificExtended& a, IPv4AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(IPv4AddressSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPv4AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<IPv4AddressSpecificExtended>(nullptr);
  }

  IPv4AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPv4AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPv4AddressSpecificExtended& from);
  void MergeFrom(const IPv4AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPv4AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.IPv4AddressSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kLocalAdminFieldNumber = 4,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.IPv4AddressSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class FourOctetAsSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.FourOctetAsSpecificExtended) */ {
 public:
  FourOctetAsSpecificExtended();
  virtual ~FourOctetAsSpecificExtended();

  FourOctetAsSpecificExtended(const FourOctetAsSpecificExtended& from);
  FourOctetAsSpecificExtended(FourOctetAsSpecificExtended&& from) noexcept
    : FourOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline FourOctetAsSpecificExtended& operator=(const FourOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline FourOctetAsSpecificExtended& operator=(FourOctetAsSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FourOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FourOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const FourOctetAsSpecificExtended*>(
               &_FourOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FourOctetAsSpecificExtended& a, FourOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(FourOctetAsSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FourOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<FourOctetAsSpecificExtended>(nullptr);
  }

  FourOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FourOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FourOctetAsSpecificExtended& from);
  void MergeFrom(const FourOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FourOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.FourOctetAsSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kAsFieldNumber = 3,
    kLocalAdminFieldNumber = 4,
  };
  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 as = 3;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.FourOctetAsSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ValidationExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ValidationExtended) */ {
 public:
  ValidationExtended();
  virtual ~ValidationExtended();

  ValidationExtended(const ValidationExtended& from);
  ValidationExtended(ValidationExtended&& from) noexcept
    : ValidationExtended() {
    *this = ::std::move(from);
  }

  inline ValidationExtended& operator=(const ValidationExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidationExtended& operator=(ValidationExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValidationExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidationExtended* internal_default_instance() {
    return reinterpret_cast<const ValidationExtended*>(
               &_ValidationExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ValidationExtended& a, ValidationExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidationExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidationExtended* New() const final {
    return CreateMaybeMessage<ValidationExtended>(nullptr);
  }

  ValidationExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidationExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValidationExtended& from);
  void MergeFrom(const ValidationExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidationExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ValidationExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // uint32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ValidationExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ColorExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ColorExtended) */ {
 public:
  ColorExtended();
  virtual ~ColorExtended();

  ColorExtended(const ColorExtended& from);
  ColorExtended(ColorExtended&& from) noexcept
    : ColorExtended() {
    *this = ::std::move(from);
  }

  inline ColorExtended& operator=(const ColorExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorExtended& operator=(ColorExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorExtended* internal_default_instance() {
    return reinterpret_cast<const ColorExtended*>(
               &_ColorExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ColorExtended& a, ColorExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorExtended* New() const final {
    return CreateMaybeMessage<ColorExtended>(nullptr);
  }

  ColorExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorExtended& from);
  void MergeFrom(const ColorExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ColorExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // uint32 color = 1;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ColorExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class EncapExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.EncapExtended) */ {
 public:
  EncapExtended();
  virtual ~EncapExtended();

  EncapExtended(const EncapExtended& from);
  EncapExtended(EncapExtended&& from) noexcept
    : EncapExtended() {
    *this = ::std::move(from);
  }

  inline EncapExtended& operator=(const EncapExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncapExtended& operator=(EncapExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncapExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncapExtended* internal_default_instance() {
    return reinterpret_cast<const EncapExtended*>(
               &_EncapExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(EncapExtended& a, EncapExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(EncapExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncapExtended* New() const final {
    return CreateMaybeMessage<EncapExtended>(nullptr);
  }

  EncapExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncapExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncapExtended& from);
  void MergeFrom(const EncapExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncapExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.EncapExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelTypeFieldNumber = 1,
  };
  // uint32 tunnel_type = 1;
  void clear_tunnel_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 tunnel_type() const;
  void set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tunnel_type() const;
  void _internal_set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.EncapExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tunnel_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class DefaultGatewayExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.DefaultGatewayExtended) */ {
 public:
  DefaultGatewayExtended();
  virtual ~DefaultGatewayExtended();

  DefaultGatewayExtended(const DefaultGatewayExtended& from);
  DefaultGatewayExtended(DefaultGatewayExtended&& from) noexcept
    : DefaultGatewayExtended() {
    *this = ::std::move(from);
  }

  inline DefaultGatewayExtended& operator=(const DefaultGatewayExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultGatewayExtended& operator=(DefaultGatewayExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefaultGatewayExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultGatewayExtended* internal_default_instance() {
    return reinterpret_cast<const DefaultGatewayExtended*>(
               &_DefaultGatewayExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DefaultGatewayExtended& a, DefaultGatewayExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultGatewayExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultGatewayExtended* New() const final {
    return CreateMaybeMessage<DefaultGatewayExtended>(nullptr);
  }

  DefaultGatewayExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultGatewayExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultGatewayExtended& from);
  void MergeFrom(const DefaultGatewayExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultGatewayExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.DefaultGatewayExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gobgpapi.DefaultGatewayExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class OpaqueExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.OpaqueExtended) */ {
 public:
  OpaqueExtended();
  virtual ~OpaqueExtended();

  OpaqueExtended(const OpaqueExtended& from);
  OpaqueExtended(OpaqueExtended&& from) noexcept
    : OpaqueExtended() {
    *this = ::std::move(from);
  }

  inline OpaqueExtended& operator=(const OpaqueExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpaqueExtended& operator=(OpaqueExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpaqueExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpaqueExtended* internal_default_instance() {
    return reinterpret_cast<const OpaqueExtended*>(
               &_OpaqueExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(OpaqueExtended& a, OpaqueExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(OpaqueExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpaqueExtended* New() const final {
    return CreateMaybeMessage<OpaqueExtended>(nullptr);
  }

  OpaqueExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpaqueExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpaqueExtended& from);
  void MergeFrom(const OpaqueExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpaqueExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.OpaqueExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIsTransitiveFieldNumber = 1,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.OpaqueExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool is_transitive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ESILabelExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ESILabelExtended) */ {
 public:
  ESILabelExtended();
  virtual ~ESILabelExtended();

  ESILabelExtended(const ESILabelExtended& from);
  ESILabelExtended(ESILabelExtended&& from) noexcept
    : ESILabelExtended() {
    *this = ::std::move(from);
  }

  inline ESILabelExtended& operator=(const ESILabelExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESILabelExtended& operator=(ESILabelExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESILabelExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ESILabelExtended* internal_default_instance() {
    return reinterpret_cast<const ESILabelExtended*>(
               &_ESILabelExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ESILabelExtended& a, ESILabelExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(ESILabelExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESILabelExtended* New() const final {
    return CreateMaybeMessage<ESILabelExtended>(nullptr);
  }

  ESILabelExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESILabelExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESILabelExtended& from);
  void MergeFrom(const ESILabelExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESILabelExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ESILabelExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSingleActiveFieldNumber = 1,
    kLabelFieldNumber = 2,
  };
  // bool is_single_active = 1;
  void clear_is_single_active();
  bool is_single_active() const;
  void set_is_single_active(bool value);
  private:
  bool _internal_is_single_active() const;
  void _internal_set_is_single_active(bool value);
  public:

  // uint32 label = 2;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ESILabelExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_single_active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ESImportRouteTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ESImportRouteTarget) */ {
 public:
  ESImportRouteTarget();
  virtual ~ESImportRouteTarget();

  ESImportRouteTarget(const ESImportRouteTarget& from);
  ESImportRouteTarget(ESImportRouteTarget&& from) noexcept
    : ESImportRouteTarget() {
    *this = ::std::move(from);
  }

  inline ESImportRouteTarget& operator=(const ESImportRouteTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESImportRouteTarget& operator=(ESImportRouteTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESImportRouteTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ESImportRouteTarget* internal_default_instance() {
    return reinterpret_cast<const ESImportRouteTarget*>(
               &_ESImportRouteTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ESImportRouteTarget& a, ESImportRouteTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ESImportRouteTarget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESImportRouteTarget* New() const final {
    return CreateMaybeMessage<ESImportRouteTarget>(nullptr);
  }

  ESImportRouteTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESImportRouteTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESImportRouteTarget& from);
  void MergeFrom(const ESImportRouteTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESImportRouteTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ESImportRouteTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEsImportFieldNumber = 1,
  };
  // string es_import = 1;
  void clear_es_import();
  const std::string& es_import() const;
  void set_es_import(const std::string& value);
  void set_es_import(std::string&& value);
  void set_es_import(const char* value);
  void set_es_import(const char* value, size_t size);
  std::string* mutable_es_import();
  std::string* release_es_import();
  void set_allocated_es_import(std::string* es_import);
  private:
  const std::string& _internal_es_import() const;
  void _internal_set_es_import(const std::string& value);
  std::string* _internal_mutable_es_import();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.ESImportRouteTarget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr es_import_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class MacMobilityExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.MacMobilityExtended) */ {
 public:
  MacMobilityExtended();
  virtual ~MacMobilityExtended();

  MacMobilityExtended(const MacMobilityExtended& from);
  MacMobilityExtended(MacMobilityExtended&& from) noexcept
    : MacMobilityExtended() {
    *this = ::std::move(from);
  }

  inline MacMobilityExtended& operator=(const MacMobilityExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacMobilityExtended& operator=(MacMobilityExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MacMobilityExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacMobilityExtended* internal_default_instance() {
    return reinterpret_cast<const MacMobilityExtended*>(
               &_MacMobilityExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(MacMobilityExtended& a, MacMobilityExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(MacMobilityExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacMobilityExtended* New() const final {
    return CreateMaybeMessage<MacMobilityExtended>(nullptr);
  }

  MacMobilityExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacMobilityExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MacMobilityExtended& from);
  void MergeFrom(const MacMobilityExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MacMobilityExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.MacMobilityExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsStickyFieldNumber = 1,
    kSequenceNumFieldNumber = 2,
  };
  // bool is_sticky = 1;
  void clear_is_sticky();
  bool is_sticky() const;
  void set_is_sticky(bool value);
  private:
  bool _internal_is_sticky() const;
  void _internal_set_is_sticky(bool value);
  public:

  // uint32 sequence_num = 2;
  void clear_sequence_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num() const;
  void set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_num() const;
  void _internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.MacMobilityExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_sticky_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RouterMacExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RouterMacExtended) */ {
 public:
  RouterMacExtended();
  virtual ~RouterMacExtended();

  RouterMacExtended(const RouterMacExtended& from);
  RouterMacExtended(RouterMacExtended&& from) noexcept
    : RouterMacExtended() {
    *this = ::std::move(from);
  }

  inline RouterMacExtended& operator=(const RouterMacExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterMacExtended& operator=(RouterMacExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouterMacExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouterMacExtended* internal_default_instance() {
    return reinterpret_cast<const RouterMacExtended*>(
               &_RouterMacExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(RouterMacExtended& a, RouterMacExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterMacExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouterMacExtended* New() const final {
    return CreateMaybeMessage<RouterMacExtended>(nullptr);
  }

  RouterMacExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouterMacExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouterMacExtended& from);
  void MergeFrom(const RouterMacExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouterMacExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RouterMacExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 1,
  };
  // string mac = 1;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RouterMacExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TrafficRateExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TrafficRateExtended) */ {
 public:
  TrafficRateExtended();
  virtual ~TrafficRateExtended();

  TrafficRateExtended(const TrafficRateExtended& from);
  TrafficRateExtended(TrafficRateExtended&& from) noexcept
    : TrafficRateExtended() {
    *this = ::std::move(from);
  }

  inline TrafficRateExtended& operator=(const TrafficRateExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficRateExtended& operator=(TrafficRateExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficRateExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficRateExtended* internal_default_instance() {
    return reinterpret_cast<const TrafficRateExtended*>(
               &_TrafficRateExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(TrafficRateExtended& a, TrafficRateExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficRateExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficRateExtended* New() const final {
    return CreateMaybeMessage<TrafficRateExtended>(nullptr);
  }

  TrafficRateExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficRateExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficRateExtended& from);
  void MergeFrom(const TrafficRateExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficRateExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TrafficRateExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsFieldNumber = 1,
    kRateFieldNumber = 2,
  };
  // uint32 as = 1;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float rate = 2;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TrafficRateExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  float rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TrafficActionExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TrafficActionExtended) */ {
 public:
  TrafficActionExtended();
  virtual ~TrafficActionExtended();

  TrafficActionExtended(const TrafficActionExtended& from);
  TrafficActionExtended(TrafficActionExtended&& from) noexcept
    : TrafficActionExtended() {
    *this = ::std::move(from);
  }

  inline TrafficActionExtended& operator=(const TrafficActionExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficActionExtended& operator=(TrafficActionExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficActionExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficActionExtended* internal_default_instance() {
    return reinterpret_cast<const TrafficActionExtended*>(
               &_TrafficActionExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TrafficActionExtended& a, TrafficActionExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficActionExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficActionExtended* New() const final {
    return CreateMaybeMessage<TrafficActionExtended>(nullptr);
  }

  TrafficActionExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficActionExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficActionExtended& from);
  void MergeFrom(const TrafficActionExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficActionExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TrafficActionExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalFieldNumber = 1,
    kSampleFieldNumber = 2,
  };
  // bool terminal = 1;
  void clear_terminal();
  bool terminal() const;
  void set_terminal(bool value);
  private:
  bool _internal_terminal() const;
  void _internal_set_terminal(bool value);
  public:

  // bool sample = 2;
  void clear_sample();
  bool sample() const;
  void set_sample(bool value);
  private:
  bool _internal_sample() const;
  void _internal_set_sample(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TrafficActionExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool terminal_;
  bool sample_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectTwoOctetAsSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RedirectTwoOctetAsSpecificExtended) */ {
 public:
  RedirectTwoOctetAsSpecificExtended();
  virtual ~RedirectTwoOctetAsSpecificExtended();

  RedirectTwoOctetAsSpecificExtended(const RedirectTwoOctetAsSpecificExtended& from);
  RedirectTwoOctetAsSpecificExtended(RedirectTwoOctetAsSpecificExtended&& from) noexcept
    : RedirectTwoOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectTwoOctetAsSpecificExtended& operator=(const RedirectTwoOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectTwoOctetAsSpecificExtended& operator=(RedirectTwoOctetAsSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectTwoOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectTwoOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectTwoOctetAsSpecificExtended*>(
               &_RedirectTwoOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(RedirectTwoOctetAsSpecificExtended& a, RedirectTwoOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectTwoOctetAsSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectTwoOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectTwoOctetAsSpecificExtended>(nullptr);
  }

  RedirectTwoOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectTwoOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectTwoOctetAsSpecificExtended& from);
  void MergeFrom(const RedirectTwoOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectTwoOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RedirectTwoOctetAsSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // uint32 as = 1;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RedirectTwoOctetAsSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectIPv4AddressSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RedirectIPv4AddressSpecificExtended) */ {
 public:
  RedirectIPv4AddressSpecificExtended();
  virtual ~RedirectIPv4AddressSpecificExtended();

  RedirectIPv4AddressSpecificExtended(const RedirectIPv4AddressSpecificExtended& from);
  RedirectIPv4AddressSpecificExtended(RedirectIPv4AddressSpecificExtended&& from) noexcept
    : RedirectIPv4AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectIPv4AddressSpecificExtended& operator=(const RedirectIPv4AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectIPv4AddressSpecificExtended& operator=(RedirectIPv4AddressSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectIPv4AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectIPv4AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectIPv4AddressSpecificExtended*>(
               &_RedirectIPv4AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(RedirectIPv4AddressSpecificExtended& a, RedirectIPv4AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectIPv4AddressSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectIPv4AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectIPv4AddressSpecificExtended>(nullptr);
  }

  RedirectIPv4AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectIPv4AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectIPv4AddressSpecificExtended& from);
  void MergeFrom(const RedirectIPv4AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectIPv4AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RedirectIPv4AddressSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RedirectIPv4AddressSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectFourOctetAsSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RedirectFourOctetAsSpecificExtended) */ {
 public:
  RedirectFourOctetAsSpecificExtended();
  virtual ~RedirectFourOctetAsSpecificExtended();

  RedirectFourOctetAsSpecificExtended(const RedirectFourOctetAsSpecificExtended& from);
  RedirectFourOctetAsSpecificExtended(RedirectFourOctetAsSpecificExtended&& from) noexcept
    : RedirectFourOctetAsSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectFourOctetAsSpecificExtended& operator=(const RedirectFourOctetAsSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectFourOctetAsSpecificExtended& operator=(RedirectFourOctetAsSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectFourOctetAsSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectFourOctetAsSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectFourOctetAsSpecificExtended*>(
               &_RedirectFourOctetAsSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RedirectFourOctetAsSpecificExtended& a, RedirectFourOctetAsSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectFourOctetAsSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectFourOctetAsSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectFourOctetAsSpecificExtended>(nullptr);
  }

  RedirectFourOctetAsSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectFourOctetAsSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectFourOctetAsSpecificExtended& from);
  void MergeFrom(const RedirectFourOctetAsSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectFourOctetAsSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RedirectFourOctetAsSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // uint32 as = 1;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RedirectFourOctetAsSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TrafficRemarkExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TrafficRemarkExtended) */ {
 public:
  TrafficRemarkExtended();
  virtual ~TrafficRemarkExtended();

  TrafficRemarkExtended(const TrafficRemarkExtended& from);
  TrafficRemarkExtended(TrafficRemarkExtended&& from) noexcept
    : TrafficRemarkExtended() {
    *this = ::std::move(from);
  }

  inline TrafficRemarkExtended& operator=(const TrafficRemarkExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficRemarkExtended& operator=(TrafficRemarkExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficRemarkExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficRemarkExtended* internal_default_instance() {
    return reinterpret_cast<const TrafficRemarkExtended*>(
               &_TrafficRemarkExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TrafficRemarkExtended& a, TrafficRemarkExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficRemarkExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficRemarkExtended* New() const final {
    return CreateMaybeMessage<TrafficRemarkExtended>(nullptr);
  }

  TrafficRemarkExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficRemarkExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficRemarkExtended& from);
  void MergeFrom(const TrafficRemarkExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficRemarkExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TrafficRemarkExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDscpFieldNumber = 1,
  };
  // uint32 dscp = 1;
  void clear_dscp();
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp() const;
  void set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dscp() const;
  void _internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TrafficRemarkExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class UnknownExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UnknownExtended) */ {
 public:
  UnknownExtended();
  virtual ~UnknownExtended();

  UnknownExtended(const UnknownExtended& from);
  UnknownExtended(UnknownExtended&& from) noexcept
    : UnknownExtended() {
    *this = ::std::move(from);
  }

  inline UnknownExtended& operator=(const UnknownExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownExtended& operator=(UnknownExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnknownExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnknownExtended* internal_default_instance() {
    return reinterpret_cast<const UnknownExtended*>(
               &_UnknownExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(UnknownExtended& a, UnknownExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnknownExtended* New() const final {
    return CreateMaybeMessage<UnknownExtended>(nullptr);
  }

  UnknownExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnknownExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnknownExtended& from);
  void MergeFrom(const UnknownExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UnknownExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UnknownExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class ExtendedCommunitiesAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.ExtendedCommunitiesAttribute) */ {
 public:
  ExtendedCommunitiesAttribute();
  virtual ~ExtendedCommunitiesAttribute();

  ExtendedCommunitiesAttribute(const ExtendedCommunitiesAttribute& from);
  ExtendedCommunitiesAttribute(ExtendedCommunitiesAttribute&& from) noexcept
    : ExtendedCommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline ExtendedCommunitiesAttribute& operator=(const ExtendedCommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedCommunitiesAttribute& operator=(ExtendedCommunitiesAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtendedCommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtendedCommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const ExtendedCommunitiesAttribute*>(
               &_ExtendedCommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ExtendedCommunitiesAttribute& a, ExtendedCommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendedCommunitiesAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtendedCommunitiesAttribute* New() const final {
    return CreateMaybeMessage<ExtendedCommunitiesAttribute>(nullptr);
  }

  ExtendedCommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtendedCommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtendedCommunitiesAttribute& from);
  void MergeFrom(const ExtendedCommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendedCommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.ExtendedCommunitiesAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  PROTOBUF_NAMESPACE_ID::Any* mutable_communities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_communities();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_communities();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_communities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      communities() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.ExtendedCommunitiesAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > communities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class As4PathAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.As4PathAttribute) */ {
 public:
  As4PathAttribute();
  virtual ~As4PathAttribute();

  As4PathAttribute(const As4PathAttribute& from);
  As4PathAttribute(As4PathAttribute&& from) noexcept
    : As4PathAttribute() {
    *this = ::std::move(from);
  }

  inline As4PathAttribute& operator=(const As4PathAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline As4PathAttribute& operator=(As4PathAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const As4PathAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const As4PathAttribute* internal_default_instance() {
    return reinterpret_cast<const As4PathAttribute*>(
               &_As4PathAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(As4PathAttribute& a, As4PathAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(As4PathAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline As4PathAttribute* New() const final {
    return CreateMaybeMessage<As4PathAttribute>(nullptr);
  }

  As4PathAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<As4PathAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const As4PathAttribute& from);
  void MergeFrom(const As4PathAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(As4PathAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.As4PathAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .gobgpapi.AsSegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::gobgpapi::AsSegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >*
      mutable_segments();
  private:
  const ::gobgpapi::AsSegment& _internal_segments(int index) const;
  ::gobgpapi::AsSegment* _internal_add_segments();
  public:
  const ::gobgpapi::AsSegment& segments(int index) const;
  ::gobgpapi::AsSegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.As4PathAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment > segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class As4AggregatorAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.As4AggregatorAttribute) */ {
 public:
  As4AggregatorAttribute();
  virtual ~As4AggregatorAttribute();

  As4AggregatorAttribute(const As4AggregatorAttribute& from);
  As4AggregatorAttribute(As4AggregatorAttribute&& from) noexcept
    : As4AggregatorAttribute() {
    *this = ::std::move(from);
  }

  inline As4AggregatorAttribute& operator=(const As4AggregatorAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline As4AggregatorAttribute& operator=(As4AggregatorAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const As4AggregatorAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const As4AggregatorAttribute* internal_default_instance() {
    return reinterpret_cast<const As4AggregatorAttribute*>(
               &_As4AggregatorAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(As4AggregatorAttribute& a, As4AggregatorAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(As4AggregatorAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline As4AggregatorAttribute* New() const final {
    return CreateMaybeMessage<As4AggregatorAttribute>(nullptr);
  }

  As4AggregatorAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<As4AggregatorAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const As4AggregatorAttribute& from);
  void MergeFrom(const As4AggregatorAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(As4AggregatorAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.As4AggregatorAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kAsFieldNumber = 2,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 as = 2;
  void clear_as();
  ::PROTOBUF_NAMESPACE_ID::uint32 as() const;
  void set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_as() const;
  void _internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.As4AggregatorAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 as_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class PmsiTunnelAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.PmsiTunnelAttribute) */ {
 public:
  PmsiTunnelAttribute();
  virtual ~PmsiTunnelAttribute();

  PmsiTunnelAttribute(const PmsiTunnelAttribute& from);
  PmsiTunnelAttribute(PmsiTunnelAttribute&& from) noexcept
    : PmsiTunnelAttribute() {
    *this = ::std::move(from);
  }

  inline PmsiTunnelAttribute& operator=(const PmsiTunnelAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PmsiTunnelAttribute& operator=(PmsiTunnelAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PmsiTunnelAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PmsiTunnelAttribute* internal_default_instance() {
    return reinterpret_cast<const PmsiTunnelAttribute*>(
               &_PmsiTunnelAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(PmsiTunnelAttribute& a, PmsiTunnelAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(PmsiTunnelAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PmsiTunnelAttribute* New() const final {
    return CreateMaybeMessage<PmsiTunnelAttribute>(nullptr);
  }

  PmsiTunnelAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PmsiTunnelAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PmsiTunnelAttribute& from);
  void MergeFrom(const PmsiTunnelAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmsiTunnelAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.PmsiTunnelAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 4,
    kFlagsFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLabelFieldNumber = 3,
  };
  // bytes id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 label = 3;
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::uint32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.PmsiTunnelAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVEncapsulation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TunnelEncapSubTLVEncapsulation) */ {
 public:
  TunnelEncapSubTLVEncapsulation();
  virtual ~TunnelEncapSubTLVEncapsulation();

  TunnelEncapSubTLVEncapsulation(const TunnelEncapSubTLVEncapsulation& from);
  TunnelEncapSubTLVEncapsulation(TunnelEncapSubTLVEncapsulation&& from) noexcept
    : TunnelEncapSubTLVEncapsulation() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVEncapsulation& operator=(const TunnelEncapSubTLVEncapsulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVEncapsulation& operator=(TunnelEncapSubTLVEncapsulation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVEncapsulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVEncapsulation* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVEncapsulation*>(
               &_TunnelEncapSubTLVEncapsulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(TunnelEncapSubTLVEncapsulation& a, TunnelEncapSubTLVEncapsulation& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVEncapsulation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVEncapsulation* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVEncapsulation>(nullptr);
  }

  TunnelEncapSubTLVEncapsulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVEncapsulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVEncapsulation& from);
  void MergeFrom(const TunnelEncapSubTLVEncapsulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVEncapsulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TunnelEncapSubTLVEncapsulation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // bytes cookie = 2;
  void clear_cookie();
  const std::string& cookie() const;
  void set_cookie(const std::string& value);
  void set_cookie(std::string&& value);
  void set_cookie(const char* value);
  void set_cookie(const void* value, size_t size);
  std::string* mutable_cookie();
  std::string* release_cookie();
  void set_allocated_cookie(std::string* cookie);
  private:
  const std::string& _internal_cookie() const;
  void _internal_set_cookie(const std::string& value);
  std::string* _internal_mutable_cookie();
  public:

  // uint32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TunnelEncapSubTLVEncapsulation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cookie_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVProtocol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TunnelEncapSubTLVProtocol) */ {
 public:
  TunnelEncapSubTLVProtocol();
  virtual ~TunnelEncapSubTLVProtocol();

  TunnelEncapSubTLVProtocol(const TunnelEncapSubTLVProtocol& from);
  TunnelEncapSubTLVProtocol(TunnelEncapSubTLVProtocol&& from) noexcept
    : TunnelEncapSubTLVProtocol() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVProtocol& operator=(const TunnelEncapSubTLVProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVProtocol& operator=(TunnelEncapSubTLVProtocol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVProtocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVProtocol* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVProtocol*>(
               &_TunnelEncapSubTLVProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(TunnelEncapSubTLVProtocol& a, TunnelEncapSubTLVProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVProtocol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVProtocol* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVProtocol>(nullptr);
  }

  TunnelEncapSubTLVProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVProtocol& from);
  void MergeFrom(const TunnelEncapSubTLVProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TunnelEncapSubTLVProtocol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 1,
  };
  // uint32 protocol = 1;
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol() const;
  void _internal_set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TunnelEncapSubTLVProtocol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVColor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TunnelEncapSubTLVColor) */ {
 public:
  TunnelEncapSubTLVColor();
  virtual ~TunnelEncapSubTLVColor();

  TunnelEncapSubTLVColor(const TunnelEncapSubTLVColor& from);
  TunnelEncapSubTLVColor(TunnelEncapSubTLVColor&& from) noexcept
    : TunnelEncapSubTLVColor() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVColor& operator=(const TunnelEncapSubTLVColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVColor& operator=(TunnelEncapSubTLVColor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVColor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVColor* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVColor*>(
               &_TunnelEncapSubTLVColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(TunnelEncapSubTLVColor& a, TunnelEncapSubTLVColor& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVColor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVColor* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVColor>(nullptr);
  }

  TunnelEncapSubTLVColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVColor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVColor& from);
  void MergeFrom(const TunnelEncapSubTLVColor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TunnelEncapSubTLVColor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // uint32 color = 1;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TunnelEncapSubTLVColor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapSubTLVUnknown :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TunnelEncapSubTLVUnknown) */ {
 public:
  TunnelEncapSubTLVUnknown();
  virtual ~TunnelEncapSubTLVUnknown();

  TunnelEncapSubTLVUnknown(const TunnelEncapSubTLVUnknown& from);
  TunnelEncapSubTLVUnknown(TunnelEncapSubTLVUnknown&& from) noexcept
    : TunnelEncapSubTLVUnknown() {
    *this = ::std::move(from);
  }

  inline TunnelEncapSubTLVUnknown& operator=(const TunnelEncapSubTLVUnknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapSubTLVUnknown& operator=(TunnelEncapSubTLVUnknown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapSubTLVUnknown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapSubTLVUnknown* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapSubTLVUnknown*>(
               &_TunnelEncapSubTLVUnknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(TunnelEncapSubTLVUnknown& a, TunnelEncapSubTLVUnknown& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapSubTLVUnknown* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapSubTLVUnknown* New() const final {
    return CreateMaybeMessage<TunnelEncapSubTLVUnknown>(nullptr);
  }

  TunnelEncapSubTLVUnknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapSubTLVUnknown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapSubTLVUnknown& from);
  void MergeFrom(const TunnelEncapSubTLVUnknown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapSubTLVUnknown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TunnelEncapSubTLVUnknown";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TunnelEncapSubTLVUnknown)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapTLV :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TunnelEncapTLV) */ {
 public:
  TunnelEncapTLV();
  virtual ~TunnelEncapTLV();

  TunnelEncapTLV(const TunnelEncapTLV& from);
  TunnelEncapTLV(TunnelEncapTLV&& from) noexcept
    : TunnelEncapTLV() {
    *this = ::std::move(from);
  }

  inline TunnelEncapTLV& operator=(const TunnelEncapTLV& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapTLV& operator=(TunnelEncapTLV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapTLV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapTLV* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapTLV*>(
               &_TunnelEncapTLV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(TunnelEncapTLV& a, TunnelEncapTLV& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapTLV* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapTLV* New() const final {
    return CreateMaybeMessage<TunnelEncapTLV>(nullptr);
  }

  TunnelEncapTLV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapTLV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapTLV& from);
  void MergeFrom(const TunnelEncapTLV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapTLV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TunnelEncapTLV";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .google.protobuf.Any tlvs = 2;
  int tlvs_size() const;
  private:
  int _internal_tlvs_size() const;
  public:
  void clear_tlvs();
  PROTOBUF_NAMESPACE_ID::Any* mutable_tlvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_tlvs();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_tlvs();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_tlvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      tlvs() const;

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.TunnelEncapTLV)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > tlvs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class TunnelEncapAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.TunnelEncapAttribute) */ {
 public:
  TunnelEncapAttribute();
  virtual ~TunnelEncapAttribute();

  TunnelEncapAttribute(const TunnelEncapAttribute& from);
  TunnelEncapAttribute(TunnelEncapAttribute&& from) noexcept
    : TunnelEncapAttribute() {
    *this = ::std::move(from);
  }

  inline TunnelEncapAttribute& operator=(const TunnelEncapAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelEncapAttribute& operator=(TunnelEncapAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TunnelEncapAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TunnelEncapAttribute* internal_default_instance() {
    return reinterpret_cast<const TunnelEncapAttribute*>(
               &_TunnelEncapAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TunnelEncapAttribute& a, TunnelEncapAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelEncapAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TunnelEncapAttribute* New() const final {
    return CreateMaybeMessage<TunnelEncapAttribute>(nullptr);
  }

  TunnelEncapAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TunnelEncapAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TunnelEncapAttribute& from);
  void MergeFrom(const TunnelEncapAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelEncapAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.TunnelEncapAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvsFieldNumber = 1,
  };
  // repeated .gobgpapi.TunnelEncapTLV tlvs = 1;
  int tlvs_size() const;
  private:
  int _internal_tlvs_size() const;
  public:
  void clear_tlvs();
  ::gobgpapi::TunnelEncapTLV* mutable_tlvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TunnelEncapTLV >*
      mutable_tlvs();
  private:
  const ::gobgpapi::TunnelEncapTLV& _internal_tlvs(int index) const;
  ::gobgpapi::TunnelEncapTLV* _internal_add_tlvs();
  public:
  const ::gobgpapi::TunnelEncapTLV& tlvs(int index) const;
  ::gobgpapi::TunnelEncapTLV* add_tlvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TunnelEncapTLV >&
      tlvs() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.TunnelEncapAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TunnelEncapTLV > tlvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IPv6AddressSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IPv6AddressSpecificExtended) */ {
 public:
  IPv6AddressSpecificExtended();
  virtual ~IPv6AddressSpecificExtended();

  IPv6AddressSpecificExtended(const IPv6AddressSpecificExtended& from);
  IPv6AddressSpecificExtended(IPv6AddressSpecificExtended&& from) noexcept
    : IPv6AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline IPv6AddressSpecificExtended& operator=(const IPv6AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPv6AddressSpecificExtended& operator=(IPv6AddressSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPv6AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPv6AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const IPv6AddressSpecificExtended*>(
               &_IPv6AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(IPv6AddressSpecificExtended& a, IPv6AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(IPv6AddressSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPv6AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<IPv6AddressSpecificExtended>(nullptr);
  }

  IPv6AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPv6AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPv6AddressSpecificExtended& from);
  void MergeFrom(const IPv6AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPv6AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.IPv6AddressSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 3,
    kIsTransitiveFieldNumber = 1,
    kSubTypeFieldNumber = 2,
    kLocalAdminFieldNumber = 4,
  };
  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool is_transitive = 1;
  void clear_is_transitive();
  bool is_transitive() const;
  void set_is_transitive(bool value);
  private:
  bool _internal_is_transitive() const;
  void _internal_set_is_transitive(bool value);
  public:

  // uint32 sub_type = 2;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_admin = 4;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.IPv6AddressSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  bool is_transitive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class RedirectIPv6AddressSpecificExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.RedirectIPv6AddressSpecificExtended) */ {
 public:
  RedirectIPv6AddressSpecificExtended();
  virtual ~RedirectIPv6AddressSpecificExtended();

  RedirectIPv6AddressSpecificExtended(const RedirectIPv6AddressSpecificExtended& from);
  RedirectIPv6AddressSpecificExtended(RedirectIPv6AddressSpecificExtended&& from) noexcept
    : RedirectIPv6AddressSpecificExtended() {
    *this = ::std::move(from);
  }

  inline RedirectIPv6AddressSpecificExtended& operator=(const RedirectIPv6AddressSpecificExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedirectIPv6AddressSpecificExtended& operator=(RedirectIPv6AddressSpecificExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedirectIPv6AddressSpecificExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedirectIPv6AddressSpecificExtended* internal_default_instance() {
    return reinterpret_cast<const RedirectIPv6AddressSpecificExtended*>(
               &_RedirectIPv6AddressSpecificExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(RedirectIPv6AddressSpecificExtended& a, RedirectIPv6AddressSpecificExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(RedirectIPv6AddressSpecificExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedirectIPv6AddressSpecificExtended* New() const final {
    return CreateMaybeMessage<RedirectIPv6AddressSpecificExtended>(nullptr);
  }

  RedirectIPv6AddressSpecificExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedirectIPv6AddressSpecificExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedirectIPv6AddressSpecificExtended& from);
  void MergeFrom(const RedirectIPv6AddressSpecificExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedirectIPv6AddressSpecificExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.RedirectIPv6AddressSpecificExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kLocalAdminFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 local_admin = 2;
  void clear_local_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin() const;
  void set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_admin() const;
  void _internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.RedirectIPv6AddressSpecificExtended)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_admin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class IP6ExtendedCommunitiesAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.IP6ExtendedCommunitiesAttribute) */ {
 public:
  IP6ExtendedCommunitiesAttribute();
  virtual ~IP6ExtendedCommunitiesAttribute();

  IP6ExtendedCommunitiesAttribute(const IP6ExtendedCommunitiesAttribute& from);
  IP6ExtendedCommunitiesAttribute(IP6ExtendedCommunitiesAttribute&& from) noexcept
    : IP6ExtendedCommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline IP6ExtendedCommunitiesAttribute& operator=(const IP6ExtendedCommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline IP6ExtendedCommunitiesAttribute& operator=(IP6ExtendedCommunitiesAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IP6ExtendedCommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IP6ExtendedCommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const IP6ExtendedCommunitiesAttribute*>(
               &_IP6ExtendedCommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(IP6ExtendedCommunitiesAttribute& a, IP6ExtendedCommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(IP6ExtendedCommunitiesAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IP6ExtendedCommunitiesAttribute* New() const final {
    return CreateMaybeMessage<IP6ExtendedCommunitiesAttribute>(nullptr);
  }

  IP6ExtendedCommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IP6ExtendedCommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IP6ExtendedCommunitiesAttribute& from);
  void MergeFrom(const IP6ExtendedCommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IP6ExtendedCommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.IP6ExtendedCommunitiesAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  PROTOBUF_NAMESPACE_ID::Any* mutable_communities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_communities();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_communities();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& communities(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_communities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      communities() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.IP6ExtendedCommunitiesAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > communities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AigpTLVIGPMetric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AigpTLVIGPMetric) */ {
 public:
  AigpTLVIGPMetric();
  virtual ~AigpTLVIGPMetric();

  AigpTLVIGPMetric(const AigpTLVIGPMetric& from);
  AigpTLVIGPMetric(AigpTLVIGPMetric&& from) noexcept
    : AigpTLVIGPMetric() {
    *this = ::std::move(from);
  }

  inline AigpTLVIGPMetric& operator=(const AigpTLVIGPMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline AigpTLVIGPMetric& operator=(AigpTLVIGPMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AigpTLVIGPMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AigpTLVIGPMetric* internal_default_instance() {
    return reinterpret_cast<const AigpTLVIGPMetric*>(
               &_AigpTLVIGPMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(AigpTLVIGPMetric& a, AigpTLVIGPMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(AigpTLVIGPMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AigpTLVIGPMetric* New() const final {
    return CreateMaybeMessage<AigpTLVIGPMetric>(nullptr);
  }

  AigpTLVIGPMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AigpTLVIGPMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AigpTLVIGPMetric& from);
  void MergeFrom(const AigpTLVIGPMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AigpTLVIGPMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AigpTLVIGPMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 1,
  };
  // uint64 metric = 1;
  void clear_metric();
  ::PROTOBUF_NAMESPACE_ID::uint64 metric() const;
  void set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_metric() const;
  void _internal_set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AigpTLVIGPMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 metric_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AigpTLVUnknown :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AigpTLVUnknown) */ {
 public:
  AigpTLVUnknown();
  virtual ~AigpTLVUnknown();

  AigpTLVUnknown(const AigpTLVUnknown& from);
  AigpTLVUnknown(AigpTLVUnknown&& from) noexcept
    : AigpTLVUnknown() {
    *this = ::std::move(from);
  }

  inline AigpTLVUnknown& operator=(const AigpTLVUnknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline AigpTLVUnknown& operator=(AigpTLVUnknown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AigpTLVUnknown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AigpTLVUnknown* internal_default_instance() {
    return reinterpret_cast<const AigpTLVUnknown*>(
               &_AigpTLVUnknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(AigpTLVUnknown& a, AigpTLVUnknown& b) {
    a.Swap(&b);
  }
  inline void Swap(AigpTLVUnknown* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AigpTLVUnknown* New() const final {
    return CreateMaybeMessage<AigpTLVUnknown>(nullptr);
  }

  AigpTLVUnknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AigpTLVUnknown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AigpTLVUnknown& from);
  void MergeFrom(const AigpTLVUnknown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AigpTLVUnknown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AigpTLVUnknown";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.AigpTLVUnknown)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class AigpAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.AigpAttribute) */ {
 public:
  AigpAttribute();
  virtual ~AigpAttribute();

  AigpAttribute(const AigpAttribute& from);
  AigpAttribute(AigpAttribute&& from) noexcept
    : AigpAttribute() {
    *this = ::std::move(from);
  }

  inline AigpAttribute& operator=(const AigpAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AigpAttribute& operator=(AigpAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AigpAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AigpAttribute* internal_default_instance() {
    return reinterpret_cast<const AigpAttribute*>(
               &_AigpAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(AigpAttribute& a, AigpAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AigpAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AigpAttribute* New() const final {
    return CreateMaybeMessage<AigpAttribute>(nullptr);
  }

  AigpAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AigpAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AigpAttribute& from);
  void MergeFrom(const AigpAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AigpAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.AigpAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTlvsFieldNumber = 1,
  };
  // repeated .google.protobuf.Any tlvs = 1;
  int tlvs_size() const;
  private:
  int _internal_tlvs_size() const;
  public:
  void clear_tlvs();
  PROTOBUF_NAMESPACE_ID::Any* mutable_tlvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_tlvs();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_tlvs();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& tlvs(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_tlvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      tlvs() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.AigpAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > tlvs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LargeCommunity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LargeCommunity) */ {
 public:
  LargeCommunity();
  virtual ~LargeCommunity();

  LargeCommunity(const LargeCommunity& from);
  LargeCommunity(LargeCommunity&& from) noexcept
    : LargeCommunity() {
    *this = ::std::move(from);
  }

  inline LargeCommunity& operator=(const LargeCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeCommunity& operator=(LargeCommunity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LargeCommunity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LargeCommunity* internal_default_instance() {
    return reinterpret_cast<const LargeCommunity*>(
               &_LargeCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(LargeCommunity& a, LargeCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeCommunity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeCommunity* New() const final {
    return CreateMaybeMessage<LargeCommunity>(nullptr);
  }

  LargeCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeCommunity& from);
  void MergeFrom(const LargeCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LargeCommunity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalAdminFieldNumber = 1,
    kLocalData1FieldNumber = 2,
    kLocalData2FieldNumber = 3,
  };
  // uint32 global_admin = 1;
  void clear_global_admin();
  ::PROTOBUF_NAMESPACE_ID::uint32 global_admin() const;
  void set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_global_admin() const;
  void _internal_set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_data1 = 2;
  void clear_local_data1();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data1() const;
  void set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_data1() const;
  void _internal_set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 local_data2 = 3;
  void clear_local_data2();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data2() const;
  void set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_data2() const;
  void _internal_set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LargeCommunity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 global_admin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_data2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LargeCommunitiesAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LargeCommunitiesAttribute) */ {
 public:
  LargeCommunitiesAttribute();
  virtual ~LargeCommunitiesAttribute();

  LargeCommunitiesAttribute(const LargeCommunitiesAttribute& from);
  LargeCommunitiesAttribute(LargeCommunitiesAttribute&& from) noexcept
    : LargeCommunitiesAttribute() {
    *this = ::std::move(from);
  }

  inline LargeCommunitiesAttribute& operator=(const LargeCommunitiesAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline LargeCommunitiesAttribute& operator=(LargeCommunitiesAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LargeCommunitiesAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LargeCommunitiesAttribute* internal_default_instance() {
    return reinterpret_cast<const LargeCommunitiesAttribute*>(
               &_LargeCommunitiesAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(LargeCommunitiesAttribute& a, LargeCommunitiesAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(LargeCommunitiesAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LargeCommunitiesAttribute* New() const final {
    return CreateMaybeMessage<LargeCommunitiesAttribute>(nullptr);
  }

  LargeCommunitiesAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LargeCommunitiesAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LargeCommunitiesAttribute& from);
  void MergeFrom(const LargeCommunitiesAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LargeCommunitiesAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LargeCommunitiesAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunitiesFieldNumber = 1,
  };
  // repeated .gobgpapi.LargeCommunity communities = 1;
  int communities_size() const;
  private:
  int _internal_communities_size() const;
  public:
  void clear_communities();
  ::gobgpapi::LargeCommunity* mutable_communities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LargeCommunity >*
      mutable_communities();
  private:
  const ::gobgpapi::LargeCommunity& _internal_communities(int index) const;
  ::gobgpapi::LargeCommunity* _internal_add_communities();
  public:
  const ::gobgpapi::LargeCommunity& communities(int index) const;
  ::gobgpapi::LargeCommunity* add_communities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LargeCommunity >&
      communities() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.LargeCommunitiesAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LargeCommunity > communities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsNodeFlags :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsNodeFlags) */ {
 public:
  LsNodeFlags();
  virtual ~LsNodeFlags();

  LsNodeFlags(const LsNodeFlags& from);
  LsNodeFlags(LsNodeFlags&& from) noexcept
    : LsNodeFlags() {
    *this = ::std::move(from);
  }

  inline LsNodeFlags& operator=(const LsNodeFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsNodeFlags& operator=(LsNodeFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsNodeFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsNodeFlags* internal_default_instance() {
    return reinterpret_cast<const LsNodeFlags*>(
               &_LsNodeFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(LsNodeFlags& a, LsNodeFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(LsNodeFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsNodeFlags* New() const final {
    return CreateMaybeMessage<LsNodeFlags>(nullptr);
  }

  LsNodeFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsNodeFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsNodeFlags& from);
  void MergeFrom(const LsNodeFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsNodeFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsNodeFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverloadFieldNumber = 1,
    kAttachedFieldNumber = 2,
    kExternalFieldNumber = 3,
    kAbrFieldNumber = 4,
    kRouterFieldNumber = 5,
    kV6FieldNumber = 6,
  };
  // bool overload = 1;
  void clear_overload();
  bool overload() const;
  void set_overload(bool value);
  private:
  bool _internal_overload() const;
  void _internal_set_overload(bool value);
  public:

  // bool attached = 2;
  void clear_attached();
  bool attached() const;
  void set_attached(bool value);
  private:
  bool _internal_attached() const;
  void _internal_set_attached(bool value);
  public:

  // bool external = 3;
  void clear_external();
  bool external() const;
  void set_external(bool value);
  private:
  bool _internal_external() const;
  void _internal_set_external(bool value);
  public:

  // bool abr = 4;
  void clear_abr();
  bool abr() const;
  void set_abr(bool value);
  private:
  bool _internal_abr() const;
  void _internal_set_abr(bool value);
  public:

  // bool router = 5;
  void clear_router();
  bool router() const;
  void set_router(bool value);
  private:
  bool _internal_router() const;
  void _internal_set_router(bool value);
  public:

  // bool v6 = 6;
  void clear_v6();
  bool v6() const;
  void set_v6(bool value);
  private:
  bool _internal_v6() const;
  void _internal_set_v6(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsNodeFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool overload_;
  bool attached_;
  bool external_;
  bool abr_;
  bool router_;
  bool v6_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsIGPFlags :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsIGPFlags) */ {
 public:
  LsIGPFlags();
  virtual ~LsIGPFlags();

  LsIGPFlags(const LsIGPFlags& from);
  LsIGPFlags(LsIGPFlags&& from) noexcept
    : LsIGPFlags() {
    *this = ::std::move(from);
  }

  inline LsIGPFlags& operator=(const LsIGPFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsIGPFlags& operator=(LsIGPFlags&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsIGPFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsIGPFlags* internal_default_instance() {
    return reinterpret_cast<const LsIGPFlags*>(
               &_LsIGPFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(LsIGPFlags& a, LsIGPFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(LsIGPFlags* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsIGPFlags* New() const final {
    return CreateMaybeMessage<LsIGPFlags>(nullptr);
  }

  LsIGPFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsIGPFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsIGPFlags& from);
  void MergeFrom(const LsIGPFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsIGPFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsIGPFlags";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownFieldNumber = 1,
    kNoUnicastFieldNumber = 2,
    kLocalAddressFieldNumber = 3,
    kPropagateNssaFieldNumber = 4,
  };
  // bool down = 1;
  void clear_down();
  bool down() const;
  void set_down(bool value);
  private:
  bool _internal_down() const;
  void _internal_set_down(bool value);
  public:

  // bool no_unicast = 2;
  void clear_no_unicast();
  bool no_unicast() const;
  void set_no_unicast(bool value);
  private:
  bool _internal_no_unicast() const;
  void _internal_set_no_unicast(bool value);
  public:

  // bool local_address = 3;
  void clear_local_address();
  bool local_address() const;
  void set_local_address(bool value);
  private:
  bool _internal_local_address() const;
  void _internal_set_local_address(bool value);
  public:

  // bool propagate_nssa = 4;
  void clear_propagate_nssa();
  bool propagate_nssa() const;
  void set_propagate_nssa(bool value);
  private:
  bool _internal_propagate_nssa() const;
  void _internal_set_propagate_nssa(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsIGPFlags)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool down_;
  bool no_unicast_;
  bool local_address_;
  bool propagate_nssa_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsSrRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsSrRange) */ {
 public:
  LsSrRange();
  virtual ~LsSrRange();

  LsSrRange(const LsSrRange& from);
  LsSrRange(LsSrRange&& from) noexcept
    : LsSrRange() {
    *this = ::std::move(from);
  }

  inline LsSrRange& operator=(const LsSrRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsSrRange& operator=(LsSrRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsSrRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsSrRange* internal_default_instance() {
    return reinterpret_cast<const LsSrRange*>(
               &_LsSrRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(LsSrRange& a, LsSrRange& b) {
    a.Swap(&b);
  }
  inline void Swap(LsSrRange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsSrRange* New() const final {
    return CreateMaybeMessage<LsSrRange>(nullptr);
  }

  LsSrRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsSrRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsSrRange& from);
  void MergeFrom(const LsSrRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsSrRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsSrRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // uint32 begin = 1;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint32 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsSrRange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsSrCapabilities :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsSrCapabilities) */ {
 public:
  LsSrCapabilities();
  virtual ~LsSrCapabilities();

  LsSrCapabilities(const LsSrCapabilities& from);
  LsSrCapabilities(LsSrCapabilities&& from) noexcept
    : LsSrCapabilities() {
    *this = ::std::move(from);
  }

  inline LsSrCapabilities& operator=(const LsSrCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsSrCapabilities& operator=(LsSrCapabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsSrCapabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsSrCapabilities* internal_default_instance() {
    return reinterpret_cast<const LsSrCapabilities*>(
               &_LsSrCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(LsSrCapabilities& a, LsSrCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(LsSrCapabilities* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsSrCapabilities* New() const final {
    return CreateMaybeMessage<LsSrCapabilities>(nullptr);
  }

  LsSrCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsSrCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsSrCapabilities& from);
  void MergeFrom(const LsSrCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsSrCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsSrCapabilities";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 3,
    kIpv4SupportedFieldNumber = 1,
    kIpv6SupportedFieldNumber = 2,
  };
  // repeated .gobgpapi.LsSrRange ranges = 3;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::gobgpapi::LsSrRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >*
      mutable_ranges();
  private:
  const ::gobgpapi::LsSrRange& _internal_ranges(int index) const;
  ::gobgpapi::LsSrRange* _internal_add_ranges();
  public:
  const ::gobgpapi::LsSrRange& ranges(int index) const;
  ::gobgpapi::LsSrRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >&
      ranges() const;

  // bool ipv4_supported = 1;
  void clear_ipv4_supported();
  bool ipv4_supported() const;
  void set_ipv4_supported(bool value);
  private:
  bool _internal_ipv4_supported() const;
  void _internal_set_ipv4_supported(bool value);
  public:

  // bool ipv6_supported = 2;
  void clear_ipv6_supported();
  bool ipv6_supported() const;
  void set_ipv6_supported(bool value);
  private:
  bool _internal_ipv6_supported() const;
  void _internal_set_ipv6_supported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsSrCapabilities)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange > ranges_;
  bool ipv4_supported_;
  bool ipv6_supported_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsSrLocalBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsSrLocalBlock) */ {
 public:
  LsSrLocalBlock();
  virtual ~LsSrLocalBlock();

  LsSrLocalBlock(const LsSrLocalBlock& from);
  LsSrLocalBlock(LsSrLocalBlock&& from) noexcept
    : LsSrLocalBlock() {
    *this = ::std::move(from);
  }

  inline LsSrLocalBlock& operator=(const LsSrLocalBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsSrLocalBlock& operator=(LsSrLocalBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsSrLocalBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsSrLocalBlock* internal_default_instance() {
    return reinterpret_cast<const LsSrLocalBlock*>(
               &_LsSrLocalBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(LsSrLocalBlock& a, LsSrLocalBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(LsSrLocalBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsSrLocalBlock* New() const final {
    return CreateMaybeMessage<LsSrLocalBlock>(nullptr);
  }

  LsSrLocalBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsSrLocalBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsSrLocalBlock& from);
  void MergeFrom(const LsSrLocalBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsSrLocalBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsSrLocalBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 1,
  };
  // repeated .gobgpapi.LsSrRange ranges = 1;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  ::gobgpapi::LsSrRange* mutable_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >*
      mutable_ranges();
  private:
  const ::gobgpapi::LsSrRange& _internal_ranges(int index) const;
  ::gobgpapi::LsSrRange* _internal_add_ranges();
  public:
  const ::gobgpapi::LsSrRange& ranges(int index) const;
  ::gobgpapi::LsSrRange* add_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >&
      ranges() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.LsSrLocalBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange > ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttributeNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsAttributeNode) */ {
 public:
  LsAttributeNode();
  virtual ~LsAttributeNode();

  LsAttributeNode(const LsAttributeNode& from);
  LsAttributeNode(LsAttributeNode&& from) noexcept
    : LsAttributeNode() {
    *this = ::std::move(from);
  }

  inline LsAttributeNode& operator=(const LsAttributeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttributeNode& operator=(LsAttributeNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttributeNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttributeNode* internal_default_instance() {
    return reinterpret_cast<const LsAttributeNode*>(
               &_LsAttributeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(LsAttributeNode& a, LsAttributeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttributeNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttributeNode* New() const final {
    return CreateMaybeMessage<LsAttributeNode>(nullptr);
  }

  LsAttributeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttributeNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttributeNode& from);
  void MergeFrom(const LsAttributeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttributeNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsAttributeNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocalRouterIdFieldNumber = 3,
    kLocalRouterIdV6FieldNumber = 4,
    kIsisAreaFieldNumber = 5,
    kOpaqueFieldNumber = 6,
    kSrAlgorithmsFieldNumber = 8,
    kFlagsFieldNumber = 2,
    kSrCapabilitiesFieldNumber = 7,
    kSrLocalBlockFieldNumber = 9,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string local_router_id = 3;
  void clear_local_router_id();
  const std::string& local_router_id() const;
  void set_local_router_id(const std::string& value);
  void set_local_router_id(std::string&& value);
  void set_local_router_id(const char* value);
  void set_local_router_id(const char* value, size_t size);
  std::string* mutable_local_router_id();
  std::string* release_local_router_id();
  void set_allocated_local_router_id(std::string* local_router_id);
  private:
  const std::string& _internal_local_router_id() const;
  void _internal_set_local_router_id(const std::string& value);
  std::string* _internal_mutable_local_router_id();
  public:

  // string local_router_id_v6 = 4;
  void clear_local_router_id_v6();
  const std::string& local_router_id_v6() const;
  void set_local_router_id_v6(const std::string& value);
  void set_local_router_id_v6(std::string&& value);
  void set_local_router_id_v6(const char* value);
  void set_local_router_id_v6(const char* value, size_t size);
  std::string* mutable_local_router_id_v6();
  std::string* release_local_router_id_v6();
  void set_allocated_local_router_id_v6(std::string* local_router_id_v6);
  private:
  const std::string& _internal_local_router_id_v6() const;
  void _internal_set_local_router_id_v6(const std::string& value);
  std::string* _internal_mutable_local_router_id_v6();
  public:

  // bytes isis_area = 5;
  void clear_isis_area();
  const std::string& isis_area() const;
  void set_isis_area(const std::string& value);
  void set_isis_area(std::string&& value);
  void set_isis_area(const char* value);
  void set_isis_area(const void* value, size_t size);
  std::string* mutable_isis_area();
  std::string* release_isis_area();
  void set_allocated_isis_area(std::string* isis_area);
  private:
  const std::string& _internal_isis_area() const;
  void _internal_set_isis_area(const std::string& value);
  std::string* _internal_mutable_isis_area();
  public:

  // bytes opaque = 6;
  void clear_opaque();
  const std::string& opaque() const;
  void set_opaque(const std::string& value);
  void set_opaque(std::string&& value);
  void set_opaque(const char* value);
  void set_opaque(const void* value, size_t size);
  std::string* mutable_opaque();
  std::string* release_opaque();
  void set_allocated_opaque(std::string* opaque);
  private:
  const std::string& _internal_opaque() const;
  void _internal_set_opaque(const std::string& value);
  std::string* _internal_mutable_opaque();
  public:

  // bytes sr_algorithms = 8;
  void clear_sr_algorithms();
  const std::string& sr_algorithms() const;
  void set_sr_algorithms(const std::string& value);
  void set_sr_algorithms(std::string&& value);
  void set_sr_algorithms(const char* value);
  void set_sr_algorithms(const void* value, size_t size);
  std::string* mutable_sr_algorithms();
  std::string* release_sr_algorithms();
  void set_allocated_sr_algorithms(std::string* sr_algorithms);
  private:
  const std::string& _internal_sr_algorithms() const;
  void _internal_set_sr_algorithms(const std::string& value);
  std::string* _internal_mutable_sr_algorithms();
  public:

  // .gobgpapi.LsNodeFlags flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const ::gobgpapi::LsNodeFlags& flags() const;
  ::gobgpapi::LsNodeFlags* release_flags();
  ::gobgpapi::LsNodeFlags* mutable_flags();
  void set_allocated_flags(::gobgpapi::LsNodeFlags* flags);
  private:
  const ::gobgpapi::LsNodeFlags& _internal_flags() const;
  ::gobgpapi::LsNodeFlags* _internal_mutable_flags();
  public:

  // .gobgpapi.LsSrCapabilities sr_capabilities = 7;
  bool has_sr_capabilities() const;
  private:
  bool _internal_has_sr_capabilities() const;
  public:
  void clear_sr_capabilities();
  const ::gobgpapi::LsSrCapabilities& sr_capabilities() const;
  ::gobgpapi::LsSrCapabilities* release_sr_capabilities();
  ::gobgpapi::LsSrCapabilities* mutable_sr_capabilities();
  void set_allocated_sr_capabilities(::gobgpapi::LsSrCapabilities* sr_capabilities);
  private:
  const ::gobgpapi::LsSrCapabilities& _internal_sr_capabilities() const;
  ::gobgpapi::LsSrCapabilities* _internal_mutable_sr_capabilities();
  public:

  // .gobgpapi.LsSrLocalBlock sr_local_block = 9;
  bool has_sr_local_block() const;
  private:
  bool _internal_has_sr_local_block() const;
  public:
  void clear_sr_local_block();
  const ::gobgpapi::LsSrLocalBlock& sr_local_block() const;
  ::gobgpapi::LsSrLocalBlock* release_sr_local_block();
  ::gobgpapi::LsSrLocalBlock* mutable_sr_local_block();
  void set_allocated_sr_local_block(::gobgpapi::LsSrLocalBlock* sr_local_block);
  private:
  const ::gobgpapi::LsSrLocalBlock& _internal_sr_local_block() const;
  ::gobgpapi::LsSrLocalBlock* _internal_mutable_sr_local_block();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsAttributeNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_v6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isis_area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sr_algorithms_;
  ::gobgpapi::LsNodeFlags* flags_;
  ::gobgpapi::LsSrCapabilities* sr_capabilities_;
  ::gobgpapi::LsSrLocalBlock* sr_local_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttributeLink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsAttributeLink) */ {
 public:
  LsAttributeLink();
  virtual ~LsAttributeLink();

  LsAttributeLink(const LsAttributeLink& from);
  LsAttributeLink(LsAttributeLink&& from) noexcept
    : LsAttributeLink() {
    *this = ::std::move(from);
  }

  inline LsAttributeLink& operator=(const LsAttributeLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttributeLink& operator=(LsAttributeLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttributeLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttributeLink* internal_default_instance() {
    return reinterpret_cast<const LsAttributeLink*>(
               &_LsAttributeLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(LsAttributeLink& a, LsAttributeLink& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttributeLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttributeLink* New() const final {
    return CreateMaybeMessage<LsAttributeLink>(nullptr);
  }

  LsAttributeLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttributeLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttributeLink& from);
  void MergeFrom(const LsAttributeLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttributeLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsAttributeLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnreservedBandwidthFieldNumber = 12,
    kSrlgsFieldNumber = 14,
    kNameFieldNumber = 1,
    kLocalRouterIdFieldNumber = 2,
    kLocalRouterIdV6FieldNumber = 3,
    kRemoteRouterIdFieldNumber = 4,
    kRemoteRouterIdV6FieldNumber = 5,
    kOpaqueFieldNumber = 9,
    kAdminGroupFieldNumber = 6,
    kDefaultTeMetricFieldNumber = 7,
    kIgpMetricFieldNumber = 8,
    kBandwidthFieldNumber = 10,
    kReservableBandwidthFieldNumber = 11,
    kSrAdjacencySidFieldNumber = 13,
  };
  // repeated float unreserved_bandwidth = 12;
  int unreserved_bandwidth_size() const;
  private:
  int _internal_unreserved_bandwidth_size() const;
  public:
  void clear_unreserved_bandwidth();
  private:
  float _internal_unreserved_bandwidth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_unreserved_bandwidth() const;
  void _internal_add_unreserved_bandwidth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_unreserved_bandwidth();
  public:
  float unreserved_bandwidth(int index) const;
  void set_unreserved_bandwidth(int index, float value);
  void add_unreserved_bandwidth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      unreserved_bandwidth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_unreserved_bandwidth();

  // repeated uint32 srlgs = 14;
  int srlgs_size() const;
  private:
  int _internal_srlgs_size() const;
  public:
  void clear_srlgs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srlgs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_srlgs() const;
  void _internal_add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_srlgs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 srlgs(int index) const;
  void set_srlgs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      srlgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_srlgs();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string local_router_id = 2;
  void clear_local_router_id();
  const std::string& local_router_id() const;
  void set_local_router_id(const std::string& value);
  void set_local_router_id(std::string&& value);
  void set_local_router_id(const char* value);
  void set_local_router_id(const char* value, size_t size);
  std::string* mutable_local_router_id();
  std::string* release_local_router_id();
  void set_allocated_local_router_id(std::string* local_router_id);
  private:
  const std::string& _internal_local_router_id() const;
  void _internal_set_local_router_id(const std::string& value);
  std::string* _internal_mutable_local_router_id();
  public:

  // string local_router_id_v6 = 3;
  void clear_local_router_id_v6();
  const std::string& local_router_id_v6() const;
  void set_local_router_id_v6(const std::string& value);
  void set_local_router_id_v6(std::string&& value);
  void set_local_router_id_v6(const char* value);
  void set_local_router_id_v6(const char* value, size_t size);
  std::string* mutable_local_router_id_v6();
  std::string* release_local_router_id_v6();
  void set_allocated_local_router_id_v6(std::string* local_router_id_v6);
  private:
  const std::string& _internal_local_router_id_v6() const;
  void _internal_set_local_router_id_v6(const std::string& value);
  std::string* _internal_mutable_local_router_id_v6();
  public:

  // string remote_router_id = 4;
  void clear_remote_router_id();
  const std::string& remote_router_id() const;
  void set_remote_router_id(const std::string& value);
  void set_remote_router_id(std::string&& value);
  void set_remote_router_id(const char* value);
  void set_remote_router_id(const char* value, size_t size);
  std::string* mutable_remote_router_id();
  std::string* release_remote_router_id();
  void set_allocated_remote_router_id(std::string* remote_router_id);
  private:
  const std::string& _internal_remote_router_id() const;
  void _internal_set_remote_router_id(const std::string& value);
  std::string* _internal_mutable_remote_router_id();
  public:

  // string remote_router_id_v6 = 5;
  void clear_remote_router_id_v6();
  const std::string& remote_router_id_v6() const;
  void set_remote_router_id_v6(const std::string& value);
  void set_remote_router_id_v6(std::string&& value);
  void set_remote_router_id_v6(const char* value);
  void set_remote_router_id_v6(const char* value, size_t size);
  std::string* mutable_remote_router_id_v6();
  std::string* release_remote_router_id_v6();
  void set_allocated_remote_router_id_v6(std::string* remote_router_id_v6);
  private:
  const std::string& _internal_remote_router_id_v6() const;
  void _internal_set_remote_router_id_v6(const std::string& value);
  std::string* _internal_mutable_remote_router_id_v6();
  public:

  // bytes opaque = 9;
  void clear_opaque();
  const std::string& opaque() const;
  void set_opaque(const std::string& value);
  void set_opaque(std::string&& value);
  void set_opaque(const char* value);
  void set_opaque(const void* value, size_t size);
  std::string* mutable_opaque();
  std::string* release_opaque();
  void set_allocated_opaque(std::string* opaque);
  private:
  const std::string& _internal_opaque() const;
  void _internal_set_opaque(const std::string& value);
  std::string* _internal_mutable_opaque();
  public:

  // uint32 admin_group = 6;
  void clear_admin_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_group() const;
  void set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_admin_group() const;
  void _internal_set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 default_te_metric = 7;
  void clear_default_te_metric();
  ::PROTOBUF_NAMESPACE_ID::uint32 default_te_metric() const;
  void set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_default_te_metric() const;
  void _internal_set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 igp_metric = 8;
  void clear_igp_metric();
  ::PROTOBUF_NAMESPACE_ID::uint32 igp_metric() const;
  void set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_igp_metric() const;
  void _internal_set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float bandwidth = 10;
  void clear_bandwidth();
  float bandwidth() const;
  void set_bandwidth(float value);
  private:
  float _internal_bandwidth() const;
  void _internal_set_bandwidth(float value);
  public:

  // float reservable_bandwidth = 11;
  void clear_reservable_bandwidth();
  float reservable_bandwidth() const;
  void set_reservable_bandwidth(float value);
  private:
  float _internal_reservable_bandwidth() const;
  void _internal_set_reservable_bandwidth(float value);
  public:

  // uint32 sr_adjacency_sid = 13;
  void clear_sr_adjacency_sid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_adjacency_sid() const;
  void set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sr_adjacency_sid() const;
  void _internal_set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsAttributeLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > unreserved_bandwidth_;
  mutable std::atomic<int> _unreserved_bandwidth_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > srlgs_;
  mutable std::atomic<int> _srlgs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_router_id_v6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_router_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_router_id_v6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_;
  ::PROTOBUF_NAMESPACE_ID::uint32 admin_group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_te_metric_;
  ::PROTOBUF_NAMESPACE_ID::uint32 igp_metric_;
  float bandwidth_;
  float reservable_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_adjacency_sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttributePrefix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsAttributePrefix) */ {
 public:
  LsAttributePrefix();
  virtual ~LsAttributePrefix();

  LsAttributePrefix(const LsAttributePrefix& from);
  LsAttributePrefix(LsAttributePrefix&& from) noexcept
    : LsAttributePrefix() {
    *this = ::std::move(from);
  }

  inline LsAttributePrefix& operator=(const LsAttributePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttributePrefix& operator=(LsAttributePrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttributePrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttributePrefix* internal_default_instance() {
    return reinterpret_cast<const LsAttributePrefix*>(
               &_LsAttributePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(LsAttributePrefix& a, LsAttributePrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttributePrefix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttributePrefix* New() const final {
    return CreateMaybeMessage<LsAttributePrefix>(nullptr);
  }

  LsAttributePrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttributePrefix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttributePrefix& from);
  void MergeFrom(const LsAttributePrefix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttributePrefix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsAttributePrefix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpaqueFieldNumber = 2,
    kIgpFlagsFieldNumber = 1,
    kSrPrefixSidFieldNumber = 3,
  };
  // bytes opaque = 2;
  void clear_opaque();
  const std::string& opaque() const;
  void set_opaque(const std::string& value);
  void set_opaque(std::string&& value);
  void set_opaque(const char* value);
  void set_opaque(const void* value, size_t size);
  std::string* mutable_opaque();
  std::string* release_opaque();
  void set_allocated_opaque(std::string* opaque);
  private:
  const std::string& _internal_opaque() const;
  void _internal_set_opaque(const std::string& value);
  std::string* _internal_mutable_opaque();
  public:

  // .gobgpapi.LsIGPFlags igp_flags = 1;
  bool has_igp_flags() const;
  private:
  bool _internal_has_igp_flags() const;
  public:
  void clear_igp_flags();
  const ::gobgpapi::LsIGPFlags& igp_flags() const;
  ::gobgpapi::LsIGPFlags* release_igp_flags();
  ::gobgpapi::LsIGPFlags* mutable_igp_flags();
  void set_allocated_igp_flags(::gobgpapi::LsIGPFlags* igp_flags);
  private:
  const ::gobgpapi::LsIGPFlags& _internal_igp_flags() const;
  ::gobgpapi::LsIGPFlags* _internal_mutable_igp_flags();
  public:

  // uint32 sr_prefix_sid = 3;
  void clear_sr_prefix_sid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_prefix_sid() const;
  void set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sr_prefix_sid() const;
  void _internal_set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsAttributePrefix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opaque_;
  ::gobgpapi::LsIGPFlags* igp_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_prefix_sid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class LsAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.LsAttribute) */ {
 public:
  LsAttribute();
  virtual ~LsAttribute();

  LsAttribute(const LsAttribute& from);
  LsAttribute(LsAttribute&& from) noexcept
    : LsAttribute() {
    *this = ::std::move(from);
  }

  inline LsAttribute& operator=(const LsAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline LsAttribute& operator=(LsAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LsAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LsAttribute* internal_default_instance() {
    return reinterpret_cast<const LsAttribute*>(
               &_LsAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(LsAttribute& a, LsAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(LsAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LsAttribute* New() const final {
    return CreateMaybeMessage<LsAttribute>(nullptr);
  }

  LsAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LsAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LsAttribute& from);
  void MergeFrom(const LsAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LsAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.LsAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kLinkFieldNumber = 2,
    kPrefixFieldNumber = 3,
  };
  // .gobgpapi.LsAttributeNode node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::gobgpapi::LsAttributeNode& node() const;
  ::gobgpapi::LsAttributeNode* release_node();
  ::gobgpapi::LsAttributeNode* mutable_node();
  void set_allocated_node(::gobgpapi::LsAttributeNode* node);
  private:
  const ::gobgpapi::LsAttributeNode& _internal_node() const;
  ::gobgpapi::LsAttributeNode* _internal_mutable_node();
  public:

  // .gobgpapi.LsAttributeLink link = 2;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::gobgpapi::LsAttributeLink& link() const;
  ::gobgpapi::LsAttributeLink* release_link();
  ::gobgpapi::LsAttributeLink* mutable_link();
  void set_allocated_link(::gobgpapi::LsAttributeLink* link);
  private:
  const ::gobgpapi::LsAttributeLink& _internal_link() const;
  ::gobgpapi::LsAttributeLink* _internal_mutable_link();
  public:

  // .gobgpapi.LsAttributePrefix prefix = 3;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::gobgpapi::LsAttributePrefix& prefix() const;
  ::gobgpapi::LsAttributePrefix* release_prefix();
  ::gobgpapi::LsAttributePrefix* mutable_prefix();
  void set_allocated_prefix(::gobgpapi::LsAttributePrefix* prefix);
  private:
  const ::gobgpapi::LsAttributePrefix& _internal_prefix() const;
  ::gobgpapi::LsAttributePrefix* _internal_mutable_prefix();
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.LsAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gobgpapi::LsAttributeNode* node_;
  ::gobgpapi::LsAttributeLink* link_;
  ::gobgpapi::LsAttributePrefix* prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// -------------------------------------------------------------------

class UnknownAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gobgpapi.UnknownAttribute) */ {
 public:
  UnknownAttribute();
  virtual ~UnknownAttribute();

  UnknownAttribute(const UnknownAttribute& from);
  UnknownAttribute(UnknownAttribute&& from) noexcept
    : UnknownAttribute() {
    *this = ::std::move(from);
  }

  inline UnknownAttribute& operator=(const UnknownAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownAttribute& operator=(UnknownAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnknownAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnknownAttribute* internal_default_instance() {
    return reinterpret_cast<const UnknownAttribute*>(
               &_UnknownAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(UnknownAttribute& a, UnknownAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnknownAttribute* New() const final {
    return CreateMaybeMessage<UnknownAttribute>(nullptr);
  }

  UnknownAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnknownAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnknownAttribute& from);
  void MergeFrom(const UnknownAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gobgpapi.UnknownAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_2eproto);
    return ::descriptor_table_attribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kFlagsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gobgpapi.UnknownAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_attribute_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OriginAttribute

// uint32 origin = 1;
inline void OriginAttribute::clear_origin() {
  origin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OriginAttribute::_internal_origin() const {
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OriginAttribute::origin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.OriginAttribute.origin)
  return _internal_origin();
}
inline void OriginAttribute::_internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  origin_ = value;
}
inline void OriginAttribute::set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.OriginAttribute.origin)
}

// -------------------------------------------------------------------

// AsSegment

// uint32 type = 1;
inline void AsSegment::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsSegment::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsSegment::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsSegment.type)
  return _internal_type();
}
inline void AsSegment::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void AsSegment::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AsSegment.type)
}

// repeated uint32 numbers = 2;
inline int AsSegment::_internal_numbers_size() const {
  return numbers_.size();
}
inline int AsSegment::numbers_size() const {
  return _internal_numbers_size();
}
inline void AsSegment::clear_numbers() {
  numbers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsSegment::_internal_numbers(int index) const {
  return numbers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AsSegment::numbers(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsSegment.numbers)
  return _internal_numbers(index);
}
inline void AsSegment::set_numbers(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.AsSegment.numbers)
}
inline void AsSegment::_internal_add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  numbers_.Add(value);
}
inline void AsSegment::add_numbers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_numbers(value);
  // @@protoc_insertion_point(field_add:gobgpapi.AsSegment.numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AsSegment::_internal_numbers() const {
  return numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
AsSegment::numbers() const {
  // @@protoc_insertion_point(field_list:gobgpapi.AsSegment.numbers)
  return _internal_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AsSegment::_internal_mutable_numbers() {
  return &numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
AsSegment::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.AsSegment.numbers)
  return _internal_mutable_numbers();
}

// -------------------------------------------------------------------

// AsPathAttribute

// repeated .gobgpapi.AsSegment segments = 1;
inline int AsPathAttribute::_internal_segments_size() const {
  return segments_.size();
}
inline int AsPathAttribute::segments_size() const {
  return _internal_segments_size();
}
inline void AsPathAttribute::clear_segments() {
  segments_.Clear();
}
inline ::gobgpapi::AsSegment* AsPathAttribute::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AsPathAttribute.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >*
AsPathAttribute::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.AsPathAttribute.segments)
  return &segments_;
}
inline const ::gobgpapi::AsSegment& AsPathAttribute::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::gobgpapi::AsSegment& AsPathAttribute::segments(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathAttribute.segments)
  return _internal_segments(index);
}
inline ::gobgpapi::AsSegment* AsPathAttribute::_internal_add_segments() {
  return segments_.Add();
}
inline ::gobgpapi::AsSegment* AsPathAttribute::add_segments() {
  // @@protoc_insertion_point(field_add:gobgpapi.AsPathAttribute.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >&
AsPathAttribute::segments() const {
  // @@protoc_insertion_point(field_list:gobgpapi.AsPathAttribute.segments)
  return segments_;
}

// -------------------------------------------------------------------

// NextHopAttribute

// string next_hop = 1;
inline void NextHopAttribute::clear_next_hop() {
  next_hop_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NextHopAttribute::next_hop() const {
  // @@protoc_insertion_point(field_get:gobgpapi.NextHopAttribute.next_hop)
  return _internal_next_hop();
}
inline void NextHopAttribute::set_next_hop(const std::string& value) {
  _internal_set_next_hop(value);
  // @@protoc_insertion_point(field_set:gobgpapi.NextHopAttribute.next_hop)
}
inline std::string* NextHopAttribute::mutable_next_hop() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.NextHopAttribute.next_hop)
  return _internal_mutable_next_hop();
}
inline const std::string& NextHopAttribute::_internal_next_hop() const {
  return next_hop_.GetNoArena();
}
inline void NextHopAttribute::_internal_set_next_hop(const std::string& value) {
  
  next_hop_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NextHopAttribute::set_next_hop(std::string&& value) {
  
  next_hop_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.NextHopAttribute.next_hop)
}
inline void NextHopAttribute::set_next_hop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_hop_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.NextHopAttribute.next_hop)
}
inline void NextHopAttribute::set_next_hop(const char* value, size_t size) {
  
  next_hop_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.NextHopAttribute.next_hop)
}
inline std::string* NextHopAttribute::_internal_mutable_next_hop() {
  
  return next_hop_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NextHopAttribute::release_next_hop() {
  // @@protoc_insertion_point(field_release:gobgpapi.NextHopAttribute.next_hop)
  
  return next_hop_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NextHopAttribute::set_allocated_next_hop(std::string* next_hop) {
  if (next_hop != nullptr) {
    
  } else {
    
  }
  next_hop_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_hop);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.NextHopAttribute.next_hop)
}

// -------------------------------------------------------------------

// MultiExitDiscAttribute

// uint32 med = 1;
inline void MultiExitDiscAttribute::clear_med() {
  med_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiExitDiscAttribute::_internal_med() const {
  return med_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiExitDiscAttribute::med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MultiExitDiscAttribute.med)
  return _internal_med();
}
inline void MultiExitDiscAttribute::_internal_set_med(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  med_ = value;
}
inline void MultiExitDiscAttribute::set_med(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_med(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MultiExitDiscAttribute.med)
}

// -------------------------------------------------------------------

// LocalPrefAttribute

// uint32 local_pref = 1;
inline void LocalPrefAttribute::clear_local_pref() {
  local_pref_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalPrefAttribute::_internal_local_pref() const {
  return local_pref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalPrefAttribute::local_pref() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LocalPrefAttribute.local_pref)
  return _internal_local_pref();
}
inline void LocalPrefAttribute::_internal_set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_pref_ = value;
}
inline void LocalPrefAttribute::set_local_pref(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_pref(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LocalPrefAttribute.local_pref)
}

// -------------------------------------------------------------------

// AtomicAggregateAttribute

// -------------------------------------------------------------------

// AggregatorAttribute

// uint32 as = 2;
inline void AggregatorAttribute::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregatorAttribute::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregatorAttribute::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AggregatorAttribute.as)
  return _internal_as();
}
inline void AggregatorAttribute::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void AggregatorAttribute::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AggregatorAttribute.as)
}

// string address = 3;
inline void AggregatorAttribute::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AggregatorAttribute::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AggregatorAttribute.address)
  return _internal_address();
}
inline void AggregatorAttribute::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AggregatorAttribute.address)
}
inline std::string* AggregatorAttribute::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AggregatorAttribute.address)
  return _internal_mutable_address();
}
inline const std::string& AggregatorAttribute::_internal_address() const {
  return address_.GetNoArena();
}
inline void AggregatorAttribute::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AggregatorAttribute::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AggregatorAttribute.address)
}
inline void AggregatorAttribute::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AggregatorAttribute.address)
}
inline void AggregatorAttribute::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AggregatorAttribute.address)
}
inline std::string* AggregatorAttribute::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AggregatorAttribute::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.AggregatorAttribute.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AggregatorAttribute::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AggregatorAttribute.address)
}

// -------------------------------------------------------------------

// CommunitiesAttribute

// repeated uint32 communities = 1;
inline int CommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int CommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline void CommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline void CommunitiesAttribute::set_communities(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  communities_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.CommunitiesAttribute.communities)
}
inline void CommunitiesAttribute::_internal_add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  communities_.Add(value);
}
inline void CommunitiesAttribute::add_communities(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_communities(value);
  // @@protoc_insertion_point(field_add:gobgpapi.CommunitiesAttribute.communities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommunitiesAttribute::_internal_communities() const {
  return communities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.CommunitiesAttribute.communities)
  return _internal_communities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommunitiesAttribute::_internal_mutable_communities() {
  return &communities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.CommunitiesAttribute.communities)
  return _internal_mutable_communities();
}

// -------------------------------------------------------------------

// OriginatorIdAttribute

// string id = 1;
inline void OriginatorIdAttribute::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OriginatorIdAttribute::id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.OriginatorIdAttribute.id)
  return _internal_id();
}
inline void OriginatorIdAttribute::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.OriginatorIdAttribute.id)
}
inline std::string* OriginatorIdAttribute::mutable_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.OriginatorIdAttribute.id)
  return _internal_mutable_id();
}
inline const std::string& OriginatorIdAttribute::_internal_id() const {
  return id_.GetNoArena();
}
inline void OriginatorIdAttribute::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OriginatorIdAttribute::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.OriginatorIdAttribute.id)
}
inline void OriginatorIdAttribute::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.OriginatorIdAttribute.id)
}
inline void OriginatorIdAttribute::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.OriginatorIdAttribute.id)
}
inline std::string* OriginatorIdAttribute::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OriginatorIdAttribute::release_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.OriginatorIdAttribute.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OriginatorIdAttribute::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.OriginatorIdAttribute.id)
}

// -------------------------------------------------------------------

// ClusterListAttribute

// repeated string ids = 1;
inline int ClusterListAttribute::_internal_ids_size() const {
  return ids_.size();
}
inline int ClusterListAttribute::ids_size() const {
  return _internal_ids_size();
}
inline void ClusterListAttribute::clear_ids() {
  ids_.Clear();
}
inline std::string* ClusterListAttribute::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.ClusterListAttribute.ids)
  return _internal_add_ids();
}
inline const std::string& ClusterListAttribute::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ClusterListAttribute::ids(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.ClusterListAttribute.ids)
  return _internal_ids(index);
}
inline std::string* ClusterListAttribute::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ClusterListAttribute.ids)
  return ids_.Mutable(index);
}
inline void ClusterListAttribute::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.ClusterListAttribute.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ClusterListAttribute::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.ClusterListAttribute.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ClusterListAttribute::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ClusterListAttribute.ids)
}
inline std::string* ClusterListAttribute::_internal_add_ids() {
  return ids_.Add();
}
inline void ClusterListAttribute::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.ClusterListAttribute.ids)
}
inline void ClusterListAttribute::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.ClusterListAttribute.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClusterListAttribute::ids() const {
  // @@protoc_insertion_point(field_list:gobgpapi.ClusterListAttribute.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClusterListAttribute::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.ClusterListAttribute.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// IPAddressPrefix

// uint32 prefix_len = 1;
inline void IPAddressPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPAddressPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPAddressPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPAddressPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void IPAddressPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void IPAddressPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPAddressPrefix.prefix_len)
}

// string prefix = 2;
inline void IPAddressPrefix::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IPAddressPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPAddressPrefix.prefix)
  return _internal_prefix();
}
inline void IPAddressPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPAddressPrefix.prefix)
}
inline std::string* IPAddressPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.IPAddressPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& IPAddressPrefix::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void IPAddressPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IPAddressPrefix::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.IPAddressPrefix.prefix)
}
inline void IPAddressPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.IPAddressPrefix.prefix)
}
inline void IPAddressPrefix::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.IPAddressPrefix.prefix)
}
inline std::string* IPAddressPrefix::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IPAddressPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.IPAddressPrefix.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IPAddressPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.IPAddressPrefix.prefix)
}

// -------------------------------------------------------------------

// LabeledIPAddressPrefix

// repeated uint32 labels = 1;
inline int LabeledIPAddressPrefix::_internal_labels_size() const {
  return labels_.size();
}
inline int LabeledIPAddressPrefix::labels_size() const {
  return _internal_labels_size();
}
inline void LabeledIPAddressPrefix::clear_labels() {
  labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::labels(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LabeledIPAddressPrefix.labels)
  return _internal_labels(index);
}
inline void LabeledIPAddressPrefix::set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.LabeledIPAddressPrefix.labels)
}
inline void LabeledIPAddressPrefix::_internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Add(value);
}
inline void LabeledIPAddressPrefix::add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:gobgpapi.LabeledIPAddressPrefix.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledIPAddressPrefix::_internal_labels() const {
  return labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledIPAddressPrefix::labels() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LabeledIPAddressPrefix.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledIPAddressPrefix::_internal_mutable_labels() {
  return &labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledIPAddressPrefix::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LabeledIPAddressPrefix.labels)
  return _internal_mutable_labels();
}

// uint32 prefix_len = 2;
inline void LabeledIPAddressPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledIPAddressPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LabeledIPAddressPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void LabeledIPAddressPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void LabeledIPAddressPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LabeledIPAddressPrefix.prefix_len)
}

// string prefix = 3;
inline void LabeledIPAddressPrefix::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LabeledIPAddressPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LabeledIPAddressPrefix.prefix)
  return _internal_prefix();
}
inline void LabeledIPAddressPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LabeledIPAddressPrefix.prefix)
}
inline std::string* LabeledIPAddressPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LabeledIPAddressPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& LabeledIPAddressPrefix::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void LabeledIPAddressPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LabeledIPAddressPrefix::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LabeledIPAddressPrefix.prefix)
}
inline void LabeledIPAddressPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LabeledIPAddressPrefix.prefix)
}
inline void LabeledIPAddressPrefix::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LabeledIPAddressPrefix.prefix)
}
inline std::string* LabeledIPAddressPrefix::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LabeledIPAddressPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.LabeledIPAddressPrefix.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LabeledIPAddressPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LabeledIPAddressPrefix.prefix)
}

// -------------------------------------------------------------------

// EncapsulationNLRI

// string address = 1;
inline void EncapsulationNLRI::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EncapsulationNLRI::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EncapsulationNLRI.address)
  return _internal_address();
}
inline void EncapsulationNLRI::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EncapsulationNLRI.address)
}
inline std::string* EncapsulationNLRI::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EncapsulationNLRI.address)
  return _internal_mutable_address();
}
inline const std::string& EncapsulationNLRI::_internal_address() const {
  return address_.GetNoArena();
}
inline void EncapsulationNLRI::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncapsulationNLRI::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EncapsulationNLRI.address)
}
inline void EncapsulationNLRI::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EncapsulationNLRI.address)
}
inline void EncapsulationNLRI::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EncapsulationNLRI.address)
}
inline std::string* EncapsulationNLRI::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncapsulationNLRI::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EncapsulationNLRI.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncapsulationNLRI::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EncapsulationNLRI.address)
}

// -------------------------------------------------------------------

// RouteDistinguisherTwoOctetAS

// uint32 admin = 1;
inline void RouteDistinguisherTwoOctetAS::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetAS::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetAS::admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteDistinguisherTwoOctetAS.admin)
  return _internal_admin();
}
inline void RouteDistinguisherTwoOctetAS::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void RouteDistinguisherTwoOctetAS::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteDistinguisherTwoOctetAS.admin)
}

// uint32 assigned = 2;
inline void RouteDistinguisherTwoOctetAS::clear_assigned() {
  assigned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetAS::_internal_assigned() const {
  return assigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherTwoOctetAS::assigned() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteDistinguisherTwoOctetAS.assigned)
  return _internal_assigned();
}
inline void RouteDistinguisherTwoOctetAS::_internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assigned_ = value;
}
inline void RouteDistinguisherTwoOctetAS::set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assigned(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteDistinguisherTwoOctetAS.assigned)
}

// -------------------------------------------------------------------

// RouteDistinguisherIPAddress

// string admin = 1;
inline void RouteDistinguisherIPAddress::clear_admin() {
  admin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteDistinguisherIPAddress::admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteDistinguisherIPAddress.admin)
  return _internal_admin();
}
inline void RouteDistinguisherIPAddress::set_admin(const std::string& value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteDistinguisherIPAddress.admin)
}
inline std::string* RouteDistinguisherIPAddress::mutable_admin() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteDistinguisherIPAddress.admin)
  return _internal_mutable_admin();
}
inline const std::string& RouteDistinguisherIPAddress::_internal_admin() const {
  return admin_.GetNoArena();
}
inline void RouteDistinguisherIPAddress::_internal_set_admin(const std::string& value) {
  
  admin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteDistinguisherIPAddress::set_admin(std::string&& value) {
  
  admin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RouteDistinguisherIPAddress.admin)
}
inline void RouteDistinguisherIPAddress::set_admin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  admin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RouteDistinguisherIPAddress.admin)
}
inline void RouteDistinguisherIPAddress::set_admin(const char* value, size_t size) {
  
  admin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RouteDistinguisherIPAddress.admin)
}
inline std::string* RouteDistinguisherIPAddress::_internal_mutable_admin() {
  
  return admin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteDistinguisherIPAddress::release_admin() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteDistinguisherIPAddress.admin)
  
  return admin_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteDistinguisherIPAddress::set_allocated_admin(std::string* admin) {
  if (admin != nullptr) {
    
  } else {
    
  }
  admin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), admin);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteDistinguisherIPAddress.admin)
}

// uint32 assigned = 2;
inline void RouteDistinguisherIPAddress::clear_assigned() {
  assigned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherIPAddress::_internal_assigned() const {
  return assigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherIPAddress::assigned() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteDistinguisherIPAddress.assigned)
  return _internal_assigned();
}
inline void RouteDistinguisherIPAddress::_internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assigned_ = value;
}
inline void RouteDistinguisherIPAddress::set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assigned(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteDistinguisherIPAddress.assigned)
}

// -------------------------------------------------------------------

// RouteDistinguisherFourOctetAS

// uint32 admin = 1;
inline void RouteDistinguisherFourOctetAS::clear_admin() {
  admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetAS::_internal_admin() const {
  return admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetAS::admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteDistinguisherFourOctetAS.admin)
  return _internal_admin();
}
inline void RouteDistinguisherFourOctetAS::_internal_set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_ = value;
}
inline void RouteDistinguisherFourOctetAS::set_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteDistinguisherFourOctetAS.admin)
}

// uint32 assigned = 2;
inline void RouteDistinguisherFourOctetAS::clear_assigned() {
  assigned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetAS::_internal_assigned() const {
  return assigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteDistinguisherFourOctetAS::assigned() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteDistinguisherFourOctetAS.assigned)
  return _internal_assigned();
}
inline void RouteDistinguisherFourOctetAS::_internal_set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assigned_ = value;
}
inline void RouteDistinguisherFourOctetAS::set_assigned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assigned(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteDistinguisherFourOctetAS.assigned)
}

// -------------------------------------------------------------------

// EthernetSegmentIdentifier

// uint32 type = 1;
inline void EthernetSegmentIdentifier::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthernetSegmentIdentifier::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthernetSegmentIdentifier::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EthernetSegmentIdentifier.type)
  return _internal_type();
}
inline void EthernetSegmentIdentifier::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void EthernetSegmentIdentifier::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EthernetSegmentIdentifier.type)
}

// bytes value = 2;
inline void EthernetSegmentIdentifier::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthernetSegmentIdentifier::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EthernetSegmentIdentifier.value)
  return _internal_value();
}
inline void EthernetSegmentIdentifier::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EthernetSegmentIdentifier.value)
}
inline std::string* EthernetSegmentIdentifier::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EthernetSegmentIdentifier.value)
  return _internal_mutable_value();
}
inline const std::string& EthernetSegmentIdentifier::_internal_value() const {
  return value_.GetNoArena();
}
inline void EthernetSegmentIdentifier::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthernetSegmentIdentifier::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EthernetSegmentIdentifier.value)
}
inline void EthernetSegmentIdentifier::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EthernetSegmentIdentifier.value)
}
inline void EthernetSegmentIdentifier::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EthernetSegmentIdentifier.value)
}
inline std::string* EthernetSegmentIdentifier::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthernetSegmentIdentifier::release_value() {
  // @@protoc_insertion_point(field_release:gobgpapi.EthernetSegmentIdentifier.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthernetSegmentIdentifier::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EthernetSegmentIdentifier.value)
}

// -------------------------------------------------------------------

// EVPNEthernetAutoDiscoveryRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNEthernetAutoDiscoveryRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNEthernetAutoDiscoveryRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetAutoDiscoveryRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetAutoDiscoveryRoute::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNEthernetAutoDiscoveryRoute.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetAutoDiscoveryRoute::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNEthernetAutoDiscoveryRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetAutoDiscoveryRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetAutoDiscoveryRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNEthernetAutoDiscoveryRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNEthernetAutoDiscoveryRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNEthernetAutoDiscoveryRoute.rd)
}

// .gobgpapi.EthernetSegmentIdentifier esi = 2;
inline bool EVPNEthernetAutoDiscoveryRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNEthernetAutoDiscoveryRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNEthernetAutoDiscoveryRoute::clear_esi() {
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNEthernetAutoDiscoveryRoute::_internal_esi() const {
  const ::gobgpapi::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EthernetSegmentIdentifier*>(
      &::gobgpapi::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNEthernetAutoDiscoveryRoute::esi() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNEthernetAutoDiscoveryRoute.esi)
  return _internal_esi();
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNEthernetAutoDiscoveryRoute::release_esi() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNEthernetAutoDiscoveryRoute.esi)
  
  ::gobgpapi::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNEthernetAutoDiscoveryRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EthernetSegmentIdentifier>(GetArenaNoVirtual());
    esi_ = p;
  }
  return esi_;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNEthernetAutoDiscoveryRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNEthernetAutoDiscoveryRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNEthernetAutoDiscoveryRoute::set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNEthernetAutoDiscoveryRoute.esi)
}

// uint32 ethernet_tag = 3;
inline void EVPNEthernetAutoDiscoveryRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNEthernetAutoDiscoveryRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNEthernetAutoDiscoveryRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNEthernetAutoDiscoveryRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNEthernetAutoDiscoveryRoute.ethernet_tag)
}

// uint32 label = 4;
inline void EVPNEthernetAutoDiscoveryRoute::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNEthernetAutoDiscoveryRoute::label() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNEthernetAutoDiscoveryRoute.label)
  return _internal_label();
}
inline void EVPNEthernetAutoDiscoveryRoute::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void EVPNEthernetAutoDiscoveryRoute::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNEthernetAutoDiscoveryRoute.label)
}

// -------------------------------------------------------------------

// EVPNMACIPAdvertisementRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNMACIPAdvertisementRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNMACIPAdvertisementRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNMACIPAdvertisementRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNMACIPAdvertisementRoute::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNMACIPAdvertisementRoute.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNMACIPAdvertisementRoute::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNMACIPAdvertisementRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNMACIPAdvertisementRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNMACIPAdvertisementRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNMACIPAdvertisementRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNMACIPAdvertisementRoute.rd)
}

// .gobgpapi.EthernetSegmentIdentifier esi = 2;
inline bool EVPNMACIPAdvertisementRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNMACIPAdvertisementRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNMACIPAdvertisementRoute::clear_esi() {
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNMACIPAdvertisementRoute::_internal_esi() const {
  const ::gobgpapi::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EthernetSegmentIdentifier*>(
      &::gobgpapi::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNMACIPAdvertisementRoute::esi() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNMACIPAdvertisementRoute.esi)
  return _internal_esi();
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNMACIPAdvertisementRoute::release_esi() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNMACIPAdvertisementRoute.esi)
  
  ::gobgpapi::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNMACIPAdvertisementRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EthernetSegmentIdentifier>(GetArenaNoVirtual());
    esi_ = p;
  }
  return esi_;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNMACIPAdvertisementRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNMACIPAdvertisementRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNMACIPAdvertisementRoute.esi)
}

// uint32 ethernet_tag = 3;
inline void EVPNMACIPAdvertisementRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNMACIPAdvertisementRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNMACIPAdvertisementRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNMACIPAdvertisementRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNMACIPAdvertisementRoute.ethernet_tag)
}

// string mac_address = 4;
inline void EVPNMACIPAdvertisementRoute::clear_mac_address() {
  mac_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EVPNMACIPAdvertisementRoute::mac_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
  return _internal_mac_address();
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(const std::string& value) {
  _internal_set_mac_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::mutable_mac_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
  return _internal_mutable_mac_address();
}
inline const std::string& EVPNMACIPAdvertisementRoute::_internal_mac_address() const {
  return mac_address_.GetNoArena();
}
inline void EVPNMACIPAdvertisementRoute::_internal_set_mac_address(const std::string& value) {
  
  mac_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(std::string&& value) {
  
  mac_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
}
inline void EVPNMACIPAdvertisementRoute::set_mac_address(const char* value, size_t size) {
  
  mac_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::_internal_mutable_mac_address() {
  
  return mac_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EVPNMACIPAdvertisementRoute::release_mac_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
  
  return mac_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_mac_address(std::string* mac_address) {
  if (mac_address != nullptr) {
    
  } else {
    
  }
  mac_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNMACIPAdvertisementRoute.mac_address)
}

// string ip_address = 5;
inline void EVPNMACIPAdvertisementRoute::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EVPNMACIPAdvertisementRoute::ip_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
  return _internal_ip_address();
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EVPNMACIPAdvertisementRoute::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void EVPNMACIPAdvertisementRoute::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
}
inline void EVPNMACIPAdvertisementRoute::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
}
inline std::string* EVPNMACIPAdvertisementRoute::_internal_mutable_ip_address() {
  
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EVPNMACIPAdvertisementRoute::release_ip_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EVPNMACIPAdvertisementRoute::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNMACIPAdvertisementRoute.ip_address)
}

// repeated uint32 labels = 6;
inline int EVPNMACIPAdvertisementRoute::_internal_labels_size() const {
  return labels_.size();
}
inline int EVPNMACIPAdvertisementRoute::labels_size() const {
  return _internal_labels_size();
}
inline void EVPNMACIPAdvertisementRoute::clear_labels() {
  labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNMACIPAdvertisementRoute::labels(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNMACIPAdvertisementRoute.labels)
  return _internal_labels(index);
}
inline void EVPNMACIPAdvertisementRoute::set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNMACIPAdvertisementRoute.labels)
}
inline void EVPNMACIPAdvertisementRoute::_internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Add(value);
}
inline void EVPNMACIPAdvertisementRoute::add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:gobgpapi.EVPNMACIPAdvertisementRoute.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EVPNMACIPAdvertisementRoute::_internal_labels() const {
  return labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
EVPNMACIPAdvertisementRoute::labels() const {
  // @@protoc_insertion_point(field_list:gobgpapi.EVPNMACIPAdvertisementRoute.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EVPNMACIPAdvertisementRoute::_internal_mutable_labels() {
  return &labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
EVPNMACIPAdvertisementRoute::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.EVPNMACIPAdvertisementRoute.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// EVPNInclusiveMulticastEthernetTagRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNInclusiveMulticastEthernetTagRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNInclusiveMulticastEthernetTagRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNInclusiveMulticastEthernetTagRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNInclusiveMulticastEthernetTagRoute::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNInclusiveMulticastEthernetTagRoute::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNInclusiveMulticastEthernetTagRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNInclusiveMulticastEthernetTagRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.rd)
}

// uint32 ethernet_tag = 2;
inline void EVPNInclusiveMulticastEthernetTagRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNInclusiveMulticastEthernetTagRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNInclusiveMulticastEthernetTagRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ethernet_tag)
}

// string ip_address = 3;
inline void EVPNInclusiveMulticastEthernetTagRoute::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EVPNInclusiveMulticastEthernetTagRoute::ip_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
  return _internal_ip_address();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline std::string* EVPNInclusiveMulticastEthernetTagRoute::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EVPNInclusiveMulticastEthernetTagRoute::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void EVPNInclusiveMulticastEthernetTagRoute::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}
inline std::string* EVPNInclusiveMulticastEthernetTagRoute::_internal_mutable_ip_address() {
  
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EVPNInclusiveMulticastEthernetTagRoute::release_ip_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EVPNInclusiveMulticastEthernetTagRoute::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address)
}

// -------------------------------------------------------------------

// EVPNEthernetSegmentRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNEthernetSegmentRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNEthernetSegmentRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetSegmentRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNEthernetSegmentRoute::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNEthernetSegmentRoute.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetSegmentRoute::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNEthernetSegmentRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetSegmentRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNEthernetSegmentRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNEthernetSegmentRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNEthernetSegmentRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNEthernetSegmentRoute.rd)
}

// .gobgpapi.EthernetSegmentIdentifier esi = 2;
inline bool EVPNEthernetSegmentRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNEthernetSegmentRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNEthernetSegmentRoute::clear_esi() {
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNEthernetSegmentRoute::_internal_esi() const {
  const ::gobgpapi::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EthernetSegmentIdentifier*>(
      &::gobgpapi::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNEthernetSegmentRoute::esi() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNEthernetSegmentRoute.esi)
  return _internal_esi();
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNEthernetSegmentRoute::release_esi() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNEthernetSegmentRoute.esi)
  
  ::gobgpapi::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNEthernetSegmentRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EthernetSegmentIdentifier>(GetArenaNoVirtual());
    esi_ = p;
  }
  return esi_;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNEthernetSegmentRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNEthernetSegmentRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNEthernetSegmentRoute::set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNEthernetSegmentRoute.esi)
}

// string ip_address = 3;
inline void EVPNEthernetSegmentRoute::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EVPNEthernetSegmentRoute::ip_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
  return _internal_ip_address();
}
inline void EVPNEthernetSegmentRoute::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
}
inline std::string* EVPNEthernetSegmentRoute::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& EVPNEthernetSegmentRoute::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void EVPNEthernetSegmentRoute::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EVPNEthernetSegmentRoute::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
}
inline void EVPNEthernetSegmentRoute::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
}
inline void EVPNEthernetSegmentRoute::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
}
inline std::string* EVPNEthernetSegmentRoute::_internal_mutable_ip_address() {
  
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EVPNEthernetSegmentRoute::release_ip_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EVPNEthernetSegmentRoute::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNEthernetSegmentRoute.ip_address)
}

// -------------------------------------------------------------------

// EVPNIPPrefixRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNIPPrefixRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNIPPrefixRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPPrefixRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPPrefixRoute::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPPrefixRoute.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPPrefixRoute::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNIPPrefixRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPPrefixRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPPrefixRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNIPPrefixRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNIPPrefixRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNIPPrefixRoute.rd)
}

// .gobgpapi.EthernetSegmentIdentifier esi = 2;
inline bool EVPNIPPrefixRoute::_internal_has_esi() const {
  return this != internal_default_instance() && esi_ != nullptr;
}
inline bool EVPNIPPrefixRoute::has_esi() const {
  return _internal_has_esi();
}
inline void EVPNIPPrefixRoute::clear_esi() {
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNIPPrefixRoute::_internal_esi() const {
  const ::gobgpapi::EthernetSegmentIdentifier* p = esi_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::EthernetSegmentIdentifier*>(
      &::gobgpapi::_EthernetSegmentIdentifier_default_instance_);
}
inline const ::gobgpapi::EthernetSegmentIdentifier& EVPNIPPrefixRoute::esi() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPPrefixRoute.esi)
  return _internal_esi();
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNIPPrefixRoute::release_esi() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNIPPrefixRoute.esi)
  
  ::gobgpapi::EthernetSegmentIdentifier* temp = esi_;
  esi_ = nullptr;
  return temp;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNIPPrefixRoute::_internal_mutable_esi() {
  
  if (esi_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::EthernetSegmentIdentifier>(GetArenaNoVirtual());
    esi_ = p;
  }
  return esi_;
}
inline ::gobgpapi::EthernetSegmentIdentifier* EVPNIPPrefixRoute::mutable_esi() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNIPPrefixRoute.esi)
  return _internal_mutable_esi();
}
inline void EVPNIPPrefixRoute::set_allocated_esi(::gobgpapi::EthernetSegmentIdentifier* esi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esi_;
  }
  if (esi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esi, submessage_arena);
    }
    
  } else {
    
  }
  esi_ = esi;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNIPPrefixRoute.esi)
}

// uint32 ethernet_tag = 3;
inline void EVPNIPPrefixRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPPrefixRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNIPPrefixRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNIPPrefixRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNIPPrefixRoute.ethernet_tag)
}

// string ip_prefix = 4;
inline void EVPNIPPrefixRoute::clear_ip_prefix() {
  ip_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EVPNIPPrefixRoute::ip_prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
  return _internal_ip_prefix();
}
inline void EVPNIPPrefixRoute::set_ip_prefix(const std::string& value) {
  _internal_set_ip_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
}
inline std::string* EVPNIPPrefixRoute::mutable_ip_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
  return _internal_mutable_ip_prefix();
}
inline const std::string& EVPNIPPrefixRoute::_internal_ip_prefix() const {
  return ip_prefix_.GetNoArena();
}
inline void EVPNIPPrefixRoute::_internal_set_ip_prefix(const std::string& value) {
  
  ip_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EVPNIPPrefixRoute::set_ip_prefix(std::string&& value) {
  
  ip_prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
}
inline void EVPNIPPrefixRoute::set_ip_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
}
inline void EVPNIPPrefixRoute::set_ip_prefix(const char* value, size_t size) {
  
  ip_prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
}
inline std::string* EVPNIPPrefixRoute::_internal_mutable_ip_prefix() {
  
  return ip_prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EVPNIPPrefixRoute::release_ip_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
  
  return ip_prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EVPNIPPrefixRoute::set_allocated_ip_prefix(std::string* ip_prefix) {
  if (ip_prefix != nullptr) {
    
  } else {
    
  }
  ip_prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNIPPrefixRoute.ip_prefix)
}

// uint32 ip_prefix_len = 5;
inline void EVPNIPPrefixRoute::clear_ip_prefix_len() {
  ip_prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::_internal_ip_prefix_len() const {
  return ip_prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::ip_prefix_len() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPPrefixRoute.ip_prefix_len)
  return _internal_ip_prefix_len();
}
inline void EVPNIPPrefixRoute::_internal_set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ip_prefix_len_ = value;
}
inline void EVPNIPPrefixRoute::set_ip_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip_prefix_len(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNIPPrefixRoute.ip_prefix_len)
}

// string gw_address = 6;
inline void EVPNIPPrefixRoute::clear_gw_address() {
  gw_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EVPNIPPrefixRoute::gw_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPPrefixRoute.gw_address)
  return _internal_gw_address();
}
inline void EVPNIPPrefixRoute::set_gw_address(const std::string& value) {
  _internal_set_gw_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNIPPrefixRoute.gw_address)
}
inline std::string* EVPNIPPrefixRoute::mutable_gw_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNIPPrefixRoute.gw_address)
  return _internal_mutable_gw_address();
}
inline const std::string& EVPNIPPrefixRoute::_internal_gw_address() const {
  return gw_address_.GetNoArena();
}
inline void EVPNIPPrefixRoute::_internal_set_gw_address(const std::string& value) {
  
  gw_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EVPNIPPrefixRoute::set_gw_address(std::string&& value) {
  
  gw_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.EVPNIPPrefixRoute.gw_address)
}
inline void EVPNIPPrefixRoute::set_gw_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gw_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.EVPNIPPrefixRoute.gw_address)
}
inline void EVPNIPPrefixRoute::set_gw_address(const char* value, size_t size) {
  
  gw_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.EVPNIPPrefixRoute.gw_address)
}
inline std::string* EVPNIPPrefixRoute::_internal_mutable_gw_address() {
  
  return gw_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EVPNIPPrefixRoute::release_gw_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNIPPrefixRoute.gw_address)
  
  return gw_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EVPNIPPrefixRoute::set_allocated_gw_address(std::string* gw_address) {
  if (gw_address != nullptr) {
    
  } else {
    
  }
  gw_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gw_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNIPPrefixRoute.gw_address)
}

// uint32 label = 7;
inline void EVPNIPPrefixRoute::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPPrefixRoute::label() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPPrefixRoute.label)
  return _internal_label();
}
inline void EVPNIPPrefixRoute::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void EVPNIPPrefixRoute::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNIPPrefixRoute.label)
}

// -------------------------------------------------------------------

// EVPNIPMSIRoute

// .google.protobuf.Any rd = 1;
inline bool EVPNIPMSIRoute::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool EVPNIPMSIRoute::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPMSIRoute.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNIPMSIRoute.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNIPMSIRoute.rd)
  return _internal_mutable_rd();
}
inline void EVPNIPMSIRoute::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNIPMSIRoute.rd)
}

// uint32 ethernet_tag = 2;
inline void EVPNIPMSIRoute::clear_ethernet_tag() {
  ethernet_tag_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPMSIRoute::_internal_ethernet_tag() const {
  return ethernet_tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EVPNIPMSIRoute::ethernet_tag() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPMSIRoute.ethernet_tag)
  return _internal_ethernet_tag();
}
inline void EVPNIPMSIRoute::_internal_set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ethernet_tag_ = value;
}
inline void EVPNIPMSIRoute::set_ethernet_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ethernet_tag(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EVPNIPMSIRoute.ethernet_tag)
}

// .google.protobuf.Any rt = 3;
inline bool EVPNIPMSIRoute::_internal_has_rt() const {
  return this != internal_default_instance() && rt_ != nullptr;
}
inline bool EVPNIPMSIRoute::has_rt() const {
  return _internal_has_rt();
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::_internal_rt() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rt_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& EVPNIPMSIRoute::rt() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EVPNIPMSIRoute.rt)
  return _internal_rt();
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::release_rt() {
  // @@protoc_insertion_point(field_release:gobgpapi.EVPNIPMSIRoute.rt)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rt_;
  rt_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::_internal_mutable_rt() {
  
  if (rt_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rt_ = p;
  }
  return rt_;
}
inline PROTOBUF_NAMESPACE_ID::Any* EVPNIPMSIRoute::mutable_rt() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.EVPNIPMSIRoute.rt)
  return _internal_mutable_rt();
}
inline void EVPNIPMSIRoute::set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_);
  }
  if (rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt, submessage_arena);
    }
    
  } else {
    
  }
  rt_ = rt;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.EVPNIPMSIRoute.rt)
}

// -------------------------------------------------------------------

// LabeledVPNIPAddressPrefix

// repeated uint32 labels = 1;
inline int LabeledVPNIPAddressPrefix::_internal_labels_size() const {
  return labels_.size();
}
inline int LabeledVPNIPAddressPrefix::labels_size() const {
  return _internal_labels_size();
}
inline void LabeledVPNIPAddressPrefix::clear_labels() {
  labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::labels(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LabeledVPNIPAddressPrefix.labels)
  return _internal_labels(index);
}
inline void LabeledVPNIPAddressPrefix::set_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.LabeledVPNIPAddressPrefix.labels)
}
inline void LabeledVPNIPAddressPrefix::_internal_add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  labels_.Add(value);
}
inline void LabeledVPNIPAddressPrefix::add_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_labels(value);
  // @@protoc_insertion_point(field_add:gobgpapi.LabeledVPNIPAddressPrefix.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledVPNIPAddressPrefix::_internal_labels() const {
  return labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LabeledVPNIPAddressPrefix::labels() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LabeledVPNIPAddressPrefix.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledVPNIPAddressPrefix::_internal_mutable_labels() {
  return &labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LabeledVPNIPAddressPrefix::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LabeledVPNIPAddressPrefix.labels)
  return _internal_mutable_labels();
}

// .google.protobuf.Any rd = 2;
inline bool LabeledVPNIPAddressPrefix::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool LabeledVPNIPAddressPrefix::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& LabeledVPNIPAddressPrefix::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& LabeledVPNIPAddressPrefix::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LabeledVPNIPAddressPrefix.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* LabeledVPNIPAddressPrefix::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.LabeledVPNIPAddressPrefix.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* LabeledVPNIPAddressPrefix::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* LabeledVPNIPAddressPrefix::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LabeledVPNIPAddressPrefix.rd)
  return _internal_mutable_rd();
}
inline void LabeledVPNIPAddressPrefix::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LabeledVPNIPAddressPrefix.rd)
}

// uint32 prefix_len = 3;
inline void LabeledVPNIPAddressPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabeledVPNIPAddressPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LabeledVPNIPAddressPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void LabeledVPNIPAddressPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void LabeledVPNIPAddressPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LabeledVPNIPAddressPrefix.prefix_len)
}

// string prefix = 4;
inline void LabeledVPNIPAddressPrefix::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LabeledVPNIPAddressPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
  return _internal_prefix();
}
inline void LabeledVPNIPAddressPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
}
inline std::string* LabeledVPNIPAddressPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& LabeledVPNIPAddressPrefix::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void LabeledVPNIPAddressPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LabeledVPNIPAddressPrefix::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
}
inline void LabeledVPNIPAddressPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
}
inline void LabeledVPNIPAddressPrefix::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
}
inline std::string* LabeledVPNIPAddressPrefix::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LabeledVPNIPAddressPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LabeledVPNIPAddressPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LabeledVPNIPAddressPrefix.prefix)
}

// -------------------------------------------------------------------

// RouteTargetMembershipNLRI

// uint32 as = 1;
inline void RouteTargetMembershipNLRI::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipNLRI::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteTargetMembershipNLRI::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembershipNLRI.as)
  return _internal_as();
}
inline void RouteTargetMembershipNLRI::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void RouteTargetMembershipNLRI::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouteTargetMembershipNLRI.as)
}

// .google.protobuf.Any rt = 2;
inline bool RouteTargetMembershipNLRI::_internal_has_rt() const {
  return this != internal_default_instance() && rt_ != nullptr;
}
inline bool RouteTargetMembershipNLRI::has_rt() const {
  return _internal_has_rt();
}
inline const PROTOBUF_NAMESPACE_ID::Any& RouteTargetMembershipNLRI::_internal_rt() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rt_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& RouteTargetMembershipNLRI::rt() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteTargetMembershipNLRI.rt)
  return _internal_rt();
}
inline PROTOBUF_NAMESPACE_ID::Any* RouteTargetMembershipNLRI::release_rt() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouteTargetMembershipNLRI.rt)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rt_;
  rt_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* RouteTargetMembershipNLRI::_internal_mutable_rt() {
  
  if (rt_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rt_ = p;
  }
  return rt_;
}
inline PROTOBUF_NAMESPACE_ID::Any* RouteTargetMembershipNLRI::mutable_rt() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouteTargetMembershipNLRI.rt)
  return _internal_mutable_rt();
}
inline void RouteTargetMembershipNLRI::set_allocated_rt(PROTOBUF_NAMESPACE_ID::Any* rt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rt_);
  }
  if (rt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rt, submessage_arena);
    }
    
  } else {
    
  }
  rt_ = rt;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouteTargetMembershipNLRI.rt)
}

// -------------------------------------------------------------------

// FlowSpecIPPrefix

// uint32 type = 1;
inline void FlowSpecIPPrefix::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecIPPrefix.type)
  return _internal_type();
}
inline void FlowSpecIPPrefix::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void FlowSpecIPPrefix::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecIPPrefix.type)
}

// uint32 prefix_len = 2;
inline void FlowSpecIPPrefix::clear_prefix_len() {
  prefix_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::prefix_len() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecIPPrefix.prefix_len)
  return _internal_prefix_len();
}
inline void FlowSpecIPPrefix::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_len_ = value;
}
inline void FlowSpecIPPrefix::set_prefix_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecIPPrefix.prefix_len)
}

// string prefix = 3;
inline void FlowSpecIPPrefix::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FlowSpecIPPrefix::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecIPPrefix.prefix)
  return _internal_prefix();
}
inline void FlowSpecIPPrefix::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecIPPrefix.prefix)
}
inline std::string* FlowSpecIPPrefix::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.FlowSpecIPPrefix.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& FlowSpecIPPrefix::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void FlowSpecIPPrefix::_internal_set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FlowSpecIPPrefix::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.FlowSpecIPPrefix.prefix)
}
inline void FlowSpecIPPrefix::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.FlowSpecIPPrefix.prefix)
}
inline void FlowSpecIPPrefix::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.FlowSpecIPPrefix.prefix)
}
inline std::string* FlowSpecIPPrefix::_internal_mutable_prefix() {
  
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FlowSpecIPPrefix::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.FlowSpecIPPrefix.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FlowSpecIPPrefix::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.FlowSpecIPPrefix.prefix)
}

// uint32 offset = 4;
inline void FlowSpecIPPrefix::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecIPPrefix::offset() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecIPPrefix.offset)
  return _internal_offset();
}
inline void FlowSpecIPPrefix::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void FlowSpecIPPrefix::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecIPPrefix.offset)
}

// -------------------------------------------------------------------

// FlowSpecMAC

// uint32 type = 1;
inline void FlowSpecMAC::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecMAC::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecMAC::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecMAC.type)
  return _internal_type();
}
inline void FlowSpecMAC::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void FlowSpecMAC::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecMAC.type)
}

// string address = 2;
inline void FlowSpecMAC::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FlowSpecMAC::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecMAC.address)
  return _internal_address();
}
inline void FlowSpecMAC::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecMAC.address)
}
inline std::string* FlowSpecMAC::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.FlowSpecMAC.address)
  return _internal_mutable_address();
}
inline const std::string& FlowSpecMAC::_internal_address() const {
  return address_.GetNoArena();
}
inline void FlowSpecMAC::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FlowSpecMAC::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.FlowSpecMAC.address)
}
inline void FlowSpecMAC::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.FlowSpecMAC.address)
}
inline void FlowSpecMAC::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.FlowSpecMAC.address)
}
inline std::string* FlowSpecMAC::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FlowSpecMAC::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.FlowSpecMAC.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FlowSpecMAC::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.FlowSpecMAC.address)
}

// -------------------------------------------------------------------

// FlowSpecComponentItem

// uint32 op = 1;
inline void FlowSpecComponentItem::clear_op() {
  op_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponentItem::_internal_op() const {
  return op_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponentItem::op() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecComponentItem.op)
  return _internal_op();
}
inline void FlowSpecComponentItem::_internal_set_op(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  op_ = value;
}
inline void FlowSpecComponentItem::set_op(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecComponentItem.op)
}

// uint64 value = 2;
inline void FlowSpecComponentItem::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowSpecComponentItem::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowSpecComponentItem::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecComponentItem.value)
  return _internal_value();
}
inline void FlowSpecComponentItem::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void FlowSpecComponentItem::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecComponentItem.value)
}

// -------------------------------------------------------------------

// FlowSpecComponent

// uint32 type = 1;
inline void FlowSpecComponent::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponent::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowSpecComponent::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecComponent.type)
  return _internal_type();
}
inline void FlowSpecComponent::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void FlowSpecComponent::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FlowSpecComponent.type)
}

// repeated .gobgpapi.FlowSpecComponentItem items = 2;
inline int FlowSpecComponent::_internal_items_size() const {
  return items_.size();
}
inline int FlowSpecComponent::items_size() const {
  return _internal_items_size();
}
inline void FlowSpecComponent::clear_items() {
  items_.Clear();
}
inline ::gobgpapi::FlowSpecComponentItem* FlowSpecComponent::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.FlowSpecComponent.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::FlowSpecComponentItem >*
FlowSpecComponent::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.FlowSpecComponent.items)
  return &items_;
}
inline const ::gobgpapi::FlowSpecComponentItem& FlowSpecComponent::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::gobgpapi::FlowSpecComponentItem& FlowSpecComponent::items(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecComponent.items)
  return _internal_items(index);
}
inline ::gobgpapi::FlowSpecComponentItem* FlowSpecComponent::_internal_add_items() {
  return items_.Add();
}
inline ::gobgpapi::FlowSpecComponentItem* FlowSpecComponent::add_items() {
  // @@protoc_insertion_point(field_add:gobgpapi.FlowSpecComponent.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::FlowSpecComponentItem >&
FlowSpecComponent::items() const {
  // @@protoc_insertion_point(field_list:gobgpapi.FlowSpecComponent.items)
  return items_;
}

// -------------------------------------------------------------------

// FlowSpecNLRI

// repeated .google.protobuf.Any rules = 1;
inline int FlowSpecNLRI::_internal_rules_size() const {
  return rules_.size();
}
inline int FlowSpecNLRI::rules_size() const {
  return _internal_rules_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* FlowSpecNLRI::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.FlowSpecNLRI.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
FlowSpecNLRI::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.FlowSpecNLRI.rules)
  return &rules_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& FlowSpecNLRI::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& FlowSpecNLRI::rules(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.FlowSpecNLRI.rules)
  return _internal_rules(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* FlowSpecNLRI::_internal_add_rules() {
  return rules_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* FlowSpecNLRI::add_rules() {
  // @@protoc_insertion_point(field_add:gobgpapi.FlowSpecNLRI.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
FlowSpecNLRI::rules() const {
  // @@protoc_insertion_point(field_list:gobgpapi.FlowSpecNLRI.rules)
  return rules_;
}

// -------------------------------------------------------------------

// VPNFlowSpecNLRI

// .google.protobuf.Any rd = 1;
inline bool VPNFlowSpecNLRI::_internal_has_rd() const {
  return this != internal_default_instance() && rd_ != nullptr;
}
inline bool VPNFlowSpecNLRI::has_rd() const {
  return _internal_has_rd();
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::_internal_rd() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = rd_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.VPNFlowSpecNLRI.rd)
  return _internal_rd();
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::release_rd() {
  // @@protoc_insertion_point(field_release:gobgpapi.VPNFlowSpecNLRI.rd)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = rd_;
  rd_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::_internal_mutable_rd() {
  
  if (rd_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    rd_ = p;
  }
  return rd_;
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::mutable_rd() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.VPNFlowSpecNLRI.rd)
  return _internal_mutable_rd();
}
inline void VPNFlowSpecNLRI::set_allocated_rd(PROTOBUF_NAMESPACE_ID::Any* rd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rd_);
  }
  if (rd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rd, submessage_arena);
    }
    
  } else {
    
  }
  rd_ = rd;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.VPNFlowSpecNLRI.rd)
}

// repeated .google.protobuf.Any rules = 2;
inline int VPNFlowSpecNLRI::_internal_rules_size() const {
  return rules_.size();
}
inline int VPNFlowSpecNLRI::rules_size() const {
  return _internal_rules_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.VPNFlowSpecNLRI.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
VPNFlowSpecNLRI::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.VPNFlowSpecNLRI.rules)
  return &rules_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::_internal_rules(int index) const {
  return rules_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& VPNFlowSpecNLRI::rules(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.VPNFlowSpecNLRI.rules)
  return _internal_rules(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::_internal_add_rules() {
  return rules_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* VPNFlowSpecNLRI::add_rules() {
  // @@protoc_insertion_point(field_add:gobgpapi.VPNFlowSpecNLRI.rules)
  return _internal_add_rules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
VPNFlowSpecNLRI::rules() const {
  // @@protoc_insertion_point(field_list:gobgpapi.VPNFlowSpecNLRI.rules)
  return rules_;
}

// -------------------------------------------------------------------

// OpaqueNLRI

// bytes key = 1;
inline void OpaqueNLRI::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpaqueNLRI::key() const {
  // @@protoc_insertion_point(field_get:gobgpapi.OpaqueNLRI.key)
  return _internal_key();
}
inline void OpaqueNLRI::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gobgpapi.OpaqueNLRI.key)
}
inline std::string* OpaqueNLRI::mutable_key() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.OpaqueNLRI.key)
  return _internal_mutable_key();
}
inline const std::string& OpaqueNLRI::_internal_key() const {
  return key_.GetNoArena();
}
inline void OpaqueNLRI::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OpaqueNLRI::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.OpaqueNLRI.key)
}
inline void OpaqueNLRI::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.OpaqueNLRI.key)
}
inline void OpaqueNLRI::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.OpaqueNLRI.key)
}
inline std::string* OpaqueNLRI::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpaqueNLRI::release_key() {
  // @@protoc_insertion_point(field_release:gobgpapi.OpaqueNLRI.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpaqueNLRI::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.OpaqueNLRI.key)
}

// bytes value = 2;
inline void OpaqueNLRI::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpaqueNLRI::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.OpaqueNLRI.value)
  return _internal_value();
}
inline void OpaqueNLRI::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.OpaqueNLRI.value)
}
inline std::string* OpaqueNLRI::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.OpaqueNLRI.value)
  return _internal_mutable_value();
}
inline const std::string& OpaqueNLRI::_internal_value() const {
  return value_.GetNoArena();
}
inline void OpaqueNLRI::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OpaqueNLRI::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.OpaqueNLRI.value)
}
inline void OpaqueNLRI::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.OpaqueNLRI.value)
}
inline void OpaqueNLRI::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.OpaqueNLRI.value)
}
inline std::string* OpaqueNLRI::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpaqueNLRI::release_value() {
  // @@protoc_insertion_point(field_release:gobgpapi.OpaqueNLRI.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpaqueNLRI::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.OpaqueNLRI.value)
}

// -------------------------------------------------------------------

// LsNodeDescriptor

// uint32 asn = 1;
inline void LsNodeDescriptor::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeDescriptor.asn)
  return _internal_asn();
}
inline void LsNodeDescriptor::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void LsNodeDescriptor::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeDescriptor.asn)
}

// uint32 bgp_ls_id = 2;
inline void LsNodeDescriptor::clear_bgp_ls_id() {
  bgp_ls_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::_internal_bgp_ls_id() const {
  return bgp_ls_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::bgp_ls_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeDescriptor.bgp_ls_id)
  return _internal_bgp_ls_id();
}
inline void LsNodeDescriptor::_internal_set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bgp_ls_id_ = value;
}
inline void LsNodeDescriptor::set_bgp_ls_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bgp_ls_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeDescriptor.bgp_ls_id)
}

// uint32 ospf_area_id = 3;
inline void LsNodeDescriptor::clear_ospf_area_id() {
  ospf_area_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::_internal_ospf_area_id() const {
  return ospf_area_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsNodeDescriptor::ospf_area_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeDescriptor.ospf_area_id)
  return _internal_ospf_area_id();
}
inline void LsNodeDescriptor::_internal_set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ospf_area_id_ = value;
}
inline void LsNodeDescriptor::set_ospf_area_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ospf_area_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeDescriptor.ospf_area_id)
}

// bool pseudonode = 4;
inline void LsNodeDescriptor::clear_pseudonode() {
  pseudonode_ = false;
}
inline bool LsNodeDescriptor::_internal_pseudonode() const {
  return pseudonode_;
}
inline bool LsNodeDescriptor::pseudonode() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeDescriptor.pseudonode)
  return _internal_pseudonode();
}
inline void LsNodeDescriptor::_internal_set_pseudonode(bool value) {
  
  pseudonode_ = value;
}
inline void LsNodeDescriptor::set_pseudonode(bool value) {
  _internal_set_pseudonode(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeDescriptor.pseudonode)
}

// string igp_router_id = 5;
inline void LsNodeDescriptor::clear_igp_router_id() {
  igp_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsNodeDescriptor::igp_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeDescriptor.igp_router_id)
  return _internal_igp_router_id();
}
inline void LsNodeDescriptor::set_igp_router_id(const std::string& value) {
  _internal_set_igp_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeDescriptor.igp_router_id)
}
inline std::string* LsNodeDescriptor::mutable_igp_router_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsNodeDescriptor.igp_router_id)
  return _internal_mutable_igp_router_id();
}
inline const std::string& LsNodeDescriptor::_internal_igp_router_id() const {
  return igp_router_id_.GetNoArena();
}
inline void LsNodeDescriptor::_internal_set_igp_router_id(const std::string& value) {
  
  igp_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsNodeDescriptor::set_igp_router_id(std::string&& value) {
  
  igp_router_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsNodeDescriptor.igp_router_id)
}
inline void LsNodeDescriptor::set_igp_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  igp_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsNodeDescriptor.igp_router_id)
}
inline void LsNodeDescriptor::set_igp_router_id(const char* value, size_t size) {
  
  igp_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsNodeDescriptor.igp_router_id)
}
inline std::string* LsNodeDescriptor::_internal_mutable_igp_router_id() {
  
  return igp_router_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsNodeDescriptor::release_igp_router_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsNodeDescriptor.igp_router_id)
  
  return igp_router_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsNodeDescriptor::set_allocated_igp_router_id(std::string* igp_router_id) {
  if (igp_router_id != nullptr) {
    
  } else {
    
  }
  igp_router_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), igp_router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsNodeDescriptor.igp_router_id)
}

// -------------------------------------------------------------------

// LsLinkDescriptor

// uint32 link_local_id = 1;
inline void LsLinkDescriptor::clear_link_local_id() {
  link_local_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::_internal_link_local_id() const {
  return link_local_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::link_local_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkDescriptor.link_local_id)
  return _internal_link_local_id();
}
inline void LsLinkDescriptor::_internal_set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_local_id_ = value;
}
inline void LsLinkDescriptor::set_link_local_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_local_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsLinkDescriptor.link_local_id)
}

// uint32 link_remote_id = 2;
inline void LsLinkDescriptor::clear_link_remote_id() {
  link_remote_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::_internal_link_remote_id() const {
  return link_remote_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsLinkDescriptor::link_remote_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkDescriptor.link_remote_id)
  return _internal_link_remote_id();
}
inline void LsLinkDescriptor::_internal_set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_remote_id_ = value;
}
inline void LsLinkDescriptor::set_link_remote_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_remote_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsLinkDescriptor.link_remote_id)
}

// string interface_addr_ipv4 = 3;
inline void LsLinkDescriptor::clear_interface_addr_ipv4() {
  interface_addr_ipv4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsLinkDescriptor::interface_addr_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
  return _internal_interface_addr_ipv4();
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(const std::string& value) {
  _internal_set_interface_addr_ipv4(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
}
inline std::string* LsLinkDescriptor::mutable_interface_addr_ipv4() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
  return _internal_mutable_interface_addr_ipv4();
}
inline const std::string& LsLinkDescriptor::_internal_interface_addr_ipv4() const {
  return interface_addr_ipv4_.GetNoArena();
}
inline void LsLinkDescriptor::_internal_set_interface_addr_ipv4(const std::string& value) {
  
  interface_addr_ipv4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(std::string&& value) {
  
  interface_addr_ipv4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_addr_ipv4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
}
inline void LsLinkDescriptor::set_interface_addr_ipv4(const char* value, size_t size) {
  
  interface_addr_ipv4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
}
inline std::string* LsLinkDescriptor::_internal_mutable_interface_addr_ipv4() {
  
  return interface_addr_ipv4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsLinkDescriptor::release_interface_addr_ipv4() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
  
  return interface_addr_ipv4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsLinkDescriptor::set_allocated_interface_addr_ipv4(std::string* interface_addr_ipv4) {
  if (interface_addr_ipv4 != nullptr) {
    
  } else {
    
  }
  interface_addr_ipv4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_addr_ipv4);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsLinkDescriptor.interface_addr_ipv4)
}

// string neighbor_addr_ipv4 = 4;
inline void LsLinkDescriptor::clear_neighbor_addr_ipv4() {
  neighbor_addr_ipv4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsLinkDescriptor::neighbor_addr_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
  return _internal_neighbor_addr_ipv4();
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(const std::string& value) {
  _internal_set_neighbor_addr_ipv4(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline std::string* LsLinkDescriptor::mutable_neighbor_addr_ipv4() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
  return _internal_mutable_neighbor_addr_ipv4();
}
inline const std::string& LsLinkDescriptor::_internal_neighbor_addr_ipv4() const {
  return neighbor_addr_ipv4_.GetNoArena();
}
inline void LsLinkDescriptor::_internal_set_neighbor_addr_ipv4(const std::string& value) {
  
  neighbor_addr_ipv4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(std::string&& value) {
  
  neighbor_addr_ipv4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_addr_ipv4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv4(const char* value, size_t size) {
  
  neighbor_addr_ipv4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
}
inline std::string* LsLinkDescriptor::_internal_mutable_neighbor_addr_ipv4() {
  
  return neighbor_addr_ipv4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsLinkDescriptor::release_neighbor_addr_ipv4() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
  
  return neighbor_addr_ipv4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsLinkDescriptor::set_allocated_neighbor_addr_ipv4(std::string* neighbor_addr_ipv4) {
  if (neighbor_addr_ipv4 != nullptr) {
    
  } else {
    
  }
  neighbor_addr_ipv4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_addr_ipv4);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4)
}

// string interface_addr_ipv6 = 5;
inline void LsLinkDescriptor::clear_interface_addr_ipv6() {
  interface_addr_ipv6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsLinkDescriptor::interface_addr_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
  return _internal_interface_addr_ipv6();
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(const std::string& value) {
  _internal_set_interface_addr_ipv6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
}
inline std::string* LsLinkDescriptor::mutable_interface_addr_ipv6() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
  return _internal_mutable_interface_addr_ipv6();
}
inline const std::string& LsLinkDescriptor::_internal_interface_addr_ipv6() const {
  return interface_addr_ipv6_.GetNoArena();
}
inline void LsLinkDescriptor::_internal_set_interface_addr_ipv6(const std::string& value) {
  
  interface_addr_ipv6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(std::string&& value) {
  
  interface_addr_ipv6_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_addr_ipv6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
}
inline void LsLinkDescriptor::set_interface_addr_ipv6(const char* value, size_t size) {
  
  interface_addr_ipv6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
}
inline std::string* LsLinkDescriptor::_internal_mutable_interface_addr_ipv6() {
  
  return interface_addr_ipv6_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsLinkDescriptor::release_interface_addr_ipv6() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
  
  return interface_addr_ipv6_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsLinkDescriptor::set_allocated_interface_addr_ipv6(std::string* interface_addr_ipv6) {
  if (interface_addr_ipv6 != nullptr) {
    
  } else {
    
  }
  interface_addr_ipv6_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_addr_ipv6);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsLinkDescriptor.interface_addr_ipv6)
}

// string neighbor_addr_ipv6 = 6;
inline void LsLinkDescriptor::clear_neighbor_addr_ipv6() {
  neighbor_addr_ipv6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsLinkDescriptor::neighbor_addr_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
  return _internal_neighbor_addr_ipv6();
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(const std::string& value) {
  _internal_set_neighbor_addr_ipv6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline std::string* LsLinkDescriptor::mutable_neighbor_addr_ipv6() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
  return _internal_mutable_neighbor_addr_ipv6();
}
inline const std::string& LsLinkDescriptor::_internal_neighbor_addr_ipv6() const {
  return neighbor_addr_ipv6_.GetNoArena();
}
inline void LsLinkDescriptor::_internal_set_neighbor_addr_ipv6(const std::string& value) {
  
  neighbor_addr_ipv6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(std::string&& value) {
  
  neighbor_addr_ipv6_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neighbor_addr_ipv6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline void LsLinkDescriptor::set_neighbor_addr_ipv6(const char* value, size_t size) {
  
  neighbor_addr_ipv6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
}
inline std::string* LsLinkDescriptor::_internal_mutable_neighbor_addr_ipv6() {
  
  return neighbor_addr_ipv6_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsLinkDescriptor::release_neighbor_addr_ipv6() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
  
  return neighbor_addr_ipv6_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsLinkDescriptor::set_allocated_neighbor_addr_ipv6(std::string* neighbor_addr_ipv6) {
  if (neighbor_addr_ipv6 != nullptr) {
    
  } else {
    
  }
  neighbor_addr_ipv6_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbor_addr_ipv6);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6)
}

// -------------------------------------------------------------------

// LsPrefixDescriptor

// repeated string ip_reachability = 1;
inline int LsPrefixDescriptor::_internal_ip_reachability_size() const {
  return ip_reachability_.size();
}
inline int LsPrefixDescriptor::ip_reachability_size() const {
  return _internal_ip_reachability_size();
}
inline void LsPrefixDescriptor::clear_ip_reachability() {
  ip_reachability_.Clear();
}
inline std::string* LsPrefixDescriptor::add_ip_reachability() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.LsPrefixDescriptor.ip_reachability)
  return _internal_add_ip_reachability();
}
inline const std::string& LsPrefixDescriptor::_internal_ip_reachability(int index) const {
  return ip_reachability_.Get(index);
}
inline const std::string& LsPrefixDescriptor::ip_reachability(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsPrefixDescriptor.ip_reachability)
  return _internal_ip_reachability(index);
}
inline std::string* LsPrefixDescriptor::mutable_ip_reachability(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsPrefixDescriptor.ip_reachability)
  return ip_reachability_.Mutable(index);
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.LsPrefixDescriptor.ip_reachability)
  ip_reachability_.Mutable(index)->assign(value);
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.LsPrefixDescriptor.ip_reachability)
  ip_reachability_.Mutable(index)->assign(std::move(value));
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_reachability_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::set_ip_reachability(int index, const char* value, size_t size) {
  ip_reachability_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsPrefixDescriptor.ip_reachability)
}
inline std::string* LsPrefixDescriptor::_internal_add_ip_reachability() {
  return ip_reachability_.Add();
}
inline void LsPrefixDescriptor::add_ip_reachability(const std::string& value) {
  ip_reachability_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::add_ip_reachability(std::string&& value) {
  ip_reachability_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::add_ip_reachability(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ip_reachability_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.LsPrefixDescriptor.ip_reachability)
}
inline void LsPrefixDescriptor::add_ip_reachability(const char* value, size_t size) {
  ip_reachability_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.LsPrefixDescriptor.ip_reachability)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LsPrefixDescriptor::ip_reachability() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LsPrefixDescriptor.ip_reachability)
  return ip_reachability_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LsPrefixDescriptor::mutable_ip_reachability() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LsPrefixDescriptor.ip_reachability)
  return &ip_reachability_;
}

// string ospf_route_type = 2;
inline void LsPrefixDescriptor::clear_ospf_route_type() {
  ospf_route_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsPrefixDescriptor::ospf_route_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsPrefixDescriptor.ospf_route_type)
  return _internal_ospf_route_type();
}
inline void LsPrefixDescriptor::set_ospf_route_type(const std::string& value) {
  _internal_set_ospf_route_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsPrefixDescriptor.ospf_route_type)
}
inline std::string* LsPrefixDescriptor::mutable_ospf_route_type() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsPrefixDescriptor.ospf_route_type)
  return _internal_mutable_ospf_route_type();
}
inline const std::string& LsPrefixDescriptor::_internal_ospf_route_type() const {
  return ospf_route_type_.GetNoArena();
}
inline void LsPrefixDescriptor::_internal_set_ospf_route_type(const std::string& value) {
  
  ospf_route_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsPrefixDescriptor::set_ospf_route_type(std::string&& value) {
  
  ospf_route_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsPrefixDescriptor.ospf_route_type)
}
inline void LsPrefixDescriptor::set_ospf_route_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ospf_route_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsPrefixDescriptor.ospf_route_type)
}
inline void LsPrefixDescriptor::set_ospf_route_type(const char* value, size_t size) {
  
  ospf_route_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsPrefixDescriptor.ospf_route_type)
}
inline std::string* LsPrefixDescriptor::_internal_mutable_ospf_route_type() {
  
  return ospf_route_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsPrefixDescriptor::release_ospf_route_type() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsPrefixDescriptor.ospf_route_type)
  
  return ospf_route_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsPrefixDescriptor::set_allocated_ospf_route_type(std::string* ospf_route_type) {
  if (ospf_route_type != nullptr) {
    
  } else {
    
  }
  ospf_route_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ospf_route_type);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsPrefixDescriptor.ospf_route_type)
}

// -------------------------------------------------------------------

// LsNodeNLRI

// .gobgpapi.LsNodeDescriptor local_node = 1;
inline bool LsNodeNLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsNodeNLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsNodeNLRI::clear_local_node() {
  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::gobgpapi::LsNodeDescriptor& LsNodeNLRI::_internal_local_node() const {
  const ::gobgpapi::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsNodeDescriptor*>(
      &::gobgpapi::_LsNodeDescriptor_default_instance_);
}
inline const ::gobgpapi::LsNodeDescriptor& LsNodeNLRI::local_node() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeNLRI.local_node)
  return _internal_local_node();
}
inline ::gobgpapi::LsNodeDescriptor* LsNodeNLRI::release_local_node() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsNodeNLRI.local_node)
  
  ::gobgpapi::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsNodeDescriptor* LsNodeNLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsNodeDescriptor>(GetArenaNoVirtual());
    local_node_ = p;
  }
  return local_node_;
}
inline ::gobgpapi::LsNodeDescriptor* LsNodeNLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsNodeNLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsNodeNLRI::set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsNodeNLRI.local_node)
}

// -------------------------------------------------------------------

// LsLinkNLRI

// .gobgpapi.LsNodeDescriptor local_node = 1;
inline bool LsLinkNLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsLinkNLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsLinkNLRI::clear_local_node() {
  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::gobgpapi::LsNodeDescriptor& LsLinkNLRI::_internal_local_node() const {
  const ::gobgpapi::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsNodeDescriptor*>(
      &::gobgpapi::_LsNodeDescriptor_default_instance_);
}
inline const ::gobgpapi::LsNodeDescriptor& LsLinkNLRI::local_node() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkNLRI.local_node)
  return _internal_local_node();
}
inline ::gobgpapi::LsNodeDescriptor* LsLinkNLRI::release_local_node() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsLinkNLRI.local_node)
  
  ::gobgpapi::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsNodeDescriptor* LsLinkNLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsNodeDescriptor>(GetArenaNoVirtual());
    local_node_ = p;
  }
  return local_node_;
}
inline ::gobgpapi::LsNodeDescriptor* LsLinkNLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsLinkNLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsLinkNLRI::set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsLinkNLRI.local_node)
}

// .gobgpapi.LsNodeDescriptor remote_node = 2;
inline bool LsLinkNLRI::_internal_has_remote_node() const {
  return this != internal_default_instance() && remote_node_ != nullptr;
}
inline bool LsLinkNLRI::has_remote_node() const {
  return _internal_has_remote_node();
}
inline void LsLinkNLRI::clear_remote_node() {
  if (GetArenaNoVirtual() == nullptr && remote_node_ != nullptr) {
    delete remote_node_;
  }
  remote_node_ = nullptr;
}
inline const ::gobgpapi::LsNodeDescriptor& LsLinkNLRI::_internal_remote_node() const {
  const ::gobgpapi::LsNodeDescriptor* p = remote_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsNodeDescriptor*>(
      &::gobgpapi::_LsNodeDescriptor_default_instance_);
}
inline const ::gobgpapi::LsNodeDescriptor& LsLinkNLRI::remote_node() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkNLRI.remote_node)
  return _internal_remote_node();
}
inline ::gobgpapi::LsNodeDescriptor* LsLinkNLRI::release_remote_node() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsLinkNLRI.remote_node)
  
  ::gobgpapi::LsNodeDescriptor* temp = remote_node_;
  remote_node_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsNodeDescriptor* LsLinkNLRI::_internal_mutable_remote_node() {
  
  if (remote_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsNodeDescriptor>(GetArenaNoVirtual());
    remote_node_ = p;
  }
  return remote_node_;
}
inline ::gobgpapi::LsNodeDescriptor* LsLinkNLRI::mutable_remote_node() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsLinkNLRI.remote_node)
  return _internal_mutable_remote_node();
}
inline void LsLinkNLRI::set_allocated_remote_node(::gobgpapi::LsNodeDescriptor* remote_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete remote_node_;
  }
  if (remote_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_node, submessage_arena);
    }
    
  } else {
    
  }
  remote_node_ = remote_node;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsLinkNLRI.remote_node)
}

// .gobgpapi.LsLinkDescriptor link_descriptor = 3;
inline bool LsLinkNLRI::_internal_has_link_descriptor() const {
  return this != internal_default_instance() && link_descriptor_ != nullptr;
}
inline bool LsLinkNLRI::has_link_descriptor() const {
  return _internal_has_link_descriptor();
}
inline void LsLinkNLRI::clear_link_descriptor() {
  if (GetArenaNoVirtual() == nullptr && link_descriptor_ != nullptr) {
    delete link_descriptor_;
  }
  link_descriptor_ = nullptr;
}
inline const ::gobgpapi::LsLinkDescriptor& LsLinkNLRI::_internal_link_descriptor() const {
  const ::gobgpapi::LsLinkDescriptor* p = link_descriptor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsLinkDescriptor*>(
      &::gobgpapi::_LsLinkDescriptor_default_instance_);
}
inline const ::gobgpapi::LsLinkDescriptor& LsLinkNLRI::link_descriptor() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsLinkNLRI.link_descriptor)
  return _internal_link_descriptor();
}
inline ::gobgpapi::LsLinkDescriptor* LsLinkNLRI::release_link_descriptor() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsLinkNLRI.link_descriptor)
  
  ::gobgpapi::LsLinkDescriptor* temp = link_descriptor_;
  link_descriptor_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsLinkDescriptor* LsLinkNLRI::_internal_mutable_link_descriptor() {
  
  if (link_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsLinkDescriptor>(GetArenaNoVirtual());
    link_descriptor_ = p;
  }
  return link_descriptor_;
}
inline ::gobgpapi::LsLinkDescriptor* LsLinkNLRI::mutable_link_descriptor() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsLinkNLRI.link_descriptor)
  return _internal_mutable_link_descriptor();
}
inline void LsLinkNLRI::set_allocated_link_descriptor(::gobgpapi::LsLinkDescriptor* link_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_descriptor_;
  }
  if (link_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  link_descriptor_ = link_descriptor;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsLinkNLRI.link_descriptor)
}

// -------------------------------------------------------------------

// LsPrefixV4NLRI

// .gobgpapi.LsNodeDescriptor local_node = 1;
inline bool LsPrefixV4NLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsPrefixV4NLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsPrefixV4NLRI::clear_local_node() {
  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::gobgpapi::LsNodeDescriptor& LsPrefixV4NLRI::_internal_local_node() const {
  const ::gobgpapi::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsNodeDescriptor*>(
      &::gobgpapi::_LsNodeDescriptor_default_instance_);
}
inline const ::gobgpapi::LsNodeDescriptor& LsPrefixV4NLRI::local_node() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsPrefixV4NLRI.local_node)
  return _internal_local_node();
}
inline ::gobgpapi::LsNodeDescriptor* LsPrefixV4NLRI::release_local_node() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsPrefixV4NLRI.local_node)
  
  ::gobgpapi::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsNodeDescriptor* LsPrefixV4NLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsNodeDescriptor>(GetArenaNoVirtual());
    local_node_ = p;
  }
  return local_node_;
}
inline ::gobgpapi::LsNodeDescriptor* LsPrefixV4NLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsPrefixV4NLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsPrefixV4NLRI::set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsPrefixV4NLRI.local_node)
}

// .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
inline bool LsPrefixV4NLRI::_internal_has_prefix_descriptor() const {
  return this != internal_default_instance() && prefix_descriptor_ != nullptr;
}
inline bool LsPrefixV4NLRI::has_prefix_descriptor() const {
  return _internal_has_prefix_descriptor();
}
inline void LsPrefixV4NLRI::clear_prefix_descriptor() {
  if (GetArenaNoVirtual() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
}
inline const ::gobgpapi::LsPrefixDescriptor& LsPrefixV4NLRI::_internal_prefix_descriptor() const {
  const ::gobgpapi::LsPrefixDescriptor* p = prefix_descriptor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsPrefixDescriptor*>(
      &::gobgpapi::_LsPrefixDescriptor_default_instance_);
}
inline const ::gobgpapi::LsPrefixDescriptor& LsPrefixV4NLRI::prefix_descriptor() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsPrefixV4NLRI.prefix_descriptor)
  return _internal_prefix_descriptor();
}
inline ::gobgpapi::LsPrefixDescriptor* LsPrefixV4NLRI::release_prefix_descriptor() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsPrefixV4NLRI.prefix_descriptor)
  
  ::gobgpapi::LsPrefixDescriptor* temp = prefix_descriptor_;
  prefix_descriptor_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsPrefixDescriptor* LsPrefixV4NLRI::_internal_mutable_prefix_descriptor() {
  
  if (prefix_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsPrefixDescriptor>(GetArenaNoVirtual());
    prefix_descriptor_ = p;
  }
  return prefix_descriptor_;
}
inline ::gobgpapi::LsPrefixDescriptor* LsPrefixV4NLRI::mutable_prefix_descriptor() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsPrefixV4NLRI.prefix_descriptor)
  return _internal_mutable_prefix_descriptor();
}
inline void LsPrefixV4NLRI::set_allocated_prefix_descriptor(::gobgpapi::LsPrefixDescriptor* prefix_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prefix_descriptor_;
  }
  if (prefix_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefix_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  prefix_descriptor_ = prefix_descriptor;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsPrefixV4NLRI.prefix_descriptor)
}

// -------------------------------------------------------------------

// LsPrefixV6NLRI

// .gobgpapi.LsNodeDescriptor local_node = 1;
inline bool LsPrefixV6NLRI::_internal_has_local_node() const {
  return this != internal_default_instance() && local_node_ != nullptr;
}
inline bool LsPrefixV6NLRI::has_local_node() const {
  return _internal_has_local_node();
}
inline void LsPrefixV6NLRI::clear_local_node() {
  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
}
inline const ::gobgpapi::LsNodeDescriptor& LsPrefixV6NLRI::_internal_local_node() const {
  const ::gobgpapi::LsNodeDescriptor* p = local_node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsNodeDescriptor*>(
      &::gobgpapi::_LsNodeDescriptor_default_instance_);
}
inline const ::gobgpapi::LsNodeDescriptor& LsPrefixV6NLRI::local_node() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsPrefixV6NLRI.local_node)
  return _internal_local_node();
}
inline ::gobgpapi::LsNodeDescriptor* LsPrefixV6NLRI::release_local_node() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsPrefixV6NLRI.local_node)
  
  ::gobgpapi::LsNodeDescriptor* temp = local_node_;
  local_node_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsNodeDescriptor* LsPrefixV6NLRI::_internal_mutable_local_node() {
  
  if (local_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsNodeDescriptor>(GetArenaNoVirtual());
    local_node_ = p;
  }
  return local_node_;
}
inline ::gobgpapi::LsNodeDescriptor* LsPrefixV6NLRI::mutable_local_node() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsPrefixV6NLRI.local_node)
  return _internal_mutable_local_node();
}
inline void LsPrefixV6NLRI::set_allocated_local_node(::gobgpapi::LsNodeDescriptor* local_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_node_;
  }
  if (local_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_node, submessage_arena);
    }
    
  } else {
    
  }
  local_node_ = local_node;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsPrefixV6NLRI.local_node)
}

// .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
inline bool LsPrefixV6NLRI::_internal_has_prefix_descriptor() const {
  return this != internal_default_instance() && prefix_descriptor_ != nullptr;
}
inline bool LsPrefixV6NLRI::has_prefix_descriptor() const {
  return _internal_has_prefix_descriptor();
}
inline void LsPrefixV6NLRI::clear_prefix_descriptor() {
  if (GetArenaNoVirtual() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
}
inline const ::gobgpapi::LsPrefixDescriptor& LsPrefixV6NLRI::_internal_prefix_descriptor() const {
  const ::gobgpapi::LsPrefixDescriptor* p = prefix_descriptor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsPrefixDescriptor*>(
      &::gobgpapi::_LsPrefixDescriptor_default_instance_);
}
inline const ::gobgpapi::LsPrefixDescriptor& LsPrefixV6NLRI::prefix_descriptor() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsPrefixV6NLRI.prefix_descriptor)
  return _internal_prefix_descriptor();
}
inline ::gobgpapi::LsPrefixDescriptor* LsPrefixV6NLRI::release_prefix_descriptor() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsPrefixV6NLRI.prefix_descriptor)
  
  ::gobgpapi::LsPrefixDescriptor* temp = prefix_descriptor_;
  prefix_descriptor_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsPrefixDescriptor* LsPrefixV6NLRI::_internal_mutable_prefix_descriptor() {
  
  if (prefix_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsPrefixDescriptor>(GetArenaNoVirtual());
    prefix_descriptor_ = p;
  }
  return prefix_descriptor_;
}
inline ::gobgpapi::LsPrefixDescriptor* LsPrefixV6NLRI::mutable_prefix_descriptor() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsPrefixV6NLRI.prefix_descriptor)
  return _internal_mutable_prefix_descriptor();
}
inline void LsPrefixV6NLRI::set_allocated_prefix_descriptor(::gobgpapi::LsPrefixDescriptor* prefix_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prefix_descriptor_;
  }
  if (prefix_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefix_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  prefix_descriptor_ = prefix_descriptor;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsPrefixV6NLRI.prefix_descriptor)
}

// -------------------------------------------------------------------

// LsAddrPrefix

// .gobgpapi.LsNLRIType type = 1;
inline void LsAddrPrefix::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::LsNLRIType LsAddrPrefix::_internal_type() const {
  return static_cast< ::gobgpapi::LsNLRIType >(type_);
}
inline ::gobgpapi::LsNLRIType LsAddrPrefix::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAddrPrefix.type)
  return _internal_type();
}
inline void LsAddrPrefix::_internal_set_type(::gobgpapi::LsNLRIType value) {
  
  type_ = value;
}
inline void LsAddrPrefix::set_type(::gobgpapi::LsNLRIType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAddrPrefix.type)
}

// .google.protobuf.Any nlri = 2;
inline bool LsAddrPrefix::_internal_has_nlri() const {
  return this != internal_default_instance() && nlri_ != nullptr;
}
inline bool LsAddrPrefix::has_nlri() const {
  return _internal_has_nlri();
}
inline const PROTOBUF_NAMESPACE_ID::Any& LsAddrPrefix::_internal_nlri() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = nlri_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& LsAddrPrefix::nlri() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAddrPrefix.nlri)
  return _internal_nlri();
}
inline PROTOBUF_NAMESPACE_ID::Any* LsAddrPrefix::release_nlri() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAddrPrefix.nlri)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = nlri_;
  nlri_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* LsAddrPrefix::_internal_mutable_nlri() {
  
  if (nlri_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    nlri_ = p;
  }
  return nlri_;
}
inline PROTOBUF_NAMESPACE_ID::Any* LsAddrPrefix::mutable_nlri() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAddrPrefix.nlri)
  return _internal_mutable_nlri();
}
inline void LsAddrPrefix::set_allocated_nlri(PROTOBUF_NAMESPACE_ID::Any* nlri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlri_);
  }
  if (nlri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nlri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nlri, submessage_arena);
    }
    
  } else {
    
  }
  nlri_ = nlri;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAddrPrefix.nlri)
}

// -------------------------------------------------------------------

// MpReachNLRIAttribute

// .gobgpapi.Family family = 1;
inline bool MpReachNLRIAttribute::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool MpReachNLRIAttribute::has_family() const {
  return _internal_has_family();
}
inline const ::gobgpapi::Family& MpReachNLRIAttribute::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& MpReachNLRIAttribute::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpReachNLRIAttribute.family)
  return _internal_family();
}
inline ::gobgpapi::Family* MpReachNLRIAttribute::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.MpReachNLRIAttribute.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* MpReachNLRIAttribute::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* MpReachNLRIAttribute::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpReachNLRIAttribute.family)
  return _internal_mutable_family();
}
inline void MpReachNLRIAttribute::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_);
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MpReachNLRIAttribute.family)
}

// repeated string next_hops = 2;
inline int MpReachNLRIAttribute::_internal_next_hops_size() const {
  return next_hops_.size();
}
inline int MpReachNLRIAttribute::next_hops_size() const {
  return _internal_next_hops_size();
}
inline void MpReachNLRIAttribute::clear_next_hops() {
  next_hops_.Clear();
}
inline std::string* MpReachNLRIAttribute::add_next_hops() {
  // @@protoc_insertion_point(field_add_mutable:gobgpapi.MpReachNLRIAttribute.next_hops)
  return _internal_add_next_hops();
}
inline const std::string& MpReachNLRIAttribute::_internal_next_hops(int index) const {
  return next_hops_.Get(index);
}
inline const std::string& MpReachNLRIAttribute::next_hops(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpReachNLRIAttribute.next_hops)
  return _internal_next_hops(index);
}
inline std::string* MpReachNLRIAttribute::mutable_next_hops(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpReachNLRIAttribute.next_hops)
  return next_hops_.Mutable(index);
}
inline void MpReachNLRIAttribute::set_next_hops(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.MpReachNLRIAttribute.next_hops)
  next_hops_.Mutable(index)->assign(value);
}
inline void MpReachNLRIAttribute::set_next_hops(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.MpReachNLRIAttribute.next_hops)
  next_hops_.Mutable(index)->assign(std::move(value));
}
inline void MpReachNLRIAttribute::set_next_hops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  next_hops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::set_next_hops(int index, const char* value, size_t size) {
  next_hops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MpReachNLRIAttribute.next_hops)
}
inline std::string* MpReachNLRIAttribute::_internal_add_next_hops() {
  return next_hops_.Add();
}
inline void MpReachNLRIAttribute::add_next_hops(const std::string& value) {
  next_hops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::add_next_hops(std::string&& value) {
  next_hops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gobgpapi.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::add_next_hops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  next_hops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.MpReachNLRIAttribute.next_hops)
}
inline void MpReachNLRIAttribute::add_next_hops(const char* value, size_t size) {
  next_hops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.MpReachNLRIAttribute.next_hops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MpReachNLRIAttribute::next_hops() const {
  // @@protoc_insertion_point(field_list:gobgpapi.MpReachNLRIAttribute.next_hops)
  return next_hops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MpReachNLRIAttribute::mutable_next_hops() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.MpReachNLRIAttribute.next_hops)
  return &next_hops_;
}

// repeated .google.protobuf.Any nlris = 3;
inline int MpReachNLRIAttribute::_internal_nlris_size() const {
  return nlris_.size();
}
inline int MpReachNLRIAttribute::nlris_size() const {
  return _internal_nlris_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpReachNLRIAttribute::mutable_nlris(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpReachNLRIAttribute.nlris)
  return nlris_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
MpReachNLRIAttribute::mutable_nlris() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.MpReachNLRIAttribute.nlris)
  return &nlris_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpReachNLRIAttribute::_internal_nlris(int index) const {
  return nlris_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpReachNLRIAttribute::nlris(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpReachNLRIAttribute.nlris)
  return _internal_nlris(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* MpReachNLRIAttribute::_internal_add_nlris() {
  return nlris_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpReachNLRIAttribute::add_nlris() {
  // @@protoc_insertion_point(field_add:gobgpapi.MpReachNLRIAttribute.nlris)
  return _internal_add_nlris();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
MpReachNLRIAttribute::nlris() const {
  // @@protoc_insertion_point(field_list:gobgpapi.MpReachNLRIAttribute.nlris)
  return nlris_;
}

// -------------------------------------------------------------------

// MpUnreachNLRIAttribute

// .gobgpapi.Family family = 1;
inline bool MpUnreachNLRIAttribute::_internal_has_family() const {
  return this != internal_default_instance() && family_ != nullptr;
}
inline bool MpUnreachNLRIAttribute::has_family() const {
  return _internal_has_family();
}
inline const ::gobgpapi::Family& MpUnreachNLRIAttribute::_internal_family() const {
  const ::gobgpapi::Family* p = family_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::Family*>(
      &::gobgpapi::_Family_default_instance_);
}
inline const ::gobgpapi::Family& MpUnreachNLRIAttribute::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpUnreachNLRIAttribute.family)
  return _internal_family();
}
inline ::gobgpapi::Family* MpUnreachNLRIAttribute::release_family() {
  // @@protoc_insertion_point(field_release:gobgpapi.MpUnreachNLRIAttribute.family)
  
  ::gobgpapi::Family* temp = family_;
  family_ = nullptr;
  return temp;
}
inline ::gobgpapi::Family* MpUnreachNLRIAttribute::_internal_mutable_family() {
  
  if (family_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::Family>(GetArenaNoVirtual());
    family_ = p;
  }
  return family_;
}
inline ::gobgpapi::Family* MpUnreachNLRIAttribute::mutable_family() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpUnreachNLRIAttribute.family)
  return _internal_mutable_family();
}
inline void MpUnreachNLRIAttribute::set_allocated_family(::gobgpapi::Family* family) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(family_);
  }
  if (family) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      family = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MpUnreachNLRIAttribute.family)
}

// repeated .google.protobuf.Any nlris = 3;
inline int MpUnreachNLRIAttribute::_internal_nlris_size() const {
  return nlris_.size();
}
inline int MpUnreachNLRIAttribute::nlris_size() const {
  return _internal_nlris_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpUnreachNLRIAttribute::mutable_nlris(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.MpUnreachNLRIAttribute.nlris)
  return nlris_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
MpUnreachNLRIAttribute::mutable_nlris() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.MpUnreachNLRIAttribute.nlris)
  return &nlris_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpUnreachNLRIAttribute::_internal_nlris(int index) const {
  return nlris_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MpUnreachNLRIAttribute::nlris(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.MpUnreachNLRIAttribute.nlris)
  return _internal_nlris(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* MpUnreachNLRIAttribute::_internal_add_nlris() {
  return nlris_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* MpUnreachNLRIAttribute::add_nlris() {
  // @@protoc_insertion_point(field_add:gobgpapi.MpUnreachNLRIAttribute.nlris)
  return _internal_add_nlris();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
MpUnreachNLRIAttribute::nlris() const {
  // @@protoc_insertion_point(field_list:gobgpapi.MpUnreachNLRIAttribute.nlris)
  return nlris_;
}

// -------------------------------------------------------------------

// TwoOctetAsSpecificExtended

// bool is_transitive = 1;
inline void TwoOctetAsSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool TwoOctetAsSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool TwoOctetAsSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TwoOctetAsSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void TwoOctetAsSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void TwoOctetAsSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TwoOctetAsSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void TwoOctetAsSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TwoOctetAsSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void TwoOctetAsSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void TwoOctetAsSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TwoOctetAsSpecificExtended.sub_type)
}

// uint32 as = 3;
inline void TwoOctetAsSpecificExtended::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TwoOctetAsSpecificExtended.as)
  return _internal_as();
}
inline void TwoOctetAsSpecificExtended::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void TwoOctetAsSpecificExtended::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TwoOctetAsSpecificExtended.as)
}

// uint32 local_admin = 4;
inline void TwoOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TwoOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TwoOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void TwoOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void TwoOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TwoOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// IPv4AddressSpecificExtended

// bool is_transitive = 1;
inline void IPv4AddressSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool IPv4AddressSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool IPv4AddressSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv4AddressSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void IPv4AddressSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void IPv4AddressSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv4AddressSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void IPv4AddressSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv4AddressSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void IPv4AddressSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void IPv4AddressSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv4AddressSpecificExtended.sub_type)
}

// string address = 3;
inline void IPv4AddressSpecificExtended::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IPv4AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv4AddressSpecificExtended.address)
  return _internal_address();
}
inline void IPv4AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv4AddressSpecificExtended.address)
}
inline std::string* IPv4AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.IPv4AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& IPv4AddressSpecificExtended::_internal_address() const {
  return address_.GetNoArena();
}
inline void IPv4AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IPv4AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.IPv4AddressSpecificExtended.address)
}
inline void IPv4AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.IPv4AddressSpecificExtended.address)
}
inline void IPv4AddressSpecificExtended::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.IPv4AddressSpecificExtended.address)
}
inline std::string* IPv4AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IPv4AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.IPv4AddressSpecificExtended.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IPv4AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.IPv4AddressSpecificExtended.address)
}

// uint32 local_admin = 4;
inline void IPv4AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv4AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv4AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void IPv4AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void IPv4AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv4AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// FourOctetAsSpecificExtended

// bool is_transitive = 1;
inline void FourOctetAsSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool FourOctetAsSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool FourOctetAsSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FourOctetAsSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void FourOctetAsSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void FourOctetAsSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FourOctetAsSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void FourOctetAsSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FourOctetAsSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void FourOctetAsSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void FourOctetAsSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FourOctetAsSpecificExtended.sub_type)
}

// uint32 as = 3;
inline void FourOctetAsSpecificExtended::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FourOctetAsSpecificExtended.as)
  return _internal_as();
}
inline void FourOctetAsSpecificExtended::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void FourOctetAsSpecificExtended::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FourOctetAsSpecificExtended.as)
}

// uint32 local_admin = 4;
inline void FourOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FourOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.FourOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void FourOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void FourOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.FourOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// ValidationExtended

// uint32 state = 1;
inline void ValidationExtended::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ValidationExtended::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ValidationExtended::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ValidationExtended.state)
  return _internal_state();
}
inline void ValidationExtended::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void ValidationExtended::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ValidationExtended.state)
}

// -------------------------------------------------------------------

// ColorExtended

// uint32 color = 1;
inline void ColorExtended::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorExtended::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorExtended::color() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ColorExtended.color)
  return _internal_color();
}
inline void ColorExtended::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void ColorExtended::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ColorExtended.color)
}

// -------------------------------------------------------------------

// EncapExtended

// uint32 tunnel_type = 1;
inline void EncapExtended::clear_tunnel_type() {
  tunnel_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncapExtended::_internal_tunnel_type() const {
  return tunnel_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EncapExtended::tunnel_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EncapExtended.tunnel_type)
  return _internal_tunnel_type();
}
inline void EncapExtended::_internal_set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tunnel_type_ = value;
}
inline void EncapExtended::set_tunnel_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tunnel_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.EncapExtended.tunnel_type)
}

// -------------------------------------------------------------------

// DefaultGatewayExtended

// -------------------------------------------------------------------

// OpaqueExtended

// bool is_transitive = 1;
inline void OpaqueExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool OpaqueExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool OpaqueExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.OpaqueExtended.is_transitive)
  return _internal_is_transitive();
}
inline void OpaqueExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void OpaqueExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.OpaqueExtended.is_transitive)
}

// bytes value = 3;
inline void OpaqueExtended::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpaqueExtended::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.OpaqueExtended.value)
  return _internal_value();
}
inline void OpaqueExtended::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.OpaqueExtended.value)
}
inline std::string* OpaqueExtended::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.OpaqueExtended.value)
  return _internal_mutable_value();
}
inline const std::string& OpaqueExtended::_internal_value() const {
  return value_.GetNoArena();
}
inline void OpaqueExtended::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OpaqueExtended::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.OpaqueExtended.value)
}
inline void OpaqueExtended::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.OpaqueExtended.value)
}
inline void OpaqueExtended::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.OpaqueExtended.value)
}
inline std::string* OpaqueExtended::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpaqueExtended::release_value() {
  // @@protoc_insertion_point(field_release:gobgpapi.OpaqueExtended.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpaqueExtended::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.OpaqueExtended.value)
}

// -------------------------------------------------------------------

// ESILabelExtended

// bool is_single_active = 1;
inline void ESILabelExtended::clear_is_single_active() {
  is_single_active_ = false;
}
inline bool ESILabelExtended::_internal_is_single_active() const {
  return is_single_active_;
}
inline bool ESILabelExtended::is_single_active() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ESILabelExtended.is_single_active)
  return _internal_is_single_active();
}
inline void ESILabelExtended::_internal_set_is_single_active(bool value) {
  
  is_single_active_ = value;
}
inline void ESILabelExtended::set_is_single_active(bool value) {
  _internal_set_is_single_active(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ESILabelExtended.is_single_active)
}

// uint32 label = 2;
inline void ESILabelExtended::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ESILabelExtended::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ESILabelExtended::label() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ESILabelExtended.label)
  return _internal_label();
}
inline void ESILabelExtended::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void ESILabelExtended::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ESILabelExtended.label)
}

// -------------------------------------------------------------------

// ESImportRouteTarget

// string es_import = 1;
inline void ESImportRouteTarget::clear_es_import() {
  es_import_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ESImportRouteTarget::es_import() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ESImportRouteTarget.es_import)
  return _internal_es_import();
}
inline void ESImportRouteTarget::set_es_import(const std::string& value) {
  _internal_set_es_import(value);
  // @@protoc_insertion_point(field_set:gobgpapi.ESImportRouteTarget.es_import)
}
inline std::string* ESImportRouteTarget::mutable_es_import() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ESImportRouteTarget.es_import)
  return _internal_mutable_es_import();
}
inline const std::string& ESImportRouteTarget::_internal_es_import() const {
  return es_import_.GetNoArena();
}
inline void ESImportRouteTarget::_internal_set_es_import(const std::string& value) {
  
  es_import_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ESImportRouteTarget::set_es_import(std::string&& value) {
  
  es_import_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.ESImportRouteTarget.es_import)
}
inline void ESImportRouteTarget::set_es_import(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  es_import_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ESImportRouteTarget.es_import)
}
inline void ESImportRouteTarget::set_es_import(const char* value, size_t size) {
  
  es_import_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ESImportRouteTarget.es_import)
}
inline std::string* ESImportRouteTarget::_internal_mutable_es_import() {
  
  return es_import_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ESImportRouteTarget::release_es_import() {
  // @@protoc_insertion_point(field_release:gobgpapi.ESImportRouteTarget.es_import)
  
  return es_import_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ESImportRouteTarget::set_allocated_es_import(std::string* es_import) {
  if (es_import != nullptr) {
    
  } else {
    
  }
  es_import_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), es_import);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ESImportRouteTarget.es_import)
}

// -------------------------------------------------------------------

// MacMobilityExtended

// bool is_sticky = 1;
inline void MacMobilityExtended::clear_is_sticky() {
  is_sticky_ = false;
}
inline bool MacMobilityExtended::_internal_is_sticky() const {
  return is_sticky_;
}
inline bool MacMobilityExtended::is_sticky() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MacMobilityExtended.is_sticky)
  return _internal_is_sticky();
}
inline void MacMobilityExtended::_internal_set_is_sticky(bool value) {
  
  is_sticky_ = value;
}
inline void MacMobilityExtended::set_is_sticky(bool value) {
  _internal_set_is_sticky(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MacMobilityExtended.is_sticky)
}

// uint32 sequence_num = 2;
inline void MacMobilityExtended::clear_sequence_num() {
  sequence_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MacMobilityExtended::_internal_sequence_num() const {
  return sequence_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MacMobilityExtended::sequence_num() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MacMobilityExtended.sequence_num)
  return _internal_sequence_num();
}
inline void MacMobilityExtended::_internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_num_ = value;
}
inline void MacMobilityExtended::set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_num(value);
  // @@protoc_insertion_point(field_set:gobgpapi.MacMobilityExtended.sequence_num)
}

// -------------------------------------------------------------------

// RouterMacExtended

// string mac = 1;
inline void RouterMacExtended::clear_mac() {
  mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouterMacExtended::mac() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouterMacExtended.mac)
  return _internal_mac();
}
inline void RouterMacExtended::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RouterMacExtended.mac)
}
inline std::string* RouterMacExtended::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RouterMacExtended.mac)
  return _internal_mutable_mac();
}
inline const std::string& RouterMacExtended::_internal_mac() const {
  return mac_.GetNoArena();
}
inline void RouterMacExtended::_internal_set_mac(const std::string& value) {
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouterMacExtended::set_mac(std::string&& value) {
  
  mac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RouterMacExtended.mac)
}
inline void RouterMacExtended::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RouterMacExtended.mac)
}
inline void RouterMacExtended::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RouterMacExtended.mac)
}
inline std::string* RouterMacExtended::_internal_mutable_mac() {
  
  return mac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouterMacExtended::release_mac() {
  // @@protoc_insertion_point(field_release:gobgpapi.RouterMacExtended.mac)
  
  return mac_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouterMacExtended::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RouterMacExtended.mac)
}

// -------------------------------------------------------------------

// TrafficRateExtended

// uint32 as = 1;
inline void TrafficRateExtended::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRateExtended::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRateExtended::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TrafficRateExtended.as)
  return _internal_as();
}
inline void TrafficRateExtended::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void TrafficRateExtended::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TrafficRateExtended.as)
}

// float rate = 2;
inline void TrafficRateExtended::clear_rate() {
  rate_ = 0;
}
inline float TrafficRateExtended::_internal_rate() const {
  return rate_;
}
inline float TrafficRateExtended::rate() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TrafficRateExtended.rate)
  return _internal_rate();
}
inline void TrafficRateExtended::_internal_set_rate(float value) {
  
  rate_ = value;
}
inline void TrafficRateExtended::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TrafficRateExtended.rate)
}

// -------------------------------------------------------------------

// TrafficActionExtended

// bool terminal = 1;
inline void TrafficActionExtended::clear_terminal() {
  terminal_ = false;
}
inline bool TrafficActionExtended::_internal_terminal() const {
  return terminal_;
}
inline bool TrafficActionExtended::terminal() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TrafficActionExtended.terminal)
  return _internal_terminal();
}
inline void TrafficActionExtended::_internal_set_terminal(bool value) {
  
  terminal_ = value;
}
inline void TrafficActionExtended::set_terminal(bool value) {
  _internal_set_terminal(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TrafficActionExtended.terminal)
}

// bool sample = 2;
inline void TrafficActionExtended::clear_sample() {
  sample_ = false;
}
inline bool TrafficActionExtended::_internal_sample() const {
  return sample_;
}
inline bool TrafficActionExtended::sample() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TrafficActionExtended.sample)
  return _internal_sample();
}
inline void TrafficActionExtended::_internal_set_sample(bool value) {
  
  sample_ = value;
}
inline void TrafficActionExtended::set_sample(bool value) {
  _internal_set_sample(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TrafficActionExtended.sample)
}

// -------------------------------------------------------------------

// RedirectTwoOctetAsSpecificExtended

// uint32 as = 1;
inline void RedirectTwoOctetAsSpecificExtended::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectTwoOctetAsSpecificExtended.as)
  return _internal_as();
}
inline void RedirectTwoOctetAsSpecificExtended::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void RedirectTwoOctetAsSpecificExtended::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectTwoOctetAsSpecificExtended.as)
}

// uint32 local_admin = 2;
inline void RedirectTwoOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectTwoOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectTwoOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectTwoOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectTwoOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectTwoOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// RedirectIPv4AddressSpecificExtended

// string address = 1;
inline void RedirectIPv4AddressSpecificExtended::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedirectIPv4AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
  return _internal_address();
}
inline void RedirectIPv4AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
}
inline std::string* RedirectIPv4AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& RedirectIPv4AddressSpecificExtended::_internal_address() const {
  return address_.GetNoArena();
}
inline void RedirectIPv4AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedirectIPv4AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
}
inline void RedirectIPv4AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
}
inline void RedirectIPv4AddressSpecificExtended::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
}
inline std::string* RedirectIPv4AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedirectIPv4AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedirectIPv4AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RedirectIPv4AddressSpecificExtended.address)
}

// uint32 local_admin = 2;
inline void RedirectIPv4AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv4AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv4AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectIPv4AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectIPv4AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectIPv4AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectIPv4AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// RedirectFourOctetAsSpecificExtended

// uint32 as = 1;
inline void RedirectFourOctetAsSpecificExtended::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectFourOctetAsSpecificExtended.as)
  return _internal_as();
}
inline void RedirectFourOctetAsSpecificExtended::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void RedirectFourOctetAsSpecificExtended::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectFourOctetAsSpecificExtended.as)
}

// uint32 local_admin = 2;
inline void RedirectFourOctetAsSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectFourOctetAsSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectFourOctetAsSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectFourOctetAsSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectFourOctetAsSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectFourOctetAsSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// TrafficRemarkExtended

// uint32 dscp = 1;
inline void TrafficRemarkExtended::clear_dscp() {
  dscp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRemarkExtended::_internal_dscp() const {
  return dscp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrafficRemarkExtended::dscp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TrafficRemarkExtended.dscp)
  return _internal_dscp();
}
inline void TrafficRemarkExtended::_internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dscp_ = value;
}
inline void TrafficRemarkExtended::set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dscp(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TrafficRemarkExtended.dscp)
}

// -------------------------------------------------------------------

// UnknownExtended

// uint32 type = 1;
inline void UnknownExtended::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownExtended::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownExtended::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UnknownExtended.type)
  return _internal_type();
}
inline void UnknownExtended::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void UnknownExtended::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UnknownExtended.type)
}

// bytes value = 2;
inline void UnknownExtended::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnknownExtended::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UnknownExtended.value)
  return _internal_value();
}
inline void UnknownExtended::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UnknownExtended.value)
}
inline std::string* UnknownExtended::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UnknownExtended.value)
  return _internal_mutable_value();
}
inline const std::string& UnknownExtended::_internal_value() const {
  return value_.GetNoArena();
}
inline void UnknownExtended::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnknownExtended::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.UnknownExtended.value)
}
inline void UnknownExtended::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.UnknownExtended.value)
}
inline void UnknownExtended::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.UnknownExtended.value)
}
inline std::string* UnknownExtended::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnknownExtended::release_value() {
  // @@protoc_insertion_point(field_release:gobgpapi.UnknownExtended.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnknownExtended::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UnknownExtended.value)
}

// -------------------------------------------------------------------

// ExtendedCommunitiesAttribute

// repeated .google.protobuf.Any communities = 1;
inline int ExtendedCommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int ExtendedCommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtendedCommunitiesAttribute::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ExtendedCommunitiesAttribute.communities)
  return communities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
ExtendedCommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.ExtendedCommunitiesAttribute.communities)
  return &communities_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtendedCommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExtendedCommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.ExtendedCommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtendedCommunitiesAttribute::_internal_add_communities() {
  return communities_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExtendedCommunitiesAttribute::add_communities() {
  // @@protoc_insertion_point(field_add:gobgpapi.ExtendedCommunitiesAttribute.communities)
  return _internal_add_communities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
ExtendedCommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.ExtendedCommunitiesAttribute.communities)
  return communities_;
}

// -------------------------------------------------------------------

// As4PathAttribute

// repeated .gobgpapi.AsSegment segments = 1;
inline int As4PathAttribute::_internal_segments_size() const {
  return segments_.size();
}
inline int As4PathAttribute::segments_size() const {
  return _internal_segments_size();
}
inline void As4PathAttribute::clear_segments() {
  segments_.Clear();
}
inline ::gobgpapi::AsSegment* As4PathAttribute::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.As4PathAttribute.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >*
As4PathAttribute::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.As4PathAttribute.segments)
  return &segments_;
}
inline const ::gobgpapi::AsSegment& As4PathAttribute::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::gobgpapi::AsSegment& As4PathAttribute::segments(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.As4PathAttribute.segments)
  return _internal_segments(index);
}
inline ::gobgpapi::AsSegment* As4PathAttribute::_internal_add_segments() {
  return segments_.Add();
}
inline ::gobgpapi::AsSegment* As4PathAttribute::add_segments() {
  // @@protoc_insertion_point(field_add:gobgpapi.As4PathAttribute.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::AsSegment >&
As4PathAttribute::segments() const {
  // @@protoc_insertion_point(field_list:gobgpapi.As4PathAttribute.segments)
  return segments_;
}

// -------------------------------------------------------------------

// As4AggregatorAttribute

// uint32 as = 2;
inline void As4AggregatorAttribute::clear_as() {
  as_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 As4AggregatorAttribute::_internal_as() const {
  return as_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 As4AggregatorAttribute::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.As4AggregatorAttribute.as)
  return _internal_as();
}
inline void As4AggregatorAttribute::_internal_set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  as_ = value;
}
inline void As4AggregatorAttribute::set_as(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_as(value);
  // @@protoc_insertion_point(field_set:gobgpapi.As4AggregatorAttribute.as)
}

// string address = 3;
inline void As4AggregatorAttribute::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& As4AggregatorAttribute::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.As4AggregatorAttribute.address)
  return _internal_address();
}
inline void As4AggregatorAttribute::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.As4AggregatorAttribute.address)
}
inline std::string* As4AggregatorAttribute::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.As4AggregatorAttribute.address)
  return _internal_mutable_address();
}
inline const std::string& As4AggregatorAttribute::_internal_address() const {
  return address_.GetNoArena();
}
inline void As4AggregatorAttribute::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void As4AggregatorAttribute::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.As4AggregatorAttribute.address)
}
inline void As4AggregatorAttribute::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.As4AggregatorAttribute.address)
}
inline void As4AggregatorAttribute::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.As4AggregatorAttribute.address)
}
inline std::string* As4AggregatorAttribute::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* As4AggregatorAttribute::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.As4AggregatorAttribute.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void As4AggregatorAttribute::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.As4AggregatorAttribute.address)
}

// -------------------------------------------------------------------

// PmsiTunnelAttribute

// uint32 flags = 1;
inline void PmsiTunnelAttribute::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::flags() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PmsiTunnelAttribute.flags)
  return _internal_flags();
}
inline void PmsiTunnelAttribute::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void PmsiTunnelAttribute::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PmsiTunnelAttribute.flags)
}

// uint32 type = 2;
inline void PmsiTunnelAttribute::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PmsiTunnelAttribute.type)
  return _internal_type();
}
inline void PmsiTunnelAttribute::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void PmsiTunnelAttribute::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PmsiTunnelAttribute.type)
}

// uint32 label = 3;
inline void PmsiTunnelAttribute::clear_label() {
  label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmsiTunnelAttribute::label() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PmsiTunnelAttribute.label)
  return _internal_label();
}
inline void PmsiTunnelAttribute::_internal_set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  label_ = value;
}
inline void PmsiTunnelAttribute::set_label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PmsiTunnelAttribute.label)
}

// bytes id = 4;
inline void PmsiTunnelAttribute::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PmsiTunnelAttribute::id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PmsiTunnelAttribute.id)
  return _internal_id();
}
inline void PmsiTunnelAttribute::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.PmsiTunnelAttribute.id)
}
inline std::string* PmsiTunnelAttribute::mutable_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PmsiTunnelAttribute.id)
  return _internal_mutable_id();
}
inline const std::string& PmsiTunnelAttribute::_internal_id() const {
  return id_.GetNoArena();
}
inline void PmsiTunnelAttribute::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PmsiTunnelAttribute::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.PmsiTunnelAttribute.id)
}
inline void PmsiTunnelAttribute::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PmsiTunnelAttribute.id)
}
inline void PmsiTunnelAttribute::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PmsiTunnelAttribute.id)
}
inline std::string* PmsiTunnelAttribute::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PmsiTunnelAttribute::release_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.PmsiTunnelAttribute.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PmsiTunnelAttribute::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PmsiTunnelAttribute.id)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVEncapsulation

// uint32 key = 1;
inline void TunnelEncapSubTLVEncapsulation::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVEncapsulation::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVEncapsulation::key() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapSubTLVEncapsulation.key)
  return _internal_key();
}
inline void TunnelEncapSubTLVEncapsulation::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void TunnelEncapSubTLVEncapsulation::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TunnelEncapSubTLVEncapsulation.key)
}

// bytes cookie = 2;
inline void TunnelEncapSubTLVEncapsulation::clear_cookie() {
  cookie_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TunnelEncapSubTLVEncapsulation::cookie() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
  return _internal_cookie();
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(const std::string& value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
}
inline std::string* TunnelEncapSubTLVEncapsulation::mutable_cookie() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
  return _internal_mutable_cookie();
}
inline const std::string& TunnelEncapSubTLVEncapsulation::_internal_cookie() const {
  return cookie_.GetNoArena();
}
inline void TunnelEncapSubTLVEncapsulation::_internal_set_cookie(const std::string& value) {
  
  cookie_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(std::string&& value) {
  
  cookie_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cookie_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
}
inline void TunnelEncapSubTLVEncapsulation::set_cookie(const void* value, size_t size) {
  
  cookie_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
}
inline std::string* TunnelEncapSubTLVEncapsulation::_internal_mutable_cookie() {
  
  return cookie_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TunnelEncapSubTLVEncapsulation::release_cookie() {
  // @@protoc_insertion_point(field_release:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
  
  return cookie_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TunnelEncapSubTLVEncapsulation::set_allocated_cookie(std::string* cookie) {
  if (cookie != nullptr) {
    
  } else {
    
  }
  cookie_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cookie);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.TunnelEncapSubTLVEncapsulation.cookie)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVProtocol

// uint32 protocol = 1;
inline void TunnelEncapSubTLVProtocol::clear_protocol() {
  protocol_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVProtocol::_internal_protocol() const {
  return protocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVProtocol::protocol() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapSubTLVProtocol.protocol)
  return _internal_protocol();
}
inline void TunnelEncapSubTLVProtocol::_internal_set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protocol_ = value;
}
inline void TunnelEncapSubTLVProtocol::set_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TunnelEncapSubTLVProtocol.protocol)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVColor

// uint32 color = 1;
inline void TunnelEncapSubTLVColor::clear_color() {
  color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVColor::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVColor::color() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapSubTLVColor.color)
  return _internal_color();
}
inline void TunnelEncapSubTLVColor::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  color_ = value;
}
inline void TunnelEncapSubTLVColor::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TunnelEncapSubTLVColor.color)
}

// -------------------------------------------------------------------

// TunnelEncapSubTLVUnknown

// uint32 type = 1;
inline void TunnelEncapSubTLVUnknown::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVUnknown::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapSubTLVUnknown::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapSubTLVUnknown.type)
  return _internal_type();
}
inline void TunnelEncapSubTLVUnknown::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TunnelEncapSubTLVUnknown::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TunnelEncapSubTLVUnknown.type)
}

// bytes value = 2;
inline void TunnelEncapSubTLVUnknown::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TunnelEncapSubTLVUnknown::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapSubTLVUnknown.value)
  return _internal_value();
}
inline void TunnelEncapSubTLVUnknown::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TunnelEncapSubTLVUnknown.value)
}
inline std::string* TunnelEncapSubTLVUnknown::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.TunnelEncapSubTLVUnknown.value)
  return _internal_mutable_value();
}
inline const std::string& TunnelEncapSubTLVUnknown::_internal_value() const {
  return value_.GetNoArena();
}
inline void TunnelEncapSubTLVUnknown::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TunnelEncapSubTLVUnknown::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.TunnelEncapSubTLVUnknown.value)
}
inline void TunnelEncapSubTLVUnknown::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.TunnelEncapSubTLVUnknown.value)
}
inline void TunnelEncapSubTLVUnknown::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.TunnelEncapSubTLVUnknown.value)
}
inline std::string* TunnelEncapSubTLVUnknown::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TunnelEncapSubTLVUnknown::release_value() {
  // @@protoc_insertion_point(field_release:gobgpapi.TunnelEncapSubTLVUnknown.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TunnelEncapSubTLVUnknown::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.TunnelEncapSubTLVUnknown.value)
}

// -------------------------------------------------------------------

// TunnelEncapTLV

// uint32 type = 1;
inline void TunnelEncapTLV::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapTLV::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TunnelEncapTLV::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapTLV.type)
  return _internal_type();
}
inline void TunnelEncapTLV::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void TunnelEncapTLV::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.TunnelEncapTLV.type)
}

// repeated .google.protobuf.Any tlvs = 2;
inline int TunnelEncapTLV::_internal_tlvs_size() const {
  return tlvs_.size();
}
inline int TunnelEncapTLV::tlvs_size() const {
  return _internal_tlvs_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapTLV::mutable_tlvs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.TunnelEncapTLV.tlvs)
  return tlvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
TunnelEncapTLV::mutable_tlvs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.TunnelEncapTLV.tlvs)
  return &tlvs_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapTLV::_internal_tlvs(int index) const {
  return tlvs_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TunnelEncapTLV::tlvs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapTLV.tlvs)
  return _internal_tlvs(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapTLV::_internal_add_tlvs() {
  return tlvs_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* TunnelEncapTLV::add_tlvs() {
  // @@protoc_insertion_point(field_add:gobgpapi.TunnelEncapTLV.tlvs)
  return _internal_add_tlvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
TunnelEncapTLV::tlvs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.TunnelEncapTLV.tlvs)
  return tlvs_;
}

// -------------------------------------------------------------------

// TunnelEncapAttribute

// repeated .gobgpapi.TunnelEncapTLV tlvs = 1;
inline int TunnelEncapAttribute::_internal_tlvs_size() const {
  return tlvs_.size();
}
inline int TunnelEncapAttribute::tlvs_size() const {
  return _internal_tlvs_size();
}
inline void TunnelEncapAttribute::clear_tlvs() {
  tlvs_.Clear();
}
inline ::gobgpapi::TunnelEncapTLV* TunnelEncapAttribute::mutable_tlvs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.TunnelEncapAttribute.tlvs)
  return tlvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TunnelEncapTLV >*
TunnelEncapAttribute::mutable_tlvs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.TunnelEncapAttribute.tlvs)
  return &tlvs_;
}
inline const ::gobgpapi::TunnelEncapTLV& TunnelEncapAttribute::_internal_tlvs(int index) const {
  return tlvs_.Get(index);
}
inline const ::gobgpapi::TunnelEncapTLV& TunnelEncapAttribute::tlvs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.TunnelEncapAttribute.tlvs)
  return _internal_tlvs(index);
}
inline ::gobgpapi::TunnelEncapTLV* TunnelEncapAttribute::_internal_add_tlvs() {
  return tlvs_.Add();
}
inline ::gobgpapi::TunnelEncapTLV* TunnelEncapAttribute::add_tlvs() {
  // @@protoc_insertion_point(field_add:gobgpapi.TunnelEncapAttribute.tlvs)
  return _internal_add_tlvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::TunnelEncapTLV >&
TunnelEncapAttribute::tlvs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.TunnelEncapAttribute.tlvs)
  return tlvs_;
}

// -------------------------------------------------------------------

// IPv6AddressSpecificExtended

// bool is_transitive = 1;
inline void IPv6AddressSpecificExtended::clear_is_transitive() {
  is_transitive_ = false;
}
inline bool IPv6AddressSpecificExtended::_internal_is_transitive() const {
  return is_transitive_;
}
inline bool IPv6AddressSpecificExtended::is_transitive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv6AddressSpecificExtended.is_transitive)
  return _internal_is_transitive();
}
inline void IPv6AddressSpecificExtended::_internal_set_is_transitive(bool value) {
  
  is_transitive_ = value;
}
inline void IPv6AddressSpecificExtended::set_is_transitive(bool value) {
  _internal_set_is_transitive(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv6AddressSpecificExtended.is_transitive)
}

// uint32 sub_type = 2;
inline void IPv6AddressSpecificExtended::clear_sub_type() {
  sub_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::sub_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv6AddressSpecificExtended.sub_type)
  return _internal_sub_type();
}
inline void IPv6AddressSpecificExtended::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sub_type_ = value;
}
inline void IPv6AddressSpecificExtended::set_sub_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv6AddressSpecificExtended.sub_type)
}

// string address = 3;
inline void IPv6AddressSpecificExtended::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IPv6AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv6AddressSpecificExtended.address)
  return _internal_address();
}
inline void IPv6AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv6AddressSpecificExtended.address)
}
inline std::string* IPv6AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.IPv6AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& IPv6AddressSpecificExtended::_internal_address() const {
  return address_.GetNoArena();
}
inline void IPv6AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IPv6AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.IPv6AddressSpecificExtended.address)
}
inline void IPv6AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.IPv6AddressSpecificExtended.address)
}
inline void IPv6AddressSpecificExtended::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.IPv6AddressSpecificExtended.address)
}
inline std::string* IPv6AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IPv6AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.IPv6AddressSpecificExtended.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IPv6AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.IPv6AddressSpecificExtended.address)
}

// uint32 local_admin = 4;
inline void IPv6AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPv6AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.IPv6AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void IPv6AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void IPv6AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.IPv6AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// RedirectIPv6AddressSpecificExtended

// string address = 1;
inline void RedirectIPv6AddressSpecificExtended::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedirectIPv6AddressSpecificExtended::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
  return _internal_address();
}
inline void RedirectIPv6AddressSpecificExtended::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
}
inline std::string* RedirectIPv6AddressSpecificExtended::mutable_address() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
  return _internal_mutable_address();
}
inline const std::string& RedirectIPv6AddressSpecificExtended::_internal_address() const {
  return address_.GetNoArena();
}
inline void RedirectIPv6AddressSpecificExtended::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedirectIPv6AddressSpecificExtended::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
}
inline void RedirectIPv6AddressSpecificExtended::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
}
inline void RedirectIPv6AddressSpecificExtended::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
}
inline std::string* RedirectIPv6AddressSpecificExtended::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedirectIPv6AddressSpecificExtended::release_address() {
  // @@protoc_insertion_point(field_release:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedirectIPv6AddressSpecificExtended::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RedirectIPv6AddressSpecificExtended.address)
}

// uint32 local_admin = 2;
inline void RedirectIPv6AddressSpecificExtended::clear_local_admin() {
  local_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv6AddressSpecificExtended::_internal_local_admin() const {
  return local_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RedirectIPv6AddressSpecificExtended::local_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RedirectIPv6AddressSpecificExtended.local_admin)
  return _internal_local_admin();
}
inline void RedirectIPv6AddressSpecificExtended::_internal_set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_admin_ = value;
}
inline void RedirectIPv6AddressSpecificExtended::set_local_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.RedirectIPv6AddressSpecificExtended.local_admin)
}

// -------------------------------------------------------------------

// IP6ExtendedCommunitiesAttribute

// repeated .google.protobuf.Any communities = 1;
inline int IP6ExtendedCommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int IP6ExtendedCommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* IP6ExtendedCommunitiesAttribute::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.IP6ExtendedCommunitiesAttribute.communities)
  return communities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
IP6ExtendedCommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.IP6ExtendedCommunitiesAttribute.communities)
  return &communities_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& IP6ExtendedCommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& IP6ExtendedCommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.IP6ExtendedCommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* IP6ExtendedCommunitiesAttribute::_internal_add_communities() {
  return communities_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* IP6ExtendedCommunitiesAttribute::add_communities() {
  // @@protoc_insertion_point(field_add:gobgpapi.IP6ExtendedCommunitiesAttribute.communities)
  return _internal_add_communities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
IP6ExtendedCommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.IP6ExtendedCommunitiesAttribute.communities)
  return communities_;
}

// -------------------------------------------------------------------

// AigpTLVIGPMetric

// uint64 metric = 1;
inline void AigpTLVIGPMetric::clear_metric() {
  metric_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AigpTLVIGPMetric::_internal_metric() const {
  return metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AigpTLVIGPMetric::metric() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AigpTLVIGPMetric.metric)
  return _internal_metric();
}
inline void AigpTLVIGPMetric::_internal_set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  metric_ = value;
}
inline void AigpTLVIGPMetric::set_metric(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AigpTLVIGPMetric.metric)
}

// -------------------------------------------------------------------

// AigpTLVUnknown

// uint32 type = 1;
inline void AigpTLVUnknown::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AigpTLVUnknown::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AigpTLVUnknown::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AigpTLVUnknown.type)
  return _internal_type();
}
inline void AigpTLVUnknown::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void AigpTLVUnknown::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AigpTLVUnknown.type)
}

// bytes value = 2;
inline void AigpTLVUnknown::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AigpTLVUnknown::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AigpTLVUnknown.value)
  return _internal_value();
}
inline void AigpTLVUnknown::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.AigpTLVUnknown.value)
}
inline std::string* AigpTLVUnknown::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AigpTLVUnknown.value)
  return _internal_mutable_value();
}
inline const std::string& AigpTLVUnknown::_internal_value() const {
  return value_.GetNoArena();
}
inline void AigpTLVUnknown::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AigpTLVUnknown::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.AigpTLVUnknown.value)
}
inline void AigpTLVUnknown::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.AigpTLVUnknown.value)
}
inline void AigpTLVUnknown::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.AigpTLVUnknown.value)
}
inline std::string* AigpTLVUnknown::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AigpTLVUnknown::release_value() {
  // @@protoc_insertion_point(field_release:gobgpapi.AigpTLVUnknown.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AigpTLVUnknown::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.AigpTLVUnknown.value)
}

// -------------------------------------------------------------------

// AigpAttribute

// repeated .google.protobuf.Any tlvs = 1;
inline int AigpAttribute::_internal_tlvs_size() const {
  return tlvs_.size();
}
inline int AigpAttribute::tlvs_size() const {
  return _internal_tlvs_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* AigpAttribute::mutable_tlvs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.AigpAttribute.tlvs)
  return tlvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
AigpAttribute::mutable_tlvs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.AigpAttribute.tlvs)
  return &tlvs_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& AigpAttribute::_internal_tlvs(int index) const {
  return tlvs_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& AigpAttribute::tlvs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.AigpAttribute.tlvs)
  return _internal_tlvs(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* AigpAttribute::_internal_add_tlvs() {
  return tlvs_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* AigpAttribute::add_tlvs() {
  // @@protoc_insertion_point(field_add:gobgpapi.AigpAttribute.tlvs)
  return _internal_add_tlvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
AigpAttribute::tlvs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.AigpAttribute.tlvs)
  return tlvs_;
}

// -------------------------------------------------------------------

// LargeCommunity

// uint32 global_admin = 1;
inline void LargeCommunity::clear_global_admin() {
  global_admin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::_internal_global_admin() const {
  return global_admin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::global_admin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LargeCommunity.global_admin)
  return _internal_global_admin();
}
inline void LargeCommunity::_internal_set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  global_admin_ = value;
}
inline void LargeCommunity::set_global_admin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_global_admin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LargeCommunity.global_admin)
}

// uint32 local_data1 = 2;
inline void LargeCommunity::clear_local_data1() {
  local_data1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::_internal_local_data1() const {
  return local_data1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::local_data1() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LargeCommunity.local_data1)
  return _internal_local_data1();
}
inline void LargeCommunity::_internal_set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_data1_ = value;
}
inline void LargeCommunity::set_local_data1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_data1(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LargeCommunity.local_data1)
}

// uint32 local_data2 = 3;
inline void LargeCommunity::clear_local_data2() {
  local_data2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::_internal_local_data2() const {
  return local_data2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LargeCommunity::local_data2() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LargeCommunity.local_data2)
  return _internal_local_data2();
}
inline void LargeCommunity::_internal_set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_data2_ = value;
}
inline void LargeCommunity::set_local_data2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_data2(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LargeCommunity.local_data2)
}

// -------------------------------------------------------------------

// LargeCommunitiesAttribute

// repeated .gobgpapi.LargeCommunity communities = 1;
inline int LargeCommunitiesAttribute::_internal_communities_size() const {
  return communities_.size();
}
inline int LargeCommunitiesAttribute::communities_size() const {
  return _internal_communities_size();
}
inline void LargeCommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
inline ::gobgpapi::LargeCommunity* LargeCommunitiesAttribute::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LargeCommunitiesAttribute.communities)
  return communities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LargeCommunity >*
LargeCommunitiesAttribute::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LargeCommunitiesAttribute.communities)
  return &communities_;
}
inline const ::gobgpapi::LargeCommunity& LargeCommunitiesAttribute::_internal_communities(int index) const {
  return communities_.Get(index);
}
inline const ::gobgpapi::LargeCommunity& LargeCommunitiesAttribute::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LargeCommunitiesAttribute.communities)
  return _internal_communities(index);
}
inline ::gobgpapi::LargeCommunity* LargeCommunitiesAttribute::_internal_add_communities() {
  return communities_.Add();
}
inline ::gobgpapi::LargeCommunity* LargeCommunitiesAttribute::add_communities() {
  // @@protoc_insertion_point(field_add:gobgpapi.LargeCommunitiesAttribute.communities)
  return _internal_add_communities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LargeCommunity >&
LargeCommunitiesAttribute::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LargeCommunitiesAttribute.communities)
  return communities_;
}

// -------------------------------------------------------------------

// LsNodeFlags

// bool overload = 1;
inline void LsNodeFlags::clear_overload() {
  overload_ = false;
}
inline bool LsNodeFlags::_internal_overload() const {
  return overload_;
}
inline bool LsNodeFlags::overload() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeFlags.overload)
  return _internal_overload();
}
inline void LsNodeFlags::_internal_set_overload(bool value) {
  
  overload_ = value;
}
inline void LsNodeFlags::set_overload(bool value) {
  _internal_set_overload(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeFlags.overload)
}

// bool attached = 2;
inline void LsNodeFlags::clear_attached() {
  attached_ = false;
}
inline bool LsNodeFlags::_internal_attached() const {
  return attached_;
}
inline bool LsNodeFlags::attached() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeFlags.attached)
  return _internal_attached();
}
inline void LsNodeFlags::_internal_set_attached(bool value) {
  
  attached_ = value;
}
inline void LsNodeFlags::set_attached(bool value) {
  _internal_set_attached(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeFlags.attached)
}

// bool external = 3;
inline void LsNodeFlags::clear_external() {
  external_ = false;
}
inline bool LsNodeFlags::_internal_external() const {
  return external_;
}
inline bool LsNodeFlags::external() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeFlags.external)
  return _internal_external();
}
inline void LsNodeFlags::_internal_set_external(bool value) {
  
  external_ = value;
}
inline void LsNodeFlags::set_external(bool value) {
  _internal_set_external(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeFlags.external)
}

// bool abr = 4;
inline void LsNodeFlags::clear_abr() {
  abr_ = false;
}
inline bool LsNodeFlags::_internal_abr() const {
  return abr_;
}
inline bool LsNodeFlags::abr() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeFlags.abr)
  return _internal_abr();
}
inline void LsNodeFlags::_internal_set_abr(bool value) {
  
  abr_ = value;
}
inline void LsNodeFlags::set_abr(bool value) {
  _internal_set_abr(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeFlags.abr)
}

// bool router = 5;
inline void LsNodeFlags::clear_router() {
  router_ = false;
}
inline bool LsNodeFlags::_internal_router() const {
  return router_;
}
inline bool LsNodeFlags::router() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeFlags.router)
  return _internal_router();
}
inline void LsNodeFlags::_internal_set_router(bool value) {
  
  router_ = value;
}
inline void LsNodeFlags::set_router(bool value) {
  _internal_set_router(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeFlags.router)
}

// bool v6 = 6;
inline void LsNodeFlags::clear_v6() {
  v6_ = false;
}
inline bool LsNodeFlags::_internal_v6() const {
  return v6_;
}
inline bool LsNodeFlags::v6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsNodeFlags.v6)
  return _internal_v6();
}
inline void LsNodeFlags::_internal_set_v6(bool value) {
  
  v6_ = value;
}
inline void LsNodeFlags::set_v6(bool value) {
  _internal_set_v6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsNodeFlags.v6)
}

// -------------------------------------------------------------------

// LsIGPFlags

// bool down = 1;
inline void LsIGPFlags::clear_down() {
  down_ = false;
}
inline bool LsIGPFlags::_internal_down() const {
  return down_;
}
inline bool LsIGPFlags::down() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsIGPFlags.down)
  return _internal_down();
}
inline void LsIGPFlags::_internal_set_down(bool value) {
  
  down_ = value;
}
inline void LsIGPFlags::set_down(bool value) {
  _internal_set_down(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsIGPFlags.down)
}

// bool no_unicast = 2;
inline void LsIGPFlags::clear_no_unicast() {
  no_unicast_ = false;
}
inline bool LsIGPFlags::_internal_no_unicast() const {
  return no_unicast_;
}
inline bool LsIGPFlags::no_unicast() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsIGPFlags.no_unicast)
  return _internal_no_unicast();
}
inline void LsIGPFlags::_internal_set_no_unicast(bool value) {
  
  no_unicast_ = value;
}
inline void LsIGPFlags::set_no_unicast(bool value) {
  _internal_set_no_unicast(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsIGPFlags.no_unicast)
}

// bool local_address = 3;
inline void LsIGPFlags::clear_local_address() {
  local_address_ = false;
}
inline bool LsIGPFlags::_internal_local_address() const {
  return local_address_;
}
inline bool LsIGPFlags::local_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsIGPFlags.local_address)
  return _internal_local_address();
}
inline void LsIGPFlags::_internal_set_local_address(bool value) {
  
  local_address_ = value;
}
inline void LsIGPFlags::set_local_address(bool value) {
  _internal_set_local_address(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsIGPFlags.local_address)
}

// bool propagate_nssa = 4;
inline void LsIGPFlags::clear_propagate_nssa() {
  propagate_nssa_ = false;
}
inline bool LsIGPFlags::_internal_propagate_nssa() const {
  return propagate_nssa_;
}
inline bool LsIGPFlags::propagate_nssa() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsIGPFlags.propagate_nssa)
  return _internal_propagate_nssa();
}
inline void LsIGPFlags::_internal_set_propagate_nssa(bool value) {
  
  propagate_nssa_ = value;
}
inline void LsIGPFlags::set_propagate_nssa(bool value) {
  _internal_set_propagate_nssa(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsIGPFlags.propagate_nssa)
}

// -------------------------------------------------------------------

// LsSrRange

// uint32 begin = 1;
inline void LsSrRange::clear_begin() {
  begin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::begin() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsSrRange.begin)
  return _internal_begin();
}
inline void LsSrRange::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  begin_ = value;
}
inline void LsSrRange::set_begin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsSrRange.begin)
}

// uint32 end = 2;
inline void LsSrRange::clear_end() {
  end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsSrRange::end() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsSrRange.end)
  return _internal_end();
}
inline void LsSrRange::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_ = value;
}
inline void LsSrRange::set_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsSrRange.end)
}

// -------------------------------------------------------------------

// LsSrCapabilities

// bool ipv4_supported = 1;
inline void LsSrCapabilities::clear_ipv4_supported() {
  ipv4_supported_ = false;
}
inline bool LsSrCapabilities::_internal_ipv4_supported() const {
  return ipv4_supported_;
}
inline bool LsSrCapabilities::ipv4_supported() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsSrCapabilities.ipv4_supported)
  return _internal_ipv4_supported();
}
inline void LsSrCapabilities::_internal_set_ipv4_supported(bool value) {
  
  ipv4_supported_ = value;
}
inline void LsSrCapabilities::set_ipv4_supported(bool value) {
  _internal_set_ipv4_supported(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsSrCapabilities.ipv4_supported)
}

// bool ipv6_supported = 2;
inline void LsSrCapabilities::clear_ipv6_supported() {
  ipv6_supported_ = false;
}
inline bool LsSrCapabilities::_internal_ipv6_supported() const {
  return ipv6_supported_;
}
inline bool LsSrCapabilities::ipv6_supported() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsSrCapabilities.ipv6_supported)
  return _internal_ipv6_supported();
}
inline void LsSrCapabilities::_internal_set_ipv6_supported(bool value) {
  
  ipv6_supported_ = value;
}
inline void LsSrCapabilities::set_ipv6_supported(bool value) {
  _internal_set_ipv6_supported(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsSrCapabilities.ipv6_supported)
}

// repeated .gobgpapi.LsSrRange ranges = 3;
inline int LsSrCapabilities::_internal_ranges_size() const {
  return ranges_.size();
}
inline int LsSrCapabilities::ranges_size() const {
  return _internal_ranges_size();
}
inline void LsSrCapabilities::clear_ranges() {
  ranges_.Clear();
}
inline ::gobgpapi::LsSrRange* LsSrCapabilities::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsSrCapabilities.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >*
LsSrCapabilities::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LsSrCapabilities.ranges)
  return &ranges_;
}
inline const ::gobgpapi::LsSrRange& LsSrCapabilities::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::gobgpapi::LsSrRange& LsSrCapabilities::ranges(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsSrCapabilities.ranges)
  return _internal_ranges(index);
}
inline ::gobgpapi::LsSrRange* LsSrCapabilities::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::gobgpapi::LsSrRange* LsSrCapabilities::add_ranges() {
  // @@protoc_insertion_point(field_add:gobgpapi.LsSrCapabilities.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >&
LsSrCapabilities::ranges() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LsSrCapabilities.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// LsSrLocalBlock

// repeated .gobgpapi.LsSrRange ranges = 1;
inline int LsSrLocalBlock::_internal_ranges_size() const {
  return ranges_.size();
}
inline int LsSrLocalBlock::ranges_size() const {
  return _internal_ranges_size();
}
inline void LsSrLocalBlock::clear_ranges() {
  ranges_.Clear();
}
inline ::gobgpapi::LsSrRange* LsSrLocalBlock::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsSrLocalBlock.ranges)
  return ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >*
LsSrLocalBlock::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LsSrLocalBlock.ranges)
  return &ranges_;
}
inline const ::gobgpapi::LsSrRange& LsSrLocalBlock::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline const ::gobgpapi::LsSrRange& LsSrLocalBlock::ranges(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsSrLocalBlock.ranges)
  return _internal_ranges(index);
}
inline ::gobgpapi::LsSrRange* LsSrLocalBlock::_internal_add_ranges() {
  return ranges_.Add();
}
inline ::gobgpapi::LsSrRange* LsSrLocalBlock::add_ranges() {
  // @@protoc_insertion_point(field_add:gobgpapi.LsSrLocalBlock.ranges)
  return _internal_add_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gobgpapi::LsSrRange >&
LsSrLocalBlock::ranges() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LsSrLocalBlock.ranges)
  return ranges_;
}

// -------------------------------------------------------------------

// LsAttributeNode

// string name = 1;
inline void LsAttributeNode::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeNode::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.name)
  return _internal_name();
}
inline void LsAttributeNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeNode.name)
}
inline std::string* LsAttributeNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.name)
  return _internal_mutable_name();
}
inline const std::string& LsAttributeNode::_internal_name() const {
  return name_.GetNoArena();
}
inline void LsAttributeNode::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeNode::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeNode.name)
}
inline void LsAttributeNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeNode.name)
}
inline void LsAttributeNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeNode.name)
}
inline std::string* LsAttributeNode::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeNode::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.name)
}

// .gobgpapi.LsNodeFlags flags = 2;
inline bool LsAttributeNode::_internal_has_flags() const {
  return this != internal_default_instance() && flags_ != nullptr;
}
inline bool LsAttributeNode::has_flags() const {
  return _internal_has_flags();
}
inline void LsAttributeNode::clear_flags() {
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
}
inline const ::gobgpapi::LsNodeFlags& LsAttributeNode::_internal_flags() const {
  const ::gobgpapi::LsNodeFlags* p = flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsNodeFlags*>(
      &::gobgpapi::_LsNodeFlags_default_instance_);
}
inline const ::gobgpapi::LsNodeFlags& LsAttributeNode::flags() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.flags)
  return _internal_flags();
}
inline ::gobgpapi::LsNodeFlags* LsAttributeNode::release_flags() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.flags)
  
  ::gobgpapi::LsNodeFlags* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsNodeFlags* LsAttributeNode::_internal_mutable_flags() {
  
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsNodeFlags>(GetArenaNoVirtual());
    flags_ = p;
  }
  return flags_;
}
inline ::gobgpapi::LsNodeFlags* LsAttributeNode::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.flags)
  return _internal_mutable_flags();
}
inline void LsAttributeNode::set_allocated_flags(::gobgpapi::LsNodeFlags* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    
  } else {
    
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.flags)
}

// string local_router_id = 3;
inline void LsAttributeNode::clear_local_router_id() {
  local_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeNode::local_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.local_router_id)
  return _internal_local_router_id();
}
inline void LsAttributeNode::set_local_router_id(const std::string& value) {
  _internal_set_local_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeNode.local_router_id)
}
inline std::string* LsAttributeNode::mutable_local_router_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.local_router_id)
  return _internal_mutable_local_router_id();
}
inline const std::string& LsAttributeNode::_internal_local_router_id() const {
  return local_router_id_.GetNoArena();
}
inline void LsAttributeNode::_internal_set_local_router_id(const std::string& value) {
  
  local_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeNode::set_local_router_id(std::string&& value) {
  
  local_router_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeNode.local_router_id)
}
inline void LsAttributeNode::set_local_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeNode.local_router_id)
}
inline void LsAttributeNode::set_local_router_id(const char* value, size_t size) {
  
  local_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeNode.local_router_id)
}
inline std::string* LsAttributeNode::_internal_mutable_local_router_id() {
  
  return local_router_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeNode::release_local_router_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.local_router_id)
  
  return local_router_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeNode::set_allocated_local_router_id(std::string* local_router_id) {
  if (local_router_id != nullptr) {
    
  } else {
    
  }
  local_router_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.local_router_id)
}

// string local_router_id_v6 = 4;
inline void LsAttributeNode::clear_local_router_id_v6() {
  local_router_id_v6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeNode::local_router_id_v6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.local_router_id_v6)
  return _internal_local_router_id_v6();
}
inline void LsAttributeNode::set_local_router_id_v6(const std::string& value) {
  _internal_set_local_router_id_v6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeNode.local_router_id_v6)
}
inline std::string* LsAttributeNode::mutable_local_router_id_v6() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.local_router_id_v6)
  return _internal_mutable_local_router_id_v6();
}
inline const std::string& LsAttributeNode::_internal_local_router_id_v6() const {
  return local_router_id_v6_.GetNoArena();
}
inline void LsAttributeNode::_internal_set_local_router_id_v6(const std::string& value) {
  
  local_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeNode::set_local_router_id_v6(std::string&& value) {
  
  local_router_id_v6_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeNode.local_router_id_v6)
}
inline void LsAttributeNode::set_local_router_id_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeNode.local_router_id_v6)
}
inline void LsAttributeNode::set_local_router_id_v6(const char* value, size_t size) {
  
  local_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeNode.local_router_id_v6)
}
inline std::string* LsAttributeNode::_internal_mutable_local_router_id_v6() {
  
  return local_router_id_v6_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeNode::release_local_router_id_v6() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.local_router_id_v6)
  
  return local_router_id_v6_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeNode::set_allocated_local_router_id_v6(std::string* local_router_id_v6) {
  if (local_router_id_v6 != nullptr) {
    
  } else {
    
  }
  local_router_id_v6_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id_v6);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.local_router_id_v6)
}

// bytes isis_area = 5;
inline void LsAttributeNode::clear_isis_area() {
  isis_area_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeNode::isis_area() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.isis_area)
  return _internal_isis_area();
}
inline void LsAttributeNode::set_isis_area(const std::string& value) {
  _internal_set_isis_area(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeNode.isis_area)
}
inline std::string* LsAttributeNode::mutable_isis_area() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.isis_area)
  return _internal_mutable_isis_area();
}
inline const std::string& LsAttributeNode::_internal_isis_area() const {
  return isis_area_.GetNoArena();
}
inline void LsAttributeNode::_internal_set_isis_area(const std::string& value) {
  
  isis_area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeNode::set_isis_area(std::string&& value) {
  
  isis_area_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeNode.isis_area)
}
inline void LsAttributeNode::set_isis_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isis_area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeNode.isis_area)
}
inline void LsAttributeNode::set_isis_area(const void* value, size_t size) {
  
  isis_area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeNode.isis_area)
}
inline std::string* LsAttributeNode::_internal_mutable_isis_area() {
  
  return isis_area_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeNode::release_isis_area() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.isis_area)
  
  return isis_area_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeNode::set_allocated_isis_area(std::string* isis_area) {
  if (isis_area != nullptr) {
    
  } else {
    
  }
  isis_area_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isis_area);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.isis_area)
}

// bytes opaque = 6;
inline void LsAttributeNode::clear_opaque() {
  opaque_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeNode::opaque() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.opaque)
  return _internal_opaque();
}
inline void LsAttributeNode::set_opaque(const std::string& value) {
  _internal_set_opaque(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeNode.opaque)
}
inline std::string* LsAttributeNode::mutable_opaque() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.opaque)
  return _internal_mutable_opaque();
}
inline const std::string& LsAttributeNode::_internal_opaque() const {
  return opaque_.GetNoArena();
}
inline void LsAttributeNode::_internal_set_opaque(const std::string& value) {
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeNode::set_opaque(std::string&& value) {
  
  opaque_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeNode.opaque)
}
inline void LsAttributeNode::set_opaque(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeNode.opaque)
}
inline void LsAttributeNode::set_opaque(const void* value, size_t size) {
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeNode.opaque)
}
inline std::string* LsAttributeNode::_internal_mutable_opaque() {
  
  return opaque_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeNode::release_opaque() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.opaque)
  
  return opaque_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeNode::set_allocated_opaque(std::string* opaque) {
  if (opaque != nullptr) {
    
  } else {
    
  }
  opaque_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.opaque)
}

// .gobgpapi.LsSrCapabilities sr_capabilities = 7;
inline bool LsAttributeNode::_internal_has_sr_capabilities() const {
  return this != internal_default_instance() && sr_capabilities_ != nullptr;
}
inline bool LsAttributeNode::has_sr_capabilities() const {
  return _internal_has_sr_capabilities();
}
inline void LsAttributeNode::clear_sr_capabilities() {
  if (GetArenaNoVirtual() == nullptr && sr_capabilities_ != nullptr) {
    delete sr_capabilities_;
  }
  sr_capabilities_ = nullptr;
}
inline const ::gobgpapi::LsSrCapabilities& LsAttributeNode::_internal_sr_capabilities() const {
  const ::gobgpapi::LsSrCapabilities* p = sr_capabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsSrCapabilities*>(
      &::gobgpapi::_LsSrCapabilities_default_instance_);
}
inline const ::gobgpapi::LsSrCapabilities& LsAttributeNode::sr_capabilities() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.sr_capabilities)
  return _internal_sr_capabilities();
}
inline ::gobgpapi::LsSrCapabilities* LsAttributeNode::release_sr_capabilities() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.sr_capabilities)
  
  ::gobgpapi::LsSrCapabilities* temp = sr_capabilities_;
  sr_capabilities_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsSrCapabilities* LsAttributeNode::_internal_mutable_sr_capabilities() {
  
  if (sr_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsSrCapabilities>(GetArenaNoVirtual());
    sr_capabilities_ = p;
  }
  return sr_capabilities_;
}
inline ::gobgpapi::LsSrCapabilities* LsAttributeNode::mutable_sr_capabilities() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.sr_capabilities)
  return _internal_mutable_sr_capabilities();
}
inline void LsAttributeNode::set_allocated_sr_capabilities(::gobgpapi::LsSrCapabilities* sr_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sr_capabilities_;
  }
  if (sr_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sr_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sr_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  sr_capabilities_ = sr_capabilities;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.sr_capabilities)
}

// bytes sr_algorithms = 8;
inline void LsAttributeNode::clear_sr_algorithms() {
  sr_algorithms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeNode::sr_algorithms() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.sr_algorithms)
  return _internal_sr_algorithms();
}
inline void LsAttributeNode::set_sr_algorithms(const std::string& value) {
  _internal_set_sr_algorithms(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeNode.sr_algorithms)
}
inline std::string* LsAttributeNode::mutable_sr_algorithms() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.sr_algorithms)
  return _internal_mutable_sr_algorithms();
}
inline const std::string& LsAttributeNode::_internal_sr_algorithms() const {
  return sr_algorithms_.GetNoArena();
}
inline void LsAttributeNode::_internal_set_sr_algorithms(const std::string& value) {
  
  sr_algorithms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeNode::set_sr_algorithms(std::string&& value) {
  
  sr_algorithms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeNode.sr_algorithms)
}
inline void LsAttributeNode::set_sr_algorithms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sr_algorithms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeNode.sr_algorithms)
}
inline void LsAttributeNode::set_sr_algorithms(const void* value, size_t size) {
  
  sr_algorithms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeNode.sr_algorithms)
}
inline std::string* LsAttributeNode::_internal_mutable_sr_algorithms() {
  
  return sr_algorithms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeNode::release_sr_algorithms() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.sr_algorithms)
  
  return sr_algorithms_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeNode::set_allocated_sr_algorithms(std::string* sr_algorithms) {
  if (sr_algorithms != nullptr) {
    
  } else {
    
  }
  sr_algorithms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sr_algorithms);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.sr_algorithms)
}

// .gobgpapi.LsSrLocalBlock sr_local_block = 9;
inline bool LsAttributeNode::_internal_has_sr_local_block() const {
  return this != internal_default_instance() && sr_local_block_ != nullptr;
}
inline bool LsAttributeNode::has_sr_local_block() const {
  return _internal_has_sr_local_block();
}
inline void LsAttributeNode::clear_sr_local_block() {
  if (GetArenaNoVirtual() == nullptr && sr_local_block_ != nullptr) {
    delete sr_local_block_;
  }
  sr_local_block_ = nullptr;
}
inline const ::gobgpapi::LsSrLocalBlock& LsAttributeNode::_internal_sr_local_block() const {
  const ::gobgpapi::LsSrLocalBlock* p = sr_local_block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsSrLocalBlock*>(
      &::gobgpapi::_LsSrLocalBlock_default_instance_);
}
inline const ::gobgpapi::LsSrLocalBlock& LsAttributeNode::sr_local_block() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeNode.sr_local_block)
  return _internal_sr_local_block();
}
inline ::gobgpapi::LsSrLocalBlock* LsAttributeNode::release_sr_local_block() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeNode.sr_local_block)
  
  ::gobgpapi::LsSrLocalBlock* temp = sr_local_block_;
  sr_local_block_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsSrLocalBlock* LsAttributeNode::_internal_mutable_sr_local_block() {
  
  if (sr_local_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsSrLocalBlock>(GetArenaNoVirtual());
    sr_local_block_ = p;
  }
  return sr_local_block_;
}
inline ::gobgpapi::LsSrLocalBlock* LsAttributeNode::mutable_sr_local_block() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeNode.sr_local_block)
  return _internal_mutable_sr_local_block();
}
inline void LsAttributeNode::set_allocated_sr_local_block(::gobgpapi::LsSrLocalBlock* sr_local_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sr_local_block_;
  }
  if (sr_local_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sr_local_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sr_local_block, submessage_arena);
    }
    
  } else {
    
  }
  sr_local_block_ = sr_local_block;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeNode.sr_local_block)
}

// -------------------------------------------------------------------

// LsAttributeLink

// string name = 1;
inline void LsAttributeLink::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeLink::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.name)
  return _internal_name();
}
inline void LsAttributeLink::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.name)
}
inline std::string* LsAttributeLink::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeLink.name)
  return _internal_mutable_name();
}
inline const std::string& LsAttributeLink::_internal_name() const {
  return name_.GetNoArena();
}
inline void LsAttributeLink::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeLink::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeLink.name)
}
inline void LsAttributeLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeLink.name)
}
inline void LsAttributeLink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeLink.name)
}
inline std::string* LsAttributeLink::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeLink::release_name() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeLink.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeLink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeLink.name)
}

// string local_router_id = 2;
inline void LsAttributeLink::clear_local_router_id() {
  local_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeLink::local_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.local_router_id)
  return _internal_local_router_id();
}
inline void LsAttributeLink::set_local_router_id(const std::string& value) {
  _internal_set_local_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.local_router_id)
}
inline std::string* LsAttributeLink::mutable_local_router_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeLink.local_router_id)
  return _internal_mutable_local_router_id();
}
inline const std::string& LsAttributeLink::_internal_local_router_id() const {
  return local_router_id_.GetNoArena();
}
inline void LsAttributeLink::_internal_set_local_router_id(const std::string& value) {
  
  local_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeLink::set_local_router_id(std::string&& value) {
  
  local_router_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeLink.local_router_id)
}
inline void LsAttributeLink::set_local_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeLink.local_router_id)
}
inline void LsAttributeLink::set_local_router_id(const char* value, size_t size) {
  
  local_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeLink.local_router_id)
}
inline std::string* LsAttributeLink::_internal_mutable_local_router_id() {
  
  return local_router_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeLink::release_local_router_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeLink.local_router_id)
  
  return local_router_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeLink::set_allocated_local_router_id(std::string* local_router_id) {
  if (local_router_id != nullptr) {
    
  } else {
    
  }
  local_router_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeLink.local_router_id)
}

// string local_router_id_v6 = 3;
inline void LsAttributeLink::clear_local_router_id_v6() {
  local_router_id_v6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeLink::local_router_id_v6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.local_router_id_v6)
  return _internal_local_router_id_v6();
}
inline void LsAttributeLink::set_local_router_id_v6(const std::string& value) {
  _internal_set_local_router_id_v6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.local_router_id_v6)
}
inline std::string* LsAttributeLink::mutable_local_router_id_v6() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeLink.local_router_id_v6)
  return _internal_mutable_local_router_id_v6();
}
inline const std::string& LsAttributeLink::_internal_local_router_id_v6() const {
  return local_router_id_v6_.GetNoArena();
}
inline void LsAttributeLink::_internal_set_local_router_id_v6(const std::string& value) {
  
  local_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeLink::set_local_router_id_v6(std::string&& value) {
  
  local_router_id_v6_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeLink.local_router_id_v6)
}
inline void LsAttributeLink::set_local_router_id_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeLink.local_router_id_v6)
}
inline void LsAttributeLink::set_local_router_id_v6(const char* value, size_t size) {
  
  local_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeLink.local_router_id_v6)
}
inline std::string* LsAttributeLink::_internal_mutable_local_router_id_v6() {
  
  return local_router_id_v6_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeLink::release_local_router_id_v6() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeLink.local_router_id_v6)
  
  return local_router_id_v6_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeLink::set_allocated_local_router_id_v6(std::string* local_router_id_v6) {
  if (local_router_id_v6 != nullptr) {
    
  } else {
    
  }
  local_router_id_v6_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_router_id_v6);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeLink.local_router_id_v6)
}

// string remote_router_id = 4;
inline void LsAttributeLink::clear_remote_router_id() {
  remote_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeLink::remote_router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.remote_router_id)
  return _internal_remote_router_id();
}
inline void LsAttributeLink::set_remote_router_id(const std::string& value) {
  _internal_set_remote_router_id(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.remote_router_id)
}
inline std::string* LsAttributeLink::mutable_remote_router_id() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeLink.remote_router_id)
  return _internal_mutable_remote_router_id();
}
inline const std::string& LsAttributeLink::_internal_remote_router_id() const {
  return remote_router_id_.GetNoArena();
}
inline void LsAttributeLink::_internal_set_remote_router_id(const std::string& value) {
  
  remote_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeLink::set_remote_router_id(std::string&& value) {
  
  remote_router_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeLink.remote_router_id)
}
inline void LsAttributeLink::set_remote_router_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeLink.remote_router_id)
}
inline void LsAttributeLink::set_remote_router_id(const char* value, size_t size) {
  
  remote_router_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeLink.remote_router_id)
}
inline std::string* LsAttributeLink::_internal_mutable_remote_router_id() {
  
  return remote_router_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeLink::release_remote_router_id() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeLink.remote_router_id)
  
  return remote_router_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeLink::set_allocated_remote_router_id(std::string* remote_router_id) {
  if (remote_router_id != nullptr) {
    
  } else {
    
  }
  remote_router_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeLink.remote_router_id)
}

// string remote_router_id_v6 = 5;
inline void LsAttributeLink::clear_remote_router_id_v6() {
  remote_router_id_v6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeLink::remote_router_id_v6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.remote_router_id_v6)
  return _internal_remote_router_id_v6();
}
inline void LsAttributeLink::set_remote_router_id_v6(const std::string& value) {
  _internal_set_remote_router_id_v6(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.remote_router_id_v6)
}
inline std::string* LsAttributeLink::mutable_remote_router_id_v6() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeLink.remote_router_id_v6)
  return _internal_mutable_remote_router_id_v6();
}
inline const std::string& LsAttributeLink::_internal_remote_router_id_v6() const {
  return remote_router_id_v6_.GetNoArena();
}
inline void LsAttributeLink::_internal_set_remote_router_id_v6(const std::string& value) {
  
  remote_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeLink::set_remote_router_id_v6(std::string&& value) {
  
  remote_router_id_v6_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeLink.remote_router_id_v6)
}
inline void LsAttributeLink::set_remote_router_id_v6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeLink.remote_router_id_v6)
}
inline void LsAttributeLink::set_remote_router_id_v6(const char* value, size_t size) {
  
  remote_router_id_v6_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeLink.remote_router_id_v6)
}
inline std::string* LsAttributeLink::_internal_mutable_remote_router_id_v6() {
  
  return remote_router_id_v6_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeLink::release_remote_router_id_v6() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeLink.remote_router_id_v6)
  
  return remote_router_id_v6_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeLink::set_allocated_remote_router_id_v6(std::string* remote_router_id_v6) {
  if (remote_router_id_v6 != nullptr) {
    
  } else {
    
  }
  remote_router_id_v6_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_router_id_v6);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeLink.remote_router_id_v6)
}

// uint32 admin_group = 6;
inline void LsAttributeLink::clear_admin_group() {
  admin_group_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_admin_group() const {
  return admin_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::admin_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.admin_group)
  return _internal_admin_group();
}
inline void LsAttributeLink::_internal_set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  admin_group_ = value;
}
inline void LsAttributeLink::set_admin_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_admin_group(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.admin_group)
}

// uint32 default_te_metric = 7;
inline void LsAttributeLink::clear_default_te_metric() {
  default_te_metric_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_default_te_metric() const {
  return default_te_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::default_te_metric() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.default_te_metric)
  return _internal_default_te_metric();
}
inline void LsAttributeLink::_internal_set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  default_te_metric_ = value;
}
inline void LsAttributeLink::set_default_te_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_default_te_metric(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.default_te_metric)
}

// uint32 igp_metric = 8;
inline void LsAttributeLink::clear_igp_metric() {
  igp_metric_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_igp_metric() const {
  return igp_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::igp_metric() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.igp_metric)
  return _internal_igp_metric();
}
inline void LsAttributeLink::_internal_set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  igp_metric_ = value;
}
inline void LsAttributeLink::set_igp_metric(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_igp_metric(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.igp_metric)
}

// bytes opaque = 9;
inline void LsAttributeLink::clear_opaque() {
  opaque_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributeLink::opaque() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.opaque)
  return _internal_opaque();
}
inline void LsAttributeLink::set_opaque(const std::string& value) {
  _internal_set_opaque(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.opaque)
}
inline std::string* LsAttributeLink::mutable_opaque() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributeLink.opaque)
  return _internal_mutable_opaque();
}
inline const std::string& LsAttributeLink::_internal_opaque() const {
  return opaque_.GetNoArena();
}
inline void LsAttributeLink::_internal_set_opaque(const std::string& value) {
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributeLink::set_opaque(std::string&& value) {
  
  opaque_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributeLink.opaque)
}
inline void LsAttributeLink::set_opaque(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributeLink.opaque)
}
inline void LsAttributeLink::set_opaque(const void* value, size_t size) {
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributeLink.opaque)
}
inline std::string* LsAttributeLink::_internal_mutable_opaque() {
  
  return opaque_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributeLink::release_opaque() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributeLink.opaque)
  
  return opaque_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributeLink::set_allocated_opaque(std::string* opaque) {
  if (opaque != nullptr) {
    
  } else {
    
  }
  opaque_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributeLink.opaque)
}

// float bandwidth = 10;
inline void LsAttributeLink::clear_bandwidth() {
  bandwidth_ = 0;
}
inline float LsAttributeLink::_internal_bandwidth() const {
  return bandwidth_;
}
inline float LsAttributeLink::bandwidth() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.bandwidth)
  return _internal_bandwidth();
}
inline void LsAttributeLink::_internal_set_bandwidth(float value) {
  
  bandwidth_ = value;
}
inline void LsAttributeLink::set_bandwidth(float value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.bandwidth)
}

// float reservable_bandwidth = 11;
inline void LsAttributeLink::clear_reservable_bandwidth() {
  reservable_bandwidth_ = 0;
}
inline float LsAttributeLink::_internal_reservable_bandwidth() const {
  return reservable_bandwidth_;
}
inline float LsAttributeLink::reservable_bandwidth() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.reservable_bandwidth)
  return _internal_reservable_bandwidth();
}
inline void LsAttributeLink::_internal_set_reservable_bandwidth(float value) {
  
  reservable_bandwidth_ = value;
}
inline void LsAttributeLink::set_reservable_bandwidth(float value) {
  _internal_set_reservable_bandwidth(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.reservable_bandwidth)
}

// repeated float unreserved_bandwidth = 12;
inline int LsAttributeLink::_internal_unreserved_bandwidth_size() const {
  return unreserved_bandwidth_.size();
}
inline int LsAttributeLink::unreserved_bandwidth_size() const {
  return _internal_unreserved_bandwidth_size();
}
inline void LsAttributeLink::clear_unreserved_bandwidth() {
  unreserved_bandwidth_.Clear();
}
inline float LsAttributeLink::_internal_unreserved_bandwidth(int index) const {
  return unreserved_bandwidth_.Get(index);
}
inline float LsAttributeLink::unreserved_bandwidth(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.unreserved_bandwidth)
  return _internal_unreserved_bandwidth(index);
}
inline void LsAttributeLink::set_unreserved_bandwidth(int index, float value) {
  unreserved_bandwidth_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.unreserved_bandwidth)
}
inline void LsAttributeLink::_internal_add_unreserved_bandwidth(float value) {
  unreserved_bandwidth_.Add(value);
}
inline void LsAttributeLink::add_unreserved_bandwidth(float value) {
  _internal_add_unreserved_bandwidth(value);
  // @@protoc_insertion_point(field_add:gobgpapi.LsAttributeLink.unreserved_bandwidth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LsAttributeLink::_internal_unreserved_bandwidth() const {
  return unreserved_bandwidth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LsAttributeLink::unreserved_bandwidth() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LsAttributeLink.unreserved_bandwidth)
  return _internal_unreserved_bandwidth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LsAttributeLink::_internal_mutable_unreserved_bandwidth() {
  return &unreserved_bandwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LsAttributeLink::mutable_unreserved_bandwidth() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LsAttributeLink.unreserved_bandwidth)
  return _internal_mutable_unreserved_bandwidth();
}

// uint32 sr_adjacency_sid = 13;
inline void LsAttributeLink::clear_sr_adjacency_sid() {
  sr_adjacency_sid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_sr_adjacency_sid() const {
  return sr_adjacency_sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::sr_adjacency_sid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.sr_adjacency_sid)
  return _internal_sr_adjacency_sid();
}
inline void LsAttributeLink::_internal_set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sr_adjacency_sid_ = value;
}
inline void LsAttributeLink::set_sr_adjacency_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sr_adjacency_sid(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.sr_adjacency_sid)
}

// repeated uint32 srlgs = 14;
inline int LsAttributeLink::_internal_srlgs_size() const {
  return srlgs_.size();
}
inline int LsAttributeLink::srlgs_size() const {
  return _internal_srlgs_size();
}
inline void LsAttributeLink::clear_srlgs() {
  srlgs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::_internal_srlgs(int index) const {
  return srlgs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributeLink::srlgs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributeLink.srlgs)
  return _internal_srlgs(index);
}
inline void LsAttributeLink::set_srlgs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srlgs_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributeLink.srlgs)
}
inline void LsAttributeLink::_internal_add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  srlgs_.Add(value);
}
inline void LsAttributeLink::add_srlgs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_srlgs(value);
  // @@protoc_insertion_point(field_add:gobgpapi.LsAttributeLink.srlgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LsAttributeLink::_internal_srlgs() const {
  return srlgs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
LsAttributeLink::srlgs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.LsAttributeLink.srlgs)
  return _internal_srlgs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LsAttributeLink::_internal_mutable_srlgs() {
  return &srlgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
LsAttributeLink::mutable_srlgs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.LsAttributeLink.srlgs)
  return _internal_mutable_srlgs();
}

// -------------------------------------------------------------------

// LsAttributePrefix

// .gobgpapi.LsIGPFlags igp_flags = 1;
inline bool LsAttributePrefix::_internal_has_igp_flags() const {
  return this != internal_default_instance() && igp_flags_ != nullptr;
}
inline bool LsAttributePrefix::has_igp_flags() const {
  return _internal_has_igp_flags();
}
inline void LsAttributePrefix::clear_igp_flags() {
  if (GetArenaNoVirtual() == nullptr && igp_flags_ != nullptr) {
    delete igp_flags_;
  }
  igp_flags_ = nullptr;
}
inline const ::gobgpapi::LsIGPFlags& LsAttributePrefix::_internal_igp_flags() const {
  const ::gobgpapi::LsIGPFlags* p = igp_flags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsIGPFlags*>(
      &::gobgpapi::_LsIGPFlags_default_instance_);
}
inline const ::gobgpapi::LsIGPFlags& LsAttributePrefix::igp_flags() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributePrefix.igp_flags)
  return _internal_igp_flags();
}
inline ::gobgpapi::LsIGPFlags* LsAttributePrefix::release_igp_flags() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributePrefix.igp_flags)
  
  ::gobgpapi::LsIGPFlags* temp = igp_flags_;
  igp_flags_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsIGPFlags* LsAttributePrefix::_internal_mutable_igp_flags() {
  
  if (igp_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsIGPFlags>(GetArenaNoVirtual());
    igp_flags_ = p;
  }
  return igp_flags_;
}
inline ::gobgpapi::LsIGPFlags* LsAttributePrefix::mutable_igp_flags() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributePrefix.igp_flags)
  return _internal_mutable_igp_flags();
}
inline void LsAttributePrefix::set_allocated_igp_flags(::gobgpapi::LsIGPFlags* igp_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete igp_flags_;
  }
  if (igp_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      igp_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, igp_flags, submessage_arena);
    }
    
  } else {
    
  }
  igp_flags_ = igp_flags;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributePrefix.igp_flags)
}

// bytes opaque = 2;
inline void LsAttributePrefix::clear_opaque() {
  opaque_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LsAttributePrefix::opaque() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributePrefix.opaque)
  return _internal_opaque();
}
inline void LsAttributePrefix::set_opaque(const std::string& value) {
  _internal_set_opaque(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributePrefix.opaque)
}
inline std::string* LsAttributePrefix::mutable_opaque() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttributePrefix.opaque)
  return _internal_mutable_opaque();
}
inline const std::string& LsAttributePrefix::_internal_opaque() const {
  return opaque_.GetNoArena();
}
inline void LsAttributePrefix::_internal_set_opaque(const std::string& value) {
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LsAttributePrefix::set_opaque(std::string&& value) {
  
  opaque_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.LsAttributePrefix.opaque)
}
inline void LsAttributePrefix::set_opaque(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.LsAttributePrefix.opaque)
}
inline void LsAttributePrefix::set_opaque(const void* value, size_t size) {
  
  opaque_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.LsAttributePrefix.opaque)
}
inline std::string* LsAttributePrefix::_internal_mutable_opaque() {
  
  return opaque_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LsAttributePrefix::release_opaque() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttributePrefix.opaque)
  
  return opaque_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LsAttributePrefix::set_allocated_opaque(std::string* opaque) {
  if (opaque != nullptr) {
    
  } else {
    
  }
  opaque_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opaque);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttributePrefix.opaque)
}

// uint32 sr_prefix_sid = 3;
inline void LsAttributePrefix::clear_sr_prefix_sid() {
  sr_prefix_sid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributePrefix::_internal_sr_prefix_sid() const {
  return sr_prefix_sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LsAttributePrefix::sr_prefix_sid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttributePrefix.sr_prefix_sid)
  return _internal_sr_prefix_sid();
}
inline void LsAttributePrefix::_internal_set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sr_prefix_sid_ = value;
}
inline void LsAttributePrefix::set_sr_prefix_sid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sr_prefix_sid(value);
  // @@protoc_insertion_point(field_set:gobgpapi.LsAttributePrefix.sr_prefix_sid)
}

// -------------------------------------------------------------------

// LsAttribute

// .gobgpapi.LsAttributeNode node = 1;
inline bool LsAttribute::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool LsAttribute::has_node() const {
  return _internal_has_node();
}
inline void LsAttribute::clear_node() {
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::gobgpapi::LsAttributeNode& LsAttribute::_internal_node() const {
  const ::gobgpapi::LsAttributeNode* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsAttributeNode*>(
      &::gobgpapi::_LsAttributeNode_default_instance_);
}
inline const ::gobgpapi::LsAttributeNode& LsAttribute::node() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttribute.node)
  return _internal_node();
}
inline ::gobgpapi::LsAttributeNode* LsAttribute::release_node() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttribute.node)
  
  ::gobgpapi::LsAttributeNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsAttributeNode* LsAttribute::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsAttributeNode>(GetArenaNoVirtual());
    node_ = p;
  }
  return node_;
}
inline ::gobgpapi::LsAttributeNode* LsAttribute::mutable_node() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttribute.node)
  return _internal_mutable_node();
}
inline void LsAttribute::set_allocated_node(::gobgpapi::LsAttributeNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttribute.node)
}

// .gobgpapi.LsAttributeLink link = 2;
inline bool LsAttribute::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool LsAttribute::has_link() const {
  return _internal_has_link();
}
inline void LsAttribute::clear_link() {
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::gobgpapi::LsAttributeLink& LsAttribute::_internal_link() const {
  const ::gobgpapi::LsAttributeLink* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsAttributeLink*>(
      &::gobgpapi::_LsAttributeLink_default_instance_);
}
inline const ::gobgpapi::LsAttributeLink& LsAttribute::link() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttribute.link)
  return _internal_link();
}
inline ::gobgpapi::LsAttributeLink* LsAttribute::release_link() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttribute.link)
  
  ::gobgpapi::LsAttributeLink* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsAttributeLink* LsAttribute::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsAttributeLink>(GetArenaNoVirtual());
    link_ = p;
  }
  return link_;
}
inline ::gobgpapi::LsAttributeLink* LsAttribute::mutable_link() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttribute.link)
  return _internal_mutable_link();
}
inline void LsAttribute::set_allocated_link(::gobgpapi::LsAttributeLink* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttribute.link)
}

// .gobgpapi.LsAttributePrefix prefix = 3;
inline bool LsAttribute::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool LsAttribute::has_prefix() const {
  return _internal_has_prefix();
}
inline void LsAttribute::clear_prefix() {
  if (GetArenaNoVirtual() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::gobgpapi::LsAttributePrefix& LsAttribute::_internal_prefix() const {
  const ::gobgpapi::LsAttributePrefix* p = prefix_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gobgpapi::LsAttributePrefix*>(
      &::gobgpapi::_LsAttributePrefix_default_instance_);
}
inline const ::gobgpapi::LsAttributePrefix& LsAttribute::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.LsAttribute.prefix)
  return _internal_prefix();
}
inline ::gobgpapi::LsAttributePrefix* LsAttribute::release_prefix() {
  // @@protoc_insertion_point(field_release:gobgpapi.LsAttribute.prefix)
  
  ::gobgpapi::LsAttributePrefix* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::gobgpapi::LsAttributePrefix* LsAttribute::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::gobgpapi::LsAttributePrefix>(GetArenaNoVirtual());
    prefix_ = p;
  }
  return prefix_;
}
inline ::gobgpapi::LsAttributePrefix* LsAttribute::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.LsAttribute.prefix)
  return _internal_mutable_prefix();
}
inline void LsAttribute::set_allocated_prefix(::gobgpapi::LsAttributePrefix* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.LsAttribute.prefix)
}

// -------------------------------------------------------------------

// UnknownAttribute

// uint32 flags = 1;
inline void UnknownAttribute::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::flags() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UnknownAttribute.flags)
  return _internal_flags();
}
inline void UnknownAttribute::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void UnknownAttribute::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UnknownAttribute.flags)
}

// uint32 type = 2;
inline void UnknownAttribute::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnknownAttribute::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UnknownAttribute.type)
  return _internal_type();
}
inline void UnknownAttribute::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void UnknownAttribute::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UnknownAttribute.type)
}

// bytes value = 3;
inline void UnknownAttribute::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnknownAttribute::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.UnknownAttribute.value)
  return _internal_value();
}
inline void UnknownAttribute::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:gobgpapi.UnknownAttribute.value)
}
inline std::string* UnknownAttribute::mutable_value() {
  // @@protoc_insertion_point(field_mutable:gobgpapi.UnknownAttribute.value)
  return _internal_mutable_value();
}
inline const std::string& UnknownAttribute::_internal_value() const {
  return value_.GetNoArena();
}
inline void UnknownAttribute::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnknownAttribute::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gobgpapi.UnknownAttribute.value)
}
inline void UnknownAttribute::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.UnknownAttribute.value)
}
inline void UnknownAttribute::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.UnknownAttribute.value)
}
inline std::string* UnknownAttribute::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnknownAttribute::release_value() {
  // @@protoc_insertion_point(field_release:gobgpapi.UnknownAttribute.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnknownAttribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.UnknownAttribute.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gobgpapi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gobgpapi::LsNLRIType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::LsNLRIType>() {
  return ::gobgpapi::LsNLRIType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_attribute_2eproto
