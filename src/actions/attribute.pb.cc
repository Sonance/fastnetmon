// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribute.proto

#include "attribute.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsSegment_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthernetSegmentIdentifier_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gobgp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Family_gobgp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecComponentItem_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LargeCommunity_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsAttributeLink_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LsAttributeNode_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAttributePrefix_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsIGPFlags_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsLinkDescriptor_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeDescriptor_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeFlags_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsPrefixDescriptor_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrCapabilities_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrLocalBlock_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsSrRange_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_attribute_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TunnelEncapTLV_attribute_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace gobgpapi {
class OriginAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginAttribute> _instance;
} _OriginAttribute_default_instance_;
class AsSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsSegment> _instance;
} _AsSegment_default_instance_;
class AsPathAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsPathAttribute> _instance;
} _AsPathAttribute_default_instance_;
class NextHopAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NextHopAttribute> _instance;
} _NextHopAttribute_default_instance_;
class MultiExitDiscAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiExitDiscAttribute> _instance;
} _MultiExitDiscAttribute_default_instance_;
class LocalPrefAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalPrefAttribute> _instance;
} _LocalPrefAttribute_default_instance_;
class AtomicAggregateAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtomicAggregateAttribute> _instance;
} _AtomicAggregateAttribute_default_instance_;
class AggregatorAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregatorAttribute> _instance;
} _AggregatorAttribute_default_instance_;
class CommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunitiesAttribute> _instance;
} _CommunitiesAttribute_default_instance_;
class OriginatorIdAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginatorIdAttribute> _instance;
} _OriginatorIdAttribute_default_instance_;
class ClusterListAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterListAttribute> _instance;
} _ClusterListAttribute_default_instance_;
class IPAddressPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPAddressPrefix> _instance;
} _IPAddressPrefix_default_instance_;
class LabeledIPAddressPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledIPAddressPrefix> _instance;
} _LabeledIPAddressPrefix_default_instance_;
class EncapsulationNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncapsulationNLRI> _instance;
} _EncapsulationNLRI_default_instance_;
class RouteDistinguisherTwoOctetASDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteDistinguisherTwoOctetAS> _instance;
} _RouteDistinguisherTwoOctetAS_default_instance_;
class RouteDistinguisherIPAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteDistinguisherIPAddress> _instance;
} _RouteDistinguisherIPAddress_default_instance_;
class RouteDistinguisherFourOctetASDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteDistinguisherFourOctetAS> _instance;
} _RouteDistinguisherFourOctetAS_default_instance_;
class EthernetSegmentIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthernetSegmentIdentifier> _instance;
} _EthernetSegmentIdentifier_default_instance_;
class EVPNEthernetAutoDiscoveryRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNEthernetAutoDiscoveryRoute> _instance;
} _EVPNEthernetAutoDiscoveryRoute_default_instance_;
class EVPNMACIPAdvertisementRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNMACIPAdvertisementRoute> _instance;
} _EVPNMACIPAdvertisementRoute_default_instance_;
class EVPNInclusiveMulticastEthernetTagRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNInclusiveMulticastEthernetTagRoute> _instance;
} _EVPNInclusiveMulticastEthernetTagRoute_default_instance_;
class EVPNEthernetSegmentRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNEthernetSegmentRoute> _instance;
} _EVPNEthernetSegmentRoute_default_instance_;
class EVPNIPPrefixRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNIPPrefixRoute> _instance;
} _EVPNIPPrefixRoute_default_instance_;
class EVPNIPMSIRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EVPNIPMSIRoute> _instance;
} _EVPNIPMSIRoute_default_instance_;
class LabeledVPNIPAddressPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledVPNIPAddressPrefix> _instance;
} _LabeledVPNIPAddressPrefix_default_instance_;
class RouteTargetMembershipNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteTargetMembershipNLRI> _instance;
} _RouteTargetMembershipNLRI_default_instance_;
class FlowSpecIPPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecIPPrefix> _instance;
} _FlowSpecIPPrefix_default_instance_;
class FlowSpecMACDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecMAC> _instance;
} _FlowSpecMAC_default_instance_;
class FlowSpecComponentItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecComponentItem> _instance;
} _FlowSpecComponentItem_default_instance_;
class FlowSpecComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecComponent> _instance;
} _FlowSpecComponent_default_instance_;
class FlowSpecNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowSpecNLRI> _instance;
} _FlowSpecNLRI_default_instance_;
class VPNFlowSpecNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VPNFlowSpecNLRI> _instance;
} _VPNFlowSpecNLRI_default_instance_;
class OpaqueNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpaqueNLRI> _instance;
} _OpaqueNLRI_default_instance_;
class LsNodeDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsNodeDescriptor> _instance;
} _LsNodeDescriptor_default_instance_;
class LsLinkDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsLinkDescriptor> _instance;
} _LsLinkDescriptor_default_instance_;
class LsPrefixDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsPrefixDescriptor> _instance;
} _LsPrefixDescriptor_default_instance_;
class LsNodeNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsNodeNLRI> _instance;
} _LsNodeNLRI_default_instance_;
class LsLinkNLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsLinkNLRI> _instance;
} _LsLinkNLRI_default_instance_;
class LsPrefixV4NLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsPrefixV4NLRI> _instance;
} _LsPrefixV4NLRI_default_instance_;
class LsPrefixV6NLRIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsPrefixV6NLRI> _instance;
} _LsPrefixV6NLRI_default_instance_;
class LsAddrPrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAddrPrefix> _instance;
} _LsAddrPrefix_default_instance_;
class MpReachNLRIAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpReachNLRIAttribute> _instance;
} _MpReachNLRIAttribute_default_instance_;
class MpUnreachNLRIAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MpUnreachNLRIAttribute> _instance;
} _MpUnreachNLRIAttribute_default_instance_;
class TwoOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwoOctetAsSpecificExtended> _instance;
} _TwoOctetAsSpecificExtended_default_instance_;
class IPv4AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPv4AddressSpecificExtended> _instance;
} _IPv4AddressSpecificExtended_default_instance_;
class FourOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FourOctetAsSpecificExtended> _instance;
} _FourOctetAsSpecificExtended_default_instance_;
class ValidationExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidationExtended> _instance;
} _ValidationExtended_default_instance_;
class ColorExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorExtended> _instance;
} _ColorExtended_default_instance_;
class EncapExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncapExtended> _instance;
} _EncapExtended_default_instance_;
class DefaultGatewayExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultGatewayExtended> _instance;
} _DefaultGatewayExtended_default_instance_;
class OpaqueExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpaqueExtended> _instance;
} _OpaqueExtended_default_instance_;
class ESILabelExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ESILabelExtended> _instance;
} _ESILabelExtended_default_instance_;
class ESImportRouteTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ESImportRouteTarget> _instance;
} _ESImportRouteTarget_default_instance_;
class MacMobilityExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MacMobilityExtended> _instance;
} _MacMobilityExtended_default_instance_;
class RouterMacExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouterMacExtended> _instance;
} _RouterMacExtended_default_instance_;
class TrafficRateExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRateExtended> _instance;
} _TrafficRateExtended_default_instance_;
class TrafficActionExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficActionExtended> _instance;
} _TrafficActionExtended_default_instance_;
class RedirectTwoOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectTwoOctetAsSpecificExtended> _instance;
} _RedirectTwoOctetAsSpecificExtended_default_instance_;
class RedirectIPv4AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectIPv4AddressSpecificExtended> _instance;
} _RedirectIPv4AddressSpecificExtended_default_instance_;
class RedirectFourOctetAsSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectFourOctetAsSpecificExtended> _instance;
} _RedirectFourOctetAsSpecificExtended_default_instance_;
class TrafficRemarkExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRemarkExtended> _instance;
} _TrafficRemarkExtended_default_instance_;
class UnknownExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownExtended> _instance;
} _UnknownExtended_default_instance_;
class ExtendedCommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtendedCommunitiesAttribute> _instance;
} _ExtendedCommunitiesAttribute_default_instance_;
class As4PathAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<As4PathAttribute> _instance;
} _As4PathAttribute_default_instance_;
class As4AggregatorAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<As4AggregatorAttribute> _instance;
} _As4AggregatorAttribute_default_instance_;
class PmsiTunnelAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PmsiTunnelAttribute> _instance;
} _PmsiTunnelAttribute_default_instance_;
class TunnelEncapSubTLVEncapsulationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVEncapsulation> _instance;
} _TunnelEncapSubTLVEncapsulation_default_instance_;
class TunnelEncapSubTLVProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVProtocol> _instance;
} _TunnelEncapSubTLVProtocol_default_instance_;
class TunnelEncapSubTLVColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVColor> _instance;
} _TunnelEncapSubTLVColor_default_instance_;
class TunnelEncapSubTLVUnknownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapSubTLVUnknown> _instance;
} _TunnelEncapSubTLVUnknown_default_instance_;
class TunnelEncapTLVDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapTLV> _instance;
} _TunnelEncapTLV_default_instance_;
class TunnelEncapAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TunnelEncapAttribute> _instance;
} _TunnelEncapAttribute_default_instance_;
class IPv6AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPv6AddressSpecificExtended> _instance;
} _IPv6AddressSpecificExtended_default_instance_;
class RedirectIPv6AddressSpecificExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RedirectIPv6AddressSpecificExtended> _instance;
} _RedirectIPv6AddressSpecificExtended_default_instance_;
class IP6ExtendedCommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IP6ExtendedCommunitiesAttribute> _instance;
} _IP6ExtendedCommunitiesAttribute_default_instance_;
class AigpTLVIGPMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AigpTLVIGPMetric> _instance;
} _AigpTLVIGPMetric_default_instance_;
class AigpTLVUnknownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AigpTLVUnknown> _instance;
} _AigpTLVUnknown_default_instance_;
class AigpAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AigpAttribute> _instance;
} _AigpAttribute_default_instance_;
class LargeCommunityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LargeCommunity> _instance;
} _LargeCommunity_default_instance_;
class LargeCommunitiesAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LargeCommunitiesAttribute> _instance;
} _LargeCommunitiesAttribute_default_instance_;
class LsNodeFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsNodeFlags> _instance;
} _LsNodeFlags_default_instance_;
class LsIGPFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsIGPFlags> _instance;
} _LsIGPFlags_default_instance_;
class LsSrRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsSrRange> _instance;
} _LsSrRange_default_instance_;
class LsSrCapabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsSrCapabilities> _instance;
} _LsSrCapabilities_default_instance_;
class LsSrLocalBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsSrLocalBlock> _instance;
} _LsSrLocalBlock_default_instance_;
class LsAttributeNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttributeNode> _instance;
} _LsAttributeNode_default_instance_;
class LsAttributeLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttributeLink> _instance;
} _LsAttributeLink_default_instance_;
class LsAttributePrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttributePrefix> _instance;
} _LsAttributePrefix_default_instance_;
class LsAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LsAttribute> _instance;
} _LsAttribute_default_instance_;
class UnknownAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnknownAttribute> _instance;
} _UnknownAttribute_default_instance_;
}  // namespace gobgpapi
static void InitDefaultsscc_info_AggregatorAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AggregatorAttribute_default_instance_;
    new (ptr) ::gobgpapi::AggregatorAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AggregatorAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AggregatorAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AggregatorAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_AigpAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AigpAttribute_default_instance_;
    new (ptr) ::gobgpapi::AigpAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AigpAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AigpAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AigpAttribute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_AigpTLVIGPMetric_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AigpTLVIGPMetric_default_instance_;
    new (ptr) ::gobgpapi::AigpTLVIGPMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AigpTLVIGPMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AigpTLVIGPMetric_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AigpTLVIGPMetric_attribute_2eproto}, {}};

static void InitDefaultsscc_info_AigpTLVUnknown_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AigpTLVUnknown_default_instance_;
    new (ptr) ::gobgpapi::AigpTLVUnknown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AigpTLVUnknown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AigpTLVUnknown_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AigpTLVUnknown_attribute_2eproto}, {}};

static void InitDefaultsscc_info_As4AggregatorAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_As4AggregatorAttribute_default_instance_;
    new (ptr) ::gobgpapi::As4AggregatorAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::As4AggregatorAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_As4AggregatorAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_As4AggregatorAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_As4PathAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_As4PathAttribute_default_instance_;
    new (ptr) ::gobgpapi::As4PathAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::As4PathAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_As4PathAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_As4PathAttribute_attribute_2eproto}, {
      &scc_info_AsSegment_attribute_2eproto.base,}};

static void InitDefaultsscc_info_AsPathAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AsPathAttribute_default_instance_;
    new (ptr) ::gobgpapi::AsPathAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AsPathAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AsPathAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AsPathAttribute_attribute_2eproto}, {
      &scc_info_AsSegment_attribute_2eproto.base,}};

static void InitDefaultsscc_info_AsSegment_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AsSegment_default_instance_;
    new (ptr) ::gobgpapi::AsSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AsSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsSegment_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsSegment_attribute_2eproto}, {}};

static void InitDefaultsscc_info_AtomicAggregateAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_AtomicAggregateAttribute_default_instance_;
    new (ptr) ::gobgpapi::AtomicAggregateAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::AtomicAggregateAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtomicAggregateAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AtomicAggregateAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ClusterListAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ClusterListAttribute_default_instance_;
    new (ptr) ::gobgpapi::ClusterListAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ClusterListAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClusterListAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClusterListAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ColorExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ColorExtended_default_instance_;
    new (ptr) ::gobgpapi::ColorExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ColorExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_CommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_CommunitiesAttribute_default_instance_;
    new (ptr) ::gobgpapi::CommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::CommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunitiesAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_DefaultGatewayExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_DefaultGatewayExtended_default_instance_;
    new (ptr) ::gobgpapi::DefaultGatewayExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::DefaultGatewayExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultGatewayExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefaultGatewayExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ESILabelExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ESILabelExtended_default_instance_;
    new (ptr) ::gobgpapi::ESILabelExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ESILabelExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ESILabelExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ESILabelExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ESImportRouteTarget_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ESImportRouteTarget_default_instance_;
    new (ptr) ::gobgpapi::ESImportRouteTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ESImportRouteTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ESImportRouteTarget_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ESImportRouteTarget_attribute_2eproto}, {}};

static void InitDefaultsscc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EVPNEthernetAutoDiscoveryRoute_default_instance_;
    new (ptr) ::gobgpapi::EVPNEthernetAutoDiscoveryRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EVPNEthernetAutoDiscoveryRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EVPNEthernetSegmentRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EVPNEthernetSegmentRoute_default_instance_;
    new (ptr) ::gobgpapi::EVPNEthernetSegmentRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EVPNEthernetSegmentRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNEthernetSegmentRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNEthernetSegmentRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EVPNIPMSIRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EVPNIPMSIRoute_default_instance_;
    new (ptr) ::gobgpapi::EVPNIPMSIRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EVPNIPMSIRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EVPNIPMSIRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EVPNIPMSIRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EVPNIPPrefixRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EVPNIPPrefixRoute_default_instance_;
    new (ptr) ::gobgpapi::EVPNIPPrefixRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EVPNIPPrefixRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNIPPrefixRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNIPPrefixRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EVPNInclusiveMulticastEthernetTagRoute_default_instance_;
    new (ptr) ::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EVPNMACIPAdvertisementRoute_default_instance_;
    new (ptr) ::gobgpapi::EVPNMACIPAdvertisementRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EVPNMACIPAdvertisementRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,}};

static void InitDefaultsscc_info_EncapExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EncapExtended_default_instance_;
    new (ptr) ::gobgpapi::EncapExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EncapExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncapExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EncapExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_EncapsulationNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EncapsulationNLRI_default_instance_;
    new (ptr) ::gobgpapi::EncapsulationNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EncapsulationNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncapsulationNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EncapsulationNLRI_attribute_2eproto}, {}};

static void InitDefaultsscc_info_EthernetSegmentIdentifier_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_EthernetSegmentIdentifier_default_instance_;
    new (ptr) ::gobgpapi::EthernetSegmentIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::EthernetSegmentIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthernetSegmentIdentifier_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthernetSegmentIdentifier_attribute_2eproto}, {}};

static void InitDefaultsscc_info_ExtendedCommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ExtendedCommunitiesAttribute_default_instance_;
    new (ptr) ::gobgpapi::ExtendedCommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ExtendedCommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtendedCommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExtendedCommunitiesAttribute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_FlowSpecComponent_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_FlowSpecComponent_default_instance_;
    new (ptr) ::gobgpapi::FlowSpecComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::FlowSpecComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowSpecComponent_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowSpecComponent_attribute_2eproto}, {
      &scc_info_FlowSpecComponentItem_attribute_2eproto.base,}};

static void InitDefaultsscc_info_FlowSpecComponentItem_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_FlowSpecComponentItem_default_instance_;
    new (ptr) ::gobgpapi::FlowSpecComponentItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::FlowSpecComponentItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecComponentItem_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowSpecComponentItem_attribute_2eproto}, {}};

static void InitDefaultsscc_info_FlowSpecIPPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_FlowSpecIPPrefix_default_instance_;
    new (ptr) ::gobgpapi::FlowSpecIPPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::FlowSpecIPPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecIPPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowSpecIPPrefix_attribute_2eproto}, {}};

static void InitDefaultsscc_info_FlowSpecMAC_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_FlowSpecMAC_default_instance_;
    new (ptr) ::gobgpapi::FlowSpecMAC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::FlowSpecMAC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowSpecMAC_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowSpecMAC_attribute_2eproto}, {}};

static void InitDefaultsscc_info_FlowSpecNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_FlowSpecNLRI_default_instance_;
    new (ptr) ::gobgpapi::FlowSpecNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::FlowSpecNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FlowSpecNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FlowSpecNLRI_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_FourOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_FourOctetAsSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::FourOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::FourOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FourOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FourOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_IP6ExtendedCommunitiesAttribute_default_instance_;
    new (ptr) ::gobgpapi::IP6ExtendedCommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IP6ExtendedCommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_IPAddressPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_IPAddressPrefix_default_instance_;
    new (ptr) ::gobgpapi::IPAddressPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IPAddressPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPAddressPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPAddressPrefix_attribute_2eproto}, {}};

static void InitDefaultsscc_info_IPv4AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_IPv4AddressSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::IPv4AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IPv4AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPv4AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPv4AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_IPv6AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_IPv6AddressSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::IPv6AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::IPv6AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPv6AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPv6AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LabeledIPAddressPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LabeledIPAddressPrefix_default_instance_;
    new (ptr) ::gobgpapi::LabeledIPAddressPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LabeledIPAddressPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabeledIPAddressPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabeledIPAddressPrefix_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LabeledVPNIPAddressPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LabeledVPNIPAddressPrefix_default_instance_;
    new (ptr) ::gobgpapi::LabeledVPNIPAddressPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LabeledVPNIPAddressPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LabeledVPNIPAddressPrefix_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_LargeCommunitiesAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LargeCommunitiesAttribute_default_instance_;
    new (ptr) ::gobgpapi::LargeCommunitiesAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LargeCommunitiesAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LargeCommunitiesAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LargeCommunitiesAttribute_attribute_2eproto}, {
      &scc_info_LargeCommunity_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LargeCommunity_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LargeCommunity_default_instance_;
    new (ptr) ::gobgpapi::LargeCommunity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LargeCommunity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LargeCommunity_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LargeCommunity_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LocalPrefAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LocalPrefAttribute_default_instance_;
    new (ptr) ::gobgpapi::LocalPrefAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LocalPrefAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalPrefAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocalPrefAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsAddrPrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsAddrPrefix_default_instance_;
    new (ptr) ::gobgpapi::LsAddrPrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsAddrPrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAddrPrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsAddrPrefix_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_LsAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsAttribute_default_instance_;
    new (ptr) ::gobgpapi::LsAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LsAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LsAttribute_attribute_2eproto}, {
      &scc_info_LsAttributeNode_attribute_2eproto.base,
      &scc_info_LsAttributeLink_attribute_2eproto.base,
      &scc_info_LsAttributePrefix_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsAttributeLink_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsAttributeLink_default_instance_;
    new (ptr) ::gobgpapi::LsAttributeLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsAttributeLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsAttributeLink_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsAttributeLink_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsAttributeNode_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsAttributeNode_default_instance_;
    new (ptr) ::gobgpapi::LsAttributeNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsAttributeNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LsAttributeNode_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LsAttributeNode_attribute_2eproto}, {
      &scc_info_LsNodeFlags_attribute_2eproto.base,
      &scc_info_LsSrCapabilities_attribute_2eproto.base,
      &scc_info_LsSrLocalBlock_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsAttributePrefix_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsAttributePrefix_default_instance_;
    new (ptr) ::gobgpapi::LsAttributePrefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsAttributePrefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsAttributePrefix_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsAttributePrefix_attribute_2eproto}, {
      &scc_info_LsIGPFlags_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsIGPFlags_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsIGPFlags_default_instance_;
    new (ptr) ::gobgpapi::LsIGPFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsIGPFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsIGPFlags_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsIGPFlags_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsLinkDescriptor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsLinkDescriptor_default_instance_;
    new (ptr) ::gobgpapi::LsLinkDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsLinkDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsLinkDescriptor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsLinkDescriptor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsLinkNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsLinkNLRI_default_instance_;
    new (ptr) ::gobgpapi::LsLinkNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsLinkNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LsLinkNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LsLinkNLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,
      &scc_info_LsLinkDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsNodeDescriptor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsNodeDescriptor_default_instance_;
    new (ptr) ::gobgpapi::LsNodeDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsNodeDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeDescriptor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsNodeDescriptor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsNodeFlags_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsNodeFlags_default_instance_;
    new (ptr) ::gobgpapi::LsNodeFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsNodeFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsNodeFlags_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsNodeFlags_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsNodeNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsNodeNLRI_default_instance_;
    new (ptr) ::gobgpapi::LsNodeNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsNodeNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsNodeNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsNodeNLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsPrefixDescriptor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsPrefixDescriptor_default_instance_;
    new (ptr) ::gobgpapi::LsPrefixDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsPrefixDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsPrefixDescriptor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsPrefixDescriptor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_LsPrefixV4NLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsPrefixV4NLRI_default_instance_;
    new (ptr) ::gobgpapi::LsPrefixV4NLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsPrefixV4NLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LsPrefixV4NLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LsPrefixV4NLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,
      &scc_info_LsPrefixDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsPrefixV6NLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsPrefixV6NLRI_default_instance_;
    new (ptr) ::gobgpapi::LsPrefixV6NLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsPrefixV6NLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LsPrefixV6NLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LsPrefixV6NLRI_attribute_2eproto}, {
      &scc_info_LsNodeDescriptor_attribute_2eproto.base,
      &scc_info_LsPrefixDescriptor_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsSrCapabilities_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsSrCapabilities_default_instance_;
    new (ptr) ::gobgpapi::LsSrCapabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsSrCapabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrCapabilities_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsSrCapabilities_attribute_2eproto}, {
      &scc_info_LsSrRange_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsSrLocalBlock_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsSrLocalBlock_default_instance_;
    new (ptr) ::gobgpapi::LsSrLocalBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsSrLocalBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LsSrLocalBlock_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LsSrLocalBlock_attribute_2eproto}, {
      &scc_info_LsSrRange_attribute_2eproto.base,}};

static void InitDefaultsscc_info_LsSrRange_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_LsSrRange_default_instance_;
    new (ptr) ::gobgpapi::LsSrRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::LsSrRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LsSrRange_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LsSrRange_attribute_2eproto}, {}};

static void InitDefaultsscc_info_MacMobilityExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MacMobilityExtended_default_instance_;
    new (ptr) ::gobgpapi::MacMobilityExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MacMobilityExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MacMobilityExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MacMobilityExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_MpReachNLRIAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MpReachNLRIAttribute_default_instance_;
    new (ptr) ::gobgpapi::MpReachNLRIAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpReachNLRIAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpReachNLRIAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MpReachNLRIAttribute_attribute_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MpUnreachNLRIAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MpUnreachNLRIAttribute_default_instance_;
    new (ptr) ::gobgpapi::MpUnreachNLRIAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MpUnreachNLRIAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MpUnreachNLRIAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MpUnreachNLRIAttribute_attribute_2eproto}, {
      &scc_info_Family_gobgp_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_MultiExitDiscAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_MultiExitDiscAttribute_default_instance_;
    new (ptr) ::gobgpapi::MultiExitDiscAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::MultiExitDiscAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiExitDiscAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiExitDiscAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_NextHopAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_NextHopAttribute_default_instance_;
    new (ptr) ::gobgpapi::NextHopAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::NextHopAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NextHopAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NextHopAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OpaqueExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_OpaqueExtended_default_instance_;
    new (ptr) ::gobgpapi::OpaqueExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::OpaqueExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpaqueExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpaqueExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OpaqueNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_OpaqueNLRI_default_instance_;
    new (ptr) ::gobgpapi::OpaqueNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::OpaqueNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpaqueNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpaqueNLRI_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OriginAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_OriginAttribute_default_instance_;
    new (ptr) ::gobgpapi::OriginAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::OriginAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OriginAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_OriginatorIdAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_OriginatorIdAttribute_default_instance_;
    new (ptr) ::gobgpapi::OriginatorIdAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::OriginatorIdAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginatorIdAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OriginatorIdAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_PmsiTunnelAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_PmsiTunnelAttribute_default_instance_;
    new (ptr) ::gobgpapi::PmsiTunnelAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::PmsiTunnelAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PmsiTunnelAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PmsiTunnelAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RedirectFourOctetAsSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::RedirectFourOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RedirectFourOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RedirectIPv4AddressSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::RedirectIPv4AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RedirectIPv4AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RedirectIPv6AddressSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::RedirectIPv6AddressSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RedirectIPv6AddressSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RedirectTwoOctetAsSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::RedirectTwoOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RedirectTwoOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteDistinguisherFourOctetAS_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteDistinguisherFourOctetAS_default_instance_;
    new (ptr) ::gobgpapi::RouteDistinguisherFourOctetAS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteDistinguisherFourOctetAS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteDistinguisherFourOctetAS_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteDistinguisherFourOctetAS_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteDistinguisherIPAddress_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteDistinguisherIPAddress_default_instance_;
    new (ptr) ::gobgpapi::RouteDistinguisherIPAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteDistinguisherIPAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteDistinguisherIPAddress_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteDistinguisherIPAddress_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteDistinguisherTwoOctetAS_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteDistinguisherTwoOctetAS_default_instance_;
    new (ptr) ::gobgpapi::RouteDistinguisherTwoOctetAS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteDistinguisherTwoOctetAS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteDistinguisherTwoOctetAS_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteDistinguisherTwoOctetAS_attribute_2eproto}, {}};

static void InitDefaultsscc_info_RouteTargetMembershipNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouteTargetMembershipNLRI_default_instance_;
    new (ptr) ::gobgpapi::RouteTargetMembershipNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouteTargetMembershipNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteTargetMembershipNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteTargetMembershipNLRI_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RouterMacExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_RouterMacExtended_default_instance_;
    new (ptr) ::gobgpapi::RouterMacExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::RouterMacExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouterMacExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouterMacExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TrafficActionExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TrafficActionExtended_default_instance_;
    new (ptr) ::gobgpapi::TrafficActionExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TrafficActionExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficActionExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficActionExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TrafficRateExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TrafficRateExtended_default_instance_;
    new (ptr) ::gobgpapi::TrafficRateExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TrafficRateExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficRateExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficRateExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TrafficRemarkExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TrafficRemarkExtended_default_instance_;
    new (ptr) ::gobgpapi::TrafficRemarkExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TrafficRemarkExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficRemarkExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrafficRemarkExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TunnelEncapAttribute_default_instance_;
    new (ptr) ::gobgpapi::TunnelEncapAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TunnelEncapAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TunnelEncapAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TunnelEncapAttribute_attribute_2eproto}, {
      &scc_info_TunnelEncapTLV_attribute_2eproto.base,}};

static void InitDefaultsscc_info_TunnelEncapSubTLVColor_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TunnelEncapSubTLVColor_default_instance_;
    new (ptr) ::gobgpapi::TunnelEncapSubTLVColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TunnelEncapSubTLVColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVColor_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVColor_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TunnelEncapSubTLVEncapsulation_default_instance_;
    new (ptr) ::gobgpapi::TunnelEncapSubTLVEncapsulation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TunnelEncapSubTLVEncapsulation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVProtocol_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TunnelEncapSubTLVProtocol_default_instance_;
    new (ptr) ::gobgpapi::TunnelEncapSubTLVProtocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TunnelEncapSubTLVProtocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVProtocol_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVProtocol_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapSubTLVUnknown_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TunnelEncapSubTLVUnknown_default_instance_;
    new (ptr) ::gobgpapi::TunnelEncapSubTLVUnknown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TunnelEncapSubTLVUnknown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TunnelEncapSubTLVUnknown_attribute_2eproto}, {}};

static void InitDefaultsscc_info_TunnelEncapTLV_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TunnelEncapTLV_default_instance_;
    new (ptr) ::gobgpapi::TunnelEncapTLV();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TunnelEncapTLV::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TunnelEncapTLV_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TunnelEncapTLV_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_TwoOctetAsSpecificExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_TwoOctetAsSpecificExtended_default_instance_;
    new (ptr) ::gobgpapi::TwoOctetAsSpecificExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::TwoOctetAsSpecificExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TwoOctetAsSpecificExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TwoOctetAsSpecificExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_UnknownAttribute_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UnknownAttribute_default_instance_;
    new (ptr) ::gobgpapi::UnknownAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UnknownAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownAttribute_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownAttribute_attribute_2eproto}, {}};

static void InitDefaultsscc_info_UnknownExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_UnknownExtended_default_instance_;
    new (ptr) ::gobgpapi::UnknownExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::UnknownExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnknownExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnknownExtended_attribute_2eproto}, {}};

static void InitDefaultsscc_info_VPNFlowSpecNLRI_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_VPNFlowSpecNLRI_default_instance_;
    new (ptr) ::gobgpapi::VPNFlowSpecNLRI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::VPNFlowSpecNLRI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VPNFlowSpecNLRI_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VPNFlowSpecNLRI_attribute_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ValidationExtended_attribute_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gobgpapi::_ValidationExtended_default_instance_;
    new (ptr) ::gobgpapi::ValidationExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gobgpapi::ValidationExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValidationExtended_attribute_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValidationExtended_attribute_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_attribute_2eproto[90];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_attribute_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_attribute_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_attribute_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OriginAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OriginAttribute, origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsSegment, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsSegment, numbers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPathAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AsPathAttribute, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::NextHopAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::NextHopAttribute, next_hop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MultiExitDiscAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MultiExitDiscAttribute, med_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LocalPrefAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LocalPrefAttribute, local_pref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AtomicAggregateAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AggregatorAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AggregatorAttribute, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AggregatorAttribute, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::CommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::CommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OriginatorIdAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OriginatorIdAttribute, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ClusterListAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ClusterListAttribute, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPAddressPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPAddressPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPAddressPrefix, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledIPAddressPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledIPAddressPrefix, labels_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledIPAddressPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledIPAddressPrefix, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EncapsulationNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EncapsulationNLRI, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherTwoOctetAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherTwoOctetAS, admin_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherTwoOctetAS, assigned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherIPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherIPAddress, admin_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherIPAddress, assigned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherFourOctetAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherFourOctetAS, admin_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteDistinguisherFourOctetAS, assigned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EthernetSegmentIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EthernetSegmentIdentifier, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EthernetSegmentIdentifier, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetAutoDiscoveryRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetAutoDiscoveryRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetAutoDiscoveryRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetAutoDiscoveryRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetAutoDiscoveryRoute, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNMACIPAdvertisementRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNMACIPAdvertisementRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNMACIPAdvertisementRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNMACIPAdvertisementRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNMACIPAdvertisementRoute, mac_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNMACIPAdvertisementRoute, ip_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNMACIPAdvertisementRoute, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetSegmentRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetSegmentRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetSegmentRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNEthernetSegmentRoute, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, esi_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, ip_prefix_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, ip_prefix_len_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, gw_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPPrefixRoute, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPMSIRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPMSIRoute, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPMSIRoute, ethernet_tag_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EVPNIPMSIRoute, rt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledVPNIPAddressPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledVPNIPAddressPrefix, labels_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledVPNIPAddressPrefix, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledVPNIPAddressPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LabeledVPNIPAddressPrefix, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipNLRI, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouteTargetMembershipNLRI, rt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecIPPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecIPPrefix, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecIPPrefix, prefix_len_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecIPPrefix, prefix_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecIPPrefix, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecMAC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecMAC, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecMAC, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecComponentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecComponentItem, op_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecComponentItem, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecComponent, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecComponent, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FlowSpecNLRI, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::VPNFlowSpecNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::VPNFlowSpecNLRI, rd_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::VPNFlowSpecNLRI, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OpaqueNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OpaqueNLRI, key_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OpaqueNLRI, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeDescriptor, asn_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeDescriptor, bgp_ls_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeDescriptor, ospf_area_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeDescriptor, pseudonode_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeDescriptor, igp_router_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkDescriptor, link_local_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkDescriptor, link_remote_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkDescriptor, interface_addr_ipv4_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkDescriptor, neighbor_addr_ipv4_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkDescriptor, interface_addr_ipv6_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkDescriptor, neighbor_addr_ipv6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixDescriptor, ip_reachability_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixDescriptor, ospf_route_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeNLRI, local_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkNLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkNLRI, local_node_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkNLRI, remote_node_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsLinkNLRI, link_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixV4NLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixV4NLRI, local_node_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixV4NLRI, prefix_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixV6NLRI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixV6NLRI, local_node_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsPrefixV6NLRI, prefix_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAddrPrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAddrPrefix, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAddrPrefix, nlri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpReachNLRIAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpReachNLRIAttribute, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpReachNLRIAttribute, next_hops_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpReachNLRIAttribute, nlris_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpUnreachNLRIAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpUnreachNLRIAttribute, family_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MpUnreachNLRIAttribute, nlris_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TwoOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TwoOctetAsSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TwoOctetAsSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TwoOctetAsSpecificExtended, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TwoOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv4AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv4AddressSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv4AddressSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv4AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv4AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FourOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FourOctetAsSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FourOctetAsSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FourOctetAsSpecificExtended, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::FourOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ValidationExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ValidationExtended, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ColorExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ColorExtended, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EncapExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::EncapExtended, tunnel_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::DefaultGatewayExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OpaqueExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OpaqueExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::OpaqueExtended, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ESILabelExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ESILabelExtended, is_single_active_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ESILabelExtended, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ESImportRouteTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ESImportRouteTarget, es_import_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MacMobilityExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MacMobilityExtended, is_sticky_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::MacMobilityExtended, sequence_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouterMacExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RouterMacExtended, mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficRateExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficRateExtended, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficRateExtended, rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficActionExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficActionExtended, terminal_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficActionExtended, sample_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectTwoOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectTwoOctetAsSpecificExtended, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectTwoOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectIPv4AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectIPv4AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectIPv4AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectFourOctetAsSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectFourOctetAsSpecificExtended, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectFourOctetAsSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficRemarkExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TrafficRemarkExtended, dscp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UnknownExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UnknownExtended, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UnknownExtended, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ExtendedCommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::ExtendedCommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::As4PathAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::As4PathAttribute, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::As4AggregatorAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::As4AggregatorAttribute, as_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::As4AggregatorAttribute, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PmsiTunnelAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PmsiTunnelAttribute, flags_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PmsiTunnelAttribute, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PmsiTunnelAttribute, label_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::PmsiTunnelAttribute, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVEncapsulation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVEncapsulation, key_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVEncapsulation, cookie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVProtocol, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVColor, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVUnknown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVUnknown, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapSubTLVUnknown, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapTLV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapTLV, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapTLV, tlvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::TunnelEncapAttribute, tlvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv6AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv6AddressSpecificExtended, is_transitive_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv6AddressSpecificExtended, sub_type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv6AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IPv6AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectIPv6AddressSpecificExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectIPv6AddressSpecificExtended, address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::RedirectIPv6AddressSpecificExtended, local_admin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IP6ExtendedCommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::IP6ExtendedCommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AigpTLVIGPMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AigpTLVIGPMetric, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AigpTLVUnknown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AigpTLVUnknown, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AigpTLVUnknown, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AigpAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::AigpAttribute, tlvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LargeCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LargeCommunity, global_admin_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LargeCommunity, local_data1_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LargeCommunity, local_data2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LargeCommunitiesAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LargeCommunitiesAttribute, communities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeFlags, overload_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeFlags, attached_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeFlags, external_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeFlags, abr_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeFlags, router_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsNodeFlags, v6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsIGPFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsIGPFlags, down_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsIGPFlags, no_unicast_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsIGPFlags, local_address_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsIGPFlags, propagate_nssa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrRange, begin_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrCapabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrCapabilities, ipv4_supported_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrCapabilities, ipv6_supported_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrCapabilities, ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrLocalBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsSrLocalBlock, ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, flags_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, local_router_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, local_router_id_v6_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, isis_area_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, opaque_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, sr_capabilities_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, sr_algorithms_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeNode, sr_local_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, name_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, local_router_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, local_router_id_v6_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, remote_router_id_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, remote_router_id_v6_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, admin_group_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, default_te_metric_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, igp_metric_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, opaque_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, reservable_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, unreserved_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, sr_adjacency_sid_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributeLink, srlgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributePrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributePrefix, igp_flags_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributePrefix, opaque_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttributePrefix, sr_prefix_sid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttribute, node_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttribute, link_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::LsAttribute, prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UnknownAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UnknownAttribute, flags_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UnknownAttribute, type_),
  PROTOBUF_FIELD_OFFSET(::gobgpapi::UnknownAttribute, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gobgpapi::OriginAttribute)},
  { 6, -1, sizeof(::gobgpapi::AsSegment)},
  { 13, -1, sizeof(::gobgpapi::AsPathAttribute)},
  { 19, -1, sizeof(::gobgpapi::NextHopAttribute)},
  { 25, -1, sizeof(::gobgpapi::MultiExitDiscAttribute)},
  { 31, -1, sizeof(::gobgpapi::LocalPrefAttribute)},
  { 37, -1, sizeof(::gobgpapi::AtomicAggregateAttribute)},
  { 42, -1, sizeof(::gobgpapi::AggregatorAttribute)},
  { 49, -1, sizeof(::gobgpapi::CommunitiesAttribute)},
  { 55, -1, sizeof(::gobgpapi::OriginatorIdAttribute)},
  { 61, -1, sizeof(::gobgpapi::ClusterListAttribute)},
  { 67, -1, sizeof(::gobgpapi::IPAddressPrefix)},
  { 74, -1, sizeof(::gobgpapi::LabeledIPAddressPrefix)},
  { 82, -1, sizeof(::gobgpapi::EncapsulationNLRI)},
  { 88, -1, sizeof(::gobgpapi::RouteDistinguisherTwoOctetAS)},
  { 95, -1, sizeof(::gobgpapi::RouteDistinguisherIPAddress)},
  { 102, -1, sizeof(::gobgpapi::RouteDistinguisherFourOctetAS)},
  { 109, -1, sizeof(::gobgpapi::EthernetSegmentIdentifier)},
  { 116, -1, sizeof(::gobgpapi::EVPNEthernetAutoDiscoveryRoute)},
  { 125, -1, sizeof(::gobgpapi::EVPNMACIPAdvertisementRoute)},
  { 136, -1, sizeof(::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute)},
  { 144, -1, sizeof(::gobgpapi::EVPNEthernetSegmentRoute)},
  { 152, -1, sizeof(::gobgpapi::EVPNIPPrefixRoute)},
  { 164, -1, sizeof(::gobgpapi::EVPNIPMSIRoute)},
  { 172, -1, sizeof(::gobgpapi::LabeledVPNIPAddressPrefix)},
  { 181, -1, sizeof(::gobgpapi::RouteTargetMembershipNLRI)},
  { 188, -1, sizeof(::gobgpapi::FlowSpecIPPrefix)},
  { 197, -1, sizeof(::gobgpapi::FlowSpecMAC)},
  { 204, -1, sizeof(::gobgpapi::FlowSpecComponentItem)},
  { 211, -1, sizeof(::gobgpapi::FlowSpecComponent)},
  { 218, -1, sizeof(::gobgpapi::FlowSpecNLRI)},
  { 224, -1, sizeof(::gobgpapi::VPNFlowSpecNLRI)},
  { 231, -1, sizeof(::gobgpapi::OpaqueNLRI)},
  { 238, -1, sizeof(::gobgpapi::LsNodeDescriptor)},
  { 248, -1, sizeof(::gobgpapi::LsLinkDescriptor)},
  { 259, -1, sizeof(::gobgpapi::LsPrefixDescriptor)},
  { 266, -1, sizeof(::gobgpapi::LsNodeNLRI)},
  { 272, -1, sizeof(::gobgpapi::LsLinkNLRI)},
  { 280, -1, sizeof(::gobgpapi::LsPrefixV4NLRI)},
  { 287, -1, sizeof(::gobgpapi::LsPrefixV6NLRI)},
  { 294, -1, sizeof(::gobgpapi::LsAddrPrefix)},
  { 301, -1, sizeof(::gobgpapi::MpReachNLRIAttribute)},
  { 309, -1, sizeof(::gobgpapi::MpUnreachNLRIAttribute)},
  { 316, -1, sizeof(::gobgpapi::TwoOctetAsSpecificExtended)},
  { 325, -1, sizeof(::gobgpapi::IPv4AddressSpecificExtended)},
  { 334, -1, sizeof(::gobgpapi::FourOctetAsSpecificExtended)},
  { 343, -1, sizeof(::gobgpapi::ValidationExtended)},
  { 349, -1, sizeof(::gobgpapi::ColorExtended)},
  { 355, -1, sizeof(::gobgpapi::EncapExtended)},
  { 361, -1, sizeof(::gobgpapi::DefaultGatewayExtended)},
  { 366, -1, sizeof(::gobgpapi::OpaqueExtended)},
  { 373, -1, sizeof(::gobgpapi::ESILabelExtended)},
  { 380, -1, sizeof(::gobgpapi::ESImportRouteTarget)},
  { 386, -1, sizeof(::gobgpapi::MacMobilityExtended)},
  { 393, -1, sizeof(::gobgpapi::RouterMacExtended)},
  { 399, -1, sizeof(::gobgpapi::TrafficRateExtended)},
  { 406, -1, sizeof(::gobgpapi::TrafficActionExtended)},
  { 413, -1, sizeof(::gobgpapi::RedirectTwoOctetAsSpecificExtended)},
  { 420, -1, sizeof(::gobgpapi::RedirectIPv4AddressSpecificExtended)},
  { 427, -1, sizeof(::gobgpapi::RedirectFourOctetAsSpecificExtended)},
  { 434, -1, sizeof(::gobgpapi::TrafficRemarkExtended)},
  { 440, -1, sizeof(::gobgpapi::UnknownExtended)},
  { 447, -1, sizeof(::gobgpapi::ExtendedCommunitiesAttribute)},
  { 453, -1, sizeof(::gobgpapi::As4PathAttribute)},
  { 459, -1, sizeof(::gobgpapi::As4AggregatorAttribute)},
  { 466, -1, sizeof(::gobgpapi::PmsiTunnelAttribute)},
  { 475, -1, sizeof(::gobgpapi::TunnelEncapSubTLVEncapsulation)},
  { 482, -1, sizeof(::gobgpapi::TunnelEncapSubTLVProtocol)},
  { 488, -1, sizeof(::gobgpapi::TunnelEncapSubTLVColor)},
  { 494, -1, sizeof(::gobgpapi::TunnelEncapSubTLVUnknown)},
  { 501, -1, sizeof(::gobgpapi::TunnelEncapTLV)},
  { 508, -1, sizeof(::gobgpapi::TunnelEncapAttribute)},
  { 514, -1, sizeof(::gobgpapi::IPv6AddressSpecificExtended)},
  { 523, -1, sizeof(::gobgpapi::RedirectIPv6AddressSpecificExtended)},
  { 530, -1, sizeof(::gobgpapi::IP6ExtendedCommunitiesAttribute)},
  { 536, -1, sizeof(::gobgpapi::AigpTLVIGPMetric)},
  { 542, -1, sizeof(::gobgpapi::AigpTLVUnknown)},
  { 549, -1, sizeof(::gobgpapi::AigpAttribute)},
  { 555, -1, sizeof(::gobgpapi::LargeCommunity)},
  { 563, -1, sizeof(::gobgpapi::LargeCommunitiesAttribute)},
  { 569, -1, sizeof(::gobgpapi::LsNodeFlags)},
  { 580, -1, sizeof(::gobgpapi::LsIGPFlags)},
  { 589, -1, sizeof(::gobgpapi::LsSrRange)},
  { 596, -1, sizeof(::gobgpapi::LsSrCapabilities)},
  { 604, -1, sizeof(::gobgpapi::LsSrLocalBlock)},
  { 610, -1, sizeof(::gobgpapi::LsAttributeNode)},
  { 624, -1, sizeof(::gobgpapi::LsAttributeLink)},
  { 643, -1, sizeof(::gobgpapi::LsAttributePrefix)},
  { 651, -1, sizeof(::gobgpapi::LsAttribute)},
  { 659, -1, sizeof(::gobgpapi::UnknownAttribute)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_OriginAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AsSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AsPathAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_NextHopAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MultiExitDiscAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LocalPrefAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AtomicAggregateAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AggregatorAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_CommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_OriginatorIdAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ClusterListAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_IPAddressPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LabeledIPAddressPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EncapsulationNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteDistinguisherTwoOctetAS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteDistinguisherIPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteDistinguisherFourOctetAS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EthernetSegmentIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EVPNEthernetAutoDiscoveryRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EVPNMACIPAdvertisementRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EVPNInclusiveMulticastEthernetTagRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EVPNEthernetSegmentRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EVPNIPPrefixRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EVPNIPMSIRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LabeledVPNIPAddressPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouteTargetMembershipNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_FlowSpecIPPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_FlowSpecMAC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_FlowSpecComponentItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_FlowSpecComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_FlowSpecNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_VPNFlowSpecNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_OpaqueNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsNodeDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsLinkDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsPrefixDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsNodeNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsLinkNLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsPrefixV4NLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsPrefixV6NLRI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsAddrPrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MpReachNLRIAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MpUnreachNLRIAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TwoOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_IPv4AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_FourOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ValidationExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ColorExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_EncapExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_DefaultGatewayExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_OpaqueExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ESILabelExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ESImportRouteTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_MacMobilityExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RouterMacExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TrafficRateExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TrafficActionExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RedirectTwoOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RedirectIPv4AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RedirectFourOctetAsSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TrafficRemarkExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UnknownExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_ExtendedCommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_As4PathAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_As4AggregatorAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_PmsiTunnelAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TunnelEncapSubTLVEncapsulation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TunnelEncapSubTLVProtocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TunnelEncapSubTLVColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TunnelEncapSubTLVUnknown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TunnelEncapTLV_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_TunnelEncapAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_IPv6AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_RedirectIPv6AddressSpecificExtended_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_IP6ExtendedCommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AigpTLVIGPMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AigpTLVUnknown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_AigpAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LargeCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LargeCommunitiesAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsNodeFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsIGPFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsSrRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsSrCapabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsSrLocalBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsAttributeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsAttributeLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsAttributePrefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_LsAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gobgpapi::_UnknownAttribute_default_instance_),
};

const char descriptor_table_protodef_attribute_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017attribute.proto\022\010gobgpapi\032\031google/prot"
  "obuf/any.proto\032\013gobgp.proto\"!\n\017OriginAtt"
  "ribute\022\016\n\006origin\030\001 \001(\r\"*\n\tAsSegment\022\014\n\004t"
  "ype\030\001 \001(\r\022\017\n\007numbers\030\002 \003(\r\"8\n\017AsPathAttr"
  "ibute\022%\n\010segments\030\001 \003(\0132\023.gobgpapi.AsSeg"
  "ment\"$\n\020NextHopAttribute\022\020\n\010next_hop\030\001 \001"
  "(\t\"%\n\026MultiExitDiscAttribute\022\013\n\003med\030\001 \001("
  "\r\"(\n\022LocalPrefAttribute\022\022\n\nlocal_pref\030\001 "
  "\001(\r\"\032\n\030AtomicAggregateAttribute\"2\n\023Aggre"
  "gatorAttribute\022\n\n\002as\030\002 \001(\r\022\017\n\007address\030\003 "
  "\001(\t\"+\n\024CommunitiesAttribute\022\023\n\013communiti"
  "es\030\001 \003(\r\"#\n\025OriginatorIdAttribute\022\n\n\002id\030"
  "\001 \001(\t\"#\n\024ClusterListAttribute\022\013\n\003ids\030\001 \003"
  "(\t\"5\n\017IPAddressPrefix\022\022\n\nprefix_len\030\001 \001("
  "\r\022\016\n\006prefix\030\002 \001(\t\"L\n\026LabeledIPAddressPre"
  "fix\022\016\n\006labels\030\001 \003(\r\022\022\n\nprefix_len\030\002 \001(\r\022"
  "\016\n\006prefix\030\003 \001(\t\"$\n\021EncapsulationNLRI\022\017\n\007"
  "address\030\001 \001(\t\"\?\n\034RouteDistinguisherTwoOc"
  "tetAS\022\r\n\005admin\030\001 \001(\r\022\020\n\010assigned\030\002 \001(\r\">"
  "\n\033RouteDistinguisherIPAddress\022\r\n\005admin\030\001"
  " \001(\t\022\020\n\010assigned\030\002 \001(\r\"@\n\035RouteDistingui"
  "sherFourOctetAS\022\r\n\005admin\030\001 \001(\r\022\020\n\010assign"
  "ed\030\002 \001(\r\"8\n\031EthernetSegmentIdentifier\022\014\n"
  "\004type\030\001 \001(\r\022\r\n\005value\030\002 \001(\014\"\231\001\n\036EVPNEther"
  "netAutoDiscoveryRoute\022 \n\002rd\030\001 \001(\0132\024.goog"
  "le.protobuf.Any\0220\n\003esi\030\002 \001(\0132#.gobgpapi."
  "EthernetSegmentIdentifier\022\024\n\014ethernet_ta"
  "g\030\003 \001(\r\022\r\n\005label\030\004 \001(\r\"\300\001\n\033EVPNMACIPAdve"
  "rtisementRoute\022 \n\002rd\030\001 \001(\0132\024.google.prot"
  "obuf.Any\0220\n\003esi\030\002 \001(\0132#.gobgpapi.Etherne"
  "tSegmentIdentifier\022\024\n\014ethernet_tag\030\003 \001(\r"
  "\022\023\n\013mac_address\030\004 \001(\t\022\022\n\nip_address\030\005 \001("
  "\t\022\016\n\006labels\030\006 \003(\r\"t\n&EVPNInclusiveMultic"
  "astEthernetTagRoute\022 \n\002rd\030\001 \001(\0132\024.google"
  ".protobuf.Any\022\024\n\014ethernet_tag\030\002 \001(\r\022\022\n\ni"
  "p_address\030\003 \001(\t\"\202\001\n\030EVPNEthernetSegmentR"
  "oute\022 \n\002rd\030\001 \001(\0132\024.google.protobuf.Any\0220"
  "\n\003esi\030\002 \001(\0132#.gobgpapi.EthernetSegmentId"
  "entifier\022\022\n\nip_address\030\003 \001(\t\"\312\001\n\021EVPNIPP"
  "refixRoute\022 \n\002rd\030\001 \001(\0132\024.google.protobuf"
  ".Any\0220\n\003esi\030\002 \001(\0132#.gobgpapi.EthernetSeg"
  "mentIdentifier\022\024\n\014ethernet_tag\030\003 \001(\r\022\021\n\t"
  "ip_prefix\030\004 \001(\t\022\025\n\rip_prefix_len\030\005 \001(\r\022\022"
  "\n\ngw_address\030\006 \001(\t\022\r\n\005label\030\007 \001(\r\"j\n\016EVP"
  "NIPMSIRoute\022 \n\002rd\030\001 \001(\0132\024.google.protobu"
  "f.Any\022\024\n\014ethernet_tag\030\002 \001(\r\022 \n\002rt\030\003 \001(\0132"
  "\024.google.protobuf.Any\"q\n\031LabeledVPNIPAdd"
  "ressPrefix\022\016\n\006labels\030\001 \003(\r\022 \n\002rd\030\002 \001(\0132\024"
  ".google.protobuf.Any\022\022\n\nprefix_len\030\003 \001(\r"
  "\022\016\n\006prefix\030\004 \001(\t\"I\n\031RouteTargetMembershi"
  "pNLRI\022\n\n\002as\030\001 \001(\r\022 \n\002rt\030\002 \001(\0132\024.google.p"
  "rotobuf.Any\"T\n\020FlowSpecIPPrefix\022\014\n\004type\030"
  "\001 \001(\r\022\022\n\nprefix_len\030\002 \001(\r\022\016\n\006prefix\030\003 \001("
  "\t\022\016\n\006offset\030\004 \001(\r\",\n\013FlowSpecMAC\022\014\n\004type"
  "\030\001 \001(\r\022\017\n\007address\030\002 \001(\t\"2\n\025FlowSpecCompo"
  "nentItem\022\n\n\002op\030\001 \001(\r\022\r\n\005value\030\002 \001(\004\"Q\n\021F"
  "lowSpecComponent\022\014\n\004type\030\001 \001(\r\022.\n\005items\030"
  "\002 \003(\0132\037.gobgpapi.FlowSpecComponentItem\"3"
  "\n\014FlowSpecNLRI\022#\n\005rules\030\001 \003(\0132\024.google.p"
  "rotobuf.Any\"X\n\017VPNFlowSpecNLRI\022 \n\002rd\030\001 \001"
  "(\0132\024.google.protobuf.Any\022#\n\005rules\030\002 \003(\0132"
  "\024.google.protobuf.Any\"(\n\nOpaqueNLRI\022\013\n\003k"
  "ey\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"s\n\020LsNodeDescrip"
  "tor\022\013\n\003asn\030\001 \001(\r\022\021\n\tbgp_ls_id\030\002 \001(\r\022\024\n\014o"
  "spf_area_id\030\003 \001(\r\022\022\n\npseudonode\030\004 \001(\010\022\025\n"
  "\rigp_router_id\030\005 \001(\t\"\263\001\n\020LsLinkDescripto"
  "r\022\025\n\rlink_local_id\030\001 \001(\r\022\026\n\016link_remote_"
  "id\030\002 \001(\r\022\033\n\023interface_addr_ipv4\030\003 \001(\t\022\032\n"
  "\022neighbor_addr_ipv4\030\004 \001(\t\022\033\n\023interface_a"
  "ddr_ipv6\030\005 \001(\t\022\032\n\022neighbor_addr_ipv6\030\006 \001"
  "(\t\"F\n\022LsPrefixDescriptor\022\027\n\017ip_reachabil"
  "ity\030\001 \003(\t\022\027\n\017ospf_route_type\030\002 \001(\t\"<\n\nLs"
  "NodeNLRI\022.\n\nlocal_node\030\001 \001(\0132\032.gobgpapi."
  "LsNodeDescriptor\"\242\001\n\nLsLinkNLRI\022.\n\nlocal"
  "_node\030\001 \001(\0132\032.gobgpapi.LsNodeDescriptor\022"
  "/\n\013remote_node\030\002 \001(\0132\032.gobgpapi.LsNodeDe"
  "scriptor\0223\n\017link_descriptor\030\003 \001(\0132\032.gobg"
  "papi.LsLinkDescriptor\"y\n\016LsPrefixV4NLRI\022"
  ".\n\nlocal_node\030\001 \001(\0132\032.gobgpapi.LsNodeDes"
  "criptor\0227\n\021prefix_descriptor\030\002 \001(\0132\034.gob"
  "gpapi.LsPrefixDescriptor\"y\n\016LsPrefixV6NL"
  "RI\022.\n\nlocal_node\030\001 \001(\0132\032.gobgpapi.LsNode"
  "Descriptor\0227\n\021prefix_descriptor\030\002 \001(\0132\034."
  "gobgpapi.LsPrefixDescriptor\"V\n\014LsAddrPre"
  "fix\022\"\n\004type\030\001 \001(\0162\024.gobgpapi.LsNLRIType\022"
  "\"\n\004nlri\030\002 \001(\0132\024.google.protobuf.Any\"p\n\024M"
  "pReachNLRIAttribute\022 \n\006family\030\001 \001(\0132\020.go"
  "bgpapi.Family\022\021\n\tnext_hops\030\002 \003(\t\022#\n\005nlri"
  "s\030\003 \003(\0132\024.google.protobuf.Any\"_\n\026MpUnrea"
  "chNLRIAttribute\022 \n\006family\030\001 \001(\0132\020.gobgpa"
  "pi.Family\022#\n\005nlris\030\003 \003(\0132\024.google.protob"
  "uf.Any\"f\n\032TwoOctetAsSpecificExtended\022\025\n\r"
  "is_transitive\030\001 \001(\010\022\020\n\010sub_type\030\002 \001(\r\022\n\n"
  "\002as\030\003 \001(\r\022\023\n\013local_admin\030\004 \001(\r\"l\n\033IPv4Ad"
  "dressSpecificExtended\022\025\n\ris_transitive\030\001"
  " \001(\010\022\020\n\010sub_type\030\002 \001(\r\022\017\n\007address\030\003 \001(\t\022"
  "\023\n\013local_admin\030\004 \001(\r\"g\n\033FourOctetAsSpeci"
  "ficExtended\022\025\n\ris_transitive\030\001 \001(\010\022\020\n\010su"
  "b_type\030\002 \001(\r\022\n\n\002as\030\003 \001(\r\022\023\n\013local_admin\030"
  "\004 \001(\r\"#\n\022ValidationExtended\022\r\n\005state\030\001 \001"
  "(\r\"\036\n\rColorExtended\022\r\n\005color\030\001 \001(\r\"$\n\rEn"
  "capExtended\022\023\n\013tunnel_type\030\001 \001(\r\"\030\n\026Defa"
  "ultGatewayExtended\"6\n\016OpaqueExtended\022\025\n\r"
  "is_transitive\030\001 \001(\010\022\r\n\005value\030\003 \001(\014\";\n\020ES"
  "ILabelExtended\022\030\n\020is_single_active\030\001 \001(\010"
  "\022\r\n\005label\030\002 \001(\r\"(\n\023ESImportRouteTarget\022\021"
  "\n\tes_import\030\001 \001(\t\">\n\023MacMobilityExtended"
  "\022\021\n\tis_sticky\030\001 \001(\010\022\024\n\014sequence_num\030\002 \001("
  "\r\" \n\021RouterMacExtended\022\013\n\003mac\030\001 \001(\t\"/\n\023T"
  "rafficRateExtended\022\n\n\002as\030\001 \001(\r\022\014\n\004rate\030\002"
  " \001(\002\"9\n\025TrafficActionExtended\022\020\n\010termina"
  "l\030\001 \001(\010\022\016\n\006sample\030\002 \001(\010\"E\n\"RedirectTwoOc"
  "tetAsSpecificExtended\022\n\n\002as\030\001 \001(\r\022\023\n\013loc"
  "al_admin\030\002 \001(\r\"K\n#RedirectIPv4AddressSpe"
  "cificExtended\022\017\n\007address\030\001 \001(\t\022\023\n\013local_"
  "admin\030\002 \001(\r\"F\n#RedirectFourOctetAsSpecif"
  "icExtended\022\n\n\002as\030\001 \001(\r\022\023\n\013local_admin\030\002 "
  "\001(\r\"%\n\025TrafficRemarkExtended\022\014\n\004dscp\030\001 \001"
  "(\r\".\n\017UnknownExtended\022\014\n\004type\030\001 \001(\r\022\r\n\005v"
  "alue\030\002 \001(\014\"I\n\034ExtendedCommunitiesAttribu"
  "te\022)\n\013communities\030\001 \003(\0132\024.google.protobu"
  "f.Any\"9\n\020As4PathAttribute\022%\n\010segments\030\001 "
  "\003(\0132\023.gobgpapi.AsSegment\"5\n\026As4Aggregato"
  "rAttribute\022\n\n\002as\030\002 \001(\r\022\017\n\007address\030\003 \001(\t\""
  "M\n\023PmsiTunnelAttribute\022\r\n\005flags\030\001 \001(\r\022\014\n"
  "\004type\030\002 \001(\r\022\r\n\005label\030\003 \001(\r\022\n\n\002id\030\004 \001(\014\"="
  "\n\036TunnelEncapSubTLVEncapsulation\022\013\n\003key\030"
  "\001 \001(\r\022\016\n\006cookie\030\002 \001(\014\"-\n\031TunnelEncapSubT"
  "LVProtocol\022\020\n\010protocol\030\001 \001(\r\"\'\n\026TunnelEn"
  "capSubTLVColor\022\r\n\005color\030\001 \001(\r\"7\n\030TunnelE"
  "ncapSubTLVUnknown\022\014\n\004type\030\001 \001(\r\022\r\n\005value"
  "\030\002 \001(\014\"B\n\016TunnelEncapTLV\022\014\n\004type\030\001 \001(\r\022\""
  "\n\004tlvs\030\002 \003(\0132\024.google.protobuf.Any\">\n\024Tu"
  "nnelEncapAttribute\022&\n\004tlvs\030\001 \003(\0132\030.gobgp"
  "api.TunnelEncapTLV\"l\n\033IPv6AddressSpecifi"
  "cExtended\022\025\n\ris_transitive\030\001 \001(\010\022\020\n\010sub_"
  "type\030\002 \001(\r\022\017\n\007address\030\003 \001(\t\022\023\n\013local_adm"
  "in\030\004 \001(\r\"K\n#RedirectIPv6AddressSpecificE"
  "xtended\022\017\n\007address\030\001 \001(\t\022\023\n\013local_admin\030"
  "\002 \001(\r\"L\n\037IP6ExtendedCommunitiesAttribute"
  "\022)\n\013communities\030\001 \003(\0132\024.google.protobuf."
  "Any\"\"\n\020AigpTLVIGPMetric\022\016\n\006metric\030\001 \001(\004\""
  "-\n\016AigpTLVUnknown\022\014\n\004type\030\001 \001(\r\022\r\n\005value"
  "\030\002 \001(\014\"3\n\rAigpAttribute\022\"\n\004tlvs\030\001 \003(\0132\024."
  "google.protobuf.Any\"P\n\016LargeCommunity\022\024\n"
  "\014global_admin\030\001 \001(\r\022\023\n\013local_data1\030\002 \001(\r"
  "\022\023\n\013local_data2\030\003 \001(\r\"J\n\031LargeCommunitie"
  "sAttribute\022-\n\013communities\030\001 \003(\0132\030.gobgpa"
  "pi.LargeCommunity\"l\n\013LsNodeFlags\022\020\n\010over"
  "load\030\001 \001(\010\022\020\n\010attached\030\002 \001(\010\022\020\n\010external"
  "\030\003 \001(\010\022\013\n\003abr\030\004 \001(\010\022\016\n\006router\030\005 \001(\010\022\n\n\002v"
  "6\030\006 \001(\010\"]\n\nLsIGPFlags\022\014\n\004down\030\001 \001(\010\022\022\n\nn"
  "o_unicast\030\002 \001(\010\022\025\n\rlocal_address\030\003 \001(\010\022\026"
  "\n\016propagate_nssa\030\004 \001(\010\"\'\n\tLsSrRange\022\r\n\005b"
  "egin\030\001 \001(\r\022\013\n\003end\030\002 \001(\r\"g\n\020LsSrCapabilit"
  "ies\022\026\n\016ipv4_supported\030\001 \001(\010\022\026\n\016ipv6_supp"
  "orted\030\002 \001(\010\022#\n\006ranges\030\003 \003(\0132\023.gobgpapi.L"
  "sSrRange\"5\n\016LsSrLocalBlock\022#\n\006ranges\030\001 \003"
  "(\0132\023.gobgpapi.LsSrRange\"\233\002\n\017LsAttributeN"
  "ode\022\014\n\004name\030\001 \001(\t\022$\n\005flags\030\002 \001(\0132\025.gobgp"
  "api.LsNodeFlags\022\027\n\017local_router_id\030\003 \001(\t"
  "\022\032\n\022local_router_id_v6\030\004 \001(\t\022\021\n\tisis_are"
  "a\030\005 \001(\014\022\016\n\006opaque\030\006 \001(\014\0223\n\017sr_capabiliti"
  "es\030\007 \001(\0132\032.gobgpapi.LsSrCapabilities\022\025\n\r"
  "sr_algorithms\030\010 \001(\014\0220\n\016sr_local_block\030\t "
  "\001(\0132\030.gobgpapi.LsSrLocalBlock\"\327\002\n\017LsAttr"
  "ibuteLink\022\014\n\004name\030\001 \001(\t\022\027\n\017local_router_"
  "id\030\002 \001(\t\022\032\n\022local_router_id_v6\030\003 \001(\t\022\030\n\020"
  "remote_router_id\030\004 \001(\t\022\033\n\023remote_router_"
  "id_v6\030\005 \001(\t\022\023\n\013admin_group\030\006 \001(\r\022\031\n\021defa"
  "ult_te_metric\030\007 \001(\r\022\022\n\nigp_metric\030\010 \001(\r\022"
  "\016\n\006opaque\030\t \001(\014\022\021\n\tbandwidth\030\n \001(\002\022\034\n\024re"
  "servable_bandwidth\030\013 \001(\002\022\034\n\024unreserved_b"
  "andwidth\030\014 \003(\002\022\030\n\020sr_adjacency_sid\030\r \001(\r"
  "\022\r\n\005srlgs\030\016 \003(\r\"c\n\021LsAttributePrefix\022\'\n\t"
  "igp_flags\030\001 \001(\0132\024.gobgpapi.LsIGPFlags\022\016\n"
  "\006opaque\030\002 \001(\014\022\025\n\rsr_prefix_sid\030\003 \001(\r\"\214\001\n"
  "\013LsAttribute\022\'\n\004node\030\001 \001(\0132\031.gobgpapi.Ls"
  "AttributeNode\022\'\n\004link\030\002 \001(\0132\031.gobgpapi.L"
  "sAttributeLink\022+\n\006prefix\030\003 \001(\0132\033.gobgpap"
  "i.LsAttributePrefix\">\n\020UnknownAttribute\022"
  "\r\n\005flags\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005value\030\003 "
  "\001(\014*s\n\nLsNLRIType\022\023\n\017LS_NLRI_UNKNOWN\020\000\022\020"
  "\n\014LS_NLRI_NODE\020\001\022\020\n\014LS_NLRI_LINK\020\002\022\025\n\021LS"
  "_NLRI_PREFIX_V4\020\003\022\025\n\021LS_NLRI_PREFIX_V6\020\004"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_attribute_2eproto_deps[2] = {
  &::descriptor_table_gobgp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_attribute_2eproto_sccs[90] = {
  &scc_info_AggregatorAttribute_attribute_2eproto.base,
  &scc_info_AigpAttribute_attribute_2eproto.base,
  &scc_info_AigpTLVIGPMetric_attribute_2eproto.base,
  &scc_info_AigpTLVUnknown_attribute_2eproto.base,
  &scc_info_As4AggregatorAttribute_attribute_2eproto.base,
  &scc_info_As4PathAttribute_attribute_2eproto.base,
  &scc_info_AsPathAttribute_attribute_2eproto.base,
  &scc_info_AsSegment_attribute_2eproto.base,
  &scc_info_AtomicAggregateAttribute_attribute_2eproto.base,
  &scc_info_ClusterListAttribute_attribute_2eproto.base,
  &scc_info_ColorExtended_attribute_2eproto.base,
  &scc_info_CommunitiesAttribute_attribute_2eproto.base,
  &scc_info_DefaultGatewayExtended_attribute_2eproto.base,
  &scc_info_ESILabelExtended_attribute_2eproto.base,
  &scc_info_ESImportRouteTarget_attribute_2eproto.base,
  &scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto.base,
  &scc_info_EVPNEthernetSegmentRoute_attribute_2eproto.base,
  &scc_info_EVPNIPMSIRoute_attribute_2eproto.base,
  &scc_info_EVPNIPPrefixRoute_attribute_2eproto.base,
  &scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto.base,
  &scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto.base,
  &scc_info_EncapExtended_attribute_2eproto.base,
  &scc_info_EncapsulationNLRI_attribute_2eproto.base,
  &scc_info_EthernetSegmentIdentifier_attribute_2eproto.base,
  &scc_info_ExtendedCommunitiesAttribute_attribute_2eproto.base,
  &scc_info_FlowSpecComponent_attribute_2eproto.base,
  &scc_info_FlowSpecComponentItem_attribute_2eproto.base,
  &scc_info_FlowSpecIPPrefix_attribute_2eproto.base,
  &scc_info_FlowSpecMAC_attribute_2eproto.base,
  &scc_info_FlowSpecNLRI_attribute_2eproto.base,
  &scc_info_FourOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto.base,
  &scc_info_IPAddressPrefix_attribute_2eproto.base,
  &scc_info_IPv4AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_IPv6AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_LabeledIPAddressPrefix_attribute_2eproto.base,
  &scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto.base,
  &scc_info_LargeCommunitiesAttribute_attribute_2eproto.base,
  &scc_info_LargeCommunity_attribute_2eproto.base,
  &scc_info_LocalPrefAttribute_attribute_2eproto.base,
  &scc_info_LsAddrPrefix_attribute_2eproto.base,
  &scc_info_LsAttribute_attribute_2eproto.base,
  &scc_info_LsAttributeLink_attribute_2eproto.base,
  &scc_info_LsAttributeNode_attribute_2eproto.base,
  &scc_info_LsAttributePrefix_attribute_2eproto.base,
  &scc_info_LsIGPFlags_attribute_2eproto.base,
  &scc_info_LsLinkDescriptor_attribute_2eproto.base,
  &scc_info_LsLinkNLRI_attribute_2eproto.base,
  &scc_info_LsNodeDescriptor_attribute_2eproto.base,
  &scc_info_LsNodeFlags_attribute_2eproto.base,
  &scc_info_LsNodeNLRI_attribute_2eproto.base,
  &scc_info_LsPrefixDescriptor_attribute_2eproto.base,
  &scc_info_LsPrefixV4NLRI_attribute_2eproto.base,
  &scc_info_LsPrefixV6NLRI_attribute_2eproto.base,
  &scc_info_LsSrCapabilities_attribute_2eproto.base,
  &scc_info_LsSrLocalBlock_attribute_2eproto.base,
  &scc_info_LsSrRange_attribute_2eproto.base,
  &scc_info_MacMobilityExtended_attribute_2eproto.base,
  &scc_info_MpReachNLRIAttribute_attribute_2eproto.base,
  &scc_info_MpUnreachNLRIAttribute_attribute_2eproto.base,
  &scc_info_MultiExitDiscAttribute_attribute_2eproto.base,
  &scc_info_NextHopAttribute_attribute_2eproto.base,
  &scc_info_OpaqueExtended_attribute_2eproto.base,
  &scc_info_OpaqueNLRI_attribute_2eproto.base,
  &scc_info_OriginAttribute_attribute_2eproto.base,
  &scc_info_OriginatorIdAttribute_attribute_2eproto.base,
  &scc_info_PmsiTunnelAttribute_attribute_2eproto.base,
  &scc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto.base,
  &scc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_RouteDistinguisherFourOctetAS_attribute_2eproto.base,
  &scc_info_RouteDistinguisherIPAddress_attribute_2eproto.base,
  &scc_info_RouteDistinguisherTwoOctetAS_attribute_2eproto.base,
  &scc_info_RouteTargetMembershipNLRI_attribute_2eproto.base,
  &scc_info_RouterMacExtended_attribute_2eproto.base,
  &scc_info_TrafficActionExtended_attribute_2eproto.base,
  &scc_info_TrafficRateExtended_attribute_2eproto.base,
  &scc_info_TrafficRemarkExtended_attribute_2eproto.base,
  &scc_info_TunnelEncapAttribute_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVColor_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVProtocol_attribute_2eproto.base,
  &scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto.base,
  &scc_info_TunnelEncapTLV_attribute_2eproto.base,
  &scc_info_TwoOctetAsSpecificExtended_attribute_2eproto.base,
  &scc_info_UnknownAttribute_attribute_2eproto.base,
  &scc_info_UnknownExtended_attribute_2eproto.base,
  &scc_info_VPNFlowSpecNLRI_attribute_2eproto.base,
  &scc_info_ValidationExtended_attribute_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_attribute_2eproto_once;
static bool descriptor_table_attribute_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_attribute_2eproto = {
  &descriptor_table_attribute_2eproto_initialized, descriptor_table_protodef_attribute_2eproto, "attribute.proto", 7408,
  &descriptor_table_attribute_2eproto_once, descriptor_table_attribute_2eproto_sccs, descriptor_table_attribute_2eproto_deps, 90, 2,
  schemas, file_default_instances, TableStruct_attribute_2eproto::offsets,
  file_level_metadata_attribute_2eproto, 90, file_level_enum_descriptors_attribute_2eproto, file_level_service_descriptors_attribute_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_attribute_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_attribute_2eproto), true);
namespace gobgpapi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LsNLRIType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_attribute_2eproto);
  return file_level_enum_descriptors_attribute_2eproto[0];
}
bool LsNLRIType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OriginAttribute::InitAsDefaultInstance() {
}
class OriginAttribute::_Internal {
 public:
};

OriginAttribute::OriginAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.OriginAttribute)
}
OriginAttribute::OriginAttribute(const OriginAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_ = from.origin_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.OriginAttribute)
}

void OriginAttribute::SharedCtor() {
  origin_ = 0u;
}

OriginAttribute::~OriginAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.OriginAttribute)
  SharedDtor();
}

void OriginAttribute::SharedDtor() {
}

void OriginAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginAttribute& OriginAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void OriginAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.OriginAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_ = 0u;
  _internal_metadata_.Clear();
}

const char* OriginAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.OriginAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 origin = 1;
  if (this->origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.OriginAttribute)
  return target;
}

size_t OriginAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.OriginAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 origin = 1;
  if (this->origin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_origin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.OriginAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.OriginAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.OriginAttribute)
    MergeFrom(*source);
  }
}

void OriginAttribute::MergeFrom(const OriginAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.OriginAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.origin() != 0) {
    _internal_set_origin(from._internal_origin());
  }
}

void OriginAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.OriginAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginAttribute::CopyFrom(const OriginAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.OriginAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginAttribute::IsInitialized() const {
  return true;
}

void OriginAttribute::InternalSwap(OriginAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(origin_, other->origin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsSegment::InitAsDefaultInstance() {
}
class AsSegment::_Internal {
 public:
};

AsSegment::AsSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsSegment)
}
AsSegment::AsSegment(const AsSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      numbers_(from.numbers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsSegment)
}

void AsSegment::SharedCtor() {
  type_ = 0u;
}

AsSegment::~AsSegment() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsSegment)
  SharedDtor();
}

void AsSegment::SharedDtor() {
}

void AsSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsSegment& AsSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsSegment_attribute_2eproto.base);
  return *internal_default_instance();
}


void AsSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AsSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numbers_.Clear();
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* AsSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 numbers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated uint32 numbers = 2;
  {
    int byte_size = _numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_numbers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsSegment)
  return target;
}

size_t AsSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AsSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 numbers = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AsSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const AsSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AsSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AsSegment)
    MergeFrom(*source);
  }
}

void AsSegment::MergeFrom(const AsSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AsSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numbers_.MergeFrom(from.numbers_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AsSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AsSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsSegment::CopyFrom(const AsSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AsSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsSegment::IsInitialized() const {
  return true;
}

void AsSegment::InternalSwap(AsSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  numbers_.InternalSwap(&other->numbers_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsPathAttribute::InitAsDefaultInstance() {
}
class AsPathAttribute::_Internal {
 public:
};

AsPathAttribute::AsPathAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsPathAttribute)
}
AsPathAttribute::AsPathAttribute(const AsPathAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsPathAttribute)
}

void AsPathAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsPathAttribute_attribute_2eproto.base);
}

AsPathAttribute::~AsPathAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsPathAttribute)
  SharedDtor();
}

void AsPathAttribute::SharedDtor() {
}

void AsPathAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsPathAttribute& AsPathAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsPathAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AsPathAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AsPathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear();
}

const char* AsPathAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gobgpapi.AsSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsPathAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsPathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.AsSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsPathAttribute)
  return target;
}

size_t AsPathAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AsPathAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.AsSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsPathAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AsPathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AsPathAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsPathAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AsPathAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AsPathAttribute)
    MergeFrom(*source);
  }
}

void AsPathAttribute::MergeFrom(const AsPathAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AsPathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void AsPathAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AsPathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPathAttribute::CopyFrom(const AsPathAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AsPathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPathAttribute::IsInitialized() const {
  return true;
}

void AsPathAttribute::InternalSwap(AsPathAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsPathAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NextHopAttribute::InitAsDefaultInstance() {
}
class NextHopAttribute::_Internal {
 public:
};

NextHopAttribute::NextHopAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.NextHopAttribute)
}
NextHopAttribute::NextHopAttribute(const NextHopAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_hop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_hop().empty()) {
    next_hop_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_hop_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.NextHopAttribute)
}

void NextHopAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NextHopAttribute_attribute_2eproto.base);
  next_hop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NextHopAttribute::~NextHopAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.NextHopAttribute)
  SharedDtor();
}

void NextHopAttribute::SharedDtor() {
  next_hop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NextHopAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NextHopAttribute& NextHopAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NextHopAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void NextHopAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.NextHopAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_hop_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NextHopAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string next_hop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_next_hop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.NextHopAttribute.next_hop"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NextHopAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.NextHopAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string next_hop = 1;
  if (this->next_hop().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_hop().data(), static_cast<int>(this->_internal_next_hop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.NextHopAttribute.next_hop");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_next_hop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.NextHopAttribute)
  return target;
}

size_t NextHopAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.NextHopAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string next_hop = 1;
  if (this->next_hop().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_hop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextHopAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.NextHopAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const NextHopAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NextHopAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.NextHopAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.NextHopAttribute)
    MergeFrom(*source);
  }
}

void NextHopAttribute::MergeFrom(const NextHopAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.NextHopAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.next_hop().size() > 0) {

    next_hop_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_hop_);
  }
}

void NextHopAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.NextHopAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextHopAttribute::CopyFrom(const NextHopAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.NextHopAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextHopAttribute::IsInitialized() const {
  return true;
}

void NextHopAttribute::InternalSwap(NextHopAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  next_hop_.Swap(&other->next_hop_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NextHopAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiExitDiscAttribute::InitAsDefaultInstance() {
}
class MultiExitDiscAttribute::_Internal {
 public:
};

MultiExitDiscAttribute::MultiExitDiscAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MultiExitDiscAttribute)
}
MultiExitDiscAttribute::MultiExitDiscAttribute(const MultiExitDiscAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  med_ = from.med_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MultiExitDiscAttribute)
}

void MultiExitDiscAttribute::SharedCtor() {
  med_ = 0u;
}

MultiExitDiscAttribute::~MultiExitDiscAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.MultiExitDiscAttribute)
  SharedDtor();
}

void MultiExitDiscAttribute::SharedDtor() {
}

void MultiExitDiscAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiExitDiscAttribute& MultiExitDiscAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiExitDiscAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MultiExitDiscAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MultiExitDiscAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  med_ = 0u;
  _internal_metadata_.Clear();
}

const char* MultiExitDiscAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 med = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          med_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiExitDiscAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MultiExitDiscAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 med = 1;
  if (this->med() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_med(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MultiExitDiscAttribute)
  return target;
}

size_t MultiExitDiscAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MultiExitDiscAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 med = 1;
  if (this->med() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_med());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiExitDiscAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MultiExitDiscAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiExitDiscAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiExitDiscAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MultiExitDiscAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MultiExitDiscAttribute)
    MergeFrom(*source);
  }
}

void MultiExitDiscAttribute::MergeFrom(const MultiExitDiscAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MultiExitDiscAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.med() != 0) {
    _internal_set_med(from._internal_med());
  }
}

void MultiExitDiscAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MultiExitDiscAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiExitDiscAttribute::CopyFrom(const MultiExitDiscAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MultiExitDiscAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiExitDiscAttribute::IsInitialized() const {
  return true;
}

void MultiExitDiscAttribute::InternalSwap(MultiExitDiscAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(med_, other->med_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiExitDiscAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalPrefAttribute::InitAsDefaultInstance() {
}
class LocalPrefAttribute::_Internal {
 public:
};

LocalPrefAttribute::LocalPrefAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LocalPrefAttribute)
}
LocalPrefAttribute::LocalPrefAttribute(const LocalPrefAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_pref_ = from.local_pref_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LocalPrefAttribute)
}

void LocalPrefAttribute::SharedCtor() {
  local_pref_ = 0u;
}

LocalPrefAttribute::~LocalPrefAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.LocalPrefAttribute)
  SharedDtor();
}

void LocalPrefAttribute::SharedDtor() {
}

void LocalPrefAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPrefAttribute& LocalPrefAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalPrefAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void LocalPrefAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LocalPrefAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_pref_ = 0u;
  _internal_metadata_.Clear();
}

const char* LocalPrefAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 local_pref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          local_pref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalPrefAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LocalPrefAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 local_pref = 1;
  if (this->local_pref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_local_pref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LocalPrefAttribute)
  return target;
}

size_t LocalPrefAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LocalPrefAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 local_pref = 1;
  if (this->local_pref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_pref());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPrefAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LocalPrefAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPrefAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalPrefAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LocalPrefAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LocalPrefAttribute)
    MergeFrom(*source);
  }
}

void LocalPrefAttribute::MergeFrom(const LocalPrefAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LocalPrefAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_pref() != 0) {
    _internal_set_local_pref(from._internal_local_pref());
  }
}

void LocalPrefAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LocalPrefAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPrefAttribute::CopyFrom(const LocalPrefAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LocalPrefAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPrefAttribute::IsInitialized() const {
  return true;
}

void LocalPrefAttribute::InternalSwap(LocalPrefAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_pref_, other->local_pref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalPrefAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AtomicAggregateAttribute::InitAsDefaultInstance() {
}
class AtomicAggregateAttribute::_Internal {
 public:
};

AtomicAggregateAttribute::AtomicAggregateAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AtomicAggregateAttribute)
}
AtomicAggregateAttribute::AtomicAggregateAttribute(const AtomicAggregateAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AtomicAggregateAttribute)
}

void AtomicAggregateAttribute::SharedCtor() {
}

AtomicAggregateAttribute::~AtomicAggregateAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.AtomicAggregateAttribute)
  SharedDtor();
}

void AtomicAggregateAttribute::SharedDtor() {
}

void AtomicAggregateAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtomicAggregateAttribute& AtomicAggregateAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtomicAggregateAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AtomicAggregateAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AtomicAggregateAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AtomicAggregateAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AtomicAggregateAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AtomicAggregateAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AtomicAggregateAttribute)
  return target;
}

size_t AtomicAggregateAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AtomicAggregateAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtomicAggregateAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AtomicAggregateAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AtomicAggregateAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AtomicAggregateAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AtomicAggregateAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AtomicAggregateAttribute)
    MergeFrom(*source);
  }
}

void AtomicAggregateAttribute::MergeFrom(const AtomicAggregateAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AtomicAggregateAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AtomicAggregateAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AtomicAggregateAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtomicAggregateAttribute::CopyFrom(const AtomicAggregateAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AtomicAggregateAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomicAggregateAttribute::IsInitialized() const {
  return true;
}

void AtomicAggregateAttribute::InternalSwap(AtomicAggregateAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AtomicAggregateAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggregatorAttribute::InitAsDefaultInstance() {
}
class AggregatorAttribute::_Internal {
 public:
};

AggregatorAttribute::AggregatorAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AggregatorAttribute)
}
AggregatorAttribute::AggregatorAttribute(const AggregatorAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  as_ = from.as_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AggregatorAttribute)
}

void AggregatorAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregatorAttribute_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_ = 0u;
}

AggregatorAttribute::~AggregatorAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.AggregatorAttribute)
  SharedDtor();
}

void AggregatorAttribute::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AggregatorAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregatorAttribute& AggregatorAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregatorAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AggregatorAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_ = 0u;
  _internal_metadata_.Clear();
}

const char* AggregatorAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.AggregatorAttribute.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregatorAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 2;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_as(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.AggregatorAttribute.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AggregatorAttribute)
  return target;
}

size_t AggregatorAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AggregatorAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 as = 2;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatorAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregatorAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregatorAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AggregatorAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AggregatorAttribute)
    MergeFrom(*source);
  }
}

void AggregatorAttribute::MergeFrom(const AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
}

void AggregatorAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregatorAttribute::CopyFrom(const AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorAttribute::IsInitialized() const {
  return true;
}

void AggregatorAttribute::InternalSwap(AggregatorAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(as_, other->as_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregatorAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommunitiesAttribute::InitAsDefaultInstance() {
}
class CommunitiesAttribute::_Internal {
 public:
};

CommunitiesAttribute::CommunitiesAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.CommunitiesAttribute)
}
CommunitiesAttribute::CommunitiesAttribute(const CommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.CommunitiesAttribute)
}

void CommunitiesAttribute::SharedCtor() {
}

CommunitiesAttribute::~CommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.CommunitiesAttribute)
  SharedDtor();
}

void CommunitiesAttribute::SharedDtor() {
}

void CommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunitiesAttribute& CommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void CommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.CommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear();
}

const char* CommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_communities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_communities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.CommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 communities = 1;
  {
    int byte_size = _communities_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_communities(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.CommunitiesAttribute)
  return target;
}

size_t CommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.CommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 communities = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->communities_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _communities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.CommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.CommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.CommunitiesAttribute)
    MergeFrom(*source);
  }
}

void CommunitiesAttribute::MergeFrom(const CommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.CommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void CommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.CommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunitiesAttribute::CopyFrom(const CommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.CommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunitiesAttribute::IsInitialized() const {
  return true;
}

void CommunitiesAttribute::InternalSwap(CommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OriginatorIdAttribute::InitAsDefaultInstance() {
}
class OriginatorIdAttribute::_Internal {
 public:
};

OriginatorIdAttribute::OriginatorIdAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.OriginatorIdAttribute)
}
OriginatorIdAttribute::OriginatorIdAttribute(const OriginatorIdAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.OriginatorIdAttribute)
}

void OriginatorIdAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OriginatorIdAttribute_attribute_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OriginatorIdAttribute::~OriginatorIdAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.OriginatorIdAttribute)
  SharedDtor();
}

void OriginatorIdAttribute::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OriginatorIdAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginatorIdAttribute& OriginatorIdAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginatorIdAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void OriginatorIdAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.OriginatorIdAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* OriginatorIdAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.OriginatorIdAttribute.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginatorIdAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.OriginatorIdAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.OriginatorIdAttribute.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.OriginatorIdAttribute)
  return target;
}

size_t OriginatorIdAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.OriginatorIdAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginatorIdAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.OriginatorIdAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginatorIdAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginatorIdAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.OriginatorIdAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.OriginatorIdAttribute)
    MergeFrom(*source);
  }
}

void OriginatorIdAttribute::MergeFrom(const OriginatorIdAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.OriginatorIdAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void OriginatorIdAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.OriginatorIdAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginatorIdAttribute::CopyFrom(const OriginatorIdAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.OriginatorIdAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginatorIdAttribute::IsInitialized() const {
  return true;
}

void OriginatorIdAttribute::InternalSwap(OriginatorIdAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginatorIdAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterListAttribute::InitAsDefaultInstance() {
}
class ClusterListAttribute::_Internal {
 public:
};

ClusterListAttribute::ClusterListAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ClusterListAttribute)
}
ClusterListAttribute::ClusterListAttribute(const ClusterListAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ClusterListAttribute)
}

void ClusterListAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterListAttribute_attribute_2eproto.base);
}

ClusterListAttribute::~ClusterListAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.ClusterListAttribute)
  SharedDtor();
}

void ClusterListAttribute::SharedDtor() {
}

void ClusterListAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterListAttribute& ClusterListAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterListAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void ClusterListAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ClusterListAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

const char* ClusterListAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ClusterListAttribute.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterListAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ClusterListAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ClusterListAttribute.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ClusterListAttribute)
  return target;
}

size_t ClusterListAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ClusterListAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterListAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ClusterListAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterListAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterListAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ClusterListAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ClusterListAttribute)
    MergeFrom(*source);
  }
}

void ClusterListAttribute::MergeFrom(const ClusterListAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ClusterListAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void ClusterListAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ClusterListAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterListAttribute::CopyFrom(const ClusterListAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ClusterListAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterListAttribute::IsInitialized() const {
  return true;
}

void ClusterListAttribute::InternalSwap(ClusterListAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterListAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPAddressPrefix::InitAsDefaultInstance() {
}
class IPAddressPrefix::_Internal {
 public:
};

IPAddressPrefix::IPAddressPrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IPAddressPrefix)
}
IPAddressPrefix::IPAddressPrefix(const IPAddressPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IPAddressPrefix)
}

void IPAddressPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPAddressPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0u;
}

IPAddressPrefix::~IPAddressPrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.IPAddressPrefix)
  SharedDtor();
}

void IPAddressPrefix::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPAddressPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPAddressPrefix& IPAddressPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPAddressPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void IPAddressPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0u;
  _internal_metadata_.Clear();
}

const char* IPAddressPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 prefix_len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.IPAddressPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPAddressPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 prefix_len = 1;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prefix_len(), target);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.IPAddressPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IPAddressPrefix)
  return target;
}

size_t IPAddressPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IPAddressPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // uint32 prefix_len = 1;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPAddressPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const IPAddressPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPAddressPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IPAddressPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IPAddressPrefix)
    MergeFrom(*source);
  }
}

void IPAddressPrefix::MergeFrom(const IPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void IPAddressPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAddressPrefix::CopyFrom(const IPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAddressPrefix::IsInitialized() const {
  return true;
}

void IPAddressPrefix::InternalSwap(IPAddressPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPAddressPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabeledIPAddressPrefix::InitAsDefaultInstance() {
}
class LabeledIPAddressPrefix::_Internal {
 public:
};

LabeledIPAddressPrefix::LabeledIPAddressPrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LabeledIPAddressPrefix)
}
LabeledIPAddressPrefix::LabeledIPAddressPrefix(const LabeledIPAddressPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LabeledIPAddressPrefix)
}

void LabeledIPAddressPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledIPAddressPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0u;
}

LabeledIPAddressPrefix::~LabeledIPAddressPrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.LabeledIPAddressPrefix)
  SharedDtor();
}

void LabeledIPAddressPrefix::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabeledIPAddressPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledIPAddressPrefix& LabeledIPAddressPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledIPAddressPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LabeledIPAddressPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LabeledIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0u;
  _internal_metadata_.Clear();
}

const char* LabeledIPAddressPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LabeledIPAddressPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledIPAddressPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LabeledIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    int byte_size = _labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_labels(), byte_size, target);
    }
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LabeledIPAddressPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LabeledIPAddressPrefix)
  return target;
}

size_t LabeledIPAddressPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LabeledIPAddressPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledIPAddressPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LabeledIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledIPAddressPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledIPAddressPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LabeledIPAddressPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LabeledIPAddressPrefix)
    MergeFrom(*source);
  }
}

void LabeledIPAddressPrefix::MergeFrom(const LabeledIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LabeledIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void LabeledIPAddressPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LabeledIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledIPAddressPrefix::CopyFrom(const LabeledIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LabeledIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledIPAddressPrefix::IsInitialized() const {
  return true;
}

void LabeledIPAddressPrefix::InternalSwap(LabeledIPAddressPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledIPAddressPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncapsulationNLRI::InitAsDefaultInstance() {
}
class EncapsulationNLRI::_Internal {
 public:
};

EncapsulationNLRI::EncapsulationNLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EncapsulationNLRI)
}
EncapsulationNLRI::EncapsulationNLRI(const EncapsulationNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EncapsulationNLRI)
}

void EncapsulationNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncapsulationNLRI_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EncapsulationNLRI::~EncapsulationNLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.EncapsulationNLRI)
  SharedDtor();
}

void EncapsulationNLRI::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EncapsulationNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncapsulationNLRI& EncapsulationNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncapsulationNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void EncapsulationNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EncapsulationNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EncapsulationNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EncapsulationNLRI.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncapsulationNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EncapsulationNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EncapsulationNLRI.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EncapsulationNLRI)
  return target;
}

size_t EncapsulationNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EncapsulationNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncapsulationNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EncapsulationNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const EncapsulationNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncapsulationNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EncapsulationNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EncapsulationNLRI)
    MergeFrom(*source);
  }
}

void EncapsulationNLRI::MergeFrom(const EncapsulationNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EncapsulationNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void EncapsulationNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EncapsulationNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncapsulationNLRI::CopyFrom(const EncapsulationNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EncapsulationNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncapsulationNLRI::IsInitialized() const {
  return true;
}

void EncapsulationNLRI::InternalSwap(EncapsulationNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EncapsulationNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteDistinguisherTwoOctetAS::InitAsDefaultInstance() {
}
class RouteDistinguisherTwoOctetAS::_Internal {
 public:
};

RouteDistinguisherTwoOctetAS::RouteDistinguisherTwoOctetAS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteDistinguisherTwoOctetAS)
}
RouteDistinguisherTwoOctetAS::RouteDistinguisherTwoOctetAS(const RouteDistinguisherTwoOctetAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&admin_, &from.admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&assigned_) -
    reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteDistinguisherTwoOctetAS)
}

void RouteDistinguisherTwoOctetAS::SharedCtor() {
  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
}

RouteDistinguisherTwoOctetAS::~RouteDistinguisherTwoOctetAS() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteDistinguisherTwoOctetAS)
  SharedDtor();
}

void RouteDistinguisherTwoOctetAS::SharedDtor() {
}

void RouteDistinguisherTwoOctetAS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteDistinguisherTwoOctetAS& RouteDistinguisherTwoOctetAS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteDistinguisherTwoOctetAS_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteDistinguisherTwoOctetAS::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteDistinguisherTwoOctetAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  _internal_metadata_.Clear();
}

const char* RouteDistinguisherTwoOctetAS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 assigned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteDistinguisherTwoOctetAS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteDistinguisherTwoOctetAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_admin(), target);
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_assigned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteDistinguisherTwoOctetAS)
  return target;
}

size_t RouteDistinguisherTwoOctetAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteDistinguisherTwoOctetAS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_assigned());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteDistinguisherTwoOctetAS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteDistinguisherTwoOctetAS)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteDistinguisherTwoOctetAS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteDistinguisherTwoOctetAS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteDistinguisherTwoOctetAS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteDistinguisherTwoOctetAS)
    MergeFrom(*source);
  }
}

void RouteDistinguisherTwoOctetAS::MergeFrom(const RouteDistinguisherTwoOctetAS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteDistinguisherTwoOctetAS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.assigned() != 0) {
    _internal_set_assigned(from._internal_assigned());
  }
}

void RouteDistinguisherTwoOctetAS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteDistinguisherTwoOctetAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteDistinguisherTwoOctetAS::CopyFrom(const RouteDistinguisherTwoOctetAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteDistinguisherTwoOctetAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteDistinguisherTwoOctetAS::IsInitialized() const {
  return true;
}

void RouteDistinguisherTwoOctetAS::InternalSwap(RouteDistinguisherTwoOctetAS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(admin_, other->admin_);
  swap(assigned_, other->assigned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteDistinguisherTwoOctetAS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteDistinguisherIPAddress::InitAsDefaultInstance() {
}
class RouteDistinguisherIPAddress::_Internal {
 public:
};

RouteDistinguisherIPAddress::RouteDistinguisherIPAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteDistinguisherIPAddress)
}
RouteDistinguisherIPAddress::RouteDistinguisherIPAddress(const RouteDistinguisherIPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_admin().empty()) {
    admin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.admin_);
  }
  assigned_ = from.assigned_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteDistinguisherIPAddress)
}

void RouteDistinguisherIPAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteDistinguisherIPAddress_attribute_2eproto.base);
  admin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assigned_ = 0u;
}

RouteDistinguisherIPAddress::~RouteDistinguisherIPAddress() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteDistinguisherIPAddress)
  SharedDtor();
}

void RouteDistinguisherIPAddress::SharedDtor() {
  admin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteDistinguisherIPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteDistinguisherIPAddress& RouteDistinguisherIPAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteDistinguisherIPAddress_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteDistinguisherIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteDistinguisherIPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  admin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assigned_ = 0u;
  _internal_metadata_.Clear();
}

const char* RouteDistinguisherIPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_admin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.RouteDistinguisherIPAddress.admin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 assigned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteDistinguisherIPAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteDistinguisherIPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string admin = 1;
  if (this->admin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_admin().data(), static_cast<int>(this->_internal_admin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RouteDistinguisherIPAddress.admin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_admin(), target);
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_assigned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteDistinguisherIPAddress)
  return target;
}

size_t RouteDistinguisherIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteDistinguisherIPAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin = 1;
  if (this->admin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_admin());
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_assigned());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteDistinguisherIPAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteDistinguisherIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteDistinguisherIPAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteDistinguisherIPAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteDistinguisherIPAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteDistinguisherIPAddress)
    MergeFrom(*source);
  }
}

void RouteDistinguisherIPAddress::MergeFrom(const RouteDistinguisherIPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteDistinguisherIPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admin().size() > 0) {

    admin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.admin_);
  }
  if (from.assigned() != 0) {
    _internal_set_assigned(from._internal_assigned());
  }
}

void RouteDistinguisherIPAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteDistinguisherIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteDistinguisherIPAddress::CopyFrom(const RouteDistinguisherIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteDistinguisherIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteDistinguisherIPAddress::IsInitialized() const {
  return true;
}

void RouteDistinguisherIPAddress::InternalSwap(RouteDistinguisherIPAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  admin_.Swap(&other->admin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(assigned_, other->assigned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteDistinguisherIPAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteDistinguisherFourOctetAS::InitAsDefaultInstance() {
}
class RouteDistinguisherFourOctetAS::_Internal {
 public:
};

RouteDistinguisherFourOctetAS::RouteDistinguisherFourOctetAS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteDistinguisherFourOctetAS)
}
RouteDistinguisherFourOctetAS::RouteDistinguisherFourOctetAS(const RouteDistinguisherFourOctetAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&admin_, &from.admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&assigned_) -
    reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteDistinguisherFourOctetAS)
}

void RouteDistinguisherFourOctetAS::SharedCtor() {
  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
}

RouteDistinguisherFourOctetAS::~RouteDistinguisherFourOctetAS() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteDistinguisherFourOctetAS)
  SharedDtor();
}

void RouteDistinguisherFourOctetAS::SharedDtor() {
}

void RouteDistinguisherFourOctetAS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteDistinguisherFourOctetAS& RouteDistinguisherFourOctetAS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteDistinguisherFourOctetAS_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteDistinguisherFourOctetAS::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteDistinguisherFourOctetAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_) -
      reinterpret_cast<char*>(&admin_)) + sizeof(assigned_));
  _internal_metadata_.Clear();
}

const char* RouteDistinguisherFourOctetAS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 assigned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          assigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteDistinguisherFourOctetAS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteDistinguisherFourOctetAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_admin(), target);
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_assigned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteDistinguisherFourOctetAS)
  return target;
}

size_t RouteDistinguisherFourOctetAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteDistinguisherFourOctetAS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 admin = 1;
  if (this->admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin());
  }

  // uint32 assigned = 2;
  if (this->assigned() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_assigned());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteDistinguisherFourOctetAS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteDistinguisherFourOctetAS)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteDistinguisherFourOctetAS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteDistinguisherFourOctetAS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteDistinguisherFourOctetAS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteDistinguisherFourOctetAS)
    MergeFrom(*source);
  }
}

void RouteDistinguisherFourOctetAS::MergeFrom(const RouteDistinguisherFourOctetAS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteDistinguisherFourOctetAS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.admin() != 0) {
    _internal_set_admin(from._internal_admin());
  }
  if (from.assigned() != 0) {
    _internal_set_assigned(from._internal_assigned());
  }
}

void RouteDistinguisherFourOctetAS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteDistinguisherFourOctetAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteDistinguisherFourOctetAS::CopyFrom(const RouteDistinguisherFourOctetAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteDistinguisherFourOctetAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteDistinguisherFourOctetAS::IsInitialized() const {
  return true;
}

void RouteDistinguisherFourOctetAS::InternalSwap(RouteDistinguisherFourOctetAS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(admin_, other->admin_);
  swap(assigned_, other->assigned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteDistinguisherFourOctetAS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EthernetSegmentIdentifier::InitAsDefaultInstance() {
}
class EthernetSegmentIdentifier::_Internal {
 public:
};

EthernetSegmentIdentifier::EthernetSegmentIdentifier()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EthernetSegmentIdentifier)
}
EthernetSegmentIdentifier::EthernetSegmentIdentifier(const EthernetSegmentIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EthernetSegmentIdentifier)
}

void EthernetSegmentIdentifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthernetSegmentIdentifier_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

EthernetSegmentIdentifier::~EthernetSegmentIdentifier() {
  // @@protoc_insertion_point(destructor:gobgpapi.EthernetSegmentIdentifier)
  SharedDtor();
}

void EthernetSegmentIdentifier::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthernetSegmentIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthernetSegmentIdentifier& EthernetSegmentIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthernetSegmentIdentifier_attribute_2eproto.base);
  return *internal_default_instance();
}


void EthernetSegmentIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EthernetSegmentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* EthernetSegmentIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthernetSegmentIdentifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EthernetSegmentIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EthernetSegmentIdentifier)
  return target;
}

size_t EthernetSegmentIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EthernetSegmentIdentifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthernetSegmentIdentifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EthernetSegmentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const EthernetSegmentIdentifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthernetSegmentIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EthernetSegmentIdentifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EthernetSegmentIdentifier)
    MergeFrom(*source);
  }
}

void EthernetSegmentIdentifier::MergeFrom(const EthernetSegmentIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EthernetSegmentIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void EthernetSegmentIdentifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EthernetSegmentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthernetSegmentIdentifier::CopyFrom(const EthernetSegmentIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EthernetSegmentIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthernetSegmentIdentifier::IsInitialized() const {
  return true;
}

void EthernetSegmentIdentifier::InternalSwap(EthernetSegmentIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EthernetSegmentIdentifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNEthernetAutoDiscoveryRoute::InitAsDefaultInstance() {
  ::gobgpapi::_EVPNEthernetAutoDiscoveryRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gobgpapi::_EVPNEthernetAutoDiscoveryRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::gobgpapi::EthernetSegmentIdentifier*>(
      ::gobgpapi::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNEthernetAutoDiscoveryRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNEthernetAutoDiscoveryRoute* msg);
  static const ::gobgpapi::EthernetSegmentIdentifier& esi(const EVPNEthernetAutoDiscoveryRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNEthernetAutoDiscoveryRoute::_Internal::rd(const EVPNEthernetAutoDiscoveryRoute* msg) {
  return *msg->rd_;
}
const ::gobgpapi::EthernetSegmentIdentifier&
EVPNEthernetAutoDiscoveryRoute::_Internal::esi(const EVPNEthernetAutoDiscoveryRoute* msg) {
  return *msg->esi_;
}
void EVPNEthernetAutoDiscoveryRoute::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNEthernetAutoDiscoveryRoute::EVPNEthernetAutoDiscoveryRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
}
EVPNEthernetAutoDiscoveryRoute::EVPNEthernetAutoDiscoveryRoute(const EVPNEthernetAutoDiscoveryRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::gobgpapi::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  ::memcpy(&ethernet_tag_, &from.ethernet_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
}

void EVPNEthernetAutoDiscoveryRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto.base);
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(label_));
}

EVPNEthernetAutoDiscoveryRoute::~EVPNEthernetAutoDiscoveryRoute() {
  // @@protoc_insertion_point(destructor:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  SharedDtor();
}

void EVPNEthernetAutoDiscoveryRoute::SharedDtor() {
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNEthernetAutoDiscoveryRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNEthernetAutoDiscoveryRoute& EVPNEthernetAutoDiscoveryRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNEthernetAutoDiscoveryRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNEthernetAutoDiscoveryRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  ::memset(&ethernet_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  _internal_metadata_.Clear();
}

const char* EVPNEthernetAutoDiscoveryRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNEthernetAutoDiscoveryRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ethernet_tag(), target);
  }

  // uint32 label = 4;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  return target;
}

size_t EVPNEthernetAutoDiscoveryRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  // uint32 label = 4;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNEthernetAutoDiscoveryRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNEthernetAutoDiscoveryRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNEthernetAutoDiscoveryRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
    MergeFrom(*source);
  }
}

void EVPNEthernetAutoDiscoveryRoute::MergeFrom(const EVPNEthernetAutoDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::gobgpapi::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void EVPNEthernetAutoDiscoveryRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNEthernetAutoDiscoveryRoute::CopyFrom(const EVPNEthernetAutoDiscoveryRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EVPNEthernetAutoDiscoveryRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNEthernetAutoDiscoveryRoute::IsInitialized() const {
  return true;
}

void EVPNEthernetAutoDiscoveryRoute::InternalSwap(EVPNEthernetAutoDiscoveryRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rd_, other->rd_);
  swap(esi_, other->esi_);
  swap(ethernet_tag_, other->ethernet_tag_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNEthernetAutoDiscoveryRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNMACIPAdvertisementRoute::InitAsDefaultInstance() {
  ::gobgpapi::_EVPNMACIPAdvertisementRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gobgpapi::_EVPNMACIPAdvertisementRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::gobgpapi::EthernetSegmentIdentifier*>(
      ::gobgpapi::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNMACIPAdvertisementRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNMACIPAdvertisementRoute* msg);
  static const ::gobgpapi::EthernetSegmentIdentifier& esi(const EVPNMACIPAdvertisementRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNMACIPAdvertisementRoute::_Internal::rd(const EVPNMACIPAdvertisementRoute* msg) {
  return *msg->rd_;
}
const ::gobgpapi::EthernetSegmentIdentifier&
EVPNMACIPAdvertisementRoute::_Internal::esi(const EVPNMACIPAdvertisementRoute* msg) {
  return *msg->esi_;
}
void EVPNMACIPAdvertisementRoute::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNMACIPAdvertisementRoute::EVPNMACIPAdvertisementRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EVPNMACIPAdvertisementRoute)
}
EVPNMACIPAdvertisementRoute::EVPNMACIPAdvertisementRoute(const EVPNMACIPAdvertisementRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_address().empty()) {
    mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::gobgpapi::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  ethernet_tag_ = from.ethernet_tag_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EVPNMACIPAdvertisementRoute)
}

void EVPNMACIPAdvertisementRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto.base);
  mac_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ethernet_tag_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(ethernet_tag_));
}

EVPNMACIPAdvertisementRoute::~EVPNMACIPAdvertisementRoute() {
  // @@protoc_insertion_point(destructor:gobgpapi.EVPNMACIPAdvertisementRoute)
  SharedDtor();
}

void EVPNMACIPAdvertisementRoute::SharedDtor() {
  mac_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNMACIPAdvertisementRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNMACIPAdvertisementRoute& EVPNMACIPAdvertisementRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNMACIPAdvertisementRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNMACIPAdvertisementRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EVPNMACIPAdvertisementRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  mac_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  ethernet_tag_ = 0u;
  _internal_metadata_.Clear();
}

const char* EVPNMACIPAdvertisementRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mac_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EVPNMACIPAdvertisementRoute.mac_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EVPNMACIPAdvertisementRoute.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 labels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNMACIPAdvertisementRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EVPNMACIPAdvertisementRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ethernet_tag(), target);
  }

  // string mac_address = 4;
  if (this->mac_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EVPNMACIPAdvertisementRoute.mac_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mac_address(), target);
  }

  // string ip_address = 5;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EVPNMACIPAdvertisementRoute.ip_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip_address(), target);
  }

  // repeated uint32 labels = 6;
  {
    int byte_size = _labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_labels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EVPNMACIPAdvertisementRoute)
  return target;
}

size_t EVPNMACIPAdvertisementRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EVPNMACIPAdvertisementRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 labels = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string mac_address = 4;
  if (this->mac_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  // string ip_address = 5;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNMACIPAdvertisementRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EVPNMACIPAdvertisementRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNMACIPAdvertisementRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNMACIPAdvertisementRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EVPNMACIPAdvertisementRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EVPNMACIPAdvertisementRoute)
    MergeFrom(*source);
  }
}

void EVPNMACIPAdvertisementRoute::MergeFrom(const EVPNMACIPAdvertisementRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EVPNMACIPAdvertisementRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.mac_address().size() > 0) {

    mac_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_address_);
  }
  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::gobgpapi::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
}

void EVPNMACIPAdvertisementRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EVPNMACIPAdvertisementRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNMACIPAdvertisementRoute::CopyFrom(const EVPNMACIPAdvertisementRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EVPNMACIPAdvertisementRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNMACIPAdvertisementRoute::IsInitialized() const {
  return true;
}

void EVPNMACIPAdvertisementRoute::InternalSwap(EVPNMACIPAdvertisementRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  mac_address_.Swap(&other->mac_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rd_, other->rd_);
  swap(esi_, other->esi_);
  swap(ethernet_tag_, other->ethernet_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNMACIPAdvertisementRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNInclusiveMulticastEthernetTagRoute::InitAsDefaultInstance() {
  ::gobgpapi::_EVPNInclusiveMulticastEthernetTagRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EVPNInclusiveMulticastEthernetTagRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNInclusiveMulticastEthernetTagRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNInclusiveMulticastEthernetTagRoute::_Internal::rd(const EVPNInclusiveMulticastEthernetTagRoute* msg) {
  return *msg->rd_;
}
void EVPNInclusiveMulticastEthernetTagRoute::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNInclusiveMulticastEthernetTagRoute::EVPNInclusiveMulticastEthernetTagRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
}
EVPNInclusiveMulticastEthernetTagRoute::EVPNInclusiveMulticastEthernetTagRoute(const EVPNInclusiveMulticastEthernetTagRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  ethernet_tag_ = from.ethernet_tag_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
}

void EVPNInclusiveMulticastEthernetTagRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ethernet_tag_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(ethernet_tag_));
}

EVPNInclusiveMulticastEthernetTagRoute::~EVPNInclusiveMulticastEthernetTagRoute() {
  // @@protoc_insertion_point(destructor:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  SharedDtor();
}

void EVPNInclusiveMulticastEthernetTagRoute::SharedDtor() {
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void EVPNInclusiveMulticastEthernetTagRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNInclusiveMulticastEthernetTagRoute& EVPNInclusiveMulticastEthernetTagRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNInclusiveMulticastEthernetTagRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNInclusiveMulticastEthernetTagRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  ethernet_tag_ = 0u;
  _internal_metadata_.Clear();
}

const char* EVPNInclusiveMulticastEthernetTagRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNInclusiveMulticastEthernetTagRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ethernet_tag(), target);
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EVPNInclusiveMulticastEthernetTagRoute.ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  return target;
}

size_t EVPNInclusiveMulticastEthernetTagRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNInclusiveMulticastEthernetTagRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNInclusiveMulticastEthernetTagRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNInclusiveMulticastEthernetTagRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
    MergeFrom(*source);
  }
}

void EVPNInclusiveMulticastEthernetTagRoute::MergeFrom(const EVPNInclusiveMulticastEthernetTagRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
}

void EVPNInclusiveMulticastEthernetTagRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNInclusiveMulticastEthernetTagRoute::CopyFrom(const EVPNInclusiveMulticastEthernetTagRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EVPNInclusiveMulticastEthernetTagRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNInclusiveMulticastEthernetTagRoute::IsInitialized() const {
  return true;
}

void EVPNInclusiveMulticastEthernetTagRoute::InternalSwap(EVPNInclusiveMulticastEthernetTagRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rd_, other->rd_);
  swap(ethernet_tag_, other->ethernet_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNInclusiveMulticastEthernetTagRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNEthernetSegmentRoute::InitAsDefaultInstance() {
  ::gobgpapi::_EVPNEthernetSegmentRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gobgpapi::_EVPNEthernetSegmentRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::gobgpapi::EthernetSegmentIdentifier*>(
      ::gobgpapi::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNEthernetSegmentRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNEthernetSegmentRoute* msg);
  static const ::gobgpapi::EthernetSegmentIdentifier& esi(const EVPNEthernetSegmentRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNEthernetSegmentRoute::_Internal::rd(const EVPNEthernetSegmentRoute* msg) {
  return *msg->rd_;
}
const ::gobgpapi::EthernetSegmentIdentifier&
EVPNEthernetSegmentRoute::_Internal::esi(const EVPNEthernetSegmentRoute* msg) {
  return *msg->esi_;
}
void EVPNEthernetSegmentRoute::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNEthernetSegmentRoute::EVPNEthernetSegmentRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EVPNEthernetSegmentRoute)
}
EVPNEthernetSegmentRoute::EVPNEthernetSegmentRoute(const EVPNEthernetSegmentRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::gobgpapi::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EVPNEthernetSegmentRoute)
}

void EVPNEthernetSegmentRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNEthernetSegmentRoute_attribute_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&esi_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(esi_));
}

EVPNEthernetSegmentRoute::~EVPNEthernetSegmentRoute() {
  // @@protoc_insertion_point(destructor:gobgpapi.EVPNEthernetSegmentRoute)
  SharedDtor();
}

void EVPNEthernetSegmentRoute::SharedDtor() {
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNEthernetSegmentRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNEthernetSegmentRoute& EVPNEthernetSegmentRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNEthernetSegmentRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNEthernetSegmentRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EVPNEthernetSegmentRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EVPNEthernetSegmentRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EVPNEthernetSegmentRoute.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNEthernetSegmentRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EVPNEthernetSegmentRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EVPNEthernetSegmentRoute.ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EVPNEthernetSegmentRoute)
  return target;
}

size_t EVPNEthernetSegmentRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EVPNEthernetSegmentRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNEthernetSegmentRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EVPNEthernetSegmentRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNEthernetSegmentRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNEthernetSegmentRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EVPNEthernetSegmentRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EVPNEthernetSegmentRoute)
    MergeFrom(*source);
  }
}

void EVPNEthernetSegmentRoute::MergeFrom(const EVPNEthernetSegmentRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EVPNEthernetSegmentRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::gobgpapi::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
}

void EVPNEthernetSegmentRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EVPNEthernetSegmentRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNEthernetSegmentRoute::CopyFrom(const EVPNEthernetSegmentRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EVPNEthernetSegmentRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNEthernetSegmentRoute::IsInitialized() const {
  return true;
}

void EVPNEthernetSegmentRoute::InternalSwap(EVPNEthernetSegmentRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rd_, other->rd_);
  swap(esi_, other->esi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNEthernetSegmentRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNIPPrefixRoute::InitAsDefaultInstance() {
  ::gobgpapi::_EVPNIPPrefixRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gobgpapi::_EVPNIPPrefixRoute_default_instance_._instance.get_mutable()->esi_ = const_cast< ::gobgpapi::EthernetSegmentIdentifier*>(
      ::gobgpapi::EthernetSegmentIdentifier::internal_default_instance());
}
class EVPNIPPrefixRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNIPPrefixRoute* msg);
  static const ::gobgpapi::EthernetSegmentIdentifier& esi(const EVPNIPPrefixRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNIPPrefixRoute::_Internal::rd(const EVPNIPPrefixRoute* msg) {
  return *msg->rd_;
}
const ::gobgpapi::EthernetSegmentIdentifier&
EVPNIPPrefixRoute::_Internal::esi(const EVPNIPPrefixRoute* msg) {
  return *msg->esi_;
}
void EVPNIPPrefixRoute::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
EVPNIPPrefixRoute::EVPNIPPrefixRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EVPNIPPrefixRoute)
}
EVPNIPPrefixRoute::EVPNIPPrefixRoute(const EVPNIPPrefixRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_prefix().empty()) {
    ip_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_prefix_);
  }
  gw_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gw_address().empty()) {
    gw_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gw_address_);
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_esi()) {
    esi_ = new ::gobgpapi::EthernetSegmentIdentifier(*from.esi_);
  } else {
    esi_ = nullptr;
  }
  ::memcpy(&ethernet_tag_, &from.ethernet_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EVPNIPPrefixRoute)
}

void EVPNIPPrefixRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNIPPrefixRoute_attribute_2eproto.base);
  ip_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gw_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(label_));
}

EVPNIPPrefixRoute::~EVPNIPPrefixRoute() {
  // @@protoc_insertion_point(destructor:gobgpapi.EVPNIPPrefixRoute)
  SharedDtor();
}

void EVPNIPPrefixRoute::SharedDtor() {
  ip_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gw_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete esi_;
}

void EVPNIPPrefixRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNIPPrefixRoute& EVPNIPPrefixRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNIPPrefixRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNIPPrefixRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EVPNIPPrefixRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gw_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && esi_ != nullptr) {
    delete esi_;
  }
  esi_ = nullptr;
  ::memset(&ethernet_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&ethernet_tag_)) + sizeof(label_));
  _internal_metadata_.Clear();
}

const char* EVPNIPPrefixRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.EthernetSegmentIdentifier esi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EVPNIPPrefixRoute.ip_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ip_prefix_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ip_prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gw_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_gw_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.EVPNIPPrefixRoute.gw_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNIPPrefixRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EVPNIPPrefixRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esi(this), target, stream);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ethernet_tag(), target);
  }

  // string ip_prefix = 4;
  if (this->ip_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_prefix().data(), static_cast<int>(this->_internal_ip_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EVPNIPPrefixRoute.ip_prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip_prefix(), target);
  }

  // uint32 ip_prefix_len = 5;
  if (this->ip_prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ip_prefix_len(), target);
  }

  // string gw_address = 6;
  if (this->gw_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gw_address().data(), static_cast<int>(this->_internal_gw_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.EVPNIPPrefixRoute.gw_address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_gw_address(), target);
  }

  // uint32 label = 7;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EVPNIPPrefixRoute)
  return target;
}

size_t EVPNIPPrefixRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EVPNIPPrefixRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_prefix = 4;
  if (this->ip_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_prefix());
  }

  // string gw_address = 6;
  if (this->gw_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gw_address());
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .gobgpapi.EthernetSegmentIdentifier esi = 2;
  if (this->has_esi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *esi_);
  }

  // uint32 ethernet_tag = 3;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  // uint32 ip_prefix_len = 5;
  if (this->ip_prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ip_prefix_len());
  }

  // uint32 label = 7;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNIPPrefixRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EVPNIPPrefixRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNIPPrefixRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNIPPrefixRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EVPNIPPrefixRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EVPNIPPrefixRoute)
    MergeFrom(*source);
  }
}

void EVPNIPPrefixRoute::MergeFrom(const EVPNIPPrefixRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EVPNIPPrefixRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_prefix().size() > 0) {

    ip_prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_prefix_);
  }
  if (from.gw_address().size() > 0) {

    gw_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gw_address_);
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_esi()) {
    _internal_mutable_esi()->::gobgpapi::EthernetSegmentIdentifier::MergeFrom(from._internal_esi());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
  if (from.ip_prefix_len() != 0) {
    _internal_set_ip_prefix_len(from._internal_ip_prefix_len());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void EVPNIPPrefixRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EVPNIPPrefixRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNIPPrefixRoute::CopyFrom(const EVPNIPPrefixRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EVPNIPPrefixRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNIPPrefixRoute::IsInitialized() const {
  return true;
}

void EVPNIPPrefixRoute::InternalSwap(EVPNIPPrefixRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_prefix_.Swap(&other->ip_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gw_address_.Swap(&other->gw_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rd_, other->rd_);
  swap(esi_, other->esi_);
  swap(ethernet_tag_, other->ethernet_tag_);
  swap(ip_prefix_len_, other->ip_prefix_len_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNIPPrefixRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EVPNIPMSIRoute::InitAsDefaultInstance() {
  ::gobgpapi::_EVPNIPMSIRoute_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::gobgpapi::_EVPNIPMSIRoute_default_instance_._instance.get_mutable()->rt_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class EVPNIPMSIRoute::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const EVPNIPMSIRoute* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& rt(const EVPNIPMSIRoute* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
EVPNIPMSIRoute::_Internal::rd(const EVPNIPMSIRoute* msg) {
  return *msg->rd_;
}
const PROTOBUF_NAMESPACE_ID::Any&
EVPNIPMSIRoute::_Internal::rt(const EVPNIPMSIRoute* msg) {
  return *msg->rt_;
}
void EVPNIPMSIRoute::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
void EVPNIPMSIRoute::clear_rt() {
  if (GetArenaNoVirtual() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
}
EVPNIPMSIRoute::EVPNIPMSIRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EVPNIPMSIRoute)
}
EVPNIPMSIRoute::EVPNIPMSIRoute(const EVPNIPMSIRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  if (from._internal_has_rt()) {
    rt_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rt_);
  } else {
    rt_ = nullptr;
  }
  ethernet_tag_ = from.ethernet_tag_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EVPNIPMSIRoute)
}

void EVPNIPMSIRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EVPNIPMSIRoute_attribute_2eproto.base);
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ethernet_tag_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(ethernet_tag_));
}

EVPNIPMSIRoute::~EVPNIPMSIRoute() {
  // @@protoc_insertion_point(destructor:gobgpapi.EVPNIPMSIRoute)
  SharedDtor();
}

void EVPNIPMSIRoute::SharedDtor() {
  if (this != internal_default_instance()) delete rd_;
  if (this != internal_default_instance()) delete rt_;
}

void EVPNIPMSIRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EVPNIPMSIRoute& EVPNIPMSIRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EVPNIPMSIRoute_attribute_2eproto.base);
  return *internal_default_instance();
}


void EVPNIPMSIRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EVPNIPMSIRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
  ethernet_tag_ = 0u;
  _internal_metadata_.Clear();
}

const char* EVPNIPMSIRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ethernet_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ethernet_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EVPNIPMSIRoute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EVPNIPMSIRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ethernet_tag(), target);
  }

  // .google.protobuf.Any rt = 3;
  if (this->has_rt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EVPNIPMSIRoute)
  return target;
}

size_t EVPNIPMSIRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EVPNIPMSIRoute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // .google.protobuf.Any rt = 3;
  if (this->has_rt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rt_);
  }

  // uint32 ethernet_tag = 2;
  if (this->ethernet_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ethernet_tag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EVPNIPMSIRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EVPNIPMSIRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const EVPNIPMSIRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EVPNIPMSIRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EVPNIPMSIRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EVPNIPMSIRoute)
    MergeFrom(*source);
  }
}

void EVPNIPMSIRoute::MergeFrom(const EVPNIPMSIRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EVPNIPMSIRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.has_rt()) {
    _internal_mutable_rt()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rt());
  }
  if (from.ethernet_tag() != 0) {
    _internal_set_ethernet_tag(from._internal_ethernet_tag());
  }
}

void EVPNIPMSIRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EVPNIPMSIRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVPNIPMSIRoute::CopyFrom(const EVPNIPMSIRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EVPNIPMSIRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVPNIPMSIRoute::IsInitialized() const {
  return true;
}

void EVPNIPMSIRoute::InternalSwap(EVPNIPMSIRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rd_, other->rd_);
  swap(rt_, other->rt_);
  swap(ethernet_tag_, other->ethernet_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EVPNIPMSIRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabeledVPNIPAddressPrefix::InitAsDefaultInstance() {
  ::gobgpapi::_LabeledVPNIPAddressPrefix_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class LabeledVPNIPAddressPrefix::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const LabeledVPNIPAddressPrefix* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
LabeledVPNIPAddressPrefix::_Internal::rd(const LabeledVPNIPAddressPrefix* msg) {
  return *msg->rd_;
}
void LabeledVPNIPAddressPrefix::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
LabeledVPNIPAddressPrefix::LabeledVPNIPAddressPrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LabeledVPNIPAddressPrefix)
}
LabeledVPNIPAddressPrefix::LabeledVPNIPAddressPrefix(const LabeledVPNIPAddressPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LabeledVPNIPAddressPrefix)
}

void LabeledVPNIPAddressPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_len_) -
      reinterpret_cast<char*>(&rd_)) + sizeof(prefix_len_));
}

LabeledVPNIPAddressPrefix::~LabeledVPNIPAddressPrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.LabeledVPNIPAddressPrefix)
  SharedDtor();
}

void LabeledVPNIPAddressPrefix::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rd_;
}

void LabeledVPNIPAddressPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledVPNIPAddressPrefix& LabeledVPNIPAddressPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledVPNIPAddressPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LabeledVPNIPAddressPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LabeledVPNIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  prefix_len_ = 0u;
  _internal_metadata_.Clear();
}

const char* LabeledVPNIPAddressPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LabeledVPNIPAddressPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledVPNIPAddressPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LabeledVPNIPAddressPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    int byte_size = _labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_labels(), byte_size, target);
    }
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rd(this), target, stream);
  }

  // uint32 prefix_len = 3;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prefix_len(), target);
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LabeledVPNIPAddressPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LabeledVPNIPAddressPrefix)
  return target;
}

size_t LabeledVPNIPAddressPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LabeledVPNIPAddressPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 labels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string prefix = 4;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // .google.protobuf.Any rd = 2;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  // uint32 prefix_len = 3;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledVPNIPAddressPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LabeledVPNIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledVPNIPAddressPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledVPNIPAddressPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LabeledVPNIPAddressPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LabeledVPNIPAddressPrefix)
    MergeFrom(*source);
  }
}

void LabeledVPNIPAddressPrefix::MergeFrom(const LabeledVPNIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LabeledVPNIPAddressPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void LabeledVPNIPAddressPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LabeledVPNIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledVPNIPAddressPrefix::CopyFrom(const LabeledVPNIPAddressPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LabeledVPNIPAddressPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledVPNIPAddressPrefix::IsInitialized() const {
  return true;
}

void LabeledVPNIPAddressPrefix::InternalSwap(LabeledVPNIPAddressPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rd_, other->rd_);
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledVPNIPAddressPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteTargetMembershipNLRI::InitAsDefaultInstance() {
  ::gobgpapi::_RouteTargetMembershipNLRI_default_instance_._instance.get_mutable()->rt_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class RouteTargetMembershipNLRI::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rt(const RouteTargetMembershipNLRI* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
RouteTargetMembershipNLRI::_Internal::rt(const RouteTargetMembershipNLRI* msg) {
  return *msg->rt_;
}
void RouteTargetMembershipNLRI::clear_rt() {
  if (GetArenaNoVirtual() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
}
RouteTargetMembershipNLRI::RouteTargetMembershipNLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteTargetMembershipNLRI)
}
RouteTargetMembershipNLRI::RouteTargetMembershipNLRI(const RouteTargetMembershipNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rt()) {
    rt_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rt_);
  } else {
    rt_ = nullptr;
  }
  as_ = from.as_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteTargetMembershipNLRI)
}

void RouteTargetMembershipNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteTargetMembershipNLRI_attribute_2eproto.base);
  ::memset(&rt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&as_) -
      reinterpret_cast<char*>(&rt_)) + sizeof(as_));
}

RouteTargetMembershipNLRI::~RouteTargetMembershipNLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteTargetMembershipNLRI)
  SharedDtor();
}

void RouteTargetMembershipNLRI::SharedDtor() {
  if (this != internal_default_instance()) delete rt_;
}

void RouteTargetMembershipNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteTargetMembershipNLRI& RouteTargetMembershipNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteTargetMembershipNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouteTargetMembershipNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouteTargetMembershipNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && rt_ != nullptr) {
    delete rt_;
  }
  rt_ = nullptr;
  as_ = 0u;
  _internal_metadata_.Clear();
}

const char* RouteTargetMembershipNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any rt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteTargetMembershipNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteTargetMembershipNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_as(), target);
  }

  // .google.protobuf.Any rt = 2;
  if (this->has_rt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteTargetMembershipNLRI)
  return target;
}

size_t RouteTargetMembershipNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouteTargetMembershipNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any rt = 2;
  if (this->has_rt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rt_);
  }

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteTargetMembershipNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouteTargetMembershipNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteTargetMembershipNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteTargetMembershipNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouteTargetMembershipNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouteTargetMembershipNLRI)
    MergeFrom(*source);
  }
}

void RouteTargetMembershipNLRI::MergeFrom(const RouteTargetMembershipNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouteTargetMembershipNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rt()) {
    _internal_mutable_rt()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rt());
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
}

void RouteTargetMembershipNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouteTargetMembershipNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteTargetMembershipNLRI::CopyFrom(const RouteTargetMembershipNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouteTargetMembershipNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteTargetMembershipNLRI::IsInitialized() const {
  return true;
}

void RouteTargetMembershipNLRI::InternalSwap(RouteTargetMembershipNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rt_, other->rt_);
  swap(as_, other->as_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteTargetMembershipNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecIPPrefix::InitAsDefaultInstance() {
}
class FlowSpecIPPrefix::_Internal {
 public:
};

FlowSpecIPPrefix::FlowSpecIPPrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.FlowSpecIPPrefix)
}
FlowSpecIPPrefix::FlowSpecIPPrefix(const FlowSpecIPPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.FlowSpecIPPrefix)
}

void FlowSpecIPPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecIPPrefix_attribute_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(offset_));
}

FlowSpecIPPrefix::~FlowSpecIPPrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.FlowSpecIPPrefix)
  SharedDtor();
}

void FlowSpecIPPrefix::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowSpecIPPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecIPPrefix& FlowSpecIPPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecIPPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecIPPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.FlowSpecIPPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

const char* FlowSpecIPPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.FlowSpecIPPrefix.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecIPPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.FlowSpecIPPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.FlowSpecIPPrefix.prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.FlowSpecIPPrefix)
  return target;
}

size_t FlowSpecIPPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.FlowSpecIPPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 3;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prefix_len());
  }

  // uint32 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecIPPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.FlowSpecIPPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecIPPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecIPPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.FlowSpecIPPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.FlowSpecIPPrefix)
    MergeFrom(*source);
  }
}

void FlowSpecIPPrefix::MergeFrom(const FlowSpecIPPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.FlowSpecIPPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void FlowSpecIPPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.FlowSpecIPPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecIPPrefix::CopyFrom(const FlowSpecIPPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.FlowSpecIPPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecIPPrefix::IsInitialized() const {
  return true;
}

void FlowSpecIPPrefix::InternalSwap(FlowSpecIPPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(prefix_len_, other->prefix_len_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecIPPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecMAC::InitAsDefaultInstance() {
}
class FlowSpecMAC::_Internal {
 public:
};

FlowSpecMAC::FlowSpecMAC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.FlowSpecMAC)
}
FlowSpecMAC::FlowSpecMAC(const FlowSpecMAC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.FlowSpecMAC)
}

void FlowSpecMAC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecMAC_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

FlowSpecMAC::~FlowSpecMAC() {
  // @@protoc_insertion_point(destructor:gobgpapi.FlowSpecMAC)
  SharedDtor();
}

void FlowSpecMAC::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowSpecMAC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecMAC& FlowSpecMAC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecMAC_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecMAC::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.FlowSpecMAC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* FlowSpecMAC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.FlowSpecMAC.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecMAC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.FlowSpecMAC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.FlowSpecMAC.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.FlowSpecMAC)
  return target;
}

size_t FlowSpecMAC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.FlowSpecMAC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecMAC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.FlowSpecMAC)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecMAC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecMAC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.FlowSpecMAC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.FlowSpecMAC)
    MergeFrom(*source);
  }
}

void FlowSpecMAC::MergeFrom(const FlowSpecMAC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.FlowSpecMAC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void FlowSpecMAC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.FlowSpecMAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecMAC::CopyFrom(const FlowSpecMAC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.FlowSpecMAC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecMAC::IsInitialized() const {
  return true;
}

void FlowSpecMAC::InternalSwap(FlowSpecMAC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecMAC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecComponentItem::InitAsDefaultInstance() {
}
class FlowSpecComponentItem::_Internal {
 public:
};

FlowSpecComponentItem::FlowSpecComponentItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.FlowSpecComponentItem)
}
FlowSpecComponentItem::FlowSpecComponentItem(const FlowSpecComponentItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&value_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.FlowSpecComponentItem)
}

void FlowSpecComponentItem::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&value_)) + sizeof(op_));
}

FlowSpecComponentItem::~FlowSpecComponentItem() {
  // @@protoc_insertion_point(destructor:gobgpapi.FlowSpecComponentItem)
  SharedDtor();
}

void FlowSpecComponentItem::SharedDtor() {
}

void FlowSpecComponentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecComponentItem& FlowSpecComponentItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecComponentItem_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecComponentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.FlowSpecComponentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&value_)) + sizeof(op_));
  _internal_metadata_.Clear();
}

const char* FlowSpecComponentItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecComponentItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.FlowSpecComponentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_op(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.FlowSpecComponentItem)
  return target;
}

size_t FlowSpecComponentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.FlowSpecComponentItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  // uint32 op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecComponentItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.FlowSpecComponentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecComponentItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecComponentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.FlowSpecComponentItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.FlowSpecComponentItem)
    MergeFrom(*source);
  }
}

void FlowSpecComponentItem::MergeFrom(const FlowSpecComponentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.FlowSpecComponentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void FlowSpecComponentItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.FlowSpecComponentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecComponentItem::CopyFrom(const FlowSpecComponentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.FlowSpecComponentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecComponentItem::IsInitialized() const {
  return true;
}

void FlowSpecComponentItem::InternalSwap(FlowSpecComponentItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecComponentItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecComponent::InitAsDefaultInstance() {
}
class FlowSpecComponent::_Internal {
 public:
};

FlowSpecComponent::FlowSpecComponent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.FlowSpecComponent)
}
FlowSpecComponent::FlowSpecComponent(const FlowSpecComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.FlowSpecComponent)
}

void FlowSpecComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecComponent_attribute_2eproto.base);
  type_ = 0u;
}

FlowSpecComponent::~FlowSpecComponent() {
  // @@protoc_insertion_point(destructor:gobgpapi.FlowSpecComponent)
  SharedDtor();
}

void FlowSpecComponent::SharedDtor() {
}

void FlowSpecComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecComponent& FlowSpecComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecComponent_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.FlowSpecComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* FlowSpecComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.FlowSpecComponentItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.FlowSpecComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .gobgpapi.FlowSpecComponentItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.FlowSpecComponent)
  return target;
}

size_t FlowSpecComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.FlowSpecComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.FlowSpecComponentItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.FlowSpecComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.FlowSpecComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.FlowSpecComponent)
    MergeFrom(*source);
  }
}

void FlowSpecComponent::MergeFrom(const FlowSpecComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.FlowSpecComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void FlowSpecComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.FlowSpecComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecComponent::CopyFrom(const FlowSpecComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.FlowSpecComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecComponent::IsInitialized() const {
  return true;
}

void FlowSpecComponent::InternalSwap(FlowSpecComponent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowSpecNLRI::InitAsDefaultInstance() {
}
class FlowSpecNLRI::_Internal {
 public:
};

void FlowSpecNLRI::clear_rules() {
  rules_.Clear();
}
FlowSpecNLRI::FlowSpecNLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.FlowSpecNLRI)
}
FlowSpecNLRI::FlowSpecNLRI(const FlowSpecNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.FlowSpecNLRI)
}

void FlowSpecNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowSpecNLRI_attribute_2eproto.base);
}

FlowSpecNLRI::~FlowSpecNLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.FlowSpecNLRI)
  SharedDtor();
}

void FlowSpecNLRI::SharedDtor() {
}

void FlowSpecNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowSpecNLRI& FlowSpecNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowSpecNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void FlowSpecNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.FlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  _internal_metadata_.Clear();
}

const char* FlowSpecNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowSpecNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.FlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any rules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.FlowSpecNLRI)
  return target;
}

size_t FlowSpecNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.FlowSpecNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any rules = 1;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowSpecNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.FlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowSpecNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowSpecNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.FlowSpecNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.FlowSpecNLRI)
    MergeFrom(*source);
  }
}

void FlowSpecNLRI::MergeFrom(const FlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.FlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
}

void FlowSpecNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.FlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowSpecNLRI::CopyFrom(const FlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.FlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowSpecNLRI::IsInitialized() const {
  return true;
}

void FlowSpecNLRI::InternalSwap(FlowSpecNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowSpecNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VPNFlowSpecNLRI::InitAsDefaultInstance() {
  ::gobgpapi::_VPNFlowSpecNLRI_default_instance_._instance.get_mutable()->rd_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class VPNFlowSpecNLRI::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& rd(const VPNFlowSpecNLRI* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
VPNFlowSpecNLRI::_Internal::rd(const VPNFlowSpecNLRI* msg) {
  return *msg->rd_;
}
void VPNFlowSpecNLRI::clear_rd() {
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
}
void VPNFlowSpecNLRI::clear_rules() {
  rules_.Clear();
}
VPNFlowSpecNLRI::VPNFlowSpecNLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.VPNFlowSpecNLRI)
}
VPNFlowSpecNLRI::VPNFlowSpecNLRI(const VPNFlowSpecNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rd()) {
    rd_ = new PROTOBUF_NAMESPACE_ID::Any(*from.rd_);
  } else {
    rd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.VPNFlowSpecNLRI)
}

void VPNFlowSpecNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VPNFlowSpecNLRI_attribute_2eproto.base);
  rd_ = nullptr;
}

VPNFlowSpecNLRI::~VPNFlowSpecNLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.VPNFlowSpecNLRI)
  SharedDtor();
}

void VPNFlowSpecNLRI::SharedDtor() {
  if (this != internal_default_instance()) delete rd_;
}

void VPNFlowSpecNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VPNFlowSpecNLRI& VPNFlowSpecNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VPNFlowSpecNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void VPNFlowSpecNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.VPNFlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rules_.Clear();
  if (GetArenaNoVirtual() == nullptr && rd_ != nullptr) {
    delete rd_;
  }
  rd_ = nullptr;
  _internal_metadata_.Clear();
}

const char* VPNFlowSpecNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any rd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPNFlowSpecNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.VPNFlowSpecNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rd(this), target, stream);
  }

  // repeated .google.protobuf.Any rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.VPNFlowSpecNLRI)
  return target;
}

size_t VPNFlowSpecNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.VPNFlowSpecNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any rules = 2;
  total_size += 1UL * this->_internal_rules_size();
  for (const auto& msg : this->rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Any rd = 1;
  if (this->has_rd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rd_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPNFlowSpecNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.VPNFlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const VPNFlowSpecNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPNFlowSpecNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.VPNFlowSpecNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.VPNFlowSpecNLRI)
    MergeFrom(*source);
  }
}

void VPNFlowSpecNLRI::MergeFrom(const VPNFlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.VPNFlowSpecNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rules_.MergeFrom(from.rules_);
  if (from.has_rd()) {
    _internal_mutable_rd()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_rd());
  }
}

void VPNFlowSpecNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.VPNFlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPNFlowSpecNLRI::CopyFrom(const VPNFlowSpecNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.VPNFlowSpecNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPNFlowSpecNLRI::IsInitialized() const {
  return true;
}

void VPNFlowSpecNLRI::InternalSwap(VPNFlowSpecNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rules_.InternalSwap(&other->rules_);
  swap(rd_, other->rd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VPNFlowSpecNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpaqueNLRI::InitAsDefaultInstance() {
}
class OpaqueNLRI::_Internal {
 public:
};

OpaqueNLRI::OpaqueNLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.OpaqueNLRI)
}
OpaqueNLRI::OpaqueNLRI(const OpaqueNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.OpaqueNLRI)
}

void OpaqueNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpaqueNLRI_attribute_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpaqueNLRI::~OpaqueNLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.OpaqueNLRI)
  SharedDtor();
}

void OpaqueNLRI::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpaqueNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpaqueNLRI& OpaqueNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpaqueNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void OpaqueNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.OpaqueNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* OpaqueNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpaqueNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.OpaqueNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.OpaqueNLRI)
  return target;
}

size_t OpaqueNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.OpaqueNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpaqueNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.OpaqueNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const OpaqueNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpaqueNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.OpaqueNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.OpaqueNLRI)
    MergeFrom(*source);
  }
}

void OpaqueNLRI::MergeFrom(const OpaqueNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.OpaqueNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void OpaqueNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.OpaqueNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpaqueNLRI::CopyFrom(const OpaqueNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.OpaqueNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpaqueNLRI::IsInitialized() const {
  return true;
}

void OpaqueNLRI::InternalSwap(OpaqueNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpaqueNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsNodeDescriptor::InitAsDefaultInstance() {
}
class LsNodeDescriptor::_Internal {
 public:
};

LsNodeDescriptor::LsNodeDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsNodeDescriptor)
}
LsNodeDescriptor::LsNodeDescriptor(const LsNodeDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  igp_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_igp_router_id().empty()) {
    igp_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.igp_router_id_);
  }
  ::memcpy(&asn_, &from.asn_,
    static_cast<size_t>(reinterpret_cast<char*>(&pseudonode_) -
    reinterpret_cast<char*>(&asn_)) + sizeof(pseudonode_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsNodeDescriptor)
}

void LsNodeDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsNodeDescriptor_attribute_2eproto.base);
  igp_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pseudonode_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(pseudonode_));
}

LsNodeDescriptor::~LsNodeDescriptor() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsNodeDescriptor)
  SharedDtor();
}

void LsNodeDescriptor::SharedDtor() {
  igp_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LsNodeDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsNodeDescriptor& LsNodeDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsNodeDescriptor_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsNodeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsNodeDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  igp_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pseudonode_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(pseudonode_));
  _internal_metadata_.Clear();
}

const char* LsNodeDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 asn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bgp_ls_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bgp_ls_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ospf_area_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ospf_area_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pseudonode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pseudonode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string igp_router_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_igp_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsNodeDescriptor.igp_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsNodeDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsNodeDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_asn(), target);
  }

  // uint32 bgp_ls_id = 2;
  if (this->bgp_ls_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bgp_ls_id(), target);
  }

  // uint32 ospf_area_id = 3;
  if (this->ospf_area_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ospf_area_id(), target);
  }

  // bool pseudonode = 4;
  if (this->pseudonode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pseudonode(), target);
  }

  // string igp_router_id = 5;
  if (this->igp_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_igp_router_id().data(), static_cast<int>(this->_internal_igp_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsNodeDescriptor.igp_router_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_igp_router_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsNodeDescriptor)
  return target;
}

size_t LsNodeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsNodeDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string igp_router_id = 5;
  if (this->igp_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_igp_router_id());
  }

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // uint32 bgp_ls_id = 2;
  if (this->bgp_ls_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bgp_ls_id());
  }

  // uint32 ospf_area_id = 3;
  if (this->ospf_area_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ospf_area_id());
  }

  // bool pseudonode = 4;
  if (this->pseudonode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsNodeDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsNodeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const LsNodeDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsNodeDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsNodeDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsNodeDescriptor)
    MergeFrom(*source);
  }
}

void LsNodeDescriptor::MergeFrom(const LsNodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsNodeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.igp_router_id().size() > 0) {

    igp_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.igp_router_id_);
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.bgp_ls_id() != 0) {
    _internal_set_bgp_ls_id(from._internal_bgp_ls_id());
  }
  if (from.ospf_area_id() != 0) {
    _internal_set_ospf_area_id(from._internal_ospf_area_id());
  }
  if (from.pseudonode() != 0) {
    _internal_set_pseudonode(from._internal_pseudonode());
  }
}

void LsNodeDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsNodeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsNodeDescriptor::CopyFrom(const LsNodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsNodeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsNodeDescriptor::IsInitialized() const {
  return true;
}

void LsNodeDescriptor::InternalSwap(LsNodeDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  igp_router_id_.Swap(&other->igp_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(asn_, other->asn_);
  swap(bgp_ls_id_, other->bgp_ls_id_);
  swap(ospf_area_id_, other->ospf_area_id_);
  swap(pseudonode_, other->pseudonode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsNodeDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsLinkDescriptor::InitAsDefaultInstance() {
}
class LsLinkDescriptor::_Internal {
 public:
};

LsLinkDescriptor::LsLinkDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsLinkDescriptor)
}
LsLinkDescriptor::LsLinkDescriptor(const LsLinkDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interface_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_addr_ipv4().empty()) {
    interface_addr_ipv4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_addr_ipv4_);
  }
  neighbor_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_addr_ipv4().empty()) {
    neighbor_addr_ipv4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_addr_ipv4_);
  }
  interface_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_addr_ipv6().empty()) {
    interface_addr_ipv6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_addr_ipv6_);
  }
  neighbor_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_neighbor_addr_ipv6().empty()) {
    neighbor_addr_ipv6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_addr_ipv6_);
  }
  ::memcpy(&link_local_id_, &from.link_local_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_remote_id_) -
    reinterpret_cast<char*>(&link_local_id_)) + sizeof(link_remote_id_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsLinkDescriptor)
}

void LsLinkDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsLinkDescriptor_attribute_2eproto.base);
  interface_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_remote_id_) -
      reinterpret_cast<char*>(&link_local_id_)) + sizeof(link_remote_id_));
}

LsLinkDescriptor::~LsLinkDescriptor() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsLinkDescriptor)
  SharedDtor();
}

void LsLinkDescriptor::SharedDtor() {
  interface_addr_ipv4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_addr_ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LsLinkDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsLinkDescriptor& LsLinkDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsLinkDescriptor_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsLinkDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsLinkDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_addr_ipv4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_addr_ipv6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  neighbor_addr_ipv6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_local_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_remote_id_) -
      reinterpret_cast<char*>(&link_local_id_)) + sizeof(link_remote_id_));
  _internal_metadata_.Clear();
}

const char* LsLinkDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 link_local_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          link_local_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 link_remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          link_remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_addr_ipv4 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_interface_addr_ipv4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsLinkDescriptor.interface_addr_ipv4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_addr_ipv4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_neighbor_addr_ipv4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_addr_ipv6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_interface_addr_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsLinkDescriptor.interface_addr_ipv6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string neighbor_addr_ipv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_neighbor_addr_ipv6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsLinkDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsLinkDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 link_local_id = 1;
  if (this->link_local_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_link_local_id(), target);
  }

  // uint32 link_remote_id = 2;
  if (this->link_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_link_remote_id(), target);
  }

  // string interface_addr_ipv4 = 3;
  if (this->interface_addr_ipv4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_addr_ipv4().data(), static_cast<int>(this->_internal_interface_addr_ipv4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsLinkDescriptor.interface_addr_ipv4");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_interface_addr_ipv4(), target);
  }

  // string neighbor_addr_ipv4 = 4;
  if (this->neighbor_addr_ipv4().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_addr_ipv4().data(), static_cast<int>(this->_internal_neighbor_addr_ipv4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsLinkDescriptor.neighbor_addr_ipv4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_neighbor_addr_ipv4(), target);
  }

  // string interface_addr_ipv6 = 5;
  if (this->interface_addr_ipv6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_addr_ipv6().data(), static_cast<int>(this->_internal_interface_addr_ipv6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsLinkDescriptor.interface_addr_ipv6");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_interface_addr_ipv6(), target);
  }

  // string neighbor_addr_ipv6 = 6;
  if (this->neighbor_addr_ipv6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_neighbor_addr_ipv6().data(), static_cast<int>(this->_internal_neighbor_addr_ipv6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsLinkDescriptor.neighbor_addr_ipv6");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_neighbor_addr_ipv6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsLinkDescriptor)
  return target;
}

size_t LsLinkDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsLinkDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interface_addr_ipv4 = 3;
  if (this->interface_addr_ipv4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_addr_ipv4());
  }

  // string neighbor_addr_ipv4 = 4;
  if (this->neighbor_addr_ipv4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_addr_ipv4());
  }

  // string interface_addr_ipv6 = 5;
  if (this->interface_addr_ipv6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_addr_ipv6());
  }

  // string neighbor_addr_ipv6 = 6;
  if (this->neighbor_addr_ipv6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_neighbor_addr_ipv6());
  }

  // uint32 link_local_id = 1;
  if (this->link_local_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_local_id());
  }

  // uint32 link_remote_id = 2;
  if (this->link_remote_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_link_remote_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsLinkDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsLinkDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const LsLinkDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsLinkDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsLinkDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsLinkDescriptor)
    MergeFrom(*source);
  }
}

void LsLinkDescriptor::MergeFrom(const LsLinkDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsLinkDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface_addr_ipv4().size() > 0) {

    interface_addr_ipv4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_addr_ipv4_);
  }
  if (from.neighbor_addr_ipv4().size() > 0) {

    neighbor_addr_ipv4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_addr_ipv4_);
  }
  if (from.interface_addr_ipv6().size() > 0) {

    interface_addr_ipv6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_addr_ipv6_);
  }
  if (from.neighbor_addr_ipv6().size() > 0) {

    neighbor_addr_ipv6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.neighbor_addr_ipv6_);
  }
  if (from.link_local_id() != 0) {
    _internal_set_link_local_id(from._internal_link_local_id());
  }
  if (from.link_remote_id() != 0) {
    _internal_set_link_remote_id(from._internal_link_remote_id());
  }
}

void LsLinkDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsLinkDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsLinkDescriptor::CopyFrom(const LsLinkDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsLinkDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsLinkDescriptor::IsInitialized() const {
  return true;
}

void LsLinkDescriptor::InternalSwap(LsLinkDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  interface_addr_ipv4_.Swap(&other->interface_addr_ipv4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  neighbor_addr_ipv4_.Swap(&other->neighbor_addr_ipv4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  interface_addr_ipv6_.Swap(&other->interface_addr_ipv6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  neighbor_addr_ipv6_.Swap(&other->neighbor_addr_ipv6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(link_local_id_, other->link_local_id_);
  swap(link_remote_id_, other->link_remote_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsLinkDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsPrefixDescriptor::InitAsDefaultInstance() {
}
class LsPrefixDescriptor::_Internal {
 public:
};

LsPrefixDescriptor::LsPrefixDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsPrefixDescriptor)
}
LsPrefixDescriptor::LsPrefixDescriptor(const LsPrefixDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ip_reachability_(from.ip_reachability_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ospf_route_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ospf_route_type().empty()) {
    ospf_route_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ospf_route_type_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsPrefixDescriptor)
}

void LsPrefixDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsPrefixDescriptor_attribute_2eproto.base);
  ospf_route_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LsPrefixDescriptor::~LsPrefixDescriptor() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsPrefixDescriptor)
  SharedDtor();
}

void LsPrefixDescriptor::SharedDtor() {
  ospf_route_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LsPrefixDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsPrefixDescriptor& LsPrefixDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsPrefixDescriptor_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsPrefixDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsPrefixDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_reachability_.Clear();
  ospf_route_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LsPrefixDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ip_reachability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_reachability();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsPrefixDescriptor.ip_reachability"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string ospf_route_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ospf_route_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsPrefixDescriptor.ospf_route_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsPrefixDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsPrefixDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_reachability = 1;
  for (int i = 0, n = this->_internal_ip_reachability_size(); i < n; i++) {
    const auto& s = this->_internal_ip_reachability(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsPrefixDescriptor.ip_reachability");
    target = stream->WriteString(1, s, target);
  }

  // string ospf_route_type = 2;
  if (this->ospf_route_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ospf_route_type().data(), static_cast<int>(this->_internal_ospf_route_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsPrefixDescriptor.ospf_route_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ospf_route_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsPrefixDescriptor)
  return target;
}

size_t LsPrefixDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsPrefixDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_reachability = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ip_reachability_.size());
  for (int i = 0, n = ip_reachability_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ip_reachability_.Get(i));
  }

  // string ospf_route_type = 2;
  if (this->ospf_route_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ospf_route_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsPrefixDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsPrefixDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const LsPrefixDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsPrefixDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsPrefixDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsPrefixDescriptor)
    MergeFrom(*source);
  }
}

void LsPrefixDescriptor::MergeFrom(const LsPrefixDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsPrefixDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_reachability_.MergeFrom(from.ip_reachability_);
  if (from.ospf_route_type().size() > 0) {

    ospf_route_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ospf_route_type_);
  }
}

void LsPrefixDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsPrefixDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsPrefixDescriptor::CopyFrom(const LsPrefixDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsPrefixDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsPrefixDescriptor::IsInitialized() const {
  return true;
}

void LsPrefixDescriptor::InternalSwap(LsPrefixDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_reachability_.InternalSwap(&other->ip_reachability_);
  ospf_route_type_.Swap(&other->ospf_route_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LsPrefixDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsNodeNLRI::InitAsDefaultInstance() {
  ::gobgpapi::_LsNodeNLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::gobgpapi::LsNodeDescriptor*>(
      ::gobgpapi::LsNodeDescriptor::internal_default_instance());
}
class LsNodeNLRI::_Internal {
 public:
  static const ::gobgpapi::LsNodeDescriptor& local_node(const LsNodeNLRI* msg);
};

const ::gobgpapi::LsNodeDescriptor&
LsNodeNLRI::_Internal::local_node(const LsNodeNLRI* msg) {
  return *msg->local_node_;
}
LsNodeNLRI::LsNodeNLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsNodeNLRI)
}
LsNodeNLRI::LsNodeNLRI(const LsNodeNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::gobgpapi::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsNodeNLRI)
}

void LsNodeNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsNodeNLRI_attribute_2eproto.base);
  local_node_ = nullptr;
}

LsNodeNLRI::~LsNodeNLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsNodeNLRI)
  SharedDtor();
}

void LsNodeNLRI::SharedDtor() {
  if (this != internal_default_instance()) delete local_node_;
}

void LsNodeNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsNodeNLRI& LsNodeNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsNodeNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsNodeNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsNodeNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LsNodeNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsNodeNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsNodeNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsNodeNLRI)
  return target;
}

size_t LsNodeNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsNodeNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsNodeNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsNodeNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsNodeNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsNodeNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsNodeNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsNodeNLRI)
    MergeFrom(*source);
  }
}

void LsNodeNLRI::MergeFrom(const LsNodeNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsNodeNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::gobgpapi::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
}

void LsNodeNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsNodeNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsNodeNLRI::CopyFrom(const LsNodeNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsNodeNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsNodeNLRI::IsInitialized() const {
  return true;
}

void LsNodeNLRI::InternalSwap(LsNodeNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_node_, other->local_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsNodeNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsLinkNLRI::InitAsDefaultInstance() {
  ::gobgpapi::_LsLinkNLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::gobgpapi::LsNodeDescriptor*>(
      ::gobgpapi::LsNodeDescriptor::internal_default_instance());
  ::gobgpapi::_LsLinkNLRI_default_instance_._instance.get_mutable()->remote_node_ = const_cast< ::gobgpapi::LsNodeDescriptor*>(
      ::gobgpapi::LsNodeDescriptor::internal_default_instance());
  ::gobgpapi::_LsLinkNLRI_default_instance_._instance.get_mutable()->link_descriptor_ = const_cast< ::gobgpapi::LsLinkDescriptor*>(
      ::gobgpapi::LsLinkDescriptor::internal_default_instance());
}
class LsLinkNLRI::_Internal {
 public:
  static const ::gobgpapi::LsNodeDescriptor& local_node(const LsLinkNLRI* msg);
  static const ::gobgpapi::LsNodeDescriptor& remote_node(const LsLinkNLRI* msg);
  static const ::gobgpapi::LsLinkDescriptor& link_descriptor(const LsLinkNLRI* msg);
};

const ::gobgpapi::LsNodeDescriptor&
LsLinkNLRI::_Internal::local_node(const LsLinkNLRI* msg) {
  return *msg->local_node_;
}
const ::gobgpapi::LsNodeDescriptor&
LsLinkNLRI::_Internal::remote_node(const LsLinkNLRI* msg) {
  return *msg->remote_node_;
}
const ::gobgpapi::LsLinkDescriptor&
LsLinkNLRI::_Internal::link_descriptor(const LsLinkNLRI* msg) {
  return *msg->link_descriptor_;
}
LsLinkNLRI::LsLinkNLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsLinkNLRI)
}
LsLinkNLRI::LsLinkNLRI(const LsLinkNLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::gobgpapi::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  if (from._internal_has_remote_node()) {
    remote_node_ = new ::gobgpapi::LsNodeDescriptor(*from.remote_node_);
  } else {
    remote_node_ = nullptr;
  }
  if (from._internal_has_link_descriptor()) {
    link_descriptor_ = new ::gobgpapi::LsLinkDescriptor(*from.link_descriptor_);
  } else {
    link_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsLinkNLRI)
}

void LsLinkNLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsLinkNLRI_attribute_2eproto.base);
  ::memset(&local_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_descriptor_) -
      reinterpret_cast<char*>(&local_node_)) + sizeof(link_descriptor_));
}

LsLinkNLRI::~LsLinkNLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsLinkNLRI)
  SharedDtor();
}

void LsLinkNLRI::SharedDtor() {
  if (this != internal_default_instance()) delete local_node_;
  if (this != internal_default_instance()) delete remote_node_;
  if (this != internal_default_instance()) delete link_descriptor_;
}

void LsLinkNLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsLinkNLRI& LsLinkNLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsLinkNLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsLinkNLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsLinkNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && remote_node_ != nullptr) {
    delete remote_node_;
  }
  remote_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && link_descriptor_ != nullptr) {
    delete link_descriptor_;
  }
  link_descriptor_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LsLinkNLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsNodeDescriptor remote_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsLinkDescriptor link_descriptor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsLinkNLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsLinkNLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  // .gobgpapi.LsNodeDescriptor remote_node = 2;
  if (this->has_remote_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remote_node(this), target, stream);
  }

  // .gobgpapi.LsLinkDescriptor link_descriptor = 3;
  if (this->has_link_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::link_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsLinkNLRI)
  return target;
}

size_t LsLinkNLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsLinkNLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  // .gobgpapi.LsNodeDescriptor remote_node = 2;
  if (this->has_remote_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_node_);
  }

  // .gobgpapi.LsLinkDescriptor link_descriptor = 3;
  if (this->has_link_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_descriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsLinkNLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsLinkNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsLinkNLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsLinkNLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsLinkNLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsLinkNLRI)
    MergeFrom(*source);
  }
}

void LsLinkNLRI::MergeFrom(const LsLinkNLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsLinkNLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::gobgpapi::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
  if (from.has_remote_node()) {
    _internal_mutable_remote_node()->::gobgpapi::LsNodeDescriptor::MergeFrom(from._internal_remote_node());
  }
  if (from.has_link_descriptor()) {
    _internal_mutable_link_descriptor()->::gobgpapi::LsLinkDescriptor::MergeFrom(from._internal_link_descriptor());
  }
}

void LsLinkNLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsLinkNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsLinkNLRI::CopyFrom(const LsLinkNLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsLinkNLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsLinkNLRI::IsInitialized() const {
  return true;
}

void LsLinkNLRI::InternalSwap(LsLinkNLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_node_, other->local_node_);
  swap(remote_node_, other->remote_node_);
  swap(link_descriptor_, other->link_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsLinkNLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsPrefixV4NLRI::InitAsDefaultInstance() {
  ::gobgpapi::_LsPrefixV4NLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::gobgpapi::LsNodeDescriptor*>(
      ::gobgpapi::LsNodeDescriptor::internal_default_instance());
  ::gobgpapi::_LsPrefixV4NLRI_default_instance_._instance.get_mutable()->prefix_descriptor_ = const_cast< ::gobgpapi::LsPrefixDescriptor*>(
      ::gobgpapi::LsPrefixDescriptor::internal_default_instance());
}
class LsPrefixV4NLRI::_Internal {
 public:
  static const ::gobgpapi::LsNodeDescriptor& local_node(const LsPrefixV4NLRI* msg);
  static const ::gobgpapi::LsPrefixDescriptor& prefix_descriptor(const LsPrefixV4NLRI* msg);
};

const ::gobgpapi::LsNodeDescriptor&
LsPrefixV4NLRI::_Internal::local_node(const LsPrefixV4NLRI* msg) {
  return *msg->local_node_;
}
const ::gobgpapi::LsPrefixDescriptor&
LsPrefixV4NLRI::_Internal::prefix_descriptor(const LsPrefixV4NLRI* msg) {
  return *msg->prefix_descriptor_;
}
LsPrefixV4NLRI::LsPrefixV4NLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsPrefixV4NLRI)
}
LsPrefixV4NLRI::LsPrefixV4NLRI(const LsPrefixV4NLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::gobgpapi::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  if (from._internal_has_prefix_descriptor()) {
    prefix_descriptor_ = new ::gobgpapi::LsPrefixDescriptor(*from.prefix_descriptor_);
  } else {
    prefix_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsPrefixV4NLRI)
}

void LsPrefixV4NLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsPrefixV4NLRI_attribute_2eproto.base);
  ::memset(&local_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_descriptor_) -
      reinterpret_cast<char*>(&local_node_)) + sizeof(prefix_descriptor_));
}

LsPrefixV4NLRI::~LsPrefixV4NLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsPrefixV4NLRI)
  SharedDtor();
}

void LsPrefixV4NLRI::SharedDtor() {
  if (this != internal_default_instance()) delete local_node_;
  if (this != internal_default_instance()) delete prefix_descriptor_;
}

void LsPrefixV4NLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsPrefixV4NLRI& LsPrefixV4NLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsPrefixV4NLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsPrefixV4NLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsPrefixV4NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LsPrefixV4NLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsPrefixV4NLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsPrefixV4NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefix_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsPrefixV4NLRI)
  return target;
}

size_t LsPrefixV4NLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsPrefixV4NLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_descriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsPrefixV4NLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsPrefixV4NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsPrefixV4NLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsPrefixV4NLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsPrefixV4NLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsPrefixV4NLRI)
    MergeFrom(*source);
  }
}

void LsPrefixV4NLRI::MergeFrom(const LsPrefixV4NLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsPrefixV4NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::gobgpapi::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
  if (from.has_prefix_descriptor()) {
    _internal_mutable_prefix_descriptor()->::gobgpapi::LsPrefixDescriptor::MergeFrom(from._internal_prefix_descriptor());
  }
}

void LsPrefixV4NLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsPrefixV4NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsPrefixV4NLRI::CopyFrom(const LsPrefixV4NLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsPrefixV4NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsPrefixV4NLRI::IsInitialized() const {
  return true;
}

void LsPrefixV4NLRI::InternalSwap(LsPrefixV4NLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_node_, other->local_node_);
  swap(prefix_descriptor_, other->prefix_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsPrefixV4NLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsPrefixV6NLRI::InitAsDefaultInstance() {
  ::gobgpapi::_LsPrefixV6NLRI_default_instance_._instance.get_mutable()->local_node_ = const_cast< ::gobgpapi::LsNodeDescriptor*>(
      ::gobgpapi::LsNodeDescriptor::internal_default_instance());
  ::gobgpapi::_LsPrefixV6NLRI_default_instance_._instance.get_mutable()->prefix_descriptor_ = const_cast< ::gobgpapi::LsPrefixDescriptor*>(
      ::gobgpapi::LsPrefixDescriptor::internal_default_instance());
}
class LsPrefixV6NLRI::_Internal {
 public:
  static const ::gobgpapi::LsNodeDescriptor& local_node(const LsPrefixV6NLRI* msg);
  static const ::gobgpapi::LsPrefixDescriptor& prefix_descriptor(const LsPrefixV6NLRI* msg);
};

const ::gobgpapi::LsNodeDescriptor&
LsPrefixV6NLRI::_Internal::local_node(const LsPrefixV6NLRI* msg) {
  return *msg->local_node_;
}
const ::gobgpapi::LsPrefixDescriptor&
LsPrefixV6NLRI::_Internal::prefix_descriptor(const LsPrefixV6NLRI* msg) {
  return *msg->prefix_descriptor_;
}
LsPrefixV6NLRI::LsPrefixV6NLRI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsPrefixV6NLRI)
}
LsPrefixV6NLRI::LsPrefixV6NLRI(const LsPrefixV6NLRI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_node()) {
    local_node_ = new ::gobgpapi::LsNodeDescriptor(*from.local_node_);
  } else {
    local_node_ = nullptr;
  }
  if (from._internal_has_prefix_descriptor()) {
    prefix_descriptor_ = new ::gobgpapi::LsPrefixDescriptor(*from.prefix_descriptor_);
  } else {
    prefix_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsPrefixV6NLRI)
}

void LsPrefixV6NLRI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsPrefixV6NLRI_attribute_2eproto.base);
  ::memset(&local_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_descriptor_) -
      reinterpret_cast<char*>(&local_node_)) + sizeof(prefix_descriptor_));
}

LsPrefixV6NLRI::~LsPrefixV6NLRI() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsPrefixV6NLRI)
  SharedDtor();
}

void LsPrefixV6NLRI::SharedDtor() {
  if (this != internal_default_instance()) delete local_node_;
  if (this != internal_default_instance()) delete prefix_descriptor_;
}

void LsPrefixV6NLRI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsPrefixV6NLRI& LsPrefixV6NLRI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsPrefixV6NLRI_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsPrefixV6NLRI::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsPrefixV6NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_node_ != nullptr) {
    delete local_node_;
  }
  local_node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prefix_descriptor_ != nullptr) {
    delete prefix_descriptor_;
  }
  prefix_descriptor_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LsPrefixV6NLRI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LsNodeDescriptor local_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsPrefixV6NLRI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsPrefixV6NLRI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::local_node(this), target, stream);
  }

  // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefix_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsPrefixV6NLRI)
  return target;
}

size_t LsPrefixV6NLRI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsPrefixV6NLRI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.LsNodeDescriptor local_node = 1;
  if (this->has_local_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_node_);
  }

  // .gobgpapi.LsPrefixDescriptor prefix_descriptor = 2;
  if (this->has_prefix_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_descriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsPrefixV6NLRI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsPrefixV6NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  const LsPrefixV6NLRI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsPrefixV6NLRI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsPrefixV6NLRI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsPrefixV6NLRI)
    MergeFrom(*source);
  }
}

void LsPrefixV6NLRI::MergeFrom(const LsPrefixV6NLRI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsPrefixV6NLRI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_node()) {
    _internal_mutable_local_node()->::gobgpapi::LsNodeDescriptor::MergeFrom(from._internal_local_node());
  }
  if (from.has_prefix_descriptor()) {
    _internal_mutable_prefix_descriptor()->::gobgpapi::LsPrefixDescriptor::MergeFrom(from._internal_prefix_descriptor());
  }
}

void LsPrefixV6NLRI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsPrefixV6NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsPrefixV6NLRI::CopyFrom(const LsPrefixV6NLRI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsPrefixV6NLRI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsPrefixV6NLRI::IsInitialized() const {
  return true;
}

void LsPrefixV6NLRI::InternalSwap(LsPrefixV6NLRI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_node_, other->local_node_);
  swap(prefix_descriptor_, other->prefix_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsPrefixV6NLRI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAddrPrefix::InitAsDefaultInstance() {
  ::gobgpapi::_LsAddrPrefix_default_instance_._instance.get_mutable()->nlri_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class LsAddrPrefix::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& nlri(const LsAddrPrefix* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
LsAddrPrefix::_Internal::nlri(const LsAddrPrefix* msg) {
  return *msg->nlri_;
}
void LsAddrPrefix::clear_nlri() {
  if (GetArenaNoVirtual() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
}
LsAddrPrefix::LsAddrPrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsAddrPrefix)
}
LsAddrPrefix::LsAddrPrefix(const LsAddrPrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_nlri()) {
    nlri_ = new PROTOBUF_NAMESPACE_ID::Any(*from.nlri_);
  } else {
    nlri_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsAddrPrefix)
}

void LsAddrPrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAddrPrefix_attribute_2eproto.base);
  ::memset(&nlri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&nlri_)) + sizeof(type_));
}

LsAddrPrefix::~LsAddrPrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsAddrPrefix)
  SharedDtor();
}

void LsAddrPrefix::SharedDtor() {
  if (this != internal_default_instance()) delete nlri_;
}

void LsAddrPrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAddrPrefix& LsAddrPrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAddrPrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAddrPrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsAddrPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* LsAddrPrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LsNLRIType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::gobgpapi::LsNLRIType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any nlri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nlri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAddrPrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsAddrPrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LsNLRIType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Any nlri = 2;
  if (this->has_nlri()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nlri(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsAddrPrefix)
  return target;
}

size_t LsAddrPrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsAddrPrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any nlri = 2;
  if (this->has_nlri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nlri_);
  }

  // .gobgpapi.LsNLRIType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAddrPrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsAddrPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAddrPrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAddrPrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsAddrPrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsAddrPrefix)
    MergeFrom(*source);
  }
}

void LsAddrPrefix::MergeFrom(const LsAddrPrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsAddrPrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nlri()) {
    _internal_mutable_nlri()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_nlri());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LsAddrPrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsAddrPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAddrPrefix::CopyFrom(const LsAddrPrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsAddrPrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAddrPrefix::IsInitialized() const {
  return true;
}

void LsAddrPrefix::InternalSwap(LsAddrPrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(nlri_, other->nlri_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAddrPrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpReachNLRIAttribute::InitAsDefaultInstance() {
  ::gobgpapi::_MpReachNLRIAttribute_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class MpReachNLRIAttribute::_Internal {
 public:
  static const ::gobgpapi::Family& family(const MpReachNLRIAttribute* msg);
};

const ::gobgpapi::Family&
MpReachNLRIAttribute::_Internal::family(const MpReachNLRIAttribute* msg) {
  return *msg->family_;
}
void MpReachNLRIAttribute::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
void MpReachNLRIAttribute::clear_nlris() {
  nlris_.Clear();
}
MpReachNLRIAttribute::MpReachNLRIAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpReachNLRIAttribute)
}
MpReachNLRIAttribute::MpReachNLRIAttribute(const MpReachNLRIAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      next_hops_(from.next_hops_),
      nlris_(from.nlris_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpReachNLRIAttribute)
}

void MpReachNLRIAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MpReachNLRIAttribute_attribute_2eproto.base);
  family_ = nullptr;
}

MpReachNLRIAttribute::~MpReachNLRIAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpReachNLRIAttribute)
  SharedDtor();
}

void MpReachNLRIAttribute::SharedDtor() {
  if (this != internal_default_instance()) delete family_;
}

void MpReachNLRIAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpReachNLRIAttribute& MpReachNLRIAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpReachNLRIAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MpReachNLRIAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpReachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_hops_.Clear();
  nlris_.Clear();
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MpReachNLRIAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string next_hops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_next_hops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.MpReachNLRIAttribute.next_hops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any nlris = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nlris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpReachNLRIAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpReachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // repeated string next_hops = 2;
  for (int i = 0, n = this->_internal_next_hops_size(); i < n; i++) {
    const auto& s = this->_internal_next_hops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MpReachNLRIAttribute.next_hops");
    target = stream->WriteString(2, s, target);
  }

  // repeated .google.protobuf.Any nlris = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nlris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nlris(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpReachNLRIAttribute)
  return target;
}

size_t MpReachNLRIAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpReachNLRIAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string next_hops = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(next_hops_.size());
  for (int i = 0, n = next_hops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      next_hops_.Get(i));
  }

  // repeated .google.protobuf.Any nlris = 3;
  total_size += 1UL * this->_internal_nlris_size();
  for (const auto& msg : this->nlris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpReachNLRIAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpReachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MpReachNLRIAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpReachNLRIAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpReachNLRIAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpReachNLRIAttribute)
    MergeFrom(*source);
  }
}

void MpReachNLRIAttribute::MergeFrom(const MpReachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpReachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_hops_.MergeFrom(from.next_hops_);
  nlris_.MergeFrom(from.nlris_);
  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
}

void MpReachNLRIAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpReachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpReachNLRIAttribute::CopyFrom(const MpReachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpReachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpReachNLRIAttribute::IsInitialized() const {
  return true;
}

void MpReachNLRIAttribute::InternalSwap(MpReachNLRIAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  next_hops_.InternalSwap(&other->next_hops_);
  nlris_.InternalSwap(&other->nlris_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpReachNLRIAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MpUnreachNLRIAttribute::InitAsDefaultInstance() {
  ::gobgpapi::_MpUnreachNLRIAttribute_default_instance_._instance.get_mutable()->family_ = const_cast< ::gobgpapi::Family*>(
      ::gobgpapi::Family::internal_default_instance());
}
class MpUnreachNLRIAttribute::_Internal {
 public:
  static const ::gobgpapi::Family& family(const MpUnreachNLRIAttribute* msg);
};

const ::gobgpapi::Family&
MpUnreachNLRIAttribute::_Internal::family(const MpUnreachNLRIAttribute* msg) {
  return *msg->family_;
}
void MpUnreachNLRIAttribute::clear_family() {
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
}
void MpUnreachNLRIAttribute::clear_nlris() {
  nlris_.Clear();
}
MpUnreachNLRIAttribute::MpUnreachNLRIAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MpUnreachNLRIAttribute)
}
MpUnreachNLRIAttribute::MpUnreachNLRIAttribute(const MpUnreachNLRIAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nlris_(from.nlris_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_family()) {
    family_ = new ::gobgpapi::Family(*from.family_);
  } else {
    family_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MpUnreachNLRIAttribute)
}

void MpUnreachNLRIAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MpUnreachNLRIAttribute_attribute_2eproto.base);
  family_ = nullptr;
}

MpUnreachNLRIAttribute::~MpUnreachNLRIAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.MpUnreachNLRIAttribute)
  SharedDtor();
}

void MpUnreachNLRIAttribute::SharedDtor() {
  if (this != internal_default_instance()) delete family_;
}

void MpUnreachNLRIAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MpUnreachNLRIAttribute& MpUnreachNLRIAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MpUnreachNLRIAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void MpUnreachNLRIAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MpUnreachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nlris_.Clear();
  if (GetArenaNoVirtual() == nullptr && family_ != nullptr) {
    delete family_;
  }
  family_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MpUnreachNLRIAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.Family family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_family(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any nlris = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nlris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MpUnreachNLRIAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MpUnreachNLRIAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::family(this), target, stream);
  }

  // repeated .google.protobuf.Any nlris = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nlris_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_nlris(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MpUnreachNLRIAttribute)
  return target;
}

size_t MpUnreachNLRIAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MpUnreachNLRIAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any nlris = 3;
  total_size += 1UL * this->_internal_nlris_size();
  for (const auto& msg : this->nlris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gobgpapi.Family family = 1;
  if (this->has_family()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *family_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MpUnreachNLRIAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MpUnreachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MpUnreachNLRIAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MpUnreachNLRIAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MpUnreachNLRIAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MpUnreachNLRIAttribute)
    MergeFrom(*source);
  }
}

void MpUnreachNLRIAttribute::MergeFrom(const MpUnreachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MpUnreachNLRIAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nlris_.MergeFrom(from.nlris_);
  if (from.has_family()) {
    _internal_mutable_family()->::gobgpapi::Family::MergeFrom(from._internal_family());
  }
}

void MpUnreachNLRIAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MpUnreachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpUnreachNLRIAttribute::CopyFrom(const MpUnreachNLRIAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MpUnreachNLRIAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpUnreachNLRIAttribute::IsInitialized() const {
  return true;
}

void MpUnreachNLRIAttribute::InternalSwap(MpUnreachNLRIAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nlris_.InternalSwap(&other->nlris_);
  swap(family_, other->family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MpUnreachNLRIAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TwoOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class TwoOctetAsSpecificExtended::_Internal {
 public:
};

TwoOctetAsSpecificExtended::TwoOctetAsSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TwoOctetAsSpecificExtended)
}
TwoOctetAsSpecificExtended::TwoOctetAsSpecificExtended(const TwoOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TwoOctetAsSpecificExtended)
}

void TwoOctetAsSpecificExtended::SharedCtor() {
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

TwoOctetAsSpecificExtended::~TwoOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.TwoOctetAsSpecificExtended)
  SharedDtor();
}

void TwoOctetAsSpecificExtended::SharedDtor() {
}

void TwoOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwoOctetAsSpecificExtended& TwoOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwoOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TwoOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear();
}

const char* TwoOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 as = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TwoOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // uint32 as = 3;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_as(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TwoOctetAsSpecificExtended)
  return target;
}

size_t TwoOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TwoOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 as = 3;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwoOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwoOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TwoOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TwoOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void TwoOctetAsSpecificExtended::MergeFrom(const TwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void TwoOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoOctetAsSpecificExtended::CopyFrom(const TwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void TwoOctetAsSpecificExtended::InternalSwap(TwoOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_transitive_, other->is_transitive_);
  swap(sub_type_, other->sub_type_);
  swap(as_, other->as_);
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPv4AddressSpecificExtended::InitAsDefaultInstance() {
}
class IPv4AddressSpecificExtended::_Internal {
 public:
};

IPv4AddressSpecificExtended::IPv4AddressSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IPv4AddressSpecificExtended)
}
IPv4AddressSpecificExtended::IPv4AddressSpecificExtended(const IPv4AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IPv4AddressSpecificExtended)
}

void IPv4AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPv4AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

IPv4AddressSpecificExtended::~IPv4AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.IPv4AddressSpecificExtended)
  SharedDtor();
}

void IPv4AddressSpecificExtended::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv4AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPv4AddressSpecificExtended& IPv4AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPv4AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void IPv4AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear();
}

const char* IPv4AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.IPv4AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv4AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.IPv4AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IPv4AddressSpecificExtended)
  return target;
}

size_t IPv4AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IPv4AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv4AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv4AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPv4AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IPv4AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IPv4AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void IPv4AddressSpecificExtended::MergeFrom(const IPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void IPv4AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv4AddressSpecificExtended::CopyFrom(const IPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4AddressSpecificExtended::IsInitialized() const {
  return true;
}

void IPv4AddressSpecificExtended::InternalSwap(IPv4AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_transitive_, other->is_transitive_);
  swap(sub_type_, other->sub_type_);
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv4AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FourOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class FourOctetAsSpecificExtended::_Internal {
 public:
};

FourOctetAsSpecificExtended::FourOctetAsSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.FourOctetAsSpecificExtended)
}
FourOctetAsSpecificExtended::FourOctetAsSpecificExtended(const FourOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.FourOctetAsSpecificExtended)
}

void FourOctetAsSpecificExtended::SharedCtor() {
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

FourOctetAsSpecificExtended::~FourOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.FourOctetAsSpecificExtended)
  SharedDtor();
}

void FourOctetAsSpecificExtended::SharedDtor() {
}

void FourOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FourOctetAsSpecificExtended& FourOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FourOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void FourOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.FourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear();
}

const char* FourOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 as = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FourOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.FourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // uint32 as = 3;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_as(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.FourOctetAsSpecificExtended)
  return target;
}

size_t FourOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.FourOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 as = 3;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FourOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.FourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const FourOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FourOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.FourOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.FourOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void FourOctetAsSpecificExtended::MergeFrom(const FourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.FourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void FourOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.FourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FourOctetAsSpecificExtended::CopyFrom(const FourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.FourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void FourOctetAsSpecificExtended::InternalSwap(FourOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_transitive_, other->is_transitive_);
  swap(sub_type_, other->sub_type_);
  swap(as_, other->as_);
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FourOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidationExtended::InitAsDefaultInstance() {
}
class ValidationExtended::_Internal {
 public:
};

ValidationExtended::ValidationExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ValidationExtended)
}
ValidationExtended::ValidationExtended(const ValidationExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ValidationExtended)
}

void ValidationExtended::SharedCtor() {
  state_ = 0u;
}

ValidationExtended::~ValidationExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.ValidationExtended)
  SharedDtor();
}

void ValidationExtended::SharedDtor() {
}

void ValidationExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationExtended& ValidationExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidationExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void ValidationExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ValidationExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0u;
  _internal_metadata_.Clear();
}

const char* ValidationExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidationExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ValidationExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ValidationExtended)
  return target;
}

size_t ValidationExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ValidationExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ValidationExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidationExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidationExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ValidationExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ValidationExtended)
    MergeFrom(*source);
  }
}

void ValidationExtended::MergeFrom(const ValidationExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ValidationExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void ValidationExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ValidationExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidationExtended::CopyFrom(const ValidationExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ValidationExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationExtended::IsInitialized() const {
  return true;
}

void ValidationExtended::InternalSwap(ValidationExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidationExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ColorExtended::InitAsDefaultInstance() {
}
class ColorExtended::_Internal {
 public:
};

ColorExtended::ColorExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ColorExtended)
}
ColorExtended::ColorExtended(const ColorExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ColorExtended)
}

void ColorExtended::SharedCtor() {
  color_ = 0u;
}

ColorExtended::~ColorExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.ColorExtended)
  SharedDtor();
}

void ColorExtended::SharedDtor() {
}

void ColorExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorExtended& ColorExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void ColorExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ColorExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _internal_metadata_.Clear();
}

const char* ColorExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ColorExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ColorExtended)
  return target;
}

size_t ColorExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ColorExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ColorExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const ColorExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColorExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ColorExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ColorExtended)
    MergeFrom(*source);
  }
}

void ColorExtended::MergeFrom(const ColorExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ColorExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void ColorExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ColorExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorExtended::CopyFrom(const ColorExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ColorExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorExtended::IsInitialized() const {
  return true;
}

void ColorExtended::InternalSwap(ColorExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncapExtended::InitAsDefaultInstance() {
}
class EncapExtended::_Internal {
 public:
};

EncapExtended::EncapExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EncapExtended)
}
EncapExtended::EncapExtended(const EncapExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tunnel_type_ = from.tunnel_type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EncapExtended)
}

void EncapExtended::SharedCtor() {
  tunnel_type_ = 0u;
}

EncapExtended::~EncapExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.EncapExtended)
  SharedDtor();
}

void EncapExtended::SharedDtor() {
}

void EncapExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncapExtended& EncapExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncapExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void EncapExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.EncapExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tunnel_type_ = 0u;
  _internal_metadata_.Clear();
}

const char* EncapExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tunnel_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tunnel_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncapExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EncapExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tunnel_type = 1;
  if (this->tunnel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tunnel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EncapExtended)
  return target;
}

size_t EncapExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.EncapExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tunnel_type = 1;
  if (this->tunnel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tunnel_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncapExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.EncapExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const EncapExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncapExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.EncapExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.EncapExtended)
    MergeFrom(*source);
  }
}

void EncapExtended::MergeFrom(const EncapExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.EncapExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tunnel_type() != 0) {
    _internal_set_tunnel_type(from._internal_tunnel_type());
  }
}

void EncapExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.EncapExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncapExtended::CopyFrom(const EncapExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.EncapExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncapExtended::IsInitialized() const {
  return true;
}

void EncapExtended::InternalSwap(EncapExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tunnel_type_, other->tunnel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncapExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefaultGatewayExtended::InitAsDefaultInstance() {
}
class DefaultGatewayExtended::_Internal {
 public:
};

DefaultGatewayExtended::DefaultGatewayExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DefaultGatewayExtended)
}
DefaultGatewayExtended::DefaultGatewayExtended(const DefaultGatewayExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DefaultGatewayExtended)
}

void DefaultGatewayExtended::SharedCtor() {
}

DefaultGatewayExtended::~DefaultGatewayExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.DefaultGatewayExtended)
  SharedDtor();
}

void DefaultGatewayExtended::SharedDtor() {
}

void DefaultGatewayExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultGatewayExtended& DefaultGatewayExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultGatewayExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void DefaultGatewayExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.DefaultGatewayExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DefaultGatewayExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultGatewayExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DefaultGatewayExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DefaultGatewayExtended)
  return target;
}

size_t DefaultGatewayExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.DefaultGatewayExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultGatewayExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.DefaultGatewayExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultGatewayExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultGatewayExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.DefaultGatewayExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.DefaultGatewayExtended)
    MergeFrom(*source);
  }
}

void DefaultGatewayExtended::MergeFrom(const DefaultGatewayExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.DefaultGatewayExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DefaultGatewayExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.DefaultGatewayExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultGatewayExtended::CopyFrom(const DefaultGatewayExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.DefaultGatewayExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultGatewayExtended::IsInitialized() const {
  return true;
}

void DefaultGatewayExtended::InternalSwap(DefaultGatewayExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultGatewayExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpaqueExtended::InitAsDefaultInstance() {
}
class OpaqueExtended::_Internal {
 public:
};

OpaqueExtended::OpaqueExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.OpaqueExtended)
}
OpaqueExtended::OpaqueExtended(const OpaqueExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  is_transitive_ = from.is_transitive_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.OpaqueExtended)
}

void OpaqueExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpaqueExtended_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_transitive_ = false;
}

OpaqueExtended::~OpaqueExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.OpaqueExtended)
  SharedDtor();
}

void OpaqueExtended::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpaqueExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpaqueExtended& OpaqueExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpaqueExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void OpaqueExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.OpaqueExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_transitive_ = false;
  _internal_metadata_.Clear();
}

const char* OpaqueExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpaqueExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.OpaqueExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.OpaqueExtended)
  return target;
}

size_t OpaqueExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.OpaqueExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpaqueExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.OpaqueExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const OpaqueExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpaqueExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.OpaqueExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.OpaqueExtended)
    MergeFrom(*source);
  }
}

void OpaqueExtended::MergeFrom(const OpaqueExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.OpaqueExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
}

void OpaqueExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.OpaqueExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpaqueExtended::CopyFrom(const OpaqueExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.OpaqueExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpaqueExtended::IsInitialized() const {
  return true;
}

void OpaqueExtended::InternalSwap(OpaqueExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_transitive_, other->is_transitive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpaqueExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ESILabelExtended::InitAsDefaultInstance() {
}
class ESILabelExtended::_Internal {
 public:
};

ESILabelExtended::ESILabelExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ESILabelExtended)
}
ESILabelExtended::ESILabelExtended(const ESILabelExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_single_active_, &from.is_single_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&is_single_active_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ESILabelExtended)
}

void ESILabelExtended::SharedCtor() {
  ::memset(&is_single_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&is_single_active_)) + sizeof(label_));
}

ESILabelExtended::~ESILabelExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.ESILabelExtended)
  SharedDtor();
}

void ESILabelExtended::SharedDtor() {
}

void ESILabelExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESILabelExtended& ESILabelExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ESILabelExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void ESILabelExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ESILabelExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_single_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&is_single_active_)) + sizeof(label_));
  _internal_metadata_.Clear();
}

const char* ESILabelExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_single_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_single_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESILabelExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ESILabelExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_single_active = 1;
  if (this->is_single_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_single_active(), target);
  }

  // uint32 label = 2;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ESILabelExtended)
  return target;
}

size_t ESILabelExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ESILabelExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_single_active = 1;
  if (this->is_single_active() != 0) {
    total_size += 1 + 1;
  }

  // uint32 label = 2;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESILabelExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ESILabelExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const ESILabelExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESILabelExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ESILabelExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ESILabelExtended)
    MergeFrom(*source);
  }
}

void ESILabelExtended::MergeFrom(const ESILabelExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ESILabelExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_single_active() != 0) {
    _internal_set_is_single_active(from._internal_is_single_active());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void ESILabelExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ESILabelExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESILabelExtended::CopyFrom(const ESILabelExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ESILabelExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESILabelExtended::IsInitialized() const {
  return true;
}

void ESILabelExtended::InternalSwap(ESILabelExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_single_active_, other->is_single_active_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ESILabelExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ESImportRouteTarget::InitAsDefaultInstance() {
}
class ESImportRouteTarget::_Internal {
 public:
};

ESImportRouteTarget::ESImportRouteTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ESImportRouteTarget)
}
ESImportRouteTarget::ESImportRouteTarget(const ESImportRouteTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  es_import_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_es_import().empty()) {
    es_import_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.es_import_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ESImportRouteTarget)
}

void ESImportRouteTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ESImportRouteTarget_attribute_2eproto.base);
  es_import_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ESImportRouteTarget::~ESImportRouteTarget() {
  // @@protoc_insertion_point(destructor:gobgpapi.ESImportRouteTarget)
  SharedDtor();
}

void ESImportRouteTarget::SharedDtor() {
  es_import_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ESImportRouteTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ESImportRouteTarget& ESImportRouteTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ESImportRouteTarget_attribute_2eproto.base);
  return *internal_default_instance();
}


void ESImportRouteTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ESImportRouteTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  es_import_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ESImportRouteTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string es_import = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_es_import();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.ESImportRouteTarget.es_import"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ESImportRouteTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ESImportRouteTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string es_import = 1;
  if (this->es_import().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_es_import().data(), static_cast<int>(this->_internal_es_import().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ESImportRouteTarget.es_import");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_es_import(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ESImportRouteTarget)
  return target;
}

size_t ESImportRouteTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ESImportRouteTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string es_import = 1;
  if (this->es_import().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_es_import());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ESImportRouteTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ESImportRouteTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ESImportRouteTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ESImportRouteTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ESImportRouteTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ESImportRouteTarget)
    MergeFrom(*source);
  }
}

void ESImportRouteTarget::MergeFrom(const ESImportRouteTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ESImportRouteTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.es_import().size() > 0) {

    es_import_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.es_import_);
  }
}

void ESImportRouteTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ESImportRouteTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ESImportRouteTarget::CopyFrom(const ESImportRouteTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ESImportRouteTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ESImportRouteTarget::IsInitialized() const {
  return true;
}

void ESImportRouteTarget::InternalSwap(ESImportRouteTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  es_import_.Swap(&other->es_import_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ESImportRouteTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MacMobilityExtended::InitAsDefaultInstance() {
}
class MacMobilityExtended::_Internal {
 public:
};

MacMobilityExtended::MacMobilityExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MacMobilityExtended)
}
MacMobilityExtended::MacMobilityExtended(const MacMobilityExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_sticky_, &from.is_sticky_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_num_) -
    reinterpret_cast<char*>(&is_sticky_)) + sizeof(sequence_num_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MacMobilityExtended)
}

void MacMobilityExtended::SharedCtor() {
  ::memset(&is_sticky_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&is_sticky_)) + sizeof(sequence_num_));
}

MacMobilityExtended::~MacMobilityExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.MacMobilityExtended)
  SharedDtor();
}

void MacMobilityExtended::SharedDtor() {
}

void MacMobilityExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MacMobilityExtended& MacMobilityExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MacMobilityExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void MacMobilityExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.MacMobilityExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_sticky_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&is_sticky_)) + sizeof(sequence_num_));
  _internal_metadata_.Clear();
}

const char* MacMobilityExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_sticky = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MacMobilityExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MacMobilityExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_sticky = 1;
  if (this->is_sticky() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_sticky(), target);
  }

  // uint32 sequence_num = 2;
  if (this->sequence_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MacMobilityExtended)
  return target;
}

size_t MacMobilityExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.MacMobilityExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_sticky = 1;
  if (this->is_sticky() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sequence_num = 2;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MacMobilityExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.MacMobilityExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const MacMobilityExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MacMobilityExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.MacMobilityExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.MacMobilityExtended)
    MergeFrom(*source);
  }
}

void MacMobilityExtended::MergeFrom(const MacMobilityExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.MacMobilityExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_sticky() != 0) {
    _internal_set_is_sticky(from._internal_is_sticky());
  }
  if (from.sequence_num() != 0) {
    _internal_set_sequence_num(from._internal_sequence_num());
  }
}

void MacMobilityExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.MacMobilityExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacMobilityExtended::CopyFrom(const MacMobilityExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.MacMobilityExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacMobilityExtended::IsInitialized() const {
  return true;
}

void MacMobilityExtended::InternalSwap(MacMobilityExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_sticky_, other->is_sticky_);
  swap(sequence_num_, other->sequence_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MacMobilityExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouterMacExtended::InitAsDefaultInstance() {
}
class RouterMacExtended::_Internal {
 public:
};

RouterMacExtended::RouterMacExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouterMacExtended)
}
RouterMacExtended::RouterMacExtended(const RouterMacExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac().empty()) {
    mac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouterMacExtended)
}

void RouterMacExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouterMacExtended_attribute_2eproto.base);
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RouterMacExtended::~RouterMacExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouterMacExtended)
  SharedDtor();
}

void RouterMacExtended::SharedDtor() {
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouterMacExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouterMacExtended& RouterMacExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouterMacExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RouterMacExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RouterMacExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RouterMacExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mac = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.RouterMacExtended.mac"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouterMacExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouterMacExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mac = 1;
  if (this->mac().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RouterMacExtended.mac");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouterMacExtended)
  return target;
}

size_t RouterMacExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RouterMacExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mac = 1;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouterMacExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RouterMacExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RouterMacExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouterMacExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RouterMacExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RouterMacExtended)
    MergeFrom(*source);
  }
}

void RouterMacExtended::MergeFrom(const RouterMacExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RouterMacExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
}

void RouterMacExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RouterMacExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterMacExtended::CopyFrom(const RouterMacExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RouterMacExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterMacExtended::IsInitialized() const {
  return true;
}

void RouterMacExtended::InternalSwap(RouterMacExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mac_.Swap(&other->mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterMacExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRateExtended::InitAsDefaultInstance() {
}
class TrafficRateExtended::_Internal {
 public:
};

TrafficRateExtended::TrafficRateExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TrafficRateExtended)
}
TrafficRateExtended::TrafficRateExtended(const TrafficRateExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&as_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TrafficRateExtended)
}

void TrafficRateExtended::SharedCtor() {
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&as_)) + sizeof(rate_));
}

TrafficRateExtended::~TrafficRateExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.TrafficRateExtended)
  SharedDtor();
}

void TrafficRateExtended::SharedDtor() {
}

void TrafficRateExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRateExtended& TrafficRateExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRateExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TrafficRateExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TrafficRateExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&as_)) + sizeof(rate_));
  _internal_metadata_.Clear();
}

const char* TrafficRateExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRateExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TrafficRateExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_as(), target);
  }

  // float rate = 2;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TrafficRateExtended)
  return target;
}

size_t TrafficRateExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TrafficRateExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  // float rate = 2;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRateExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TrafficRateExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRateExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRateExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TrafficRateExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TrafficRateExtended)
    MergeFrom(*source);
  }
}

void TrafficRateExtended::MergeFrom(const TrafficRateExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TrafficRateExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
}

void TrafficRateExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TrafficRateExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRateExtended::CopyFrom(const TrafficRateExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TrafficRateExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRateExtended::IsInitialized() const {
  return true;
}

void TrafficRateExtended::InternalSwap(TrafficRateExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(as_, other->as_);
  swap(rate_, other->rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRateExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficActionExtended::InitAsDefaultInstance() {
}
class TrafficActionExtended::_Internal {
 public:
};

TrafficActionExtended::TrafficActionExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TrafficActionExtended)
}
TrafficActionExtended::TrafficActionExtended(const TrafficActionExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&terminal_, &from.terminal_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_) -
    reinterpret_cast<char*>(&terminal_)) + sizeof(sample_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TrafficActionExtended)
}

void TrafficActionExtended::SharedCtor() {
  ::memset(&terminal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_) -
      reinterpret_cast<char*>(&terminal_)) + sizeof(sample_));
}

TrafficActionExtended::~TrafficActionExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.TrafficActionExtended)
  SharedDtor();
}

void TrafficActionExtended::SharedDtor() {
}

void TrafficActionExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficActionExtended& TrafficActionExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficActionExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TrafficActionExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TrafficActionExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&terminal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_) -
      reinterpret_cast<char*>(&terminal_)) + sizeof(sample_));
  _internal_metadata_.Clear();
}

const char* TrafficActionExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool terminal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          terminal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sample = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficActionExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TrafficActionExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool terminal = 1;
  if (this->terminal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_terminal(), target);
  }

  // bool sample = 2;
  if (this->sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_sample(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TrafficActionExtended)
  return target;
}

size_t TrafficActionExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TrafficActionExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool terminal = 1;
  if (this->terminal() != 0) {
    total_size += 1 + 1;
  }

  // bool sample = 2;
  if (this->sample() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficActionExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TrafficActionExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficActionExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficActionExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TrafficActionExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TrafficActionExtended)
    MergeFrom(*source);
  }
}

void TrafficActionExtended::MergeFrom(const TrafficActionExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TrafficActionExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.terminal() != 0) {
    _internal_set_terminal(from._internal_terminal());
  }
  if (from.sample() != 0) {
    _internal_set_sample(from._internal_sample());
  }
}

void TrafficActionExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TrafficActionExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficActionExtended::CopyFrom(const TrafficActionExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TrafficActionExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficActionExtended::IsInitialized() const {
  return true;
}

void TrafficActionExtended::InternalSwap(TrafficActionExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(terminal_, other->terminal_);
  swap(sample_, other->sample_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficActionExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectTwoOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class RedirectTwoOctetAsSpecificExtended::_Internal {
 public:
};

RedirectTwoOctetAsSpecificExtended::RedirectTwoOctetAsSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RedirectTwoOctetAsSpecificExtended)
}
RedirectTwoOctetAsSpecificExtended::RedirectTwoOctetAsSpecificExtended(const RedirectTwoOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&as_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RedirectTwoOctetAsSpecificExtended)
}

void RedirectTwoOctetAsSpecificExtended::SharedCtor() {
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&as_)) + sizeof(local_admin_));
}

RedirectTwoOctetAsSpecificExtended::~RedirectTwoOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  SharedDtor();
}

void RedirectTwoOctetAsSpecificExtended::SharedDtor() {
}

void RedirectTwoOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectTwoOctetAsSpecificExtended& RedirectTwoOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectTwoOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectTwoOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&as_)) + sizeof(local_admin_));
  _internal_metadata_.Clear();
}

const char* RedirectTwoOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectTwoOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_as(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  return target;
}

size_t RedirectTwoOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectTwoOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectTwoOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectTwoOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RedirectTwoOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RedirectTwoOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectTwoOctetAsSpecificExtended::MergeFrom(const RedirectTwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectTwoOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectTwoOctetAsSpecificExtended::CopyFrom(const RedirectTwoOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RedirectTwoOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectTwoOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectTwoOctetAsSpecificExtended::InternalSwap(RedirectTwoOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(as_, other->as_);
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectTwoOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectIPv4AddressSpecificExtended::InitAsDefaultInstance() {
}
class RedirectIPv4AddressSpecificExtended::_Internal {
 public:
};

RedirectIPv4AddressSpecificExtended::RedirectIPv4AddressSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RedirectIPv4AddressSpecificExtended)
}
RedirectIPv4AddressSpecificExtended::RedirectIPv4AddressSpecificExtended(const RedirectIPv4AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  local_admin_ = from.local_admin_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RedirectIPv4AddressSpecificExtended)
}

void RedirectIPv4AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_admin_ = 0u;
}

RedirectIPv4AddressSpecificExtended::~RedirectIPv4AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.RedirectIPv4AddressSpecificExtended)
  SharedDtor();
}

void RedirectIPv4AddressSpecificExtended::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedirectIPv4AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectIPv4AddressSpecificExtended& RedirectIPv4AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectIPv4AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectIPv4AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RedirectIPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_admin_ = 0u;
  _internal_metadata_.Clear();
}

const char* RedirectIPv4AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.RedirectIPv4AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectIPv4AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RedirectIPv4AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RedirectIPv4AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RedirectIPv4AddressSpecificExtended)
  return target;
}

size_t RedirectIPv4AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RedirectIPv4AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectIPv4AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RedirectIPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectIPv4AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectIPv4AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RedirectIPv4AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RedirectIPv4AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectIPv4AddressSpecificExtended::MergeFrom(const RedirectIPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RedirectIPv4AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectIPv4AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RedirectIPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectIPv4AddressSpecificExtended::CopyFrom(const RedirectIPv4AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RedirectIPv4AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectIPv4AddressSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectIPv4AddressSpecificExtended::InternalSwap(RedirectIPv4AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectIPv4AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectFourOctetAsSpecificExtended::InitAsDefaultInstance() {
}
class RedirectFourOctetAsSpecificExtended::_Internal {
 public:
};

RedirectFourOctetAsSpecificExtended::RedirectFourOctetAsSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RedirectFourOctetAsSpecificExtended)
}
RedirectFourOctetAsSpecificExtended::RedirectFourOctetAsSpecificExtended(const RedirectFourOctetAsSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&as_, &from.as_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&as_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RedirectFourOctetAsSpecificExtended)
}

void RedirectFourOctetAsSpecificExtended::SharedCtor() {
  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&as_)) + sizeof(local_admin_));
}

RedirectFourOctetAsSpecificExtended::~RedirectFourOctetAsSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.RedirectFourOctetAsSpecificExtended)
  SharedDtor();
}

void RedirectFourOctetAsSpecificExtended::SharedDtor() {
}

void RedirectFourOctetAsSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectFourOctetAsSpecificExtended& RedirectFourOctetAsSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectFourOctetAsSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectFourOctetAsSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RedirectFourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&as_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&as_)) + sizeof(local_admin_));
  _internal_metadata_.Clear();
}

const char* RedirectFourOctetAsSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectFourOctetAsSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RedirectFourOctetAsSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_as(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RedirectFourOctetAsSpecificExtended)
  return target;
}

size_t RedirectFourOctetAsSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RedirectFourOctetAsSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectFourOctetAsSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RedirectFourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectFourOctetAsSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectFourOctetAsSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RedirectFourOctetAsSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RedirectFourOctetAsSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectFourOctetAsSpecificExtended::MergeFrom(const RedirectFourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RedirectFourOctetAsSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectFourOctetAsSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RedirectFourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectFourOctetAsSpecificExtended::CopyFrom(const RedirectFourOctetAsSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RedirectFourOctetAsSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectFourOctetAsSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectFourOctetAsSpecificExtended::InternalSwap(RedirectFourOctetAsSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(as_, other->as_);
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectFourOctetAsSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRemarkExtended::InitAsDefaultInstance() {
}
class TrafficRemarkExtended::_Internal {
 public:
};

TrafficRemarkExtended::TrafficRemarkExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TrafficRemarkExtended)
}
TrafficRemarkExtended::TrafficRemarkExtended(const TrafficRemarkExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dscp_ = from.dscp_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TrafficRemarkExtended)
}

void TrafficRemarkExtended::SharedCtor() {
  dscp_ = 0u;
}

TrafficRemarkExtended::~TrafficRemarkExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.TrafficRemarkExtended)
  SharedDtor();
}

void TrafficRemarkExtended::SharedDtor() {
}

void TrafficRemarkExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRemarkExtended& TrafficRemarkExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRemarkExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void TrafficRemarkExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TrafficRemarkExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dscp_ = 0u;
  _internal_metadata_.Clear();
}

const char* TrafficRemarkExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 dscp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dscp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRemarkExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TrafficRemarkExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dscp = 1;
  if (this->dscp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dscp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TrafficRemarkExtended)
  return target;
}

size_t TrafficRemarkExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TrafficRemarkExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dscp = 1;
  if (this->dscp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dscp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRemarkExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TrafficRemarkExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRemarkExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRemarkExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TrafficRemarkExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TrafficRemarkExtended)
    MergeFrom(*source);
  }
}

void TrafficRemarkExtended::MergeFrom(const TrafficRemarkExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TrafficRemarkExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dscp() != 0) {
    _internal_set_dscp(from._internal_dscp());
  }
}

void TrafficRemarkExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TrafficRemarkExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRemarkExtended::CopyFrom(const TrafficRemarkExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TrafficRemarkExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRemarkExtended::IsInitialized() const {
  return true;
}

void TrafficRemarkExtended::InternalSwap(TrafficRemarkExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dscp_, other->dscp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRemarkExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnknownExtended::InitAsDefaultInstance() {
}
class UnknownExtended::_Internal {
 public:
};

UnknownExtended::UnknownExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UnknownExtended)
}
UnknownExtended::UnknownExtended(const UnknownExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UnknownExtended)
}

void UnknownExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnknownExtended_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

UnknownExtended::~UnknownExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.UnknownExtended)
  SharedDtor();
}

void UnknownExtended::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnknownExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownExtended& UnknownExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void UnknownExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UnknownExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* UnknownExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UnknownExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UnknownExtended)
  return target;
}

size_t UnknownExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UnknownExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UnknownExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UnknownExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UnknownExtended)
    MergeFrom(*source);
  }
}

void UnknownExtended::MergeFrom(const UnknownExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UnknownExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void UnknownExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UnknownExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownExtended::CopyFrom(const UnknownExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UnknownExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownExtended::IsInitialized() const {
  return true;
}

void UnknownExtended::InternalSwap(UnknownExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtendedCommunitiesAttribute::InitAsDefaultInstance() {
}
class ExtendedCommunitiesAttribute::_Internal {
 public:
};

void ExtendedCommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
ExtendedCommunitiesAttribute::ExtendedCommunitiesAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ExtendedCommunitiesAttribute)
}
ExtendedCommunitiesAttribute::ExtendedCommunitiesAttribute(const ExtendedCommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ExtendedCommunitiesAttribute)
}

void ExtendedCommunitiesAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtendedCommunitiesAttribute_attribute_2eproto.base);
}

ExtendedCommunitiesAttribute::~ExtendedCommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.ExtendedCommunitiesAttribute)
  SharedDtor();
}

void ExtendedCommunitiesAttribute::SharedDtor() {
}

void ExtendedCommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtendedCommunitiesAttribute& ExtendedCommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtendedCommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void ExtendedCommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear();
}

const char* ExtendedCommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtendedCommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ExtendedCommunitiesAttribute)
  return target;
}

size_t ExtendedCommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.ExtendedCommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  total_size += 1UL * this->_internal_communities_size();
  for (const auto& msg : this->communities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtendedCommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendedCommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtendedCommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.ExtendedCommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.ExtendedCommunitiesAttribute)
    MergeFrom(*source);
  }
}

void ExtendedCommunitiesAttribute::MergeFrom(const ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void ExtendedCommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedCommunitiesAttribute::CopyFrom(const ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedCommunitiesAttribute::IsInitialized() const {
  return true;
}

void ExtendedCommunitiesAttribute::InternalSwap(ExtendedCommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedCommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void As4PathAttribute::InitAsDefaultInstance() {
}
class As4PathAttribute::_Internal {
 public:
};

As4PathAttribute::As4PathAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.As4PathAttribute)
}
As4PathAttribute::As4PathAttribute(const As4PathAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.As4PathAttribute)
}

void As4PathAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_As4PathAttribute_attribute_2eproto.base);
}

As4PathAttribute::~As4PathAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.As4PathAttribute)
  SharedDtor();
}

void As4PathAttribute::SharedDtor() {
}

void As4PathAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const As4PathAttribute& As4PathAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_As4PathAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void As4PathAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.As4PathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear();
}

const char* As4PathAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gobgpapi.AsSegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* As4PathAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.As4PathAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.AsSegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.As4PathAttribute)
  return target;
}

size_t As4PathAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.As4PathAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.AsSegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void As4PathAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.As4PathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const As4PathAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<As4PathAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.As4PathAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.As4PathAttribute)
    MergeFrom(*source);
  }
}

void As4PathAttribute::MergeFrom(const As4PathAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.As4PathAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void As4PathAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.As4PathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void As4PathAttribute::CopyFrom(const As4PathAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.As4PathAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool As4PathAttribute::IsInitialized() const {
  return true;
}

void As4PathAttribute::InternalSwap(As4PathAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata As4PathAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void As4AggregatorAttribute::InitAsDefaultInstance() {
}
class As4AggregatorAttribute::_Internal {
 public:
};

As4AggregatorAttribute::As4AggregatorAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.As4AggregatorAttribute)
}
As4AggregatorAttribute::As4AggregatorAttribute(const As4AggregatorAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  as_ = from.as_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.As4AggregatorAttribute)
}

void As4AggregatorAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_As4AggregatorAttribute_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_ = 0u;
}

As4AggregatorAttribute::~As4AggregatorAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.As4AggregatorAttribute)
  SharedDtor();
}

void As4AggregatorAttribute::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void As4AggregatorAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const As4AggregatorAttribute& As4AggregatorAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_As4AggregatorAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void As4AggregatorAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.As4AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_ = 0u;
  _internal_metadata_.Clear();
}

const char* As4AggregatorAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 as = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          as_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.As4AggregatorAttribute.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* As4AggregatorAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.As4AggregatorAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 as = 2;
  if (this->as() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_as(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.As4AggregatorAttribute.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.As4AggregatorAttribute)
  return target;
}

size_t As4AggregatorAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.As4AggregatorAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 as = 2;
  if (this->as() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_as());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void As4AggregatorAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.As4AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const As4AggregatorAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<As4AggregatorAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.As4AggregatorAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.As4AggregatorAttribute)
    MergeFrom(*source);
  }
}

void As4AggregatorAttribute::MergeFrom(const As4AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.As4AggregatorAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.as() != 0) {
    _internal_set_as(from._internal_as());
  }
}

void As4AggregatorAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.As4AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void As4AggregatorAttribute::CopyFrom(const As4AggregatorAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.As4AggregatorAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool As4AggregatorAttribute::IsInitialized() const {
  return true;
}

void As4AggregatorAttribute::InternalSwap(As4AggregatorAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(as_, other->as_);
}

::PROTOBUF_NAMESPACE_ID::Metadata As4AggregatorAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PmsiTunnelAttribute::InitAsDefaultInstance() {
}
class PmsiTunnelAttribute::_Internal {
 public:
};

PmsiTunnelAttribute::PmsiTunnelAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PmsiTunnelAttribute)
}
PmsiTunnelAttribute::PmsiTunnelAttribute(const PmsiTunnelAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&label_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(label_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PmsiTunnelAttribute)
}

void PmsiTunnelAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PmsiTunnelAttribute_attribute_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(label_));
}

PmsiTunnelAttribute::~PmsiTunnelAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.PmsiTunnelAttribute)
  SharedDtor();
}

void PmsiTunnelAttribute::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PmsiTunnelAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PmsiTunnelAttribute& PmsiTunnelAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PmsiTunnelAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void PmsiTunnelAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.PmsiTunnelAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(label_));
  _internal_metadata_.Clear();
}

const char* PmsiTunnelAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PmsiTunnelAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PmsiTunnelAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 label = 3;
  if (this->label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_label(), target);
  }

  // bytes id = 4;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PmsiTunnelAttribute)
  return target;
}

size_t PmsiTunnelAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.PmsiTunnelAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 label = 3;
  if (this->label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PmsiTunnelAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.PmsiTunnelAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const PmsiTunnelAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PmsiTunnelAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.PmsiTunnelAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.PmsiTunnelAttribute)
    MergeFrom(*source);
  }
}

void PmsiTunnelAttribute::MergeFrom(const PmsiTunnelAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.PmsiTunnelAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.label() != 0) {
    _internal_set_label(from._internal_label());
  }
}

void PmsiTunnelAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.PmsiTunnelAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmsiTunnelAttribute::CopyFrom(const PmsiTunnelAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.PmsiTunnelAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmsiTunnelAttribute::IsInitialized() const {
  return true;
}

void PmsiTunnelAttribute::InternalSwap(PmsiTunnelAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
  swap(type_, other->type_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PmsiTunnelAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVEncapsulation::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVEncapsulation::_Internal {
 public:
};

TunnelEncapSubTLVEncapsulation::TunnelEncapSubTLVEncapsulation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TunnelEncapSubTLVEncapsulation)
}
TunnelEncapSubTLVEncapsulation::TunnelEncapSubTLVEncapsulation(const TunnelEncapSubTLVEncapsulation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cookie().empty()) {
    cookie_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cookie_);
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TunnelEncapSubTLVEncapsulation)
}

void TunnelEncapSubTLVEncapsulation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto.base);
  cookie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

TunnelEncapSubTLVEncapsulation::~TunnelEncapSubTLVEncapsulation() {
  // @@protoc_insertion_point(destructor:gobgpapi.TunnelEncapSubTLVEncapsulation)
  SharedDtor();
}

void TunnelEncapSubTLVEncapsulation::SharedDtor() {
  cookie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TunnelEncapSubTLVEncapsulation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVEncapsulation& TunnelEncapSubTLVEncapsulation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVEncapsulation_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVEncapsulation::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TunnelEncapSubTLVEncapsulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cookie_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
  _internal_metadata_.Clear();
}

const char* TunnelEncapSubTLVEncapsulation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cookie();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVEncapsulation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TunnelEncapSubTLVEncapsulation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // bytes cookie = 2;
  if (this->cookie().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_cookie(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TunnelEncapSubTLVEncapsulation)
  return target;
}

size_t TunnelEncapSubTLVEncapsulation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TunnelEncapSubTLVEncapsulation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cookie = 2;
  if (this->cookie().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cookie());
  }

  // uint32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVEncapsulation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TunnelEncapSubTLVEncapsulation)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVEncapsulation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVEncapsulation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TunnelEncapSubTLVEncapsulation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TunnelEncapSubTLVEncapsulation)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVEncapsulation::MergeFrom(const TunnelEncapSubTLVEncapsulation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TunnelEncapSubTLVEncapsulation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cookie().size() > 0) {

    cookie_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cookie_);
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void TunnelEncapSubTLVEncapsulation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TunnelEncapSubTLVEncapsulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVEncapsulation::CopyFrom(const TunnelEncapSubTLVEncapsulation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TunnelEncapSubTLVEncapsulation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVEncapsulation::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVEncapsulation::InternalSwap(TunnelEncapSubTLVEncapsulation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cookie_.Swap(&other->cookie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVEncapsulation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVProtocol::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVProtocol::_Internal {
 public:
};

TunnelEncapSubTLVProtocol::TunnelEncapSubTLVProtocol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TunnelEncapSubTLVProtocol)
}
TunnelEncapSubTLVProtocol::TunnelEncapSubTLVProtocol(const TunnelEncapSubTLVProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TunnelEncapSubTLVProtocol)
}

void TunnelEncapSubTLVProtocol::SharedCtor() {
  protocol_ = 0u;
}

TunnelEncapSubTLVProtocol::~TunnelEncapSubTLVProtocol() {
  // @@protoc_insertion_point(destructor:gobgpapi.TunnelEncapSubTLVProtocol)
  SharedDtor();
}

void TunnelEncapSubTLVProtocol::SharedDtor() {
}

void TunnelEncapSubTLVProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVProtocol& TunnelEncapSubTLVProtocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVProtocol_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TunnelEncapSubTLVProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_ = 0u;
  _internal_metadata_.Clear();
}

const char* TunnelEncapSubTLVProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TunnelEncapSubTLVProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocol = 1;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TunnelEncapSubTLVProtocol)
  return target;
}

size_t TunnelEncapSubTLVProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TunnelEncapSubTLVProtocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 protocol = 1;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TunnelEncapSubTLVProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TunnelEncapSubTLVProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TunnelEncapSubTLVProtocol)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVProtocol::MergeFrom(const TunnelEncapSubTLVProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TunnelEncapSubTLVProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
}

void TunnelEncapSubTLVProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TunnelEncapSubTLVProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVProtocol::CopyFrom(const TunnelEncapSubTLVProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TunnelEncapSubTLVProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVProtocol::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVProtocol::InternalSwap(TunnelEncapSubTLVProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVProtocol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVColor::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVColor::_Internal {
 public:
};

TunnelEncapSubTLVColor::TunnelEncapSubTLVColor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TunnelEncapSubTLVColor)
}
TunnelEncapSubTLVColor::TunnelEncapSubTLVColor(const TunnelEncapSubTLVColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TunnelEncapSubTLVColor)
}

void TunnelEncapSubTLVColor::SharedCtor() {
  color_ = 0u;
}

TunnelEncapSubTLVColor::~TunnelEncapSubTLVColor() {
  // @@protoc_insertion_point(destructor:gobgpapi.TunnelEncapSubTLVColor)
  SharedDtor();
}

void TunnelEncapSubTLVColor::SharedDtor() {
}

void TunnelEncapSubTLVColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVColor& TunnelEncapSubTLVColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVColor_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVColor::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TunnelEncapSubTLVColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _internal_metadata_.Clear();
}

const char* TunnelEncapSubTLVColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TunnelEncapSubTLVColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TunnelEncapSubTLVColor)
  return target;
}

size_t TunnelEncapSubTLVColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TunnelEncapSubTLVColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TunnelEncapSubTLVColor)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TunnelEncapSubTLVColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TunnelEncapSubTLVColor)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVColor::MergeFrom(const TunnelEncapSubTLVColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TunnelEncapSubTLVColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
}

void TunnelEncapSubTLVColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TunnelEncapSubTLVColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVColor::CopyFrom(const TunnelEncapSubTLVColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TunnelEncapSubTLVColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVColor::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVColor::InternalSwap(TunnelEncapSubTLVColor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapSubTLVUnknown::InitAsDefaultInstance() {
}
class TunnelEncapSubTLVUnknown::_Internal {
 public:
};

TunnelEncapSubTLVUnknown::TunnelEncapSubTLVUnknown()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TunnelEncapSubTLVUnknown)
}
TunnelEncapSubTLVUnknown::TunnelEncapSubTLVUnknown(const TunnelEncapSubTLVUnknown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TunnelEncapSubTLVUnknown)
}

void TunnelEncapSubTLVUnknown::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

TunnelEncapSubTLVUnknown::~TunnelEncapSubTLVUnknown() {
  // @@protoc_insertion_point(destructor:gobgpapi.TunnelEncapSubTLVUnknown)
  SharedDtor();
}

void TunnelEncapSubTLVUnknown::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TunnelEncapSubTLVUnknown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapSubTLVUnknown& TunnelEncapSubTLVUnknown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapSubTLVUnknown_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapSubTLVUnknown::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TunnelEncapSubTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* TunnelEncapSubTLVUnknown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapSubTLVUnknown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TunnelEncapSubTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TunnelEncapSubTLVUnknown)
  return target;
}

size_t TunnelEncapSubTLVUnknown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TunnelEncapSubTLVUnknown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapSubTLVUnknown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TunnelEncapSubTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapSubTLVUnknown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapSubTLVUnknown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TunnelEncapSubTLVUnknown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TunnelEncapSubTLVUnknown)
    MergeFrom(*source);
  }
}

void TunnelEncapSubTLVUnknown::MergeFrom(const TunnelEncapSubTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TunnelEncapSubTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TunnelEncapSubTLVUnknown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TunnelEncapSubTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapSubTLVUnknown::CopyFrom(const TunnelEncapSubTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TunnelEncapSubTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapSubTLVUnknown::IsInitialized() const {
  return true;
}

void TunnelEncapSubTLVUnknown::InternalSwap(TunnelEncapSubTLVUnknown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapSubTLVUnknown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapTLV::InitAsDefaultInstance() {
}
class TunnelEncapTLV::_Internal {
 public:
};

void TunnelEncapTLV::clear_tlvs() {
  tlvs_.Clear();
}
TunnelEncapTLV::TunnelEncapTLV()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TunnelEncapTLV)
}
TunnelEncapTLV::TunnelEncapTLV(const TunnelEncapTLV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tlvs_(from.tlvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TunnelEncapTLV)
}

void TunnelEncapTLV::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapTLV_attribute_2eproto.base);
  type_ = 0u;
}

TunnelEncapTLV::~TunnelEncapTLV() {
  // @@protoc_insertion_point(destructor:gobgpapi.TunnelEncapTLV)
  SharedDtor();
}

void TunnelEncapTLV::SharedDtor() {
}

void TunnelEncapTLV::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapTLV& TunnelEncapTLV::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapTLV_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapTLV::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TunnelEncapTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlvs_.Clear();
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* TunnelEncapTLV::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any tlvs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapTLV::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TunnelEncapTLV)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .google.protobuf.Any tlvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tlvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TunnelEncapTLV)
  return target;
}

size_t TunnelEncapTLV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TunnelEncapTLV)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 2;
  total_size += 1UL * this->_internal_tlvs_size();
  for (const auto& msg : this->tlvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapTLV::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TunnelEncapTLV)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapTLV* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapTLV>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TunnelEncapTLV)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TunnelEncapTLV)
    MergeFrom(*source);
  }
}

void TunnelEncapTLV::MergeFrom(const TunnelEncapTLV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TunnelEncapTLV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlvs_.MergeFrom(from.tlvs_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TunnelEncapTLV::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TunnelEncapTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapTLV::CopyFrom(const TunnelEncapTLV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TunnelEncapTLV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapTLV::IsInitialized() const {
  return true;
}

void TunnelEncapTLV::InternalSwap(TunnelEncapTLV* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tlvs_.InternalSwap(&other->tlvs_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapTLV::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TunnelEncapAttribute::InitAsDefaultInstance() {
}
class TunnelEncapAttribute::_Internal {
 public:
};

TunnelEncapAttribute::TunnelEncapAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TunnelEncapAttribute)
}
TunnelEncapAttribute::TunnelEncapAttribute(const TunnelEncapAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tlvs_(from.tlvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TunnelEncapAttribute)
}

void TunnelEncapAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TunnelEncapAttribute_attribute_2eproto.base);
}

TunnelEncapAttribute::~TunnelEncapAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.TunnelEncapAttribute)
  SharedDtor();
}

void TunnelEncapAttribute::SharedDtor() {
}

void TunnelEncapAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TunnelEncapAttribute& TunnelEncapAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TunnelEncapAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void TunnelEncapAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.TunnelEncapAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlvs_.Clear();
  _internal_metadata_.Clear();
}

const char* TunnelEncapAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gobgpapi.TunnelEncapTLV tlvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TunnelEncapAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TunnelEncapAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.TunnelEncapTLV tlvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tlvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TunnelEncapAttribute)
  return target;
}

size_t TunnelEncapAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.TunnelEncapAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.TunnelEncapTLV tlvs = 1;
  total_size += 1UL * this->_internal_tlvs_size();
  for (const auto& msg : this->tlvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TunnelEncapAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.TunnelEncapAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const TunnelEncapAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TunnelEncapAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.TunnelEncapAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.TunnelEncapAttribute)
    MergeFrom(*source);
  }
}

void TunnelEncapAttribute::MergeFrom(const TunnelEncapAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.TunnelEncapAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlvs_.MergeFrom(from.tlvs_);
}

void TunnelEncapAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.TunnelEncapAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TunnelEncapAttribute::CopyFrom(const TunnelEncapAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.TunnelEncapAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TunnelEncapAttribute::IsInitialized() const {
  return true;
}

void TunnelEncapAttribute::InternalSwap(TunnelEncapAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tlvs_.InternalSwap(&other->tlvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TunnelEncapAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPv6AddressSpecificExtended::InitAsDefaultInstance() {
}
class IPv6AddressSpecificExtended::_Internal {
 public:
};

IPv6AddressSpecificExtended::IPv6AddressSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IPv6AddressSpecificExtended)
}
IPv6AddressSpecificExtended::IPv6AddressSpecificExtended(const IPv6AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&is_transitive_, &from.is_transitive_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_admin_) -
    reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IPv6AddressSpecificExtended)
}

void IPv6AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPv6AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
}

IPv6AddressSpecificExtended::~IPv6AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.IPv6AddressSpecificExtended)
  SharedDtor();
}

void IPv6AddressSpecificExtended::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv6AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPv6AddressSpecificExtended& IPv6AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPv6AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void IPv6AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_transitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_admin_) -
      reinterpret_cast<char*>(&is_transitive_)) + sizeof(local_admin_));
  _internal_metadata_.Clear();
}

const char* IPv6AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_transitive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_transitive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sub_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.IPv6AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv6AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_transitive(), target);
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sub_type(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.IPv6AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IPv6AddressSpecificExtended)
  return target;
}

size_t IPv6AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IPv6AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bool is_transitive = 1;
  if (this->is_transitive() != 0) {
    total_size += 1 + 1;
  }

  // uint32 sub_type = 2;
  if (this->sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sub_type());
  }

  // uint32 local_admin = 4;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv6AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv6AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPv6AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IPv6AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IPv6AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void IPv6AddressSpecificExtended::MergeFrom(const IPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.is_transitive() != 0) {
    _internal_set_is_transitive(from._internal_is_transitive());
  }
  if (from.sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void IPv6AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv6AddressSpecificExtended::CopyFrom(const IPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv6AddressSpecificExtended::IsInitialized() const {
  return true;
}

void IPv6AddressSpecificExtended::InternalSwap(IPv6AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_transitive_, other->is_transitive_);
  swap(sub_type_, other->sub_type_);
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv6AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RedirectIPv6AddressSpecificExtended::InitAsDefaultInstance() {
}
class RedirectIPv6AddressSpecificExtended::_Internal {
 public:
};

RedirectIPv6AddressSpecificExtended::RedirectIPv6AddressSpecificExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RedirectIPv6AddressSpecificExtended)
}
RedirectIPv6AddressSpecificExtended::RedirectIPv6AddressSpecificExtended(const RedirectIPv6AddressSpecificExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  local_admin_ = from.local_admin_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RedirectIPv6AddressSpecificExtended)
}

void RedirectIPv6AddressSpecificExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_admin_ = 0u;
}

RedirectIPv6AddressSpecificExtended::~RedirectIPv6AddressSpecificExtended() {
  // @@protoc_insertion_point(destructor:gobgpapi.RedirectIPv6AddressSpecificExtended)
  SharedDtor();
}

void RedirectIPv6AddressSpecificExtended::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedirectIPv6AddressSpecificExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedirectIPv6AddressSpecificExtended& RedirectIPv6AddressSpecificExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RedirectIPv6AddressSpecificExtended_attribute_2eproto.base);
  return *internal_default_instance();
}


void RedirectIPv6AddressSpecificExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.RedirectIPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_admin_ = 0u;
  _internal_metadata_.Clear();
}

const char* RedirectIPv6AddressSpecificExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.RedirectIPv6AddressSpecificExtended.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_admin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedirectIPv6AddressSpecificExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RedirectIPv6AddressSpecificExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RedirectIPv6AddressSpecificExtended.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_admin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RedirectIPv6AddressSpecificExtended)
  return target;
}

size_t RedirectIPv6AddressSpecificExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.RedirectIPv6AddressSpecificExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint32 local_admin = 2;
  if (this->local_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_admin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectIPv6AddressSpecificExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.RedirectIPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectIPv6AddressSpecificExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RedirectIPv6AddressSpecificExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.RedirectIPv6AddressSpecificExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.RedirectIPv6AddressSpecificExtended)
    MergeFrom(*source);
  }
}

void RedirectIPv6AddressSpecificExtended::MergeFrom(const RedirectIPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.RedirectIPv6AddressSpecificExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.local_admin() != 0) {
    _internal_set_local_admin(from._internal_local_admin());
  }
}

void RedirectIPv6AddressSpecificExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.RedirectIPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectIPv6AddressSpecificExtended::CopyFrom(const RedirectIPv6AddressSpecificExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.RedirectIPv6AddressSpecificExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectIPv6AddressSpecificExtended::IsInitialized() const {
  return true;
}

void RedirectIPv6AddressSpecificExtended::InternalSwap(RedirectIPv6AddressSpecificExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_admin_, other->local_admin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedirectIPv6AddressSpecificExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IP6ExtendedCommunitiesAttribute::InitAsDefaultInstance() {
}
class IP6ExtendedCommunitiesAttribute::_Internal {
 public:
};

void IP6ExtendedCommunitiesAttribute::clear_communities() {
  communities_.Clear();
}
IP6ExtendedCommunitiesAttribute::IP6ExtendedCommunitiesAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.IP6ExtendedCommunitiesAttribute)
}
IP6ExtendedCommunitiesAttribute::IP6ExtendedCommunitiesAttribute(const IP6ExtendedCommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.IP6ExtendedCommunitiesAttribute)
}

void IP6ExtendedCommunitiesAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto.base);
}

IP6ExtendedCommunitiesAttribute::~IP6ExtendedCommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.IP6ExtendedCommunitiesAttribute)
  SharedDtor();
}

void IP6ExtendedCommunitiesAttribute::SharedDtor() {
}

void IP6ExtendedCommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IP6ExtendedCommunitiesAttribute& IP6ExtendedCommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IP6ExtendedCommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void IP6ExtendedCommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.IP6ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear();
}

const char* IP6ExtendedCommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IP6ExtendedCommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.IP6ExtendedCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.IP6ExtendedCommunitiesAttribute)
  return target;
}

size_t IP6ExtendedCommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.IP6ExtendedCommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any communities = 1;
  total_size += 1UL * this->_internal_communities_size();
  for (const auto& msg : this->communities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IP6ExtendedCommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.IP6ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const IP6ExtendedCommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IP6ExtendedCommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.IP6ExtendedCommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.IP6ExtendedCommunitiesAttribute)
    MergeFrom(*source);
  }
}

void IP6ExtendedCommunitiesAttribute::MergeFrom(const IP6ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.IP6ExtendedCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void IP6ExtendedCommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.IP6ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IP6ExtendedCommunitiesAttribute::CopyFrom(const IP6ExtendedCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.IP6ExtendedCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IP6ExtendedCommunitiesAttribute::IsInitialized() const {
  return true;
}

void IP6ExtendedCommunitiesAttribute::InternalSwap(IP6ExtendedCommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IP6ExtendedCommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AigpTLVIGPMetric::InitAsDefaultInstance() {
}
class AigpTLVIGPMetric::_Internal {
 public:
};

AigpTLVIGPMetric::AigpTLVIGPMetric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AigpTLVIGPMetric)
}
AigpTLVIGPMetric::AigpTLVIGPMetric(const AigpTLVIGPMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metric_ = from.metric_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AigpTLVIGPMetric)
}

void AigpTLVIGPMetric::SharedCtor() {
  metric_ = PROTOBUF_ULONGLONG(0);
}

AigpTLVIGPMetric::~AigpTLVIGPMetric() {
  // @@protoc_insertion_point(destructor:gobgpapi.AigpTLVIGPMetric)
  SharedDtor();
}

void AigpTLVIGPMetric::SharedDtor() {
}

void AigpTLVIGPMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AigpTLVIGPMetric& AigpTLVIGPMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AigpTLVIGPMetric_attribute_2eproto.base);
  return *internal_default_instance();
}


void AigpTLVIGPMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AigpTLVIGPMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* AigpTLVIGPMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 metric = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AigpTLVIGPMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AigpTLVIGPMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 metric = 1;
  if (this->metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AigpTLVIGPMetric)
  return target;
}

size_t AigpTLVIGPMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AigpTLVIGPMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 metric = 1;
  if (this->metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_metric());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AigpTLVIGPMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AigpTLVIGPMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const AigpTLVIGPMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AigpTLVIGPMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AigpTLVIGPMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AigpTLVIGPMetric)
    MergeFrom(*source);
  }
}

void AigpTLVIGPMetric::MergeFrom(const AigpTLVIGPMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AigpTLVIGPMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metric() != 0) {
    _internal_set_metric(from._internal_metric());
  }
}

void AigpTLVIGPMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AigpTLVIGPMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AigpTLVIGPMetric::CopyFrom(const AigpTLVIGPMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AigpTLVIGPMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AigpTLVIGPMetric::IsInitialized() const {
  return true;
}

void AigpTLVIGPMetric::InternalSwap(AigpTLVIGPMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(metric_, other->metric_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AigpTLVIGPMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AigpTLVUnknown::InitAsDefaultInstance() {
}
class AigpTLVUnknown::_Internal {
 public:
};

AigpTLVUnknown::AigpTLVUnknown()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AigpTLVUnknown)
}
AigpTLVUnknown::AigpTLVUnknown(const AigpTLVUnknown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AigpTLVUnknown)
}

void AigpTLVUnknown::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AigpTLVUnknown_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

AigpTLVUnknown::~AigpTLVUnknown() {
  // @@protoc_insertion_point(destructor:gobgpapi.AigpTLVUnknown)
  SharedDtor();
}

void AigpTLVUnknown::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AigpTLVUnknown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AigpTLVUnknown& AigpTLVUnknown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AigpTLVUnknown_attribute_2eproto.base);
  return *internal_default_instance();
}


void AigpTLVUnknown::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AigpTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  _internal_metadata_.Clear();
}

const char* AigpTLVUnknown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AigpTLVUnknown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AigpTLVUnknown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AigpTLVUnknown)
  return target;
}

size_t AigpTLVUnknown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AigpTLVUnknown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AigpTLVUnknown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AigpTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  const AigpTLVUnknown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AigpTLVUnknown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AigpTLVUnknown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AigpTLVUnknown)
    MergeFrom(*source);
  }
}

void AigpTLVUnknown::MergeFrom(const AigpTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AigpTLVUnknown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AigpTLVUnknown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AigpTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AigpTLVUnknown::CopyFrom(const AigpTLVUnknown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AigpTLVUnknown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AigpTLVUnknown::IsInitialized() const {
  return true;
}

void AigpTLVUnknown::InternalSwap(AigpTLVUnknown* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AigpTLVUnknown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AigpAttribute::InitAsDefaultInstance() {
}
class AigpAttribute::_Internal {
 public:
};

void AigpAttribute::clear_tlvs() {
  tlvs_.Clear();
}
AigpAttribute::AigpAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AigpAttribute)
}
AigpAttribute::AigpAttribute(const AigpAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tlvs_(from.tlvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AigpAttribute)
}

void AigpAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AigpAttribute_attribute_2eproto.base);
}

AigpAttribute::~AigpAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.AigpAttribute)
  SharedDtor();
}

void AigpAttribute::SharedDtor() {
}

void AigpAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AigpAttribute& AigpAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AigpAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void AigpAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.AigpAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tlvs_.Clear();
  _internal_metadata_.Clear();
}

const char* AigpAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any tlvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tlvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AigpAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AigpAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tlvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tlvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AigpAttribute)
  return target;
}

size_t AigpAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.AigpAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any tlvs = 1;
  total_size += 1UL * this->_internal_tlvs_size();
  for (const auto& msg : this->tlvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AigpAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.AigpAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const AigpAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AigpAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.AigpAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.AigpAttribute)
    MergeFrom(*source);
  }
}

void AigpAttribute::MergeFrom(const AigpAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.AigpAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tlvs_.MergeFrom(from.tlvs_);
}

void AigpAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.AigpAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AigpAttribute::CopyFrom(const AigpAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.AigpAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AigpAttribute::IsInitialized() const {
  return true;
}

void AigpAttribute::InternalSwap(AigpAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tlvs_.InternalSwap(&other->tlvs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AigpAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LargeCommunity::InitAsDefaultInstance() {
}
class LargeCommunity::_Internal {
 public:
};

LargeCommunity::LargeCommunity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LargeCommunity)
}
LargeCommunity::LargeCommunity(const LargeCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&global_admin_, &from.global_admin_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_data2_) -
    reinterpret_cast<char*>(&global_admin_)) + sizeof(local_data2_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LargeCommunity)
}

void LargeCommunity::SharedCtor() {
  ::memset(&global_admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_data2_) -
      reinterpret_cast<char*>(&global_admin_)) + sizeof(local_data2_));
}

LargeCommunity::~LargeCommunity() {
  // @@protoc_insertion_point(destructor:gobgpapi.LargeCommunity)
  SharedDtor();
}

void LargeCommunity::SharedDtor() {
}

void LargeCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LargeCommunity& LargeCommunity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LargeCommunity_attribute_2eproto.base);
  return *internal_default_instance();
}


void LargeCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LargeCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&global_admin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_data2_) -
      reinterpret_cast<char*>(&global_admin_)) + sizeof(local_data2_));
  _internal_metadata_.Clear();
}

const char* LargeCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 global_admin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          global_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_data1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_data1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_data2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_data2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LargeCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 global_admin = 1;
  if (this->global_admin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_global_admin(), target);
  }

  // uint32 local_data1 = 2;
  if (this->local_data1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_data1(), target);
  }

  // uint32 local_data2 = 3;
  if (this->local_data2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_local_data2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LargeCommunity)
  return target;
}

size_t LargeCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LargeCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 global_admin = 1;
  if (this->global_admin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_global_admin());
  }

  // uint32 local_data1 = 2;
  if (this->local_data1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_data1());
  }

  // uint32 local_data2 = 3;
  if (this->local_data2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_data2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LargeCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LargeCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LargeCommunity)
    MergeFrom(*source);
  }
}

void LargeCommunity::MergeFrom(const LargeCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LargeCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.global_admin() != 0) {
    _internal_set_global_admin(from._internal_global_admin());
  }
  if (from.local_data1() != 0) {
    _internal_set_local_data1(from._internal_local_data1());
  }
  if (from.local_data2() != 0) {
    _internal_set_local_data2(from._internal_local_data2());
  }
}

void LargeCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LargeCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeCommunity::CopyFrom(const LargeCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LargeCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeCommunity::IsInitialized() const {
  return true;
}

void LargeCommunity::InternalSwap(LargeCommunity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(global_admin_, other->global_admin_);
  swap(local_data1_, other->local_data1_);
  swap(local_data2_, other->local_data2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeCommunity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LargeCommunitiesAttribute::InitAsDefaultInstance() {
}
class LargeCommunitiesAttribute::_Internal {
 public:
};

LargeCommunitiesAttribute::LargeCommunitiesAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LargeCommunitiesAttribute)
}
LargeCommunitiesAttribute::LargeCommunitiesAttribute(const LargeCommunitiesAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      communities_(from.communities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LargeCommunitiesAttribute)
}

void LargeCommunitiesAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LargeCommunitiesAttribute_attribute_2eproto.base);
}

LargeCommunitiesAttribute::~LargeCommunitiesAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.LargeCommunitiesAttribute)
  SharedDtor();
}

void LargeCommunitiesAttribute::SharedDtor() {
}

void LargeCommunitiesAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LargeCommunitiesAttribute& LargeCommunitiesAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LargeCommunitiesAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void LargeCommunitiesAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LargeCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  communities_.Clear();
  _internal_metadata_.Clear();
}

const char* LargeCommunitiesAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gobgpapi.LargeCommunity communities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_communities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LargeCommunitiesAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LargeCommunitiesAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.LargeCommunity communities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_communities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_communities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LargeCommunitiesAttribute)
  return target;
}

size_t LargeCommunitiesAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LargeCommunitiesAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.LargeCommunity communities = 1;
  total_size += 1UL * this->_internal_communities_size();
  for (const auto& msg : this->communities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeCommunitiesAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LargeCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeCommunitiesAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LargeCommunitiesAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LargeCommunitiesAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LargeCommunitiesAttribute)
    MergeFrom(*source);
  }
}

void LargeCommunitiesAttribute::MergeFrom(const LargeCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LargeCommunitiesAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  communities_.MergeFrom(from.communities_);
}

void LargeCommunitiesAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LargeCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeCommunitiesAttribute::CopyFrom(const LargeCommunitiesAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LargeCommunitiesAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeCommunitiesAttribute::IsInitialized() const {
  return true;
}

void LargeCommunitiesAttribute::InternalSwap(LargeCommunitiesAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  communities_.InternalSwap(&other->communities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LargeCommunitiesAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsNodeFlags::InitAsDefaultInstance() {
}
class LsNodeFlags::_Internal {
 public:
};

LsNodeFlags::LsNodeFlags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsNodeFlags)
}
LsNodeFlags::LsNodeFlags(const LsNodeFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&overload_, &from.overload_,
    static_cast<size_t>(reinterpret_cast<char*>(&v6_) -
    reinterpret_cast<char*>(&overload_)) + sizeof(v6_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsNodeFlags)
}

void LsNodeFlags::SharedCtor() {
  ::memset(&overload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v6_) -
      reinterpret_cast<char*>(&overload_)) + sizeof(v6_));
}

LsNodeFlags::~LsNodeFlags() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsNodeFlags)
  SharedDtor();
}

void LsNodeFlags::SharedDtor() {
}

void LsNodeFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsNodeFlags& LsNodeFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsNodeFlags_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsNodeFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsNodeFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&overload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v6_) -
      reinterpret_cast<char*>(&overload_)) + sizeof(v6_));
  _internal_metadata_.Clear();
}

const char* LsNodeFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool overload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          overload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool attached = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          attached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          external_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool abr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          abr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool router = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          router_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool v6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          v6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsNodeFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsNodeFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool overload = 1;
  if (this->overload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_overload(), target);
  }

  // bool attached = 2;
  if (this->attached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_attached(), target);
  }

  // bool external = 3;
  if (this->external() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_external(), target);
  }

  // bool abr = 4;
  if (this->abr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_abr(), target);
  }

  // bool router = 5;
  if (this->router() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_router(), target);
  }

  // bool v6 = 6;
  if (this->v6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_v6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsNodeFlags)
  return target;
}

size_t LsNodeFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsNodeFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool overload = 1;
  if (this->overload() != 0) {
    total_size += 1 + 1;
  }

  // bool attached = 2;
  if (this->attached() != 0) {
    total_size += 1 + 1;
  }

  // bool external = 3;
  if (this->external() != 0) {
    total_size += 1 + 1;
  }

  // bool abr = 4;
  if (this->abr() != 0) {
    total_size += 1 + 1;
  }

  // bool router = 5;
  if (this->router() != 0) {
    total_size += 1 + 1;
  }

  // bool v6 = 6;
  if (this->v6() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsNodeFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsNodeFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const LsNodeFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsNodeFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsNodeFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsNodeFlags)
    MergeFrom(*source);
  }
}

void LsNodeFlags::MergeFrom(const LsNodeFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsNodeFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.overload() != 0) {
    _internal_set_overload(from._internal_overload());
  }
  if (from.attached() != 0) {
    _internal_set_attached(from._internal_attached());
  }
  if (from.external() != 0) {
    _internal_set_external(from._internal_external());
  }
  if (from.abr() != 0) {
    _internal_set_abr(from._internal_abr());
  }
  if (from.router() != 0) {
    _internal_set_router(from._internal_router());
  }
  if (from.v6() != 0) {
    _internal_set_v6(from._internal_v6());
  }
}

void LsNodeFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsNodeFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsNodeFlags::CopyFrom(const LsNodeFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsNodeFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsNodeFlags::IsInitialized() const {
  return true;
}

void LsNodeFlags::InternalSwap(LsNodeFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(overload_, other->overload_);
  swap(attached_, other->attached_);
  swap(external_, other->external_);
  swap(abr_, other->abr_);
  swap(router_, other->router_);
  swap(v6_, other->v6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsNodeFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsIGPFlags::InitAsDefaultInstance() {
}
class LsIGPFlags::_Internal {
 public:
};

LsIGPFlags::LsIGPFlags()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsIGPFlags)
}
LsIGPFlags::LsIGPFlags(const LsIGPFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&down_, &from.down_,
    static_cast<size_t>(reinterpret_cast<char*>(&propagate_nssa_) -
    reinterpret_cast<char*>(&down_)) + sizeof(propagate_nssa_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsIGPFlags)
}

void LsIGPFlags::SharedCtor() {
  ::memset(&down_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagate_nssa_) -
      reinterpret_cast<char*>(&down_)) + sizeof(propagate_nssa_));
}

LsIGPFlags::~LsIGPFlags() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsIGPFlags)
  SharedDtor();
}

void LsIGPFlags::SharedDtor() {
}

void LsIGPFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsIGPFlags& LsIGPFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsIGPFlags_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsIGPFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsIGPFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&down_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&propagate_nssa_) -
      reinterpret_cast<char*>(&down_)) + sizeof(propagate_nssa_));
  _internal_metadata_.Clear();
}

const char* LsIGPFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool down = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_unicast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          no_unicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool local_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool propagate_nssa = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          propagate_nssa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsIGPFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsIGPFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool down = 1;
  if (this->down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_down(), target);
  }

  // bool no_unicast = 2;
  if (this->no_unicast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_no_unicast(), target);
  }

  // bool local_address = 3;
  if (this->local_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_local_address(), target);
  }

  // bool propagate_nssa = 4;
  if (this->propagate_nssa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_propagate_nssa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsIGPFlags)
  return target;
}

size_t LsIGPFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsIGPFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool down = 1;
  if (this->down() != 0) {
    total_size += 1 + 1;
  }

  // bool no_unicast = 2;
  if (this->no_unicast() != 0) {
    total_size += 1 + 1;
  }

  // bool local_address = 3;
  if (this->local_address() != 0) {
    total_size += 1 + 1;
  }

  // bool propagate_nssa = 4;
  if (this->propagate_nssa() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsIGPFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsIGPFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const LsIGPFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsIGPFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsIGPFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsIGPFlags)
    MergeFrom(*source);
  }
}

void LsIGPFlags::MergeFrom(const LsIGPFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsIGPFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.down() != 0) {
    _internal_set_down(from._internal_down());
  }
  if (from.no_unicast() != 0) {
    _internal_set_no_unicast(from._internal_no_unicast());
  }
  if (from.local_address() != 0) {
    _internal_set_local_address(from._internal_local_address());
  }
  if (from.propagate_nssa() != 0) {
    _internal_set_propagate_nssa(from._internal_propagate_nssa());
  }
}

void LsIGPFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsIGPFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsIGPFlags::CopyFrom(const LsIGPFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsIGPFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsIGPFlags::IsInitialized() const {
  return true;
}

void LsIGPFlags::InternalSwap(LsIGPFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(down_, other->down_);
  swap(no_unicast_, other->no_unicast_);
  swap(local_address_, other->local_address_);
  swap(propagate_nssa_, other->propagate_nssa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsIGPFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsSrRange::InitAsDefaultInstance() {
}
class LsSrRange::_Internal {
 public:
};

LsSrRange::LsSrRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsSrRange)
}
LsSrRange::LsSrRange(const LsSrRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsSrRange)
}

void LsSrRange::SharedCtor() {
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

LsSrRange::~LsSrRange() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsSrRange)
  SharedDtor();
}

void LsSrRange::SharedDtor() {
}

void LsSrRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsSrRange& LsSrRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsSrRange_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsSrRange::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsSrRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

const char* LsSrRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsSrRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsSrRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 begin = 1;
  if (this->begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_begin(), target);
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsSrRange)
  return target;
}

size_t LsSrRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsSrRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 begin = 1;
  if (this->begin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_begin());
  }

  // uint32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsSrRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsSrRange)
  GOOGLE_DCHECK_NE(&from, this);
  const LsSrRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsSrRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsSrRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsSrRange)
    MergeFrom(*source);
  }
}

void LsSrRange::MergeFrom(const LsSrRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsSrRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin() != 0) {
    _internal_set_begin(from._internal_begin());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void LsSrRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsSrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsSrRange::CopyFrom(const LsSrRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsSrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsSrRange::IsInitialized() const {
  return true;
}

void LsSrRange::InternalSwap(LsSrRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(begin_, other->begin_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsSrRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsSrCapabilities::InitAsDefaultInstance() {
}
class LsSrCapabilities::_Internal {
 public:
};

LsSrCapabilities::LsSrCapabilities()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsSrCapabilities)
}
LsSrCapabilities::LsSrCapabilities(const LsSrCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ipv4_supported_, &from.ipv4_supported_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipv6_supported_) -
    reinterpret_cast<char*>(&ipv4_supported_)) + sizeof(ipv6_supported_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsSrCapabilities)
}

void LsSrCapabilities::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsSrCapabilities_attribute_2eproto.base);
  ::memset(&ipv4_supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv6_supported_) -
      reinterpret_cast<char*>(&ipv4_supported_)) + sizeof(ipv6_supported_));
}

LsSrCapabilities::~LsSrCapabilities() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsSrCapabilities)
  SharedDtor();
}

void LsSrCapabilities::SharedDtor() {
}

void LsSrCapabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsSrCapabilities& LsSrCapabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsSrCapabilities_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsSrCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsSrCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  ::memset(&ipv4_supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipv6_supported_) -
      reinterpret_cast<char*>(&ipv4_supported_)) + sizeof(ipv6_supported_));
  _internal_metadata_.Clear();
}

const char* LsSrCapabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ipv4_supported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ipv4_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ipv6_supported = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ipv6_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gobgpapi.LsSrRange ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsSrCapabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsSrCapabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ipv4_supported = 1;
  if (this->ipv4_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ipv4_supported(), target);
  }

  // bool ipv6_supported = 2;
  if (this->ipv6_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ipv6_supported(), target);
  }

  // repeated .gobgpapi.LsSrRange ranges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsSrCapabilities)
  return target;
}

size_t LsSrCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsSrCapabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.LsSrRange ranges = 3;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool ipv4_supported = 1;
  if (this->ipv4_supported() != 0) {
    total_size += 1 + 1;
  }

  // bool ipv6_supported = 2;
  if (this->ipv6_supported() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsSrCapabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsSrCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const LsSrCapabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsSrCapabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsSrCapabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsSrCapabilities)
    MergeFrom(*source);
  }
}

void LsSrCapabilities::MergeFrom(const LsSrCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsSrCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  if (from.ipv4_supported() != 0) {
    _internal_set_ipv4_supported(from._internal_ipv4_supported());
  }
  if (from.ipv6_supported() != 0) {
    _internal_set_ipv6_supported(from._internal_ipv6_supported());
  }
}

void LsSrCapabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsSrCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsSrCapabilities::CopyFrom(const LsSrCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsSrCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsSrCapabilities::IsInitialized() const {
  return true;
}

void LsSrCapabilities::InternalSwap(LsSrCapabilities* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
  swap(ipv4_supported_, other->ipv4_supported_);
  swap(ipv6_supported_, other->ipv6_supported_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsSrCapabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsSrLocalBlock::InitAsDefaultInstance() {
}
class LsSrLocalBlock::_Internal {
 public:
};

LsSrLocalBlock::LsSrLocalBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsSrLocalBlock)
}
LsSrLocalBlock::LsSrLocalBlock(const LsSrLocalBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsSrLocalBlock)
}

void LsSrLocalBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsSrLocalBlock_attribute_2eproto.base);
}

LsSrLocalBlock::~LsSrLocalBlock() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsSrLocalBlock)
  SharedDtor();
}

void LsSrLocalBlock::SharedDtor() {
}

void LsSrLocalBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsSrLocalBlock& LsSrLocalBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsSrLocalBlock_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsSrLocalBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsSrLocalBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  _internal_metadata_.Clear();
}

const char* LsSrLocalBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gobgpapi.LsSrRange ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsSrLocalBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsSrLocalBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gobgpapi.LsSrRange ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsSrLocalBlock)
  return target;
}

size_t LsSrLocalBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsSrLocalBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gobgpapi.LsSrRange ranges = 1;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsSrLocalBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsSrLocalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const LsSrLocalBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsSrLocalBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsSrLocalBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsSrLocalBlock)
    MergeFrom(*source);
  }
}

void LsSrLocalBlock::MergeFrom(const LsSrLocalBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsSrLocalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
}

void LsSrLocalBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsSrLocalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsSrLocalBlock::CopyFrom(const LsSrLocalBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsSrLocalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsSrLocalBlock::IsInitialized() const {
  return true;
}

void LsSrLocalBlock::InternalSwap(LsSrLocalBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsSrLocalBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttributeNode::InitAsDefaultInstance() {
  ::gobgpapi::_LsAttributeNode_default_instance_._instance.get_mutable()->flags_ = const_cast< ::gobgpapi::LsNodeFlags*>(
      ::gobgpapi::LsNodeFlags::internal_default_instance());
  ::gobgpapi::_LsAttributeNode_default_instance_._instance.get_mutable()->sr_capabilities_ = const_cast< ::gobgpapi::LsSrCapabilities*>(
      ::gobgpapi::LsSrCapabilities::internal_default_instance());
  ::gobgpapi::_LsAttributeNode_default_instance_._instance.get_mutable()->sr_local_block_ = const_cast< ::gobgpapi::LsSrLocalBlock*>(
      ::gobgpapi::LsSrLocalBlock::internal_default_instance());
}
class LsAttributeNode::_Internal {
 public:
  static const ::gobgpapi::LsNodeFlags& flags(const LsAttributeNode* msg);
  static const ::gobgpapi::LsSrCapabilities& sr_capabilities(const LsAttributeNode* msg);
  static const ::gobgpapi::LsSrLocalBlock& sr_local_block(const LsAttributeNode* msg);
};

const ::gobgpapi::LsNodeFlags&
LsAttributeNode::_Internal::flags(const LsAttributeNode* msg) {
  return *msg->flags_;
}
const ::gobgpapi::LsSrCapabilities&
LsAttributeNode::_Internal::sr_capabilities(const LsAttributeNode* msg) {
  return *msg->sr_capabilities_;
}
const ::gobgpapi::LsSrLocalBlock&
LsAttributeNode::_Internal::sr_local_block(const LsAttributeNode* msg) {
  return *msg->sr_local_block_;
}
LsAttributeNode::LsAttributeNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsAttributeNode)
}
LsAttributeNode::LsAttributeNode(const LsAttributeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id().empty()) {
    local_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_);
  }
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id_v6().empty()) {
    local_router_id_v6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_v6_);
  }
  isis_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_isis_area().empty()) {
    isis_area_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.isis_area_);
  }
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opaque().empty()) {
    opaque_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opaque_);
  }
  sr_algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sr_algorithms().empty()) {
    sr_algorithms_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sr_algorithms_);
  }
  if (from._internal_has_flags()) {
    flags_ = new ::gobgpapi::LsNodeFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  if (from._internal_has_sr_capabilities()) {
    sr_capabilities_ = new ::gobgpapi::LsSrCapabilities(*from.sr_capabilities_);
  } else {
    sr_capabilities_ = nullptr;
  }
  if (from._internal_has_sr_local_block()) {
    sr_local_block_ = new ::gobgpapi::LsSrLocalBlock(*from.sr_local_block_);
  } else {
    sr_local_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsAttributeNode)
}

void LsAttributeNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttributeNode_attribute_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isis_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sr_algorithms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_local_block_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(sr_local_block_));
}

LsAttributeNode::~LsAttributeNode() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsAttributeNode)
  SharedDtor();
}

void LsAttributeNode::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isis_area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sr_algorithms_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flags_;
  if (this != internal_default_instance()) delete sr_capabilities_;
  if (this != internal_default_instance()) delete sr_local_block_;
}

void LsAttributeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttributeNode& LsAttributeNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttributeNode_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttributeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsAttributeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isis_area_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sr_algorithms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && flags_ != nullptr) {
    delete flags_;
  }
  flags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sr_capabilities_ != nullptr) {
    delete sr_capabilities_;
  }
  sr_capabilities_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sr_local_block_ != nullptr) {
    delete sr_local_block_;
  }
  sr_local_block_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LsAttributeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeNode.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsNodeFlags flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeNode.local_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id_v6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_local_router_id_v6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeNode.local_router_id_v6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes isis_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_isis_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes opaque = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_opaque();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsSrCapabilities sr_capabilities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sr_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sr_algorithms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sr_algorithms();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsSrLocalBlock sr_local_block = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sr_local_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttributeNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsAttributeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeNode.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .gobgpapi.LsNodeFlags flags = 2;
  if (this->has_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::flags(this), target, stream);
  }

  // string local_router_id = 3;
  if (this->local_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id().data(), static_cast<int>(this->_internal_local_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeNode.local_router_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_router_id(), target);
  }

  // string local_router_id_v6 = 4;
  if (this->local_router_id_v6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id_v6().data(), static_cast<int>(this->_internal_local_router_id_v6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeNode.local_router_id_v6");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_local_router_id_v6(), target);
  }

  // bytes isis_area = 5;
  if (this->isis_area().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_isis_area(), target);
  }

  // bytes opaque = 6;
  if (this->opaque().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_opaque(), target);
  }

  // .gobgpapi.LsSrCapabilities sr_capabilities = 7;
  if (this->has_sr_capabilities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sr_capabilities(this), target, stream);
  }

  // bytes sr_algorithms = 8;
  if (this->sr_algorithms().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_sr_algorithms(), target);
  }

  // .gobgpapi.LsSrLocalBlock sr_local_block = 9;
  if (this->has_sr_local_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sr_local_block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsAttributeNode)
  return target;
}

size_t LsAttributeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsAttributeNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string local_router_id = 3;
  if (this->local_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id());
  }

  // string local_router_id_v6 = 4;
  if (this->local_router_id_v6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id_v6());
  }

  // bytes isis_area = 5;
  if (this->isis_area().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_isis_area());
  }

  // bytes opaque = 6;
  if (this->opaque().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaque());
  }

  // bytes sr_algorithms = 8;
  if (this->sr_algorithms().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sr_algorithms());
  }

  // .gobgpapi.LsNodeFlags flags = 2;
  if (this->has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flags_);
  }

  // .gobgpapi.LsSrCapabilities sr_capabilities = 7;
  if (this->has_sr_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sr_capabilities_);
  }

  // .gobgpapi.LsSrLocalBlock sr_local_block = 9;
  if (this->has_sr_local_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sr_local_block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttributeNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsAttributeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttributeNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttributeNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsAttributeNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsAttributeNode)
    MergeFrom(*source);
  }
}

void LsAttributeNode::MergeFrom(const LsAttributeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsAttributeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.local_router_id().size() > 0) {

    local_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_);
  }
  if (from.local_router_id_v6().size() > 0) {

    local_router_id_v6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_v6_);
  }
  if (from.isis_area().size() > 0) {

    isis_area_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.isis_area_);
  }
  if (from.opaque().size() > 0) {

    opaque_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opaque_);
  }
  if (from.sr_algorithms().size() > 0) {

    sr_algorithms_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sr_algorithms_);
  }
  if (from.has_flags()) {
    _internal_mutable_flags()->::gobgpapi::LsNodeFlags::MergeFrom(from._internal_flags());
  }
  if (from.has_sr_capabilities()) {
    _internal_mutable_sr_capabilities()->::gobgpapi::LsSrCapabilities::MergeFrom(from._internal_sr_capabilities());
  }
  if (from.has_sr_local_block()) {
    _internal_mutable_sr_local_block()->::gobgpapi::LsSrLocalBlock::MergeFrom(from._internal_sr_local_block());
  }
}

void LsAttributeNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsAttributeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttributeNode::CopyFrom(const LsAttributeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsAttributeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttributeNode::IsInitialized() const {
  return true;
}

void LsAttributeNode::InternalSwap(LsAttributeNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_router_id_.Swap(&other->local_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_router_id_v6_.Swap(&other->local_router_id_v6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  isis_area_.Swap(&other->isis_area_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  opaque_.Swap(&other->opaque_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sr_algorithms_.Swap(&other->sr_algorithms_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
  swap(sr_capabilities_, other->sr_capabilities_);
  swap(sr_local_block_, other->sr_local_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttributeNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttributeLink::InitAsDefaultInstance() {
}
class LsAttributeLink::_Internal {
 public:
};

LsAttributeLink::LsAttributeLink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsAttributeLink)
}
LsAttributeLink::LsAttributeLink(const LsAttributeLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      unreserved_bandwidth_(from.unreserved_bandwidth_),
      srlgs_(from.srlgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id().empty()) {
    local_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_);
  }
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_router_id_v6().empty()) {
    local_router_id_v6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_v6_);
  }
  remote_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_router_id().empty()) {
    remote_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_router_id_);
  }
  remote_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_router_id_v6().empty()) {
    remote_router_id_v6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_router_id_v6_);
  }
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opaque().empty()) {
    opaque_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opaque_);
  }
  ::memcpy(&admin_group_, &from.admin_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&sr_adjacency_sid_) -
    reinterpret_cast<char*>(&admin_group_)) + sizeof(sr_adjacency_sid_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsAttributeLink)
}

void LsAttributeLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttributeLink_attribute_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_v6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&admin_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_adjacency_sid_) -
      reinterpret_cast<char*>(&admin_group_)) + sizeof(sr_adjacency_sid_));
}

LsAttributeLink::~LsAttributeLink() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsAttributeLink)
  SharedDtor();
}

void LsAttributeLink::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_v6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LsAttributeLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttributeLink& LsAttributeLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttributeLink_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttributeLink::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsAttributeLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unreserved_bandwidth_.Clear();
  srlgs_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_router_id_v6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_router_id_v6_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opaque_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&admin_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_adjacency_sid_) -
      reinterpret_cast<char*>(&admin_group_)) + sizeof(sr_adjacency_sid_));
  _internal_metadata_.Clear();
}

const char* LsAttributeLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeLink.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_local_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeLink.local_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_router_id_v6 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_router_id_v6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeLink.local_router_id_v6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_router_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_remote_router_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeLink.remote_router_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_router_id_v6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_remote_router_id_v6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gobgpapi.LsAttributeLink.remote_router_id_v6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 admin_group = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          admin_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 default_te_metric = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          default_te_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 igp_metric = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          igp_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes opaque = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_opaque();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bandwidth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float reservable_bandwidth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          reservable_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float unreserved_bandwidth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unreserved_bandwidth(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          _internal_add_unreserved_bandwidth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 sr_adjacency_sid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          sr_adjacency_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 srlgs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srlgs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_srlgs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttributeLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsAttributeLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeLink.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string local_router_id = 2;
  if (this->local_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id().data(), static_cast<int>(this->_internal_local_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeLink.local_router_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_router_id(), target);
  }

  // string local_router_id_v6 = 3;
  if (this->local_router_id_v6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_router_id_v6().data(), static_cast<int>(this->_internal_local_router_id_v6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeLink.local_router_id_v6");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_router_id_v6(), target);
  }

  // string remote_router_id = 4;
  if (this->remote_router_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_router_id().data(), static_cast<int>(this->_internal_remote_router_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeLink.remote_router_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_remote_router_id(), target);
  }

  // string remote_router_id_v6 = 5;
  if (this->remote_router_id_v6().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_router_id_v6().data(), static_cast<int>(this->_internal_remote_router_id_v6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.LsAttributeLink.remote_router_id_v6");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_remote_router_id_v6(), target);
  }

  // uint32 admin_group = 6;
  if (this->admin_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_admin_group(), target);
  }

  // uint32 default_te_metric = 7;
  if (this->default_te_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_default_te_metric(), target);
  }

  // uint32 igp_metric = 8;
  if (this->igp_metric() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_igp_metric(), target);
  }

  // bytes opaque = 9;
  if (this->opaque().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_opaque(), target);
  }

  // float bandwidth = 10;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_bandwidth(), target);
  }

  // float reservable_bandwidth = 11;
  if (!(this->reservable_bandwidth() <= 0 && this->reservable_bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_reservable_bandwidth(), target);
  }

  // repeated float unreserved_bandwidth = 12;
  if (this->_internal_unreserved_bandwidth_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_unreserved_bandwidth(), target);
  }

  // uint32 sr_adjacency_sid = 13;
  if (this->sr_adjacency_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_sr_adjacency_sid(), target);
  }

  // repeated uint32 srlgs = 14;
  {
    int byte_size = _srlgs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_srlgs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsAttributeLink)
  return target;
}

size_t LsAttributeLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsAttributeLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float unreserved_bandwidth = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unreserved_bandwidth_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _unreserved_bandwidth_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 srlgs = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->srlgs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _srlgs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string local_router_id = 2;
  if (this->local_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id());
  }

  // string local_router_id_v6 = 3;
  if (this->local_router_id_v6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_router_id_v6());
  }

  // string remote_router_id = 4;
  if (this->remote_router_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_router_id());
  }

  // string remote_router_id_v6 = 5;
  if (this->remote_router_id_v6().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_router_id_v6());
  }

  // bytes opaque = 9;
  if (this->opaque().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaque());
  }

  // uint32 admin_group = 6;
  if (this->admin_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_admin_group());
  }

  // uint32 default_te_metric = 7;
  if (this->default_te_metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_default_te_metric());
  }

  // uint32 igp_metric = 8;
  if (this->igp_metric() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_igp_metric());
  }

  // float bandwidth = 10;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    total_size += 1 + 4;
  }

  // float reservable_bandwidth = 11;
  if (!(this->reservable_bandwidth() <= 0 && this->reservable_bandwidth() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 sr_adjacency_sid = 13;
  if (this->sr_adjacency_sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sr_adjacency_sid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttributeLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsAttributeLink)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttributeLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttributeLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsAttributeLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsAttributeLink)
    MergeFrom(*source);
  }
}

void LsAttributeLink::MergeFrom(const LsAttributeLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsAttributeLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unreserved_bandwidth_.MergeFrom(from.unreserved_bandwidth_);
  srlgs_.MergeFrom(from.srlgs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.local_router_id().size() > 0) {

    local_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_);
  }
  if (from.local_router_id_v6().size() > 0) {

    local_router_id_v6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_router_id_v6_);
  }
  if (from.remote_router_id().size() > 0) {

    remote_router_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_router_id_);
  }
  if (from.remote_router_id_v6().size() > 0) {

    remote_router_id_v6_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_router_id_v6_);
  }
  if (from.opaque().size() > 0) {

    opaque_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opaque_);
  }
  if (from.admin_group() != 0) {
    _internal_set_admin_group(from._internal_admin_group());
  }
  if (from.default_te_metric() != 0) {
    _internal_set_default_te_metric(from._internal_default_te_metric());
  }
  if (from.igp_metric() != 0) {
    _internal_set_igp_metric(from._internal_igp_metric());
  }
  if (!(from.bandwidth() <= 0 && from.bandwidth() >= 0)) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  if (!(from.reservable_bandwidth() <= 0 && from.reservable_bandwidth() >= 0)) {
    _internal_set_reservable_bandwidth(from._internal_reservable_bandwidth());
  }
  if (from.sr_adjacency_sid() != 0) {
    _internal_set_sr_adjacency_sid(from._internal_sr_adjacency_sid());
  }
}

void LsAttributeLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsAttributeLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttributeLink::CopyFrom(const LsAttributeLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsAttributeLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttributeLink::IsInitialized() const {
  return true;
}

void LsAttributeLink::InternalSwap(LsAttributeLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  unreserved_bandwidth_.InternalSwap(&other->unreserved_bandwidth_);
  srlgs_.InternalSwap(&other->srlgs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_router_id_.Swap(&other->local_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_router_id_v6_.Swap(&other->local_router_id_v6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_router_id_.Swap(&other->remote_router_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_router_id_v6_.Swap(&other->remote_router_id_v6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  opaque_.Swap(&other->opaque_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(admin_group_, other->admin_group_);
  swap(default_te_metric_, other->default_te_metric_);
  swap(igp_metric_, other->igp_metric_);
  swap(bandwidth_, other->bandwidth_);
  swap(reservable_bandwidth_, other->reservable_bandwidth_);
  swap(sr_adjacency_sid_, other->sr_adjacency_sid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttributeLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttributePrefix::InitAsDefaultInstance() {
  ::gobgpapi::_LsAttributePrefix_default_instance_._instance.get_mutable()->igp_flags_ = const_cast< ::gobgpapi::LsIGPFlags*>(
      ::gobgpapi::LsIGPFlags::internal_default_instance());
}
class LsAttributePrefix::_Internal {
 public:
  static const ::gobgpapi::LsIGPFlags& igp_flags(const LsAttributePrefix* msg);
};

const ::gobgpapi::LsIGPFlags&
LsAttributePrefix::_Internal::igp_flags(const LsAttributePrefix* msg) {
  return *msg->igp_flags_;
}
LsAttributePrefix::LsAttributePrefix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsAttributePrefix)
}
LsAttributePrefix::LsAttributePrefix(const LsAttributePrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opaque().empty()) {
    opaque_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opaque_);
  }
  if (from._internal_has_igp_flags()) {
    igp_flags_ = new ::gobgpapi::LsIGPFlags(*from.igp_flags_);
  } else {
    igp_flags_ = nullptr;
  }
  sr_prefix_sid_ = from.sr_prefix_sid_;
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsAttributePrefix)
}

void LsAttributePrefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttributePrefix_attribute_2eproto.base);
  opaque_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&igp_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sr_prefix_sid_) -
      reinterpret_cast<char*>(&igp_flags_)) + sizeof(sr_prefix_sid_));
}

LsAttributePrefix::~LsAttributePrefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsAttributePrefix)
  SharedDtor();
}

void LsAttributePrefix::SharedDtor() {
  opaque_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete igp_flags_;
}

void LsAttributePrefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttributePrefix& LsAttributePrefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttributePrefix_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttributePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsAttributePrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opaque_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && igp_flags_ != nullptr) {
    delete igp_flags_;
  }
  igp_flags_ = nullptr;
  sr_prefix_sid_ = 0u;
  _internal_metadata_.Clear();
}

const char* LsAttributePrefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LsIGPFlags igp_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_igp_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes opaque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_opaque();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sr_prefix_sid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sr_prefix_sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttributePrefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsAttributePrefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LsIGPFlags igp_flags = 1;
  if (this->has_igp_flags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::igp_flags(this), target, stream);
  }

  // bytes opaque = 2;
  if (this->opaque().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_opaque(), target);
  }

  // uint32 sr_prefix_sid = 3;
  if (this->sr_prefix_sid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sr_prefix_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsAttributePrefix)
  return target;
}

size_t LsAttributePrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsAttributePrefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes opaque = 2;
  if (this->opaque().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_opaque());
  }

  // .gobgpapi.LsIGPFlags igp_flags = 1;
  if (this->has_igp_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *igp_flags_);
  }

  // uint32 sr_prefix_sid = 3;
  if (this->sr_prefix_sid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sr_prefix_sid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttributePrefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsAttributePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttributePrefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttributePrefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsAttributePrefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsAttributePrefix)
    MergeFrom(*source);
  }
}

void LsAttributePrefix::MergeFrom(const LsAttributePrefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsAttributePrefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opaque().size() > 0) {

    opaque_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opaque_);
  }
  if (from.has_igp_flags()) {
    _internal_mutable_igp_flags()->::gobgpapi::LsIGPFlags::MergeFrom(from._internal_igp_flags());
  }
  if (from.sr_prefix_sid() != 0) {
    _internal_set_sr_prefix_sid(from._internal_sr_prefix_sid());
  }
}

void LsAttributePrefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsAttributePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttributePrefix::CopyFrom(const LsAttributePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsAttributePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttributePrefix::IsInitialized() const {
  return true;
}

void LsAttributePrefix::InternalSwap(LsAttributePrefix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  opaque_.Swap(&other->opaque_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(igp_flags_, other->igp_flags_);
  swap(sr_prefix_sid_, other->sr_prefix_sid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttributePrefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LsAttribute::InitAsDefaultInstance() {
  ::gobgpapi::_LsAttribute_default_instance_._instance.get_mutable()->node_ = const_cast< ::gobgpapi::LsAttributeNode*>(
      ::gobgpapi::LsAttributeNode::internal_default_instance());
  ::gobgpapi::_LsAttribute_default_instance_._instance.get_mutable()->link_ = const_cast< ::gobgpapi::LsAttributeLink*>(
      ::gobgpapi::LsAttributeLink::internal_default_instance());
  ::gobgpapi::_LsAttribute_default_instance_._instance.get_mutable()->prefix_ = const_cast< ::gobgpapi::LsAttributePrefix*>(
      ::gobgpapi::LsAttributePrefix::internal_default_instance());
}
class LsAttribute::_Internal {
 public:
  static const ::gobgpapi::LsAttributeNode& node(const LsAttribute* msg);
  static const ::gobgpapi::LsAttributeLink& link(const LsAttribute* msg);
  static const ::gobgpapi::LsAttributePrefix& prefix(const LsAttribute* msg);
};

const ::gobgpapi::LsAttributeNode&
LsAttribute::_Internal::node(const LsAttribute* msg) {
  return *msg->node_;
}
const ::gobgpapi::LsAttributeLink&
LsAttribute::_Internal::link(const LsAttribute* msg) {
  return *msg->link_;
}
const ::gobgpapi::LsAttributePrefix&
LsAttribute::_Internal::prefix(const LsAttribute* msg) {
  return *msg->prefix_;
}
LsAttribute::LsAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.LsAttribute)
}
LsAttribute::LsAttribute(const LsAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::gobgpapi::LsAttributeNode(*from.node_);
  } else {
    node_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::gobgpapi::LsAttributeLink(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_prefix()) {
    prefix_ = new ::gobgpapi::LsAttributePrefix(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gobgpapi.LsAttribute)
}

void LsAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LsAttribute_attribute_2eproto.base);
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_) -
      reinterpret_cast<char*>(&node_)) + sizeof(prefix_));
}

LsAttribute::~LsAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.LsAttribute)
  SharedDtor();
}

void LsAttribute::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete prefix_;
}

void LsAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LsAttribute& LsAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LsAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void LsAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.LsAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LsAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gobgpapi.LsAttributeNode node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsAttributeLink link = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .gobgpapi.LsAttributePrefix prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LsAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.LsAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gobgpapi.LsAttributeNode node = 1;
  if (this->has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node(this), target, stream);
  }

  // .gobgpapi.LsAttributeLink link = 2;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::link(this), target, stream);
  }

  // .gobgpapi.LsAttributePrefix prefix = 3;
  if (this->has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prefix(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.LsAttribute)
  return target;
}

size_t LsAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.LsAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gobgpapi.LsAttributeNode node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // .gobgpapi.LsAttributeLink link = 2;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .gobgpapi.LsAttributePrefix prefix = 3;
  if (this->has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LsAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.LsAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const LsAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LsAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.LsAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.LsAttribute)
    MergeFrom(*source);
  }
}

void LsAttribute::MergeFrom(const LsAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.LsAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    _internal_mutable_node()->::gobgpapi::LsAttributeNode::MergeFrom(from._internal_node());
  }
  if (from.has_link()) {
    _internal_mutable_link()->::gobgpapi::LsAttributeLink::MergeFrom(from._internal_link());
  }
  if (from.has_prefix()) {
    _internal_mutable_prefix()->::gobgpapi::LsAttributePrefix::MergeFrom(from._internal_prefix());
  }
}

void LsAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.LsAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LsAttribute::CopyFrom(const LsAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.LsAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LsAttribute::IsInitialized() const {
  return true;
}

void LsAttribute::InternalSwap(LsAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_, other->node_);
  swap(link_, other->link_);
  swap(prefix_, other->prefix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LsAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnknownAttribute::InitAsDefaultInstance() {
}
class UnknownAttribute::_Internal {
 public:
};

UnknownAttribute::UnknownAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.UnknownAttribute)
}
UnknownAttribute::UnknownAttribute(const UnknownAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:gobgpapi.UnknownAttribute)
}

void UnknownAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnknownAttribute_attribute_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(type_));
}

UnknownAttribute::~UnknownAttribute() {
  // @@protoc_insertion_point(destructor:gobgpapi.UnknownAttribute)
  SharedDtor();
}

void UnknownAttribute::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnknownAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownAttribute& UnknownAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnknownAttribute_attribute_2eproto.base);
  return *internal_default_instance();
}


void UnknownAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gobgpapi.UnknownAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* UnknownAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnknownAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.UnknownAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.UnknownAttribute)
  return target;
}

size_t UnknownAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gobgpapi.UnknownAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gobgpapi.UnknownAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const UnknownAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnknownAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gobgpapi.UnknownAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gobgpapi.UnknownAttribute)
    MergeFrom(*source);
  }
}

void UnknownAttribute::MergeFrom(const UnknownAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gobgpapi.UnknownAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void UnknownAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gobgpapi.UnknownAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownAttribute::CopyFrom(const UnknownAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gobgpapi.UnknownAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownAttribute::IsInitialized() const {
  return true;
}

void UnknownAttribute::InternalSwap(UnknownAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gobgpapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gobgpapi::OriginAttribute* Arena::CreateMaybeMessage< ::gobgpapi::OriginAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::OriginAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AsSegment* Arena::CreateMaybeMessage< ::gobgpapi::AsSegment >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AsSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AsPathAttribute* Arena::CreateMaybeMessage< ::gobgpapi::AsPathAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AsPathAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::NextHopAttribute* Arena::CreateMaybeMessage< ::gobgpapi::NextHopAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::NextHopAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MultiExitDiscAttribute* Arena::CreateMaybeMessage< ::gobgpapi::MultiExitDiscAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MultiExitDiscAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LocalPrefAttribute* Arena::CreateMaybeMessage< ::gobgpapi::LocalPrefAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LocalPrefAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AtomicAggregateAttribute* Arena::CreateMaybeMessage< ::gobgpapi::AtomicAggregateAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AtomicAggregateAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AggregatorAttribute* Arena::CreateMaybeMessage< ::gobgpapi::AggregatorAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AggregatorAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::CommunitiesAttribute* Arena::CreateMaybeMessage< ::gobgpapi::CommunitiesAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::CommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::OriginatorIdAttribute* Arena::CreateMaybeMessage< ::gobgpapi::OriginatorIdAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::OriginatorIdAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ClusterListAttribute* Arena::CreateMaybeMessage< ::gobgpapi::ClusterListAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ClusterListAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::IPAddressPrefix* Arena::CreateMaybeMessage< ::gobgpapi::IPAddressPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::IPAddressPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LabeledIPAddressPrefix* Arena::CreateMaybeMessage< ::gobgpapi::LabeledIPAddressPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LabeledIPAddressPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EncapsulationNLRI* Arena::CreateMaybeMessage< ::gobgpapi::EncapsulationNLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EncapsulationNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteDistinguisherTwoOctetAS* Arena::CreateMaybeMessage< ::gobgpapi::RouteDistinguisherTwoOctetAS >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteDistinguisherTwoOctetAS >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteDistinguisherIPAddress* Arena::CreateMaybeMessage< ::gobgpapi::RouteDistinguisherIPAddress >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteDistinguisherIPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteDistinguisherFourOctetAS* Arena::CreateMaybeMessage< ::gobgpapi::RouteDistinguisherFourOctetAS >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteDistinguisherFourOctetAS >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EthernetSegmentIdentifier* Arena::CreateMaybeMessage< ::gobgpapi::EthernetSegmentIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EthernetSegmentIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EVPNEthernetAutoDiscoveryRoute* Arena::CreateMaybeMessage< ::gobgpapi::EVPNEthernetAutoDiscoveryRoute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EVPNEthernetAutoDiscoveryRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EVPNMACIPAdvertisementRoute* Arena::CreateMaybeMessage< ::gobgpapi::EVPNMACIPAdvertisementRoute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EVPNMACIPAdvertisementRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute* Arena::CreateMaybeMessage< ::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EVPNInclusiveMulticastEthernetTagRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EVPNEthernetSegmentRoute* Arena::CreateMaybeMessage< ::gobgpapi::EVPNEthernetSegmentRoute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EVPNEthernetSegmentRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EVPNIPPrefixRoute* Arena::CreateMaybeMessage< ::gobgpapi::EVPNIPPrefixRoute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EVPNIPPrefixRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EVPNIPMSIRoute* Arena::CreateMaybeMessage< ::gobgpapi::EVPNIPMSIRoute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EVPNIPMSIRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LabeledVPNIPAddressPrefix* Arena::CreateMaybeMessage< ::gobgpapi::LabeledVPNIPAddressPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LabeledVPNIPAddressPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouteTargetMembershipNLRI* Arena::CreateMaybeMessage< ::gobgpapi::RouteTargetMembershipNLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouteTargetMembershipNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::FlowSpecIPPrefix* Arena::CreateMaybeMessage< ::gobgpapi::FlowSpecIPPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::FlowSpecIPPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::FlowSpecMAC* Arena::CreateMaybeMessage< ::gobgpapi::FlowSpecMAC >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::FlowSpecMAC >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::FlowSpecComponentItem* Arena::CreateMaybeMessage< ::gobgpapi::FlowSpecComponentItem >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::FlowSpecComponentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::FlowSpecComponent* Arena::CreateMaybeMessage< ::gobgpapi::FlowSpecComponent >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::FlowSpecComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::FlowSpecNLRI* Arena::CreateMaybeMessage< ::gobgpapi::FlowSpecNLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::FlowSpecNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::VPNFlowSpecNLRI* Arena::CreateMaybeMessage< ::gobgpapi::VPNFlowSpecNLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::VPNFlowSpecNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::OpaqueNLRI* Arena::CreateMaybeMessage< ::gobgpapi::OpaqueNLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::OpaqueNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsNodeDescriptor* Arena::CreateMaybeMessage< ::gobgpapi::LsNodeDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsNodeDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsLinkDescriptor* Arena::CreateMaybeMessage< ::gobgpapi::LsLinkDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsLinkDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsPrefixDescriptor* Arena::CreateMaybeMessage< ::gobgpapi::LsPrefixDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsPrefixDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsNodeNLRI* Arena::CreateMaybeMessage< ::gobgpapi::LsNodeNLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsNodeNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsLinkNLRI* Arena::CreateMaybeMessage< ::gobgpapi::LsLinkNLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsLinkNLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsPrefixV4NLRI* Arena::CreateMaybeMessage< ::gobgpapi::LsPrefixV4NLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsPrefixV4NLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsPrefixV6NLRI* Arena::CreateMaybeMessage< ::gobgpapi::LsPrefixV6NLRI >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsPrefixV6NLRI >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsAddrPrefix* Arena::CreateMaybeMessage< ::gobgpapi::LsAddrPrefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsAddrPrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MpReachNLRIAttribute* Arena::CreateMaybeMessage< ::gobgpapi::MpReachNLRIAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MpReachNLRIAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MpUnreachNLRIAttribute* Arena::CreateMaybeMessage< ::gobgpapi::MpUnreachNLRIAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MpUnreachNLRIAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TwoOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::TwoOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TwoOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::IPv4AddressSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::IPv4AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::IPv4AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::FourOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::FourOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::FourOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ValidationExtended* Arena::CreateMaybeMessage< ::gobgpapi::ValidationExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ValidationExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ColorExtended* Arena::CreateMaybeMessage< ::gobgpapi::ColorExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ColorExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::EncapExtended* Arena::CreateMaybeMessage< ::gobgpapi::EncapExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::EncapExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::DefaultGatewayExtended* Arena::CreateMaybeMessage< ::gobgpapi::DefaultGatewayExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::DefaultGatewayExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::OpaqueExtended* Arena::CreateMaybeMessage< ::gobgpapi::OpaqueExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::OpaqueExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ESILabelExtended* Arena::CreateMaybeMessage< ::gobgpapi::ESILabelExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ESILabelExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ESImportRouteTarget* Arena::CreateMaybeMessage< ::gobgpapi::ESImportRouteTarget >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ESImportRouteTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::MacMobilityExtended* Arena::CreateMaybeMessage< ::gobgpapi::MacMobilityExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::MacMobilityExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RouterMacExtended* Arena::CreateMaybeMessage< ::gobgpapi::RouterMacExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RouterMacExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TrafficRateExtended* Arena::CreateMaybeMessage< ::gobgpapi::TrafficRateExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TrafficRateExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TrafficActionExtended* Arena::CreateMaybeMessage< ::gobgpapi::TrafficActionExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TrafficActionExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RedirectTwoOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::RedirectTwoOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RedirectTwoOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RedirectIPv4AddressSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::RedirectIPv4AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RedirectIPv4AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RedirectFourOctetAsSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::RedirectFourOctetAsSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RedirectFourOctetAsSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TrafficRemarkExtended* Arena::CreateMaybeMessage< ::gobgpapi::TrafficRemarkExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TrafficRemarkExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UnknownExtended* Arena::CreateMaybeMessage< ::gobgpapi::UnknownExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UnknownExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage< ::gobgpapi::ExtendedCommunitiesAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::ExtendedCommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::As4PathAttribute* Arena::CreateMaybeMessage< ::gobgpapi::As4PathAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::As4PathAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::As4AggregatorAttribute* Arena::CreateMaybeMessage< ::gobgpapi::As4AggregatorAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::As4AggregatorAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::PmsiTunnelAttribute* Arena::CreateMaybeMessage< ::gobgpapi::PmsiTunnelAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::PmsiTunnelAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TunnelEncapSubTLVEncapsulation* Arena::CreateMaybeMessage< ::gobgpapi::TunnelEncapSubTLVEncapsulation >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TunnelEncapSubTLVEncapsulation >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TunnelEncapSubTLVProtocol* Arena::CreateMaybeMessage< ::gobgpapi::TunnelEncapSubTLVProtocol >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TunnelEncapSubTLVProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TunnelEncapSubTLVColor* Arena::CreateMaybeMessage< ::gobgpapi::TunnelEncapSubTLVColor >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TunnelEncapSubTLVColor >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TunnelEncapSubTLVUnknown* Arena::CreateMaybeMessage< ::gobgpapi::TunnelEncapSubTLVUnknown >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TunnelEncapSubTLVUnknown >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TunnelEncapTLV* Arena::CreateMaybeMessage< ::gobgpapi::TunnelEncapTLV >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TunnelEncapTLV >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::TunnelEncapAttribute* Arena::CreateMaybeMessage< ::gobgpapi::TunnelEncapAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::TunnelEncapAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::IPv6AddressSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::IPv6AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::IPv6AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::RedirectIPv6AddressSpecificExtended* Arena::CreateMaybeMessage< ::gobgpapi::RedirectIPv6AddressSpecificExtended >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::RedirectIPv6AddressSpecificExtended >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::IP6ExtendedCommunitiesAttribute* Arena::CreateMaybeMessage< ::gobgpapi::IP6ExtendedCommunitiesAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::IP6ExtendedCommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AigpTLVIGPMetric* Arena::CreateMaybeMessage< ::gobgpapi::AigpTLVIGPMetric >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AigpTLVIGPMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AigpTLVUnknown* Arena::CreateMaybeMessage< ::gobgpapi::AigpTLVUnknown >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AigpTLVUnknown >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::AigpAttribute* Arena::CreateMaybeMessage< ::gobgpapi::AigpAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::AigpAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LargeCommunity* Arena::CreateMaybeMessage< ::gobgpapi::LargeCommunity >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LargeCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LargeCommunitiesAttribute* Arena::CreateMaybeMessage< ::gobgpapi::LargeCommunitiesAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LargeCommunitiesAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsNodeFlags* Arena::CreateMaybeMessage< ::gobgpapi::LsNodeFlags >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsNodeFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsIGPFlags* Arena::CreateMaybeMessage< ::gobgpapi::LsIGPFlags >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsIGPFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsSrRange* Arena::CreateMaybeMessage< ::gobgpapi::LsSrRange >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsSrRange >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsSrCapabilities* Arena::CreateMaybeMessage< ::gobgpapi::LsSrCapabilities >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsSrCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsSrLocalBlock* Arena::CreateMaybeMessage< ::gobgpapi::LsSrLocalBlock >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsSrLocalBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsAttributeNode* Arena::CreateMaybeMessage< ::gobgpapi::LsAttributeNode >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsAttributeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsAttributeLink* Arena::CreateMaybeMessage< ::gobgpapi::LsAttributeLink >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsAttributeLink >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsAttributePrefix* Arena::CreateMaybeMessage< ::gobgpapi::LsAttributePrefix >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsAttributePrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::LsAttribute* Arena::CreateMaybeMessage< ::gobgpapi::LsAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::LsAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::gobgpapi::UnknownAttribute* Arena::CreateMaybeMessage< ::gobgpapi::UnknownAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::gobgpapi::UnknownAttribute >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
