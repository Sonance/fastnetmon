// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fastnetmon.proto
#ifndef GRPC_fastnetmon_2eproto__INCLUDED
#define GRPC_fastnetmon_2eproto__INCLUDED

#include "fastnetmon.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace fastmitigation {

class Fastnetmon final {
 public:
  static constexpr char const* service_full_name() {
    return "fastmitigation.Fastnetmon";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fastmitigation::BanListReply>> GetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fastmitigation::BanListReply>>(GetBanlistRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>> AsyncGetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>>(AsyncGetBanlistRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>> PrepareAsyncGetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>>(PrepareAsyncGetBanlistRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>> AsyncExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteBanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>> PrepareAsyncExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>>(PrepareAsyncExecuteBanRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>> AsyncExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteUnBanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>> PrepareAsyncExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>>(PrepareAsyncExecuteUnBanRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBanlist(::grpc::ClientContext* context, ::fastmitigation::BanListRequest* request, ::grpc::ClientReadReactor< ::fastmitigation::BanListReply>* reactor) = 0;
      #else
      virtual void GetBanlist(::grpc::ClientContext* context, ::fastmitigation::BanListRequest* request, ::grpc::experimental::ClientReadReactor< ::fastmitigation::BanListReply>* reactor) = 0;
      #endif
      virtual void ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::fastmitigation::BanListReply>* GetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>* AsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>* PrepareAsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>* AsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>* PrepareAsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>* AsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>* PrepareAsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::fastmitigation::BanListReply>> GetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fastmitigation::BanListReply>>(GetBanlistRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>> AsyncGetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>>(AsyncGetBanlistRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>> PrepareAsyncGetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>>(PrepareAsyncGetBanlistRaw(context, request, cq));
    }
    ::grpc::Status ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>> AsyncExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteBanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>> PrepareAsyncExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>>(PrepareAsyncExecuteBanRaw(context, request, cq));
    }
    ::grpc::Status ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>> AsyncExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteUnBanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>> PrepareAsyncExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>>(PrepareAsyncExecuteUnBanRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBanlist(::grpc::ClientContext* context, ::fastmitigation::BanListRequest* request, ::grpc::ClientReadReactor< ::fastmitigation::BanListReply>* reactor) override;
      #else
      void GetBanlist(::grpc::ClientContext* context, ::fastmitigation::BanListRequest* request, ::grpc::experimental::ClientReadReactor< ::fastmitigation::BanListReply>* reactor) override;
      #endif
      void ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) override;
      void ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) override;
      void ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::fastmitigation::BanListReply>* GetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) override;
    ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>* AsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>* PrepareAsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* AsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* PrepareAsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* AsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* PrepareAsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetBanlist_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteBan_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteUnBan_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetBanlist(::grpc::ServerContext* context, const ::fastmitigation::BanListRequest* request, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* writer);
    virtual ::grpc::Status ExecuteBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response);
    virtual ::grpc::Status ExecuteUnBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBanlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBanlist() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetBanlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBanlist(::grpc::ServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBanlist(::grpc::ServerContext* context, ::fastmitigation::BanListRequest* request, ::grpc::ServerAsyncWriter< ::fastmitigation::BanListReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteBan() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExecuteBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteBan(::grpc::ServerContext* context, ::fastmitigation::ExecuteBanRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastmitigation::ExecuteBanReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteUnBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteUnBan() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ExecuteUnBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUnBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUnBan(::grpc::ServerContext* context, ::fastmitigation::ExecuteBanRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastmitigation::ExecuteBanReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetBanlist<WithAsyncMethod_ExecuteBan<WithAsyncMethod_ExecuteUnBan<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBanlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBanlist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::fastmitigation::BanListRequest, ::fastmitigation::BanListReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fastmitigation::BanListRequest* request) { return this->GetBanlist(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetBanlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBanlist(::grpc::ServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::fastmitigation::BanListReply>* GetBanlist(
      ::grpc::CallbackServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::fastmitigation::BanListReply>* GetBanlist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExecuteBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExecuteBan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response) { return this->ExecuteBan(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteBan(
        ::grpc::experimental::MessageAllocator< ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ExecuteBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteBan(
      ::grpc::CallbackServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteBan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExecuteUnBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExecuteUnBan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response) { return this->ExecuteUnBan(context, request, response); }));}
    void SetMessageAllocatorFor_ExecuteUnBan(
        ::grpc::experimental::MessageAllocator< ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ExecuteUnBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUnBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteUnBan(
      ::grpc::CallbackServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteUnBan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetBanlist<ExperimentalWithCallbackMethod_ExecuteBan<ExperimentalWithCallbackMethod_ExecuteUnBan<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetBanlist<ExperimentalWithCallbackMethod_ExecuteBan<ExperimentalWithCallbackMethod_ExecuteUnBan<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetBanlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBanlist() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetBanlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBanlist(::grpc::ServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteBan() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExecuteBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecuteUnBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteUnBan() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ExecuteUnBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUnBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBanlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBanlist() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetBanlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBanlist(::grpc::ServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBanlist(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteBan() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExecuteBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteBan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteUnBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteUnBan() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ExecuteUnBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUnBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteUnBan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBanlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBanlist() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetBanlist(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBanlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBanlist(::grpc::ServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetBanlist(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetBanlist(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExecuteBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExecuteBan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteBan(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ExecuteBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteBan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteBan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExecuteUnBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExecuteUnBan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecuteUnBan(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ExecuteUnBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteUnBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ExecuteUnBan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ExecuteUnBan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteBan() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>* streamer) {
                       return this->StreamedExecuteBan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteBan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastmitigation::ExecuteBanRequest,::fastmitigation::ExecuteBanReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteUnBan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteUnBan() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>* streamer) {
                       return this->StreamedExecuteUnBan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecuteUnBan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteUnBan(::grpc::ServerContext* /*context*/, const ::fastmitigation::ExecuteBanRequest* /*request*/, ::fastmitigation::ExecuteBanReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteUnBan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fastmitigation::ExecuteBanRequest,::fastmitigation::ExecuteBanReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteBan<WithStreamedUnaryMethod_ExecuteUnBan<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetBanlist : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetBanlist() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::fastmitigation::BanListRequest, ::fastmitigation::BanListReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::fastmitigation::BanListRequest, ::fastmitigation::BanListReply>* streamer) {
                       return this->StreamedGetBanlist(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetBanlist() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBanlist(::grpc::ServerContext* /*context*/, const ::fastmitigation::BanListRequest* /*request*/, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetBanlist(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::fastmitigation::BanListRequest,::fastmitigation::BanListReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetBanlist<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetBanlist<WithStreamedUnaryMethod_ExecuteBan<WithStreamedUnaryMethod_ExecuteUnBan<Service > > > StreamedService;
};

}  // namespace fastmitigation


#endif  // GRPC_fastnetmon_2eproto__INCLUDED
