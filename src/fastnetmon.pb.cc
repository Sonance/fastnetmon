// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fastnetmon.proto

#include "fastnetmon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fastmitigation {
class BanListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanListRequest> _instance;
} _BanListRequest_default_instance_;
class BanListReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BanListReply> _instance;
} _BanListReply_default_instance_;
class ExecuteBanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecuteBanRequest> _instance;
} _ExecuteBanRequest_default_instance_;
class ExecuteBanReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecuteBanReply> _instance;
} _ExecuteBanReply_default_instance_;
}  // namespace fastmitigation
static void InitDefaultsscc_info_BanListReply_fastnetmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fastmitigation::_BanListReply_default_instance_;
    new (ptr) ::fastmitigation::BanListReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fastmitigation::BanListReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanListReply_fastnetmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanListReply_fastnetmon_2eproto}, {}};

static void InitDefaultsscc_info_BanListRequest_fastnetmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fastmitigation::_BanListRequest_default_instance_;
    new (ptr) ::fastmitigation::BanListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fastmitigation::BanListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BanListRequest_fastnetmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BanListRequest_fastnetmon_2eproto}, {}};

static void InitDefaultsscc_info_ExecuteBanReply_fastnetmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fastmitigation::_ExecuteBanReply_default_instance_;
    new (ptr) ::fastmitigation::ExecuteBanReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fastmitigation::ExecuteBanReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecuteBanReply_fastnetmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecuteBanReply_fastnetmon_2eproto}, {}};

static void InitDefaultsscc_info_ExecuteBanRequest_fastnetmon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fastmitigation::_ExecuteBanRequest_default_instance_;
    new (ptr) ::fastmitigation::ExecuteBanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fastmitigation::ExecuteBanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecuteBanRequest_fastnetmon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecuteBanRequest_fastnetmon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fastnetmon_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fastnetmon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fastnetmon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fastnetmon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fastmitigation::BanListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fastmitigation::BanListReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fastmitigation::BanListReply, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fastmitigation::ExecuteBanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fastmitigation::ExecuteBanRequest, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fastmitigation::ExecuteBanReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fastmitigation::ExecuteBanReply, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fastmitigation::BanListRequest)},
  { 5, -1, sizeof(::fastmitigation::BanListReply)},
  { 11, -1, sizeof(::fastmitigation::ExecuteBanRequest)},
  { 17, -1, sizeof(::fastmitigation::ExecuteBanReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fastmitigation::_BanListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fastmitigation::_BanListReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fastmitigation::_ExecuteBanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fastmitigation::_ExecuteBanReply_default_instance_),
};

const char descriptor_table_protodef_fastnetmon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020fastnetmon.proto\022\016fastmitigation\"\020\n\016Ba"
  "nListRequest\"\"\n\014BanListReply\022\022\n\nip_addre"
  "ss\030\001 \001(\t\"\'\n\021ExecuteBanRequest\022\022\n\nip_addr"
  "ess\030\001 \001(\t\"!\n\017ExecuteBanReply\022\016\n\006result\030\001"
  " \001(\0102\206\002\n\nFastnetmon\022N\n\nGetBanlist\022\036.fast"
  "mitigation.BanListRequest\032\034.fastmitigati"
  "on.BanListReply\"\0000\001\022R\n\nExecuteBan\022!.fast"
  "mitigation.ExecuteBanRequest\032\037.fastmitig"
  "ation.ExecuteBanReply\"\000\022T\n\014ExecuteUnBan\022"
  "!.fastmitigation.ExecuteBanRequest\032\037.fas"
  "tmitigation.ExecuteBanReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fastnetmon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fastnetmon_2eproto_sccs[4] = {
  &scc_info_BanListReply_fastnetmon_2eproto.base,
  &scc_info_BanListRequest_fastnetmon_2eproto.base,
  &scc_info_ExecuteBanReply_fastnetmon_2eproto.base,
  &scc_info_ExecuteBanRequest_fastnetmon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fastnetmon_2eproto_once;
static bool descriptor_table_fastnetmon_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fastnetmon_2eproto = {
  &descriptor_table_fastnetmon_2eproto_initialized, descriptor_table_protodef_fastnetmon_2eproto, "fastnetmon.proto", 437,
  &descriptor_table_fastnetmon_2eproto_once, descriptor_table_fastnetmon_2eproto_sccs, descriptor_table_fastnetmon_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_fastnetmon_2eproto::offsets,
  file_level_metadata_fastnetmon_2eproto, 4, file_level_enum_descriptors_fastnetmon_2eproto, file_level_service_descriptors_fastnetmon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fastnetmon_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fastnetmon_2eproto), true);
namespace fastmitigation {

// ===================================================================

void BanListRequest::InitAsDefaultInstance() {
}
class BanListRequest::_Internal {
 public:
};

BanListRequest::BanListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fastmitigation.BanListRequest)
}
BanListRequest::BanListRequest(const BanListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fastmitigation.BanListRequest)
}

void BanListRequest::SharedCtor() {
}

BanListRequest::~BanListRequest() {
  // @@protoc_insertion_point(destructor:fastmitigation.BanListRequest)
  SharedDtor();
}

void BanListRequest::SharedDtor() {
}

void BanListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanListRequest& BanListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanListRequest_fastnetmon_2eproto.base);
  return *internal_default_instance();
}


void BanListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fastmitigation.BanListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* BanListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fastmitigation.BanListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fastmitigation.BanListRequest)
  return target;
}

size_t BanListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fastmitigation.BanListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fastmitigation.BanListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BanListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fastmitigation.BanListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fastmitigation.BanListRequest)
    MergeFrom(*source);
  }
}

void BanListRequest::MergeFrom(const BanListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fastmitigation.BanListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BanListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fastmitigation.BanListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanListRequest::CopyFrom(const BanListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fastmitigation.BanListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanListRequest::IsInitialized() const {
  return true;
}

void BanListRequest::InternalSwap(BanListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BanListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BanListReply::InitAsDefaultInstance() {
}
class BanListReply::_Internal {
 public:
};

BanListReply::BanListReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fastmitigation.BanListReply)
}
BanListReply::BanListReply(const BanListReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  // @@protoc_insertion_point(copy_constructor:fastmitigation.BanListReply)
}

void BanListReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BanListReply_fastnetmon_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BanListReply::~BanListReply() {
  // @@protoc_insertion_point(destructor:fastmitigation.BanListReply)
  SharedDtor();
}

void BanListReply::SharedDtor() {
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BanListReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BanListReply& BanListReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BanListReply_fastnetmon_2eproto.base);
  return *internal_default_instance();
}


void BanListReply::Clear() {
// @@protoc_insertion_point(message_clear_start:fastmitigation.BanListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BanListReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fastmitigation.BanListReply.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BanListReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fastmitigation.BanListReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fastmitigation.BanListReply.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fastmitigation.BanListReply)
  return target;
}

size_t BanListReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fastmitigation.BanListReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BanListReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fastmitigation.BanListReply)
  GOOGLE_DCHECK_NE(&from, this);
  const BanListReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BanListReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fastmitigation.BanListReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fastmitigation.BanListReply)
    MergeFrom(*source);
  }
}

void BanListReply::MergeFrom(const BanListReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fastmitigation.BanListReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
}

void BanListReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fastmitigation.BanListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BanListReply::CopyFrom(const BanListReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fastmitigation.BanListReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanListReply::IsInitialized() const {
  return true;
}

void BanListReply::InternalSwap(BanListReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BanListReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecuteBanRequest::InitAsDefaultInstance() {
}
class ExecuteBanRequest::_Internal {
 public:
};

ExecuteBanRequest::ExecuteBanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fastmitigation.ExecuteBanRequest)
}
ExecuteBanRequest::ExecuteBanRequest(const ExecuteBanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  // @@protoc_insertion_point(copy_constructor:fastmitigation.ExecuteBanRequest)
}

void ExecuteBanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecuteBanRequest_fastnetmon_2eproto.base);
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExecuteBanRequest::~ExecuteBanRequest() {
  // @@protoc_insertion_point(destructor:fastmitigation.ExecuteBanRequest)
  SharedDtor();
}

void ExecuteBanRequest::SharedDtor() {
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteBanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecuteBanRequest& ExecuteBanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecuteBanRequest_fastnetmon_2eproto.base);
  return *internal_default_instance();
}


void ExecuteBanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fastmitigation.ExecuteBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ExecuteBanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fastmitigation.ExecuteBanRequest.ip_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteBanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fastmitigation.ExecuteBanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fastmitigation.ExecuteBanRequest.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fastmitigation.ExecuteBanRequest)
  return target;
}

size_t ExecuteBanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fastmitigation.ExecuteBanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteBanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fastmitigation.ExecuteBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteBanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteBanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fastmitigation.ExecuteBanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fastmitigation.ExecuteBanRequest)
    MergeFrom(*source);
  }
}

void ExecuteBanRequest::MergeFrom(const ExecuteBanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fastmitigation.ExecuteBanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
}

void ExecuteBanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fastmitigation.ExecuteBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteBanRequest::CopyFrom(const ExecuteBanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fastmitigation.ExecuteBanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteBanRequest::IsInitialized() const {
  return true;
}

void ExecuteBanRequest::InternalSwap(ExecuteBanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteBanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecuteBanReply::InitAsDefaultInstance() {
}
class ExecuteBanReply::_Internal {
 public:
};

ExecuteBanReply::ExecuteBanReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fastmitigation.ExecuteBanReply)
}
ExecuteBanReply::ExecuteBanReply(const ExecuteBanReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:fastmitigation.ExecuteBanReply)
}

void ExecuteBanReply::SharedCtor() {
  result_ = false;
}

ExecuteBanReply::~ExecuteBanReply() {
  // @@protoc_insertion_point(destructor:fastmitigation.ExecuteBanReply)
  SharedDtor();
}

void ExecuteBanReply::SharedDtor() {
}

void ExecuteBanReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecuteBanReply& ExecuteBanReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecuteBanReply_fastnetmon_2eproto.base);
  return *internal_default_instance();
}


void ExecuteBanReply::Clear() {
// @@protoc_insertion_point(message_clear_start:fastmitigation.ExecuteBanReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear();
}

const char* ExecuteBanReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteBanReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fastmitigation.ExecuteBanReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fastmitigation.ExecuteBanReply)
  return target;
}

size_t ExecuteBanReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fastmitigation.ExecuteBanReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteBanReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fastmitigation.ExecuteBanReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteBanReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteBanReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fastmitigation.ExecuteBanReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fastmitigation.ExecuteBanReply)
    MergeFrom(*source);
  }
}

void ExecuteBanReply::MergeFrom(const ExecuteBanReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fastmitigation.ExecuteBanReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ExecuteBanReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fastmitigation.ExecuteBanReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteBanReply::CopyFrom(const ExecuteBanReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fastmitigation.ExecuteBanReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteBanReply::IsInitialized() const {
  return true;
}

void ExecuteBanReply::InternalSwap(ExecuteBanReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteBanReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fastmitigation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fastmitigation::BanListRequest* Arena::CreateMaybeMessage< ::fastmitigation::BanListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fastmitigation::BanListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fastmitigation::BanListReply* Arena::CreateMaybeMessage< ::fastmitigation::BanListReply >(Arena* arena) {
  return Arena::CreateInternal< ::fastmitigation::BanListReply >(arena);
}
template<> PROTOBUF_NOINLINE ::fastmitigation::ExecuteBanRequest* Arena::CreateMaybeMessage< ::fastmitigation::ExecuteBanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::fastmitigation::ExecuteBanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fastmitigation::ExecuteBanReply* Arena::CreateMaybeMessage< ::fastmitigation::ExecuteBanReply >(Arena* arena) {
  return Arena::CreateInternal< ::fastmitigation::ExecuteBanReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
