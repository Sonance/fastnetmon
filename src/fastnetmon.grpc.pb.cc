// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fastnetmon.proto

#include "fastnetmon.pb.h"
#include "fastnetmon.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fastmitigation {

static const char* Fastnetmon_method_names[] = {
  "/fastmitigation.Fastnetmon/GetBanlist",
  "/fastmitigation.Fastnetmon/ExecuteBan",
  "/fastmitigation.Fastnetmon/ExecuteUnBan",
};

std::unique_ptr< Fastnetmon::Stub> Fastnetmon::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Fastnetmon::Stub> stub(new Fastnetmon::Stub(channel));
  return stub;
}

Fastnetmon::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetBanlist_(Fastnetmon_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ExecuteBan_(Fastnetmon_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUnBan_(Fastnetmon_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::fastmitigation::BanListReply>* Fastnetmon::Stub::GetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::fastmitigation::BanListReply>::Create(channel_.get(), rpcmethod_GetBanlist_, context, request);
}

void Fastnetmon::Stub::experimental_async::GetBanlist(::grpc::ClientContext* context, ::fastmitigation::BanListRequest* request, ::grpc::experimental::ClientReadReactor< ::fastmitigation::BanListReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::fastmitigation::BanListReply>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBanlist_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>* Fastnetmon::Stub::AsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::fastmitigation::BanListReply>::Create(channel_.get(), cq, rpcmethod_GetBanlist_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>* Fastnetmon::Stub::PrepareAsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::fastmitigation::BanListReply>::Create(channel_.get(), cq, rpcmethod_GetBanlist_, context, request, false, nullptr);
}

::grpc::Status Fastnetmon::Stub::ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteBan_, context, request, response);
}

void Fastnetmon::Stub::experimental_async::ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteBan_, context, request, response, std::move(f));
}

void Fastnetmon::Stub::experimental_async::ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteBan_, context, request, response, std::move(f));
}

void Fastnetmon::Stub::experimental_async::ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteBan_, context, request, response, reactor);
}

void Fastnetmon::Stub::experimental_async::ExecuteBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteBan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* Fastnetmon::Stub::AsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::fastmitigation::ExecuteBanReply>::Create(channel_.get(), cq, rpcmethod_ExecuteBan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* Fastnetmon::Stub::PrepareAsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::fastmitigation::ExecuteBanReply>::Create(channel_.get(), cq, rpcmethod_ExecuteBan_, context, request, false);
}

::grpc::Status Fastnetmon::Stub::ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteUnBan_, context, request, response);
}

void Fastnetmon::Stub::experimental_async::ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteUnBan_, context, request, response, std::move(f));
}

void Fastnetmon::Stub::experimental_async::ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteUnBan_, context, request, response, std::move(f));
}

void Fastnetmon::Stub::experimental_async::ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteUnBan_, context, request, response, reactor);
}

void Fastnetmon::Stub::experimental_async::ExecuteUnBan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fastmitigation::ExecuteBanReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteUnBan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* Fastnetmon::Stub::AsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::fastmitigation::ExecuteBanReply>::Create(channel_.get(), cq, rpcmethod_ExecuteUnBan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* Fastnetmon::Stub::PrepareAsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::fastmitigation::ExecuteBanReply>::Create(channel_.get(), cq, rpcmethod_ExecuteUnBan_, context, request, false);
}

Fastnetmon::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Fastnetmon_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Fastnetmon::Service, ::fastmitigation::BanListRequest, ::fastmitigation::BanListReply>(
          [](Fastnetmon::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::fastmitigation::BanListRequest* req,
             ::grpc_impl::ServerWriter<::fastmitigation::BanListReply>* writer) {
               return service->GetBanlist(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Fastnetmon_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Fastnetmon::Service, ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
          [](Fastnetmon::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::fastmitigation::ExecuteBanRequest* req,
             ::fastmitigation::ExecuteBanReply* resp) {
               return service->ExecuteBan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Fastnetmon_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Fastnetmon::Service, ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
          [](Fastnetmon::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::fastmitigation::ExecuteBanRequest* req,
             ::fastmitigation::ExecuteBanReply* resp) {
               return service->ExecuteUnBan(ctx, req, resp);
             }, this)));
}

Fastnetmon::Service::~Service() {
}

::grpc::Status Fastnetmon::Service::GetBanlist(::grpc::ServerContext* context, const ::fastmitigation::BanListRequest* request, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fastnetmon::Service::ExecuteBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fastnetmon::Service::ExecuteUnBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fastmitigation

