// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fastnetmon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fastnetmon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fastnetmon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fastnetmon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fastnetmon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fastnetmon_2eproto;
namespace fastmitigation {
class BanListReply;
class BanListReplyDefaultTypeInternal;
extern BanListReplyDefaultTypeInternal _BanListReply_default_instance_;
class BanListRequest;
class BanListRequestDefaultTypeInternal;
extern BanListRequestDefaultTypeInternal _BanListRequest_default_instance_;
class ExecuteBanReply;
class ExecuteBanReplyDefaultTypeInternal;
extern ExecuteBanReplyDefaultTypeInternal _ExecuteBanReply_default_instance_;
class ExecuteBanRequest;
class ExecuteBanRequestDefaultTypeInternal;
extern ExecuteBanRequestDefaultTypeInternal _ExecuteBanRequest_default_instance_;
}  // namespace fastmitigation
PROTOBUF_NAMESPACE_OPEN
template<> ::fastmitigation::BanListReply* Arena::CreateMaybeMessage<::fastmitigation::BanListReply>(Arena*);
template<> ::fastmitigation::BanListRequest* Arena::CreateMaybeMessage<::fastmitigation::BanListRequest>(Arena*);
template<> ::fastmitigation::ExecuteBanReply* Arena::CreateMaybeMessage<::fastmitigation::ExecuteBanReply>(Arena*);
template<> ::fastmitigation::ExecuteBanRequest* Arena::CreateMaybeMessage<::fastmitigation::ExecuteBanRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fastmitigation {

// ===================================================================

class BanListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fastmitigation.BanListRequest) */ {
 public:
  BanListRequest();
  virtual ~BanListRequest();

  BanListRequest(const BanListRequest& from);
  BanListRequest(BanListRequest&& from) noexcept
    : BanListRequest() {
    *this = ::std::move(from);
  }

  inline BanListRequest& operator=(const BanListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanListRequest& operator=(BanListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BanListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BanListRequest* internal_default_instance() {
    return reinterpret_cast<const BanListRequest*>(
               &_BanListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BanListRequest& a, BanListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BanListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BanListRequest* New() const final {
    return CreateMaybeMessage<BanListRequest>(nullptr);
  }

  BanListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BanListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BanListRequest& from);
  void MergeFrom(const BanListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fastmitigation.BanListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fastnetmon_2eproto);
    return ::descriptor_table_fastnetmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fastmitigation.BanListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fastnetmon_2eproto;
};
// -------------------------------------------------------------------

class BanListReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fastmitigation.BanListReply) */ {
 public:
  BanListReply();
  virtual ~BanListReply();

  BanListReply(const BanListReply& from);
  BanListReply(BanListReply&& from) noexcept
    : BanListReply() {
    *this = ::std::move(from);
  }

  inline BanListReply& operator=(const BanListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BanListReply& operator=(BanListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BanListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BanListReply* internal_default_instance() {
    return reinterpret_cast<const BanListReply*>(
               &_BanListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BanListReply& a, BanListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BanListReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BanListReply* New() const final {
    return CreateMaybeMessage<BanListReply>(nullptr);
  }

  BanListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BanListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BanListReply& from);
  void MergeFrom(const BanListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BanListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fastmitigation.BanListReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fastnetmon_2eproto);
    return ::descriptor_table_fastnetmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
  };
  // string ip_address = 1;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // @@protoc_insertion_point(class_scope:fastmitigation.BanListReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fastnetmon_2eproto;
};
// -------------------------------------------------------------------

class ExecuteBanRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fastmitigation.ExecuteBanRequest) */ {
 public:
  ExecuteBanRequest();
  virtual ~ExecuteBanRequest();

  ExecuteBanRequest(const ExecuteBanRequest& from);
  ExecuteBanRequest(ExecuteBanRequest&& from) noexcept
    : ExecuteBanRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteBanRequest& operator=(const ExecuteBanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteBanRequest& operator=(ExecuteBanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteBanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteBanRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteBanRequest*>(
               &_ExecuteBanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExecuteBanRequest& a, ExecuteBanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteBanRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteBanRequest* New() const final {
    return CreateMaybeMessage<ExecuteBanRequest>(nullptr);
  }

  ExecuteBanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteBanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteBanRequest& from);
  void MergeFrom(const ExecuteBanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteBanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fastmitigation.ExecuteBanRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fastnetmon_2eproto);
    return ::descriptor_table_fastnetmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
  };
  // string ip_address = 1;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // @@protoc_insertion_point(class_scope:fastmitigation.ExecuteBanRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fastnetmon_2eproto;
};
// -------------------------------------------------------------------

class ExecuteBanReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fastmitigation.ExecuteBanReply) */ {
 public:
  ExecuteBanReply();
  virtual ~ExecuteBanReply();

  ExecuteBanReply(const ExecuteBanReply& from);
  ExecuteBanReply(ExecuteBanReply&& from) noexcept
    : ExecuteBanReply() {
    *this = ::std::move(from);
  }

  inline ExecuteBanReply& operator=(const ExecuteBanReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteBanReply& operator=(ExecuteBanReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteBanReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteBanReply* internal_default_instance() {
    return reinterpret_cast<const ExecuteBanReply*>(
               &_ExecuteBanReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecuteBanReply& a, ExecuteBanReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteBanReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteBanReply* New() const final {
    return CreateMaybeMessage<ExecuteBanReply>(nullptr);
  }

  ExecuteBanReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteBanReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteBanReply& from);
  void MergeFrom(const ExecuteBanReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteBanReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fastmitigation.ExecuteBanReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fastnetmon_2eproto);
    return ::descriptor_table_fastnetmon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fastmitigation.ExecuteBanReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fastnetmon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BanListRequest

// -------------------------------------------------------------------

// BanListReply

// string ip_address = 1;
inline void BanListReply::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BanListReply::ip_address() const {
  // @@protoc_insertion_point(field_get:fastmitigation.BanListReply.ip_address)
  return _internal_ip_address();
}
inline void BanListReply::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:fastmitigation.BanListReply.ip_address)
}
inline std::string* BanListReply::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:fastmitigation.BanListReply.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& BanListReply::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void BanListReply::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BanListReply::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fastmitigation.BanListReply.ip_address)
}
inline void BanListReply::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fastmitigation.BanListReply.ip_address)
}
inline void BanListReply::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fastmitigation.BanListReply.ip_address)
}
inline std::string* BanListReply::_internal_mutable_ip_address() {
  
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BanListReply::release_ip_address() {
  // @@protoc_insertion_point(field_release:fastmitigation.BanListReply.ip_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BanListReply::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:fastmitigation.BanListReply.ip_address)
}

// -------------------------------------------------------------------

// ExecuteBanRequest

// string ip_address = 1;
inline void ExecuteBanRequest::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExecuteBanRequest::ip_address() const {
  // @@protoc_insertion_point(field_get:fastmitigation.ExecuteBanRequest.ip_address)
  return _internal_ip_address();
}
inline void ExecuteBanRequest::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:fastmitigation.ExecuteBanRequest.ip_address)
}
inline std::string* ExecuteBanRequest::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:fastmitigation.ExecuteBanRequest.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& ExecuteBanRequest::_internal_ip_address() const {
  return ip_address_.GetNoArena();
}
inline void ExecuteBanRequest::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExecuteBanRequest::set_ip_address(std::string&& value) {
  
  ip_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fastmitigation.ExecuteBanRequest.ip_address)
}
inline void ExecuteBanRequest::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fastmitigation.ExecuteBanRequest.ip_address)
}
inline void ExecuteBanRequest::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fastmitigation.ExecuteBanRequest.ip_address)
}
inline std::string* ExecuteBanRequest::_internal_mutable_ip_address() {
  
  return ip_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExecuteBanRequest::release_ip_address() {
  // @@protoc_insertion_point(field_release:fastmitigation.ExecuteBanRequest.ip_address)
  
  return ip_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteBanRequest::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:fastmitigation.ExecuteBanRequest.ip_address)
}

// -------------------------------------------------------------------

// ExecuteBanReply

// bool result = 1;
inline void ExecuteBanReply::clear_result() {
  result_ = false;
}
inline bool ExecuteBanReply::_internal_result() const {
  return result_;
}
inline bool ExecuteBanReply::result() const {
  // @@protoc_insertion_point(field_get:fastmitigation.ExecuteBanReply.result)
  return _internal_result();
}
inline void ExecuteBanReply::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void ExecuteBanReply::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:fastmitigation.ExecuteBanReply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastmitigation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fastnetmon_2eproto
